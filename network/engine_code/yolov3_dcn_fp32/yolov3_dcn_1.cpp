#include "yolov3_dcn_1.h"
#include "tensorrt/deformable_conv.h"
#include "tensorrt/yolo_box.h"
#include "tensorrt/multiclass_nms.h"
using namespace nvinfer1;
using namespace std;

bool yolov3_dcn_1::build(TRTUniquePtr<IBuilder>& builder,TRTUniquePtr<INetworkDefinition>& network,TRTUniquePtr<IBuilderConfig>& config,
  ITensor** inputs,ITensor** outputs,int batch_size,DLRLogger& dlr_logger)
{
  // Add Layers
  mWeightsMap = load_weigths("/usr/local/quake/datas/weights/yolov3_dcn.wts");
  // passby image(dlr_input), defined by image;
  // passby im_size_float32(dlr_input), defined by im_size_float32;
  auto res_2=network->addConstant(Dims2{3,2},mWeightsMap["const_2"]);
  assert(res_2 && "failed to build yolo_box0_anchor (type:const)");
  res_2->getOutput(0)->setName("yolo_box0_anchor:0");
  auto res_3=network->addConstant(Dims2{3,2},mWeightsMap["const_3"]);
  assert(res_3 && "failed to build yolo_box1_anchor (type:const)");
  res_3->getOutput(0)->setName("yolo_box1_anchor:0");
  auto res_4=network->addConstant(Dims2{3,2},mWeightsMap["const_4"]);
  assert(res_4 && "failed to build yolo_box2_anchor (type:const)");
  res_4->getOutput(0)->setName("yolo_box2_anchor:0");
  auto res_5=network->addConvolution(*inputs[0],32,DimsHW{3,3},mWeightsMap["weight_5"],mWeightsMap["bias_5"]);
  res_5->setStride(DimsHW{2,2});
  res_5->setPadding(DimsHW{1,1});
  assert(res_5 && "failed to build conv1_1 (type:conv2d)");
  res_5->getOutput(0)->setName("conv1_1:0");
  auto res_6=network->addActivation(*res_5->getOutput(0),ActivationType::kRELU);
  assert(res_6 && "failed to build relu_0 (type:relu)");
  res_6->getOutput(0)->setName("relu_0:0");
  auto res_7=network->addConvolution(*res_6->getOutput(0),32,DimsHW{3,3},mWeightsMap["weight_7"],mWeightsMap["bias_7"]);
  res_7->setPadding(DimsHW{1,1});
  assert(res_7 && "failed to build conv1_2 (type:conv2d)");
  res_7->getOutput(0)->setName("conv1_2:0");
  auto res_8=network->addActivation(*res_7->getOutput(0),ActivationType::kRELU);
  assert(res_8 && "failed to build relu_1 (type:relu)");
  res_8->getOutput(0)->setName("relu_1:0");
  auto res_9=network->addConvolution(*res_8->getOutput(0),64,DimsHW{3,3},mWeightsMap["weight_9"],mWeightsMap["bias_9"]);
  res_9->setPadding(DimsHW{1,1});
  assert(res_9 && "failed to build conv1_3 (type:conv2d)");
  res_9->getOutput(0)->setName("conv1_3:0");
  auto res_10=network->addActivation(*res_9->getOutput(0),ActivationType::kRELU);
  assert(res_10 && "failed to build relu_2 (type:relu)");
  res_10->getOutput(0)->setName("relu_2:0");
  auto res_11=network->addPooling(*res_10->getOutput(0),PoolingType::kMAX,DimsHW{3,3});
  res_11->setStride(DimsHW{2,2});
  res_11->setPadding(DimsHW{1,1});
  assert(res_11 && "failed to build pool2d_0 (type:maxpool2d)");
  res_11->getOutput(0)->setName("pool2d_0:0");
  auto res_12=network->addConvolution(*res_11->getOutput(0),64,DimsHW{1,1},mWeightsMap["weight_12"],mWeightsMap["bias_12"]);
  assert(res_12 && "failed to build res2a_branch2a (type:conv2d)");
  res_12->getOutput(0)->setName("res2a_branch2a:0");
  auto res_13=network->addActivation(*res_12->getOutput(0),ActivationType::kRELU);
  assert(res_13 && "failed to build relu_3 (type:relu)");
  res_13->getOutput(0)->setName("relu_3:0");
  auto res_14=network->addConvolution(*res_13->getOutput(0),64,DimsHW{3,3},mWeightsMap["weight_14"],mWeightsMap["bias_14"]);
  res_14->setPadding(DimsHW{1,1});
  assert(res_14 && "failed to build res2a_branch2b (type:conv2d)");
  res_14->getOutput(0)->setName("res2a_branch2b:0");
  auto res_15=network->addActivation(*res_14->getOutput(0),ActivationType::kRELU);
  assert(res_15 && "failed to build relu_4 (type:relu)");
  res_15->getOutput(0)->setName("relu_4:0");
  auto res_16=network->addConvolution(*res_15->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_16"],mWeightsMap["bias_16"]);
  assert(res_16 && "failed to build res2a_branch2c (type:conv2d)");
  res_16->getOutput(0)->setName("res2a_branch2c:0");
  auto res_17=network->addConvolution(*res_11->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_17"],mWeightsMap["bias_17"]);
  assert(res_17 && "failed to build res2a_branch1 (type:conv2d)");
  res_17->getOutput(0)->setName("res2a_branch1:0");
  auto res_18=network->addElementWise(*res_17->getOutput(0),*res_16->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_18 && "failed to build res2a (type:add)");
  res_18->getOutput(0)->setName("res2a:0");
  auto res_19=network->addActivation(*res_18->getOutput(0),ActivationType::kRELU);
  assert(res_19 && "failed to build relu_5 (type:relu)");
  res_19->getOutput(0)->setName("relu_5:0");
  auto res_20=network->addConvolution(*res_19->getOutput(0),64,DimsHW{1,1},mWeightsMap["weight_20"],mWeightsMap["bias_20"]);
  assert(res_20 && "failed to build res2b_branch2a (type:conv2d)");
  res_20->getOutput(0)->setName("res2b_branch2a:0");
  auto res_21=network->addActivation(*res_20->getOutput(0),ActivationType::kRELU);
  assert(res_21 && "failed to build relu_6 (type:relu)");
  res_21->getOutput(0)->setName("relu_6:0");
  auto res_22=network->addConvolution(*res_21->getOutput(0),64,DimsHW{3,3},mWeightsMap["weight_22"],mWeightsMap["bias_22"]);
  res_22->setPadding(DimsHW{1,1});
  assert(res_22 && "failed to build res2b_branch2b (type:conv2d)");
  res_22->getOutput(0)->setName("res2b_branch2b:0");
  auto res_23=network->addActivation(*res_22->getOutput(0),ActivationType::kRELU);
  assert(res_23 && "failed to build relu_7 (type:relu)");
  res_23->getOutput(0)->setName("relu_7:0");
  auto res_24=network->addConvolution(*res_23->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_24"],mWeightsMap["bias_24"]);
  assert(res_24 && "failed to build res2b_branch2c (type:conv2d)");
  res_24->getOutput(0)->setName("res2b_branch2c:0");
  auto res_25=network->addElementWise(*res_19->getOutput(0),*res_24->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_25 && "failed to build res2b (type:add)");
  res_25->getOutput(0)->setName("res2b:0");
  auto res_26=network->addActivation(*res_25->getOutput(0),ActivationType::kRELU);
  assert(res_26 && "failed to build relu_8 (type:relu)");
  res_26->getOutput(0)->setName("relu_8:0");
  auto res_27=network->addConvolution(*res_26->getOutput(0),64,DimsHW{1,1},mWeightsMap["weight_27"],mWeightsMap["bias_27"]);
  assert(res_27 && "failed to build res2c_branch2a (type:conv2d)");
  res_27->getOutput(0)->setName("res2c_branch2a:0");
  auto res_28=network->addActivation(*res_27->getOutput(0),ActivationType::kRELU);
  assert(res_28 && "failed to build relu_9 (type:relu)");
  res_28->getOutput(0)->setName("relu_9:0");
  auto res_29=network->addConvolution(*res_28->getOutput(0),64,DimsHW{3,3},mWeightsMap["weight_29"],mWeightsMap["bias_29"]);
  res_29->setPadding(DimsHW{1,1});
  assert(res_29 && "failed to build res2c_branch2b (type:conv2d)");
  res_29->getOutput(0)->setName("res2c_branch2b:0");
  auto res_30=network->addActivation(*res_29->getOutput(0),ActivationType::kRELU);
  assert(res_30 && "failed to build relu_10 (type:relu)");
  res_30->getOutput(0)->setName("relu_10:0");
  auto res_31=network->addConvolution(*res_30->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_31"],mWeightsMap["bias_31"]);
  assert(res_31 && "failed to build res2c_branch2c (type:conv2d)");
  res_31->getOutput(0)->setName("res2c_branch2c:0");
  auto res_32=network->addElementWise(*res_26->getOutput(0),*res_31->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_32 && "failed to build res2c (type:add)");
  res_32->getOutput(0)->setName("res2c:0");
  auto res_33=network->addActivation(*res_32->getOutput(0),ActivationType::kRELU);
  assert(res_33 && "failed to build relu_11 (type:relu)");
  res_33->getOutput(0)->setName("relu_11:0");
  auto res_34=network->addConvolution(*res_33->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_34"],mWeightsMap["bias_34"]);
  assert(res_34 && "failed to build res3a_branch2a (type:conv2d)");
  res_34->getOutput(0)->setName("res3a_branch2a:0");
  auto res_35=network->addActivation(*res_34->getOutput(0),ActivationType::kRELU);
  assert(res_35 && "failed to build relu_12 (type:relu)");
  res_35->getOutput(0)->setName("relu_12:0");
  auto res_36=network->addConvolution(*res_35->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_36"],mWeightsMap["bias_36"]);
  res_36->setStride(DimsHW{2,2});
  res_36->setPadding(DimsHW{1,1});
  assert(res_36 && "failed to build res3a_branch2b (type:conv2d)");
  res_36->getOutput(0)->setName("res3a_branch2b:0");
  auto res_37=network->addActivation(*res_36->getOutput(0),ActivationType::kRELU);
  assert(res_37 && "failed to build relu_13 (type:relu)");
  res_37->getOutput(0)->setName("relu_13:0");
  auto res_38=network->addConvolution(*res_37->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_38"],mWeightsMap["bias_38"]);
  assert(res_38 && "failed to build res3a_branch2c (type:conv2d)");
  res_38->getOutput(0)->setName("res3a_branch2c:0");
  auto res_39=network->addPooling(*res_33->getOutput(0),PoolingType::kAVERAGE,DimsHW{2,2});
  res_39->setStride(DimsHW{2,2});
  assert(res_39 && "failed to build pool2d_1 (type:avgpool2d)");
  res_39->getOutput(0)->setName("pool2d_1:0");
  auto res_40=network->addConvolution(*res_39->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_40"],mWeightsMap["bias_40"]);
  assert(res_40 && "failed to build res3a_branch1 (type:conv2d)");
  res_40->getOutput(0)->setName("res3a_branch1:0");
  auto res_41=network->addElementWise(*res_40->getOutput(0),*res_38->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_41 && "failed to build res3a (type:add)");
  res_41->getOutput(0)->setName("res3a:0");
  auto res_42=network->addActivation(*res_41->getOutput(0),ActivationType::kRELU);
  assert(res_42 && "failed to build relu_14 (type:relu)");
  res_42->getOutput(0)->setName("relu_14:0");
  auto res_43=network->addConvolution(*res_42->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_43"],mWeightsMap["bias_43"]);
  assert(res_43 && "failed to build res3b_branch2a (type:conv2d)");
  res_43->getOutput(0)->setName("res3b_branch2a:0");
  auto res_44=network->addActivation(*res_43->getOutput(0),ActivationType::kRELU);
  assert(res_44 && "failed to build relu_15 (type:relu)");
  res_44->getOutput(0)->setName("relu_15:0");
  auto res_45=network->addConvolution(*res_44->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_45"],mWeightsMap["bias_45"]);
  res_45->setPadding(DimsHW{1,1});
  assert(res_45 && "failed to build res3b_branch2b (type:conv2d)");
  res_45->getOutput(0)->setName("res3b_branch2b:0");
  auto res_46=network->addActivation(*res_45->getOutput(0),ActivationType::kRELU);
  assert(res_46 && "failed to build relu_16 (type:relu)");
  res_46->getOutput(0)->setName("relu_16:0");
  auto res_47=network->addConvolution(*res_46->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_47"],mWeightsMap["bias_47"]);
  assert(res_47 && "failed to build res3b_branch2c (type:conv2d)");
  res_47->getOutput(0)->setName("res3b_branch2c:0");
  auto res_48=network->addElementWise(*res_42->getOutput(0),*res_47->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_48 && "failed to build res3b (type:add)");
  res_48->getOutput(0)->setName("res3b:0");
  auto res_49=network->addActivation(*res_48->getOutput(0),ActivationType::kRELU);
  assert(res_49 && "failed to build relu_17 (type:relu)");
  res_49->getOutput(0)->setName("relu_17:0");
  auto res_50=network->addConvolution(*res_49->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_50"],mWeightsMap["bias_50"]);
  assert(res_50 && "failed to build res3c_branch2a (type:conv2d)");
  res_50->getOutput(0)->setName("res3c_branch2a:0");
  auto res_51=network->addActivation(*res_50->getOutput(0),ActivationType::kRELU);
  assert(res_51 && "failed to build relu_18 (type:relu)");
  res_51->getOutput(0)->setName("relu_18:0");
  auto res_52=network->addConvolution(*res_51->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_52"],mWeightsMap["bias_52"]);
  res_52->setPadding(DimsHW{1,1});
  assert(res_52 && "failed to build res3c_branch2b (type:conv2d)");
  res_52->getOutput(0)->setName("res3c_branch2b:0");
  auto res_53=network->addActivation(*res_52->getOutput(0),ActivationType::kRELU);
  assert(res_53 && "failed to build relu_19 (type:relu)");
  res_53->getOutput(0)->setName("relu_19:0");
  auto res_54=network->addConvolution(*res_53->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_54"],mWeightsMap["bias_54"]);
  assert(res_54 && "failed to build res3c_branch2c (type:conv2d)");
  res_54->getOutput(0)->setName("res3c_branch2c:0");
  auto res_55=network->addElementWise(*res_49->getOutput(0),*res_54->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_55 && "failed to build res3c (type:add)");
  res_55->getOutput(0)->setName("res3c:0");
  auto res_56=network->addActivation(*res_55->getOutput(0),ActivationType::kRELU);
  assert(res_56 && "failed to build relu_20 (type:relu)");
  res_56->getOutput(0)->setName("relu_20:0");
  auto res_57=network->addConvolution(*res_56->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_57"],mWeightsMap["bias_57"]);
  assert(res_57 && "failed to build res3d_branch2a (type:conv2d)");
  res_57->getOutput(0)->setName("res3d_branch2a:0");
  auto res_58=network->addActivation(*res_57->getOutput(0),ActivationType::kRELU);
  assert(res_58 && "failed to build relu_21 (type:relu)");
  res_58->getOutput(0)->setName("relu_21:0");
  auto res_59=network->addConvolution(*res_58->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_59"],mWeightsMap["bias_59"]);
  res_59->setPadding(DimsHW{1,1});
  assert(res_59 && "failed to build res3d_branch2b (type:conv2d)");
  res_59->getOutput(0)->setName("res3d_branch2b:0");
  auto res_60=network->addActivation(*res_59->getOutput(0),ActivationType::kRELU);
  assert(res_60 && "failed to build relu_22 (type:relu)");
  res_60->getOutput(0)->setName("relu_22:0");
  auto res_61=network->addConvolution(*res_60->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_61"],mWeightsMap["bias_61"]);
  assert(res_61 && "failed to build res3d_branch2c (type:conv2d)");
  res_61->getOutput(0)->setName("res3d_branch2c:0");
  auto res_62=network->addElementWise(*res_56->getOutput(0),*res_61->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_62 && "failed to build res3d (type:add)");
  res_62->getOutput(0)->setName("res3d:0");
  auto res_63=network->addActivation(*res_62->getOutput(0),ActivationType::kRELU);
  assert(res_63 && "failed to build relu_23 (type:relu)");
  res_63->getOutput(0)->setName("relu_23:0");
  auto res_64=network->addConvolution(*res_63->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_64"],mWeightsMap["bias_64"]);
  assert(res_64 && "failed to build res4a_branch2a (type:conv2d)");
  res_64->getOutput(0)->setName("res4a_branch2a:0");
  auto res_65=network->addActivation(*res_64->getOutput(0),ActivationType::kRELU);
  assert(res_65 && "failed to build relu_24 (type:relu)");
  res_65->getOutput(0)->setName("relu_24:0");
  auto res_66=network->addConvolution(*res_65->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_66"],mWeightsMap["bias_66"]);
  res_66->setStride(DimsHW{2,2});
  res_66->setPadding(DimsHW{1,1});
  assert(res_66 && "failed to build res4a_branch2b (type:conv2d)");
  res_66->getOutput(0)->setName("res4a_branch2b:0");
  auto res_67=network->addActivation(*res_66->getOutput(0),ActivationType::kRELU);
  assert(res_67 && "failed to build relu_25 (type:relu)");
  res_67->getOutput(0)->setName("relu_25:0");
  auto res_68=network->addConvolution(*res_67->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_68"],mWeightsMap["bias_68"]);
  assert(res_68 && "failed to build res4a_branch2c (type:conv2d)");
  res_68->getOutput(0)->setName("res4a_branch2c:0");
  auto res_69=network->addPooling(*res_63->getOutput(0),PoolingType::kAVERAGE,DimsHW{2,2});
  res_69->setStride(DimsHW{2,2});
  assert(res_69 && "failed to build pool2d_2 (type:avgpool2d)");
  res_69->getOutput(0)->setName("pool2d_2:0");
  auto res_70=network->addConvolution(*res_69->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_70"],mWeightsMap["bias_70"]);
  assert(res_70 && "failed to build res4a_branch1 (type:conv2d)");
  res_70->getOutput(0)->setName("res4a_branch1:0");
  auto res_71=network->addElementWise(*res_70->getOutput(0),*res_68->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_71 && "failed to build res4a (type:add)");
  res_71->getOutput(0)->setName("res4a:0");
  auto res_72=network->addActivation(*res_71->getOutput(0),ActivationType::kRELU);
  assert(res_72 && "failed to build relu_26 (type:relu)");
  res_72->getOutput(0)->setName("relu_26:0");
  auto res_73=network->addConvolution(*res_72->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_73"],mWeightsMap["bias_73"]);
  assert(res_73 && "failed to build res4b_branch2a (type:conv2d)");
  res_73->getOutput(0)->setName("res4b_branch2a:0");
  auto res_74=network->addActivation(*res_73->getOutput(0),ActivationType::kRELU);
  assert(res_74 && "failed to build relu_27 (type:relu)");
  res_74->getOutput(0)->setName("relu_27:0");
  auto res_75=network->addConvolution(*res_74->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_75"],mWeightsMap["bias_75"]);
  res_75->setPadding(DimsHW{1,1});
  assert(res_75 && "failed to build res4b_branch2b (type:conv2d)");
  res_75->getOutput(0)->setName("res4b_branch2b:0");
  auto res_76=network->addActivation(*res_75->getOutput(0),ActivationType::kRELU);
  assert(res_76 && "failed to build relu_28 (type:relu)");
  res_76->getOutput(0)->setName("relu_28:0");
  auto res_77=network->addConvolution(*res_76->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_77"],mWeightsMap["bias_77"]);
  assert(res_77 && "failed to build res4b_branch2c (type:conv2d)");
  res_77->getOutput(0)->setName("res4b_branch2c:0");
  auto res_78=network->addElementWise(*res_72->getOutput(0),*res_77->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_78 && "failed to build res4b (type:add)");
  res_78->getOutput(0)->setName("res4b:0");
  auto res_79=network->addActivation(*res_78->getOutput(0),ActivationType::kRELU);
  assert(res_79 && "failed to build relu_29 (type:relu)");
  res_79->getOutput(0)->setName("relu_29:0");
  auto res_80=network->addConvolution(*res_79->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_80"],mWeightsMap["bias_80"]);
  assert(res_80 && "failed to build res4c_branch2a (type:conv2d)");
  res_80->getOutput(0)->setName("res4c_branch2a:0");
  auto res_81=network->addActivation(*res_80->getOutput(0),ActivationType::kRELU);
  assert(res_81 && "failed to build relu_30 (type:relu)");
  res_81->getOutput(0)->setName("relu_30:0");
  auto res_82=network->addConvolution(*res_81->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_82"],mWeightsMap["bias_82"]);
  res_82->setPadding(DimsHW{1,1});
  assert(res_82 && "failed to build res4c_branch2b (type:conv2d)");
  res_82->getOutput(0)->setName("res4c_branch2b:0");
  auto res_83=network->addActivation(*res_82->getOutput(0),ActivationType::kRELU);
  assert(res_83 && "failed to build relu_31 (type:relu)");
  res_83->getOutput(0)->setName("relu_31:0");
  auto res_84=network->addConvolution(*res_83->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_84"],mWeightsMap["bias_84"]);
  assert(res_84 && "failed to build res4c_branch2c (type:conv2d)");
  res_84->getOutput(0)->setName("res4c_branch2c:0");
  auto res_85=network->addElementWise(*res_79->getOutput(0),*res_84->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_85 && "failed to build res4c (type:add)");
  res_85->getOutput(0)->setName("res4c:0");
  auto res_86=network->addActivation(*res_85->getOutput(0),ActivationType::kRELU);
  assert(res_86 && "failed to build relu_32 (type:relu)");
  res_86->getOutput(0)->setName("relu_32:0");
  auto res_87=network->addConvolution(*res_86->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_87"],mWeightsMap["bias_87"]);
  assert(res_87 && "failed to build res4d_branch2a (type:conv2d)");
  res_87->getOutput(0)->setName("res4d_branch2a:0");
  auto res_88=network->addActivation(*res_87->getOutput(0),ActivationType::kRELU);
  assert(res_88 && "failed to build relu_33 (type:relu)");
  res_88->getOutput(0)->setName("relu_33:0");
  auto res_89=network->addConvolution(*res_88->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_89"],mWeightsMap["bias_89"]);
  res_89->setPadding(DimsHW{1,1});
  assert(res_89 && "failed to build res4d_branch2b (type:conv2d)");
  res_89->getOutput(0)->setName("res4d_branch2b:0");
  auto res_90=network->addActivation(*res_89->getOutput(0),ActivationType::kRELU);
  assert(res_90 && "failed to build relu_34 (type:relu)");
  res_90->getOutput(0)->setName("relu_34:0");
  auto res_91=network->addConvolution(*res_90->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_91"],mWeightsMap["bias_91"]);
  assert(res_91 && "failed to build res4d_branch2c (type:conv2d)");
  res_91->getOutput(0)->setName("res4d_branch2c:0");
  auto res_92=network->addElementWise(*res_86->getOutput(0),*res_91->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_92 && "failed to build res4d (type:add)");
  res_92->getOutput(0)->setName("res4d:0");
  auto res_93=network->addActivation(*res_92->getOutput(0),ActivationType::kRELU);
  assert(res_93 && "failed to build relu_35 (type:relu)");
  res_93->getOutput(0)->setName("relu_35:0");
  auto res_94=network->addConvolution(*res_93->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_94"],mWeightsMap["bias_94"]);
  assert(res_94 && "failed to build res4e_branch2a (type:conv2d)");
  res_94->getOutput(0)->setName("res4e_branch2a:0");
  auto res_95=network->addActivation(*res_94->getOutput(0),ActivationType::kRELU);
  assert(res_95 && "failed to build relu_36 (type:relu)");
  res_95->getOutput(0)->setName("relu_36:0");
  auto res_96=network->addConvolution(*res_95->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_96"],mWeightsMap["bias_96"]);
  res_96->setPadding(DimsHW{1,1});
  assert(res_96 && "failed to build res4e_branch2b (type:conv2d)");
  res_96->getOutput(0)->setName("res4e_branch2b:0");
  auto res_97=network->addActivation(*res_96->getOutput(0),ActivationType::kRELU);
  assert(res_97 && "failed to build relu_37 (type:relu)");
  res_97->getOutput(0)->setName("relu_37:0");
  auto res_98=network->addConvolution(*res_97->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_98"],mWeightsMap["bias_98"]);
  assert(res_98 && "failed to build res4e_branch2c (type:conv2d)");
  res_98->getOutput(0)->setName("res4e_branch2c:0");
  auto res_99=network->addElementWise(*res_93->getOutput(0),*res_98->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_99 && "failed to build res4e (type:add)");
  res_99->getOutput(0)->setName("res4e:0");
  auto res_100=network->addActivation(*res_99->getOutput(0),ActivationType::kRELU);
  assert(res_100 && "failed to build relu_38 (type:relu)");
  res_100->getOutput(0)->setName("relu_38:0");
  auto res_101=network->addConvolution(*res_100->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_101"],mWeightsMap["bias_101"]);
  assert(res_101 && "failed to build res4f_branch2a (type:conv2d)");
  res_101->getOutput(0)->setName("res4f_branch2a:0");
  auto res_102=network->addActivation(*res_101->getOutput(0),ActivationType::kRELU);
  assert(res_102 && "failed to build relu_39 (type:relu)");
  res_102->getOutput(0)->setName("relu_39:0");
  auto res_103=network->addConvolution(*res_102->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_103"],mWeightsMap["bias_103"]);
  res_103->setPadding(DimsHW{1,1});
  assert(res_103 && "failed to build res4f_branch2b (type:conv2d)");
  res_103->getOutput(0)->setName("res4f_branch2b:0");
  auto res_104=network->addActivation(*res_103->getOutput(0),ActivationType::kRELU);
  assert(res_104 && "failed to build relu_40 (type:relu)");
  res_104->getOutput(0)->setName("relu_40:0");
  auto res_105=network->addConvolution(*res_104->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_105"],mWeightsMap["bias_105"]);
  assert(res_105 && "failed to build res4f_branch2c (type:conv2d)");
  res_105->getOutput(0)->setName("res4f_branch2c:0");
  auto res_106=network->addElementWise(*res_100->getOutput(0),*res_105->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_106 && "failed to build res4f (type:add)");
  res_106->getOutput(0)->setName("res4f:0");
  auto res_107=network->addActivation(*res_106->getOutput(0),ActivationType::kRELU);
  assert(res_107 && "failed to build relu_41 (type:relu)");
  res_107->getOutput(0)->setName("relu_41:0");
  auto res_108=network->addConvolution(*res_107->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_108"],mWeightsMap["bias_108"]);
  assert(res_108 && "failed to build res5a_branch2a (type:conv2d)");
  res_108->getOutput(0)->setName("res5a_branch2a:0");
  auto res_109=network->addActivation(*res_108->getOutput(0),ActivationType::kRELU);
  assert(res_109 && "failed to build relu_42 (type:relu)");
  res_109->getOutput(0)->setName("relu_42:0");
  auto res_110=network->addConvolution(*res_109->getOutput(0),27,DimsHW{3,3},mWeightsMap["weight_110"],mWeightsMap["bias_110"]);
  res_110->setStride(DimsHW{2,2});
  res_110->setPadding(DimsHW{1,1});
  assert(res_110 && "failed to build res5a_branch2b_conv_offset (type:conv2d)");
  res_110->getOutput(0)->setName("res5a_branch2b_conv_offset:0");
  auto res_111_0=network->addSlice(*res_110->getOutput(0),Dims3{0,0,0},Dims3{18,19,19},Dims3{1,1,1});
  auto res_111_1=network->addSlice(*res_110->getOutput(0),Dims3{18,0,0},Dims3{9,19,19},Dims3{1,1,1});
  assert(res_111_0 && res_111_1 && "failed to build split_0 (type:split)");
  res_111_0->getOutput(0)->setName("split_0:0");
  res_111_1->getOutput(0)->setName("split_0:1");
  auto res_112=network->addActivation(*res_111_1->getOutput(0),ActivationType::kSIGMOID);
  assert(res_112 && "failed to build sigmoid_0 (type:sigmoid)");
  res_112->getOutput(0)->setName("sigmoid_0:0");
  ITensor* inputTensors_113[3] = {res_109->getOutput(0),res_111_0->getOutput(0),res_112->getOutput(0)};
  auto plugin_113=DEFORMABLE_CONV_DMC_Plugin("deformable_conv_dmc",3,3,2,2,1,1,1,1);
  auto res_113_dmc=network->addPluginV2(inputTensors_113,3,plugin_113);
  auto res_113=network->addConvolution(*res_113_dmc->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_113"],mWeightsMap["bias_113"]);
  assert(res_113 && "failed to build res5a_branch2b (type:deformable_conv)");
  res_113->getOutput(0)->setName("res5a_branch2b:0");
  auto res_114=network->addActivation(*res_113->getOutput(0),ActivationType::kRELU);
  assert(res_114 && "failed to build relu_43 (type:relu)");
  res_114->getOutput(0)->setName("relu_43:0");
  auto res_115=network->addConvolution(*res_114->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_115"],mWeightsMap["bias_115"]);
  assert(res_115 && "failed to build res5a_branch2c (type:conv2d)");
  res_115->getOutput(0)->setName("res5a_branch2c:0");
  auto res_116=network->addPooling(*res_107->getOutput(0),PoolingType::kAVERAGE,DimsHW{2,2});
  res_116->setStride(DimsHW{2,2});
  assert(res_116 && "failed to build pool2d_3 (type:avgpool2d)");
  res_116->getOutput(0)->setName("pool2d_3:0");
  auto res_117=network->addConvolution(*res_116->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_117"],mWeightsMap["bias_117"]);
  assert(res_117 && "failed to build res5a_branch1 (type:conv2d)");
  res_117->getOutput(0)->setName("res5a_branch1:0");
  auto res_118=network->addElementWise(*res_117->getOutput(0),*res_115->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_118 && "failed to build res5a (type:add)");
  res_118->getOutput(0)->setName("res5a:0");
  auto res_119=network->addActivation(*res_118->getOutput(0),ActivationType::kRELU);
  assert(res_119 && "failed to build relu_44 (type:relu)");
  res_119->getOutput(0)->setName("relu_44:0");
  auto res_120=network->addConvolution(*res_119->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_120"],mWeightsMap["bias_120"]);
  assert(res_120 && "failed to build res5b_branch2a (type:conv2d)");
  res_120->getOutput(0)->setName("res5b_branch2a:0");
  auto res_121=network->addActivation(*res_120->getOutput(0),ActivationType::kRELU);
  assert(res_121 && "failed to build relu_45 (type:relu)");
  res_121->getOutput(0)->setName("relu_45:0");
  auto res_122=network->addConvolution(*res_121->getOutput(0),27,DimsHW{3,3},mWeightsMap["weight_122"],mWeightsMap["bias_122"]);
  res_122->setPadding(DimsHW{1,1});
  assert(res_122 && "failed to build res5b_branch2b_conv_offset (type:conv2d)");
  res_122->getOutput(0)->setName("res5b_branch2b_conv_offset:0");
  auto res_123_0=network->addSlice(*res_122->getOutput(0),Dims3{0,0,0},Dims3{18,19,19},Dims3{1,1,1});
  auto res_123_1=network->addSlice(*res_122->getOutput(0),Dims3{18,0,0},Dims3{9,19,19},Dims3{1,1,1});
  assert(res_123_0 && res_123_1 && "failed to build split_1 (type:split)");
  res_123_0->getOutput(0)->setName("split_1:0");
  res_123_1->getOutput(0)->setName("split_1:1");
  auto res_124=network->addActivation(*res_123_1->getOutput(0),ActivationType::kSIGMOID);
  assert(res_124 && "failed to build sigmoid_1 (type:sigmoid)");
  res_124->getOutput(0)->setName("sigmoid_1:0");
  ITensor* inputTensors_125[3] = {res_121->getOutput(0),res_123_0->getOutput(0),res_124->getOutput(0)};
  auto plugin_125=DEFORMABLE_CONV_DMC_Plugin("deformable_conv_dmc",3,3,1,1,1,1,1,1);
  auto res_125_dmc=network->addPluginV2(inputTensors_125,3,plugin_125);
  auto res_125=network->addConvolution(*res_125_dmc->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_125"],mWeightsMap["bias_125"]);
  assert(res_125 && "failed to build res5b_branch2b (type:deformable_conv)");
  res_125->getOutput(0)->setName("res5b_branch2b:0");
  auto res_126=network->addActivation(*res_125->getOutput(0),ActivationType::kRELU);
  assert(res_126 && "failed to build relu_46 (type:relu)");
  res_126->getOutput(0)->setName("relu_46:0");
  auto res_127=network->addConvolution(*res_126->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_127"],mWeightsMap["bias_127"]);
  assert(res_127 && "failed to build res5b_branch2c (type:conv2d)");
  res_127->getOutput(0)->setName("res5b_branch2c:0");
  auto res_128=network->addElementWise(*res_119->getOutput(0),*res_127->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_128 && "failed to build res5b (type:add)");
  res_128->getOutput(0)->setName("res5b:0");
  auto res_129=network->addActivation(*res_128->getOutput(0),ActivationType::kRELU);
  assert(res_129 && "failed to build relu_47 (type:relu)");
  res_129->getOutput(0)->setName("relu_47:0");
  auto res_130=network->addConvolution(*res_129->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_130"],mWeightsMap["bias_130"]);
  assert(res_130 && "failed to build res5c_branch2a (type:conv2d)");
  res_130->getOutput(0)->setName("res5c_branch2a:0");
  auto res_131=network->addActivation(*res_130->getOutput(0),ActivationType::kRELU);
  assert(res_131 && "failed to build relu_48 (type:relu)");
  res_131->getOutput(0)->setName("relu_48:0");
  auto res_132=network->addConvolution(*res_131->getOutput(0),27,DimsHW{3,3},mWeightsMap["weight_132"],mWeightsMap["bias_132"]);
  res_132->setPadding(DimsHW{1,1});
  assert(res_132 && "failed to build res5c_branch2b_conv_offset (type:conv2d)");
  res_132->getOutput(0)->setName("res5c_branch2b_conv_offset:0");
  auto res_133_0=network->addSlice(*res_132->getOutput(0),Dims3{0,0,0},Dims3{18,19,19},Dims3{1,1,1});
  auto res_133_1=network->addSlice(*res_132->getOutput(0),Dims3{18,0,0},Dims3{9,19,19},Dims3{1,1,1});
  assert(res_133_0 && res_133_1 && "failed to build split_2 (type:split)");
  res_133_0->getOutput(0)->setName("split_2:0");
  res_133_1->getOutput(0)->setName("split_2:1");
  auto res_134=network->addActivation(*res_133_1->getOutput(0),ActivationType::kSIGMOID);
  assert(res_134 && "failed to build sigmoid_2 (type:sigmoid)");
  res_134->getOutput(0)->setName("sigmoid_2:0");
  ITensor* inputTensors_135[3] = {res_131->getOutput(0),res_133_0->getOutput(0),res_134->getOutput(0)};
  auto plugin_135=DEFORMABLE_CONV_DMC_Plugin("deformable_conv_dmc",3,3,1,1,1,1,1,1);
  auto res_135_dmc=network->addPluginV2(inputTensors_135,3,plugin_135);
  auto res_135=network->addConvolution(*res_135_dmc->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_135"],mWeightsMap["bias_135"]);
  assert(res_135 && "failed to build res5c_branch2b (type:deformable_conv)");
  res_135->getOutput(0)->setName("res5c_branch2b:0");
  auto res_136=network->addActivation(*res_135->getOutput(0),ActivationType::kRELU);
  assert(res_136 && "failed to build relu_49 (type:relu)");
  res_136->getOutput(0)->setName("relu_49:0");
  auto res_137=network->addConvolution(*res_136->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_137"],mWeightsMap["bias_137"]);
  assert(res_137 && "failed to build res5c_branch2c (type:conv2d)");
  res_137->getOutput(0)->setName("res5c_branch2c:0");
  auto res_138=network->addElementWise(*res_129->getOutput(0),*res_137->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_138 && "failed to build res5c (type:add)");
  res_138->getOutput(0)->setName("res5c:0");
  auto res_139=network->addActivation(*res_138->getOutput(0),ActivationType::kRELU);
  assert(res_139 && "failed to build relu_50 (type:relu)");
  res_139->getOutput(0)->setName("relu_50:0");
  auto res_140=network->addConvolution(*res_139->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_140"],mWeightsMap["bias_140"]);
  assert(res_140 && "failed to build conv2d_0 (type:conv2d)");
  res_140->getOutput(0)->setName("conv2d_0:0");
  auto res_141=network->addActivation(*res_140->getOutput(0),ActivationType::kLEAKY_RELU);
  res_141->setAlpha(0.10000000149011612);
  assert(res_141 && "failed to build leaky_relu_0 (type:leaky_relu)");
  res_141->getOutput(0)->setName("leaky_relu_0:0");
  auto res_142=network->addConvolution(*res_141->getOutput(0),1024,DimsHW{3,3},mWeightsMap["weight_142"],mWeightsMap["bias_142"]);
  res_142->setPadding(DimsHW{1,1});
  assert(res_142 && "failed to build conv2d_1 (type:conv2d)");
  res_142->getOutput(0)->setName("conv2d_1:0");
  auto res_143=network->addActivation(*res_142->getOutput(0),ActivationType::kLEAKY_RELU);
  res_143->setAlpha(0.10000000149011612);
  assert(res_143 && "failed to build leaky_relu_1 (type:leaky_relu)");
  res_143->getOutput(0)->setName("leaky_relu_1:0");
  auto res_144=network->addConvolution(*res_143->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_144"],mWeightsMap["bias_144"]);
  assert(res_144 && "failed to build conv2d_2 (type:conv2d)");
  res_144->getOutput(0)->setName("conv2d_2:0");
  auto res_145=network->addActivation(*res_144->getOutput(0),ActivationType::kLEAKY_RELU);
  res_145->setAlpha(0.10000000149011612);
  assert(res_145 && "failed to build leaky_relu_2 (type:leaky_relu)");
  res_145->getOutput(0)->setName("leaky_relu_2:0");
  auto res_146=network->addConvolution(*res_145->getOutput(0),1024,DimsHW{3,3},mWeightsMap["weight_146"],mWeightsMap["bias_146"]);
  res_146->setPadding(DimsHW{1,1});
  assert(res_146 && "failed to build conv2d_3 (type:conv2d)");
  res_146->getOutput(0)->setName("conv2d_3:0");
  auto res_147=network->addActivation(*res_146->getOutput(0),ActivationType::kLEAKY_RELU);
  res_147->setAlpha(0.10000000149011612);
  assert(res_147 && "failed to build leaky_relu_3 (type:leaky_relu)");
  res_147->getOutput(0)->setName("leaky_relu_3:0");
  auto res_148=network->addConvolution(*res_147->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_148"],mWeightsMap["bias_148"]);
  assert(res_148 && "failed to build conv2d_4 (type:conv2d)");
  res_148->getOutput(0)->setName("conv2d_4:0");
  auto res_149=network->addActivation(*res_148->getOutput(0),ActivationType::kLEAKY_RELU);
  res_149->setAlpha(0.10000000149011612);
  assert(res_149 && "failed to build leaky_relu_4 (type:leaky_relu)");
  res_149->getOutput(0)->setName("leaky_relu_4:0");
  auto res_150=network->addConvolution(*res_149->getOutput(0),1024,DimsHW{3,3},mWeightsMap["weight_150"],mWeightsMap["bias_150"]);
  res_150->setPadding(DimsHW{1,1});
  assert(res_150 && "failed to build conv2d_5 (type:conv2d)");
  res_150->getOutput(0)->setName("conv2d_5:0");
  auto res_151=network->addActivation(*res_150->getOutput(0),ActivationType::kLEAKY_RELU);
  res_151->setAlpha(0.10000000149011612);
  assert(res_151 && "failed to build leaky_relu_5 (type:leaky_relu)");
  res_151->getOutput(0)->setName("leaky_relu_5:0");
  auto res_152=network->addConvolution(*res_151->getOutput(0),255,DimsHW{1,1},mWeightsMap["weight_152"],mWeightsMap["bias_152"]);
  assert(res_152 && "failed to build conv2d_6 (type:conv2d)");
  res_152->getOutput(0)->setName("conv2d_6:0");
  ITensor* inputTensors_153[3] = {res_152->getOutput(0),inputs[1],res_2->getOutput(0)};
  auto plugin_153=YOLO_BOX_Plugin("yolo_box",80,0.009999999776482582,1.0,true);
  auto res_153=network->addPluginV2(inputTensors_153,3,plugin_153);
  assert(res_153 && "failed to build yolo_box0 (type:yolo_box)");
  res_153->getOutput(0)->setName("yolo_box0:0");
  res_153->getOutput(1)->setName("yolo_box0:1");
  auto res_154=network->addConvolution(*res_149->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_154"],mWeightsMap["bias_154"]);
  assert(res_154 && "failed to build conv2d_7 (type:conv2d)");
  res_154->getOutput(0)->setName("conv2d_7:0");
  auto res_155=network->addActivation(*res_154->getOutput(0),ActivationType::kLEAKY_RELU);
  res_155->setAlpha(0.10000000149011612);
  assert(res_155 && "failed to build leaky_relu_6 (type:leaky_relu)");
  res_155->getOutput(0)->setName("leaky_relu_6:0");
  auto res_156=network->addResize(*res_155->getOutput(0));
  res_156->setResizeMode(ResizeMode::kNEAREST);
  res_156->setOutputDimensions(Dims3{256,38,38});
  assert(res_156 && "failed to build nearest_interp_0 (type:upsample)");
  res_156->getOutput(0)->setName("nearest_interp_0:0");
  ITensor* inputTensors_157[2] = {res_156->getOutput(0),res_107->getOutput(0)};
  auto res_157=network->addConcatenation(inputTensors_157,2);
  res_157->setAxis(0);
  assert(res_157 && "failed to build concat_0 (type:concat)");
  res_157->getOutput(0)->setName("concat_0:0");
  auto res_158=network->addConvolution(*res_157->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_158"],mWeightsMap["bias_158"]);
  assert(res_158 && "failed to build conv2d_8 (type:conv2d)");
  res_158->getOutput(0)->setName("conv2d_8:0");
  auto res_159=network->addActivation(*res_158->getOutput(0),ActivationType::kLEAKY_RELU);
  res_159->setAlpha(0.10000000149011612);
  assert(res_159 && "failed to build leaky_relu_7 (type:leaky_relu)");
  res_159->getOutput(0)->setName("leaky_relu_7:0");
  auto res_160=network->addConvolution(*res_159->getOutput(0),512,DimsHW{3,3},mWeightsMap["weight_160"],mWeightsMap["bias_160"]);
  res_160->setPadding(DimsHW{1,1});
  assert(res_160 && "failed to build conv2d_9 (type:conv2d)");
  res_160->getOutput(0)->setName("conv2d_9:0");
  auto res_161=network->addActivation(*res_160->getOutput(0),ActivationType::kLEAKY_RELU);
  res_161->setAlpha(0.10000000149011612);
  assert(res_161 && "failed to build leaky_relu_8 (type:leaky_relu)");
  res_161->getOutput(0)->setName("leaky_relu_8:0");
  auto res_162=network->addConvolution(*res_161->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_162"],mWeightsMap["bias_162"]);
  assert(res_162 && "failed to build conv2d_10 (type:conv2d)");
  res_162->getOutput(0)->setName("conv2d_10:0");
  auto res_163=network->addActivation(*res_162->getOutput(0),ActivationType::kLEAKY_RELU);
  res_163->setAlpha(0.10000000149011612);
  assert(res_163 && "failed to build leaky_relu_9 (type:leaky_relu)");
  res_163->getOutput(0)->setName("leaky_relu_9:0");
  auto res_164=network->addConvolution(*res_163->getOutput(0),512,DimsHW{3,3},mWeightsMap["weight_164"],mWeightsMap["bias_164"]);
  res_164->setPadding(DimsHW{1,1});
  assert(res_164 && "failed to build conv2d_11 (type:conv2d)");
  res_164->getOutput(0)->setName("conv2d_11:0");
  auto res_165=network->addActivation(*res_164->getOutput(0),ActivationType::kLEAKY_RELU);
  res_165->setAlpha(0.10000000149011612);
  assert(res_165 && "failed to build leaky_relu_10 (type:leaky_relu)");
  res_165->getOutput(0)->setName("leaky_relu_10:0");
  auto res_166=network->addConvolution(*res_165->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_166"],mWeightsMap["bias_166"]);
  assert(res_166 && "failed to build conv2d_12 (type:conv2d)");
  res_166->getOutput(0)->setName("conv2d_12:0");
  auto res_167=network->addActivation(*res_166->getOutput(0),ActivationType::kLEAKY_RELU);
  res_167->setAlpha(0.10000000149011612);
  assert(res_167 && "failed to build leaky_relu_11 (type:leaky_relu)");
  res_167->getOutput(0)->setName("leaky_relu_11:0");
  auto res_168=network->addConvolution(*res_167->getOutput(0),512,DimsHW{3,3},mWeightsMap["weight_168"],mWeightsMap["bias_168"]);
  res_168->setPadding(DimsHW{1,1});
  assert(res_168 && "failed to build conv2d_13 (type:conv2d)");
  res_168->getOutput(0)->setName("conv2d_13:0");
  auto res_169=network->addActivation(*res_168->getOutput(0),ActivationType::kLEAKY_RELU);
  res_169->setAlpha(0.10000000149011612);
  assert(res_169 && "failed to build leaky_relu_12 (type:leaky_relu)");
  res_169->getOutput(0)->setName("leaky_relu_12:0");
  auto res_170=network->addConvolution(*res_169->getOutput(0),255,DimsHW{1,1},mWeightsMap["weight_170"],mWeightsMap["bias_170"]);
  assert(res_170 && "failed to build conv2d_14 (type:conv2d)");
  res_170->getOutput(0)->setName("conv2d_14:0");
  ITensor* inputTensors_171[3] = {res_170->getOutput(0),inputs[1],res_3->getOutput(0)};
  auto plugin_171=YOLO_BOX_Plugin("yolo_box",80,0.009999999776482582,1.0,true);
  auto res_171=network->addPluginV2(inputTensors_171,3,plugin_171);
  assert(res_171 && "failed to build yolo_box1 (type:yolo_box)");
  res_171->getOutput(0)->setName("yolo_box1:0");
  res_171->getOutput(1)->setName("yolo_box1:1");
  auto res_172=network->addConvolution(*res_167->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_172"],mWeightsMap["bias_172"]);
  assert(res_172 && "failed to build conv2d_15 (type:conv2d)");
  res_172->getOutput(0)->setName("conv2d_15:0");
  auto res_173=network->addActivation(*res_172->getOutput(0),ActivationType::kLEAKY_RELU);
  res_173->setAlpha(0.10000000149011612);
  assert(res_173 && "failed to build leaky_relu_13 (type:leaky_relu)");
  res_173->getOutput(0)->setName("leaky_relu_13:0");
  auto res_174=network->addResize(*res_173->getOutput(0));
  res_174->setResizeMode(ResizeMode::kNEAREST);
  res_174->setOutputDimensions(Dims3{128,76,76});
  assert(res_174 && "failed to build nearest_interp_1 (type:upsample)");
  res_174->getOutput(0)->setName("nearest_interp_1:0");
  ITensor* inputTensors_175[2] = {res_174->getOutput(0),res_63->getOutput(0)};
  auto res_175=network->addConcatenation(inputTensors_175,2);
  res_175->setAxis(0);
  assert(res_175 && "failed to build concat_1 (type:concat)");
  res_175->getOutput(0)->setName("concat_1:0");
  auto res_176=network->addConvolution(*res_175->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_176"],mWeightsMap["bias_176"]);
  assert(res_176 && "failed to build conv2d_16 (type:conv2d)");
  res_176->getOutput(0)->setName("conv2d_16:0");
  auto res_177=network->addActivation(*res_176->getOutput(0),ActivationType::kLEAKY_RELU);
  res_177->setAlpha(0.10000000149011612);
  assert(res_177 && "failed to build leaky_relu_14 (type:leaky_relu)");
  res_177->getOutput(0)->setName("leaky_relu_14:0");
  auto res_178=network->addConvolution(*res_177->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_178"],mWeightsMap["bias_178"]);
  res_178->setPadding(DimsHW{1,1});
  assert(res_178 && "failed to build conv2d_17 (type:conv2d)");
  res_178->getOutput(0)->setName("conv2d_17:0");
  auto res_179=network->addActivation(*res_178->getOutput(0),ActivationType::kLEAKY_RELU);
  res_179->setAlpha(0.10000000149011612);
  assert(res_179 && "failed to build leaky_relu_15 (type:leaky_relu)");
  res_179->getOutput(0)->setName("leaky_relu_15:0");
  auto res_180=network->addConvolution(*res_179->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_180"],mWeightsMap["bias_180"]);
  assert(res_180 && "failed to build conv2d_18 (type:conv2d)");
  res_180->getOutput(0)->setName("conv2d_18:0");
  auto res_181=network->addActivation(*res_180->getOutput(0),ActivationType::kLEAKY_RELU);
  res_181->setAlpha(0.10000000149011612);
  assert(res_181 && "failed to build leaky_relu_16 (type:leaky_relu)");
  res_181->getOutput(0)->setName("leaky_relu_16:0");
  auto res_182=network->addConvolution(*res_181->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_182"],mWeightsMap["bias_182"]);
  res_182->setPadding(DimsHW{1,1});
  assert(res_182 && "failed to build conv2d_19 (type:conv2d)");
  res_182->getOutput(0)->setName("conv2d_19:0");
  auto res_183=network->addActivation(*res_182->getOutput(0),ActivationType::kLEAKY_RELU);
  res_183->setAlpha(0.10000000149011612);
  assert(res_183 && "failed to build leaky_relu_17 (type:leaky_relu)");
  res_183->getOutput(0)->setName("leaky_relu_17:0");
  auto res_184=network->addConvolution(*res_183->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_184"],mWeightsMap["bias_184"]);
  assert(res_184 && "failed to build conv2d_20 (type:conv2d)");
  res_184->getOutput(0)->setName("conv2d_20:0");
  auto res_185=network->addActivation(*res_184->getOutput(0),ActivationType::kLEAKY_RELU);
  res_185->setAlpha(0.10000000149011612);
  assert(res_185 && "failed to build leaky_relu_18 (type:leaky_relu)");
  res_185->getOutput(0)->setName("leaky_relu_18:0");
  auto res_186=network->addConvolution(*res_185->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_186"],mWeightsMap["bias_186"]);
  res_186->setPadding(DimsHW{1,1});
  assert(res_186 && "failed to build conv2d_21 (type:conv2d)");
  res_186->getOutput(0)->setName("conv2d_21:0");
  auto res_187=network->addActivation(*res_186->getOutput(0),ActivationType::kLEAKY_RELU);
  res_187->setAlpha(0.10000000149011612);
  assert(res_187 && "failed to build leaky_relu_19 (type:leaky_relu)");
  res_187->getOutput(0)->setName("leaky_relu_19:0");
  auto res_188=network->addConvolution(*res_187->getOutput(0),255,DimsHW{1,1},mWeightsMap["weight_188"],mWeightsMap["bias_188"]);
  assert(res_188 && "failed to build conv2d_22 (type:conv2d)");
  res_188->getOutput(0)->setName("conv2d_22:0");
  ITensor* inputTensors_189[3] = {res_188->getOutput(0),inputs[1],res_4->getOutput(0)};
  auto plugin_189=YOLO_BOX_Plugin("yolo_box",80,0.009999999776482582,1.0,true);
  auto res_189=network->addPluginV2(inputTensors_189,3,plugin_189);
  assert(res_189 && "failed to build yolo_box2 (type:yolo_box)");
  res_189->getOutput(0)->setName("yolo_box2:0");
  res_189->getOutput(1)->setName("yolo_box2:1");
  ITensor* inputTensors_190[3] = {res_153->getOutput(0),res_171->getOutput(0),res_189->getOutput(0)};
  auto res_190=network->addConcatenation(inputTensors_190,3);
  res_190->setAxis(0);
  assert(res_190 && "failed to build concat_2 (type:concat)");
  res_190->getOutput(0)->setName("concat_2:0");
  ITensor* inputTensors_191[3] = {res_153->getOutput(1),res_171->getOutput(1),res_189->getOutput(1)};
  auto res_191=network->addConcatenation(inputTensors_191,3);
  res_191->setAxis(0);
  assert(res_191 && "failed to build concat_3 (type:concat)");
  res_191->getOutput(0)->setName("concat_3:0");
  auto res_192=network->addTopK(*res_191->getOutput(0),TopKOperation::kMAX,1000,1);
  assert(res_192 && "failed to build multiclass_nms_0_score_topk (type:topk)");
  res_192->getOutput(0)->setName("multiclass_nms_0_score_topk:0");
  res_192->getOutput(1)->setName("multiclass_nms_0_score_topk:1");
  auto res_193=network->addGather(*res_190->getOutput(0),*res_192->getOutput(1),0);
  assert(res_193 && "failed to build multiclass_nms_0_gather_box (type:gather)");
  res_193->getOutput(0)->setName("multiclass_nms_0_gather_box:0");
  ITensor* inputTensors_194[2] = {res_193->getOutput(0),res_192->getOutput(0)};
  auto plugin_194=MULTICLASS_NMS_Plugin("multiclass_nms",100,0.44999998807907104,0.009999999776482582);
  auto res_194=network->addPluginV2(inputTensors_194,2,plugin_194);
  assert(res_194 && "failed to build multiclass_nms_0 (type:multiclass_nms)");
  res_194->getOutput(0)->setName("multinms");
  outputs[0]=res_194->getOutput(0);
  res_194->getOutput(1)->setName("multiclass_nms_0_1");
  outputs[1]=res_194->getOutput(1);
  // Set configs
  builder->setMaxBatchSize(batch_size);
  config->setMaxWorkspaceSize(101 << 20);
  return true;
}

bool yolov3_dcn_1::clean_up(){
  return clean_weights(mWeightsMap);
}

