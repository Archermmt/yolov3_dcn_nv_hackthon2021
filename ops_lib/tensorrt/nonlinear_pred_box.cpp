//
// Auto Generated by DLRouter on 2021-03-15 08:57:28.079807
// 

#include "trt_utils.h"
#include "nonlinear_pred_box.h"
#include "kernel/gpu/nonlinear_pred_box_kernel.h"

#include <cassert>

using namespace nvinfer1;

namespace quake {
namespace framework {
namespace ops_lib {

namespace {
  static const char* NONLINEAR_PRED_BOX_PLUGIN_VERSION{"1"};
  static const char* NONLINEAR_PRED_BOX_PLUGIN_NAME{"nonlinear_pred_box"};
}

// Static class fields initialization
PluginFieldCollection NONLINEAR_PRED_BOX_Creator::mFC{};
std::vector<PluginField> NONLINEAR_PRED_BOX_Creator::mPluginAttributes;

REGISTER_TENSORRT_PLUGIN(NONLINEAR_PRED_BOX_Creator);

//initialize funs
NONLINEAR_PRED_BOX_Plugin::NONLINEAR_PRED_BOX_Plugin(const std::string name,int p_image_h,int p_image_w)
  : mLayerName(name)
  , image_h(p_image_h)
  , image_w(p_image_w)
{
}

NONLINEAR_PRED_BOX_Plugin::NONLINEAR_PRED_BOX_Plugin(const std::string name,const void* data, size_t length)
  : mLayerName(name)
{
  // Deserialize in the same order as serialization
  const char *d = static_cast<const char *>(data);
  const char *a = d;
  readFromBuffer(d,image_h);
  readFromBuffer(d,image_w);
  readFromBuffer(d,box_num);
  readFromBuffer(d,box_dim);
  readFromBuffer(d,mDataType);

  assert(d == (a + length) && "length of data mismatch");
}

void NONLINEAR_PRED_BOX_Plugin::serialize(void* buffer) const
{
  char *d = static_cast<char *>(buffer);
  const char *a = d;
  writeToBuffer(d,image_h);
  writeToBuffer(d,image_w);
  writeToBuffer(d,box_num);
  writeToBuffer(d,box_dim);
  writeToBuffer(d,mDataType);

  assert(d == a + getSerializationSize());
}

size_t NONLINEAR_PRED_BOX_Plugin::getSerializationSize() const
{
  return sizeof(mDataType)+2*sizeof(int)+2*sizeof(int);
}

const char* NONLINEAR_PRED_BOX_Plugin::getPluginType() const
{
  return NONLINEAR_PRED_BOX_PLUGIN_NAME;
}

const char* NONLINEAR_PRED_BOX_Plugin::getPluginVersion() const
{
  return NONLINEAR_PRED_BOX_PLUGIN_VERSION;
}

int NONLINEAR_PRED_BOX_Plugin::initialize()
{
  return 0;
}

void NONLINEAR_PRED_BOX_Plugin::terminate() {}

void NONLINEAR_PRED_BOX_Plugin::destroy()
{
  delete this;
}

//runtime functions
int NONLINEAR_PRED_BOX_Plugin::getNbOutputs() const
{
  return 1;
}

Dims NONLINEAR_PRED_BOX_Plugin::getOutputDimensions(int index, const Dims* inputs, int nbInputDims)
{
  // Validate input arguments, Please set output shapes manually
  assert(nbInputDims == 2);
  
  box_num=inputs[0].d[0];
  box_dim=inputs[0].d[1];
  if(index==0){
    return Dims2{box_num,box_dim};
  }
}

size_t NONLINEAR_PRED_BOX_Plugin::getWorkspaceSize(int maxBatchSize) const
{
  return maxBatchSize*(0);
}

int NONLINEAR_PRED_BOX_Plugin::enqueue(int batchSize, const void* const* inputs, void** outputs, void* workspace, cudaStream_t stream)
{
  if (mDataType == DataType::kFLOAT){
    nonlinear_pred_box(stream,
      reinterpret_cast<const float*>(inputs[0]),
      reinterpret_cast<const float*>(inputs[1]),
      reinterpret_cast<float*>(outputs[0]),
      batchSize,
      box_num,
      box_dim,
      image_h,
      image_w);
  } else if (mDataType == DataType::kHALF){
    nonlinear_pred_box(stream,
      reinterpret_cast<const __half*>(inputs[0]),
      reinterpret_cast<const __half*>(inputs[1]),
      reinterpret_cast<__half*>(outputs[0]),
      batchSize,
      box_num,
      box_dim,
      image_h,
      image_w);
  }
  return 0;
}

//config functions
void NONLINEAR_PRED_BOX_Plugin::configureWithFormat(const Dims* inputs, int nbInputs, const Dims* outputs, int nbOutputs, DataType type, PluginFormat format, int)
{
  // Validate input arguments
  assert(nbInputs == 2);
  assert(nbOutputs == 1);
  box_num=inputs[0].d[0];
  box_dim=inputs[0].d[1];
  mDataType = type;
}

bool NONLINEAR_PRED_BOX_Plugin::supportsFormat(DataType type, PluginFormat format) const
{
  return true;
}


//describe functions
IPluginV2* NONLINEAR_PRED_BOX_Plugin::clone() const
{
  return new NONLINEAR_PRED_BOX_Plugin(mLayerName,image_h,image_w);
}

void NONLINEAR_PRED_BOX_Plugin::setPluginNamespace(const char* libNamespace)
{
  mNamespace = libNamespace;
}

const char* NONLINEAR_PRED_BOX_Plugin::getPluginNamespace() const
{
  return mNamespace.c_str();
}


//creator functions
NONLINEAR_PRED_BOX_Creator::NONLINEAR_PRED_BOX_Creator()
{
  mPluginAttributes.emplace_back(PluginField("image_h",nullptr,PluginFieldType::kINT32,1));
  mPluginAttributes.emplace_back(PluginField("image_w",nullptr,PluginFieldType::kINT32,1));
  // Fill PluginFieldCollection with PluginField arguments metadata
  mFC.nbFields = mPluginAttributes.size();
  mFC.fields = mPluginAttributes.data();
}

const char* NONLINEAR_PRED_BOX_Creator::getPluginName() const
{
  return NONLINEAR_PRED_BOX_PLUGIN_NAME;
}

const char* NONLINEAR_PRED_BOX_Creator::getPluginVersion() const
{
  return NONLINEAR_PRED_BOX_PLUGIN_VERSION;
}

const PluginFieldCollection* NONLINEAR_PRED_BOX_Creator::getFieldNames()
{
  return &mFC;
}

IPluginV2* NONLINEAR_PRED_BOX_Creator::createPlugin(const char* name, const PluginFieldCollection* fc)
{
  int image_h=0;
  int image_w=0;
  const PluginField* fields = fc->fields;

  // Parse fields from PluginFieldCollection
  assert(fc->nbFields == 2);
  for (int i = 0; i < fc->nbFields; i++){
    if (strcmp(fields[i].name, "image_h") == 0) {
      assert(fields[i].type == PluginFieldType::kINT32);
      image_h = *(static_cast<const int*>(fields[i].data));
    }else if (strcmp(fields[i].name, "image_w") == 0) {
      assert(fields[i].type == PluginFieldType::kINT32);
      image_w = *(static_cast<const int*>(fields[i].data));
    }
  }

  NONLINEAR_PRED_BOX_Plugin* obj = new NONLINEAR_PRED_BOX_Plugin(name,image_h,image_w);
  obj->setPluginNamespace(mNamespace.c_str());
  return obj;
}

IPluginV2* NONLINEAR_PRED_BOX_Creator::deserializePlugin(const char* name, const void* serialData, size_t serialLength)
{
  NONLINEAR_PRED_BOX_Plugin* obj = new NONLINEAR_PRED_BOX_Plugin(name, serialData, serialLength);
  obj->setPluginNamespace(mNamespace.c_str());
  return obj;
}

void NONLINEAR_PRED_BOX_Creator::setPluginNamespace(const char* libNamespace)
{
  mNamespace = libNamespace;
}

const char* NONLINEAR_PRED_BOX_Creator::getPluginNamespace() const
{
  return mNamespace.c_str();
}

} // namespace ops_lib
} // namespace framework
} // namespace quake
