//
// Auto Generated by DLRouter on 2021-03-10 07:08:43.416781
// 

#ifndef OPSLIB_TRT_DEFORMABLE_CONV_DMC_H
#define OPSLIB_TRT_DEFORMABLE_CONV_DMC_H

#include "NvInfer.h"

using namespace nvinfer1;

namespace quake {
namespace framework {
namespace ops_lib {

class DEFORMABLE_CONV_DMC_Plugin : public IPluginV2
{
public:
  //initialize functions
  DEFORMABLE_CONV_DMC_Plugin(const std::string name,int p_kernel_h,int p_kernel_w,int p_stride_h,int p_stride_w,int p_pad_h,int p_pad_w,int p_dilation_h,int p_dilation_w);

  DEFORMABLE_CONV_DMC_Plugin(const std::string name,const void* data, size_t length);

  DEFORMABLE_CONV_DMC_Plugin() = delete;

  const char* getPluginType() const override;

  const char* getPluginVersion() const override;

  void serialize(void* buffer) const override;

  size_t getSerializationSize() const override;

  int initialize() override;

  void terminate() override;

  void destroy() override;

  //runtime functions
  int getNbOutputs() const override;

  Dims getOutputDimensions(int index, const Dims* inputs, int nbInputDims) override;

  size_t getWorkspaceSize(int) const override;

  int enqueue(int batchSize, const void* const* inputs, void** outputs, void* workspace, cudaStream_t stream) override;

  //config functions
  void configureWithFormat(const Dims* inputDims, int nbInputs, const Dims* outputDims, int nbOutputs, DataType type, PluginFormat format, int maxBatchSize) override;

  bool supportsFormat(DataType type, PluginFormat format) const override;

  //describe functions
  nvinfer1::IPluginV2* clone() const override;

  void setPluginNamespace(const char* pluginNamespace) override;

  const char* getPluginNamespace() const override;

private:
  const std::string mLayerName;
  std::string mNamespace;
  DataType mDataType{DataType::kFLOAT};
  //def the attributes
  int kernel_h;
  int kernel_w;
  int stride_h;
  int stride_w;
  int pad_h;
  int pad_w;
  int dilation_h;
  int dilation_w;
  //def the dims
  int channel;
  int height;
  int width;
  int out_height;
  int out_width;
};

class DEFORMABLE_CONV_DMC_Creator : public IPluginCreator
{
public:
  DEFORMABLE_CONV_DMC_Creator();

  const char* getPluginName() const override;

  const char* getPluginVersion() const override;

  const PluginFieldCollection* getFieldNames() override;

  IPluginV2* createPlugin(const char* name, const PluginFieldCollection* fc) override;

  IPluginV2* deserializePlugin(const char* name, const void* serialData, size_t serialLength) override;

  void setPluginNamespace(const char* pluginNamespace) override;

  const char* getPluginNamespace() const override;

private:
  static PluginFieldCollection mFC;
  static std::vector<PluginField> mPluginAttributes;
  std::string mNamespace;
};

} // namespace ops_lib
} // namespace framework
} // namespace quake

#endif // OPSLIB_TRT_DEFORMABLE_CONV_DMC_H
