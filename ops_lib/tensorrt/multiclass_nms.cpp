//
// Auto Generated by DLRouter on 2021-04-15 09:28:16.646401
// 

#include "trt_utils.h"
#include "multiclass_nms.h"
#include "kernel/gpu/nms_kernel.h"

#include <cassert>

using namespace nvinfer1;

namespace quake {
namespace framework {
namespace ops_lib {

namespace {
  static const char* MULTICLASS_NMS_PLUGIN_VERSION{"1"};
  static const char* MULTICLASS_NMS_PLUGIN_NAME{"multiclass_nms"};
}

// Static class fields initialization
PluginFieldCollection MULTICLASS_NMS_Creator::mFC{};
std::vector<PluginField> MULTICLASS_NMS_Creator::mPluginAttributes;

REGISTER_TENSORRT_PLUGIN(MULTICLASS_NMS_Creator);

//initialize funs
MULTICLASS_NMS_Plugin::MULTICLASS_NMS_Plugin(const std::string name,int p_keep_top_k,float p_nms_threshold,float p_score_threshold)
  : mLayerName(name)
  , keep_top_k(p_keep_top_k)
  , nms_threshold(p_nms_threshold)
  , score_threshold(p_score_threshold)
{
}

MULTICLASS_NMS_Plugin::MULTICLASS_NMS_Plugin(const std::string name,const void* data, size_t length)
  : mLayerName(name)
{
  // Deserialize in the same order as serialization
  const char *d = static_cast<const char *>(data);
  const char *a = d;
  readFromBuffer(d,keep_top_k);
  readFromBuffer(d,nms_threshold);
  readFromBuffer(d,score_threshold);
  readFromBuffer(d,box_num);
  readFromBuffer(d,class_num);
  readFromBuffer(d,box_dim);
  readFromBuffer(d,mDataType);

  assert(d == (a + length) && "length of data mismatch");
}

void MULTICLASS_NMS_Plugin::serialize(void* buffer) const
{
  char *d = static_cast<char *>(buffer);
  const char *a = d;
  writeToBuffer(d,keep_top_k);
  writeToBuffer(d,nms_threshold);
  writeToBuffer(d,score_threshold);
  writeToBuffer(d,box_num);
  writeToBuffer(d,class_num);
  writeToBuffer(d,box_dim);
  writeToBuffer(d,mDataType);

  assert(d == a + getSerializationSize());
}

size_t MULTICLASS_NMS_Plugin::getSerializationSize() const
{
  return sizeof(mDataType)+1*sizeof(int)+2*sizeof(float)+3*sizeof(int);
}

const char* MULTICLASS_NMS_Plugin::getPluginType() const
{
  return MULTICLASS_NMS_PLUGIN_NAME;
}

const char* MULTICLASS_NMS_Plugin::getPluginVersion() const
{
  return MULTICLASS_NMS_PLUGIN_VERSION;
}

int MULTICLASS_NMS_Plugin::initialize()
{
  return 0;
}

void MULTICLASS_NMS_Plugin::terminate() {}

void MULTICLASS_NMS_Plugin::destroy()
{
  delete this;
}

//runtime functions
int MULTICLASS_NMS_Plugin::getNbOutputs() const
{
  return 2;
}

Dims MULTICLASS_NMS_Plugin::getOutputDimensions(int index, const Dims* inputs, int nbInputDims)
{
  // Validate input arguments, Please set output shapes manually
  assert(nbInputDims == 2);
  
  box_num=inputs[0].d[0];
  class_num=inputs[0].d[1];
  box_dim=inputs[0].d[2];
  if(index==0){
    return DimsCHW{class_num,keep_top_k,5};
  }else if(index==1){
    return Dims2{class_num,1};
  }
}

size_t MULTICLASS_NMS_Plugin::getWorkspaceSize(int maxBatchSize) const
{
  return maxBatchSize*(class_num*sizeof(int)+class_num*box_num*sizeof(int)+class_num*keep_top_k*sizeof(int));
}

int MULTICLASS_NMS_Plugin::enqueue(int batchSize, const void* const* inputs, void** outputs, void* workspace, cudaStream_t stream)
{
  //get workspace and set to 0
  CHECK(cudaMemset(workspace,0,getWorkspaceSize(batchSize)));
  size_t offset=0;
  void* dev_num_out=workspace+offset;
  offset+=batchSize*class_num*sizeof(int);
  void* dev_mask=workspace+offset;
  offset+=batchSize*class_num*box_num*sizeof(int);
  void* dev_index_buffer=workspace+offset;
  offset+=batchSize*class_num*keep_top_k*sizeof(int);
  
  if (mDataType == DataType::kFLOAT){
    multiclass_nms_gpu(stream,
      reinterpret_cast<const float*>(inputs[0]),
      reinterpret_cast<const float*>(inputs[1]),
      reinterpret_cast<float*>(outputs[0]),
      reinterpret_cast<float*>(outputs[1]),
      (int*)dev_num_out,
      (int*)dev_mask,
      (int*)dev_index_buffer,
      batchSize,
      box_num,
      class_num,
      box_dim,
      keep_top_k,
      nms_threshold,
      score_threshold);
  } else if (mDataType == DataType::kHALF){
    multiclass_nms_gpu(stream,
      reinterpret_cast<const __half*>(inputs[0]),
      reinterpret_cast<const __half*>(inputs[1]),
      reinterpret_cast<__half*>(outputs[0]),
      reinterpret_cast<__half*>(outputs[1]),
      (int*)dev_num_out,
      (int*)dev_mask,
      (int*)dev_index_buffer,
      batchSize,
      box_num,
      class_num,
      box_dim,
      keep_top_k,
      dlr_float2half(nms_threshold),
      dlr_float2half(score_threshold));
  }
  return 0;
}

//config functions
void MULTICLASS_NMS_Plugin::configureWithFormat(const Dims* inputs, int nbInputs, const Dims* outputs, int nbOutputs, DataType type, PluginFormat format, int)
{
  // Validate input arguments
  assert(nbInputs == 2);
  assert(nbOutputs == 2);
  box_num=inputs[0].d[0];
  class_num=inputs[0].d[1];
  box_dim=inputs[0].d[2];
  mDataType = type;
}

bool MULTICLASS_NMS_Plugin::supportsFormat(DataType type, PluginFormat format) const
{
  return true;
}


//describe functions
IPluginV2* MULTICLASS_NMS_Plugin::clone() const
{
  return new MULTICLASS_NMS_Plugin(mLayerName,keep_top_k,nms_threshold,score_threshold);
}

void MULTICLASS_NMS_Plugin::setPluginNamespace(const char* libNamespace)
{
  mNamespace = libNamespace;
}

const char* MULTICLASS_NMS_Plugin::getPluginNamespace() const
{
  return mNamespace.c_str();
}


//creator functions
MULTICLASS_NMS_Creator::MULTICLASS_NMS_Creator()
{
  mPluginAttributes.emplace_back(PluginField("keep_top_k",nullptr,PluginFieldType::kINT32,1));
  mPluginAttributes.emplace_back(PluginField("nms_threshold",nullptr,PluginFieldType::kFLOAT32,1));
  mPluginAttributes.emplace_back(PluginField("score_threshold",nullptr,PluginFieldType::kFLOAT32,1));
  // Fill PluginFieldCollection with PluginField arguments metadata
  mFC.nbFields = mPluginAttributes.size();
  mFC.fields = mPluginAttributes.data();
}

const char* MULTICLASS_NMS_Creator::getPluginName() const
{
  return MULTICLASS_NMS_PLUGIN_NAME;
}

const char* MULTICLASS_NMS_Creator::getPluginVersion() const
{
  return MULTICLASS_NMS_PLUGIN_VERSION;
}

const PluginFieldCollection* MULTICLASS_NMS_Creator::getFieldNames()
{
  return &mFC;
}

IPluginV2* MULTICLASS_NMS_Creator::createPlugin(const char* name, const PluginFieldCollection* fc)
{
  int keep_top_k=0;
  float nms_threshold=0;
  float score_threshold=0;
  const PluginField* fields = fc->fields;

  // Parse fields from PluginFieldCollection
  assert(fc->nbFields == 3);
  for (int i = 0; i < fc->nbFields; i++){
    if (strcmp(fields[i].name, "keep_top_k") == 0) {
      assert(fields[i].type == PluginFieldType::kINT32);
      keep_top_k = *(static_cast<const int*>(fields[i].data));
    }else if (strcmp(fields[i].name, "nms_threshold") == 0) {
      assert(fields[i].type == PluginFieldType::kFLOAT32);
      nms_threshold = *(static_cast<const float*>(fields[i].data));
    }else if (strcmp(fields[i].name, "score_threshold") == 0) {
      assert(fields[i].type == PluginFieldType::kFLOAT32);
      score_threshold = *(static_cast<const float*>(fields[i].data));
    }
  }

  MULTICLASS_NMS_Plugin* obj = new MULTICLASS_NMS_Plugin(name,keep_top_k,nms_threshold,score_threshold);
  obj->setPluginNamespace(mNamespace.c_str());
  return obj;
}

IPluginV2* MULTICLASS_NMS_Creator::deserializePlugin(const char* name, const void* serialData, size_t serialLength)
{
  MULTICLASS_NMS_Plugin* obj = new MULTICLASS_NMS_Plugin(name, serialData, serialLength);
  obj->setPluginNamespace(mNamespace.c_str());
  return obj;
}

void MULTICLASS_NMS_Creator::setPluginNamespace(const char* libNamespace)
{
  mNamespace = libNamespace;
}

const char* MULTICLASS_NMS_Creator::getPluginNamespace() const
{
  return mNamespace.c_str();
}

} // namespace ops_lib
} // namespace framework
} // namespace quake
