#include "fpn_1.h"
#include "tensorrt/bilinear_upsample.h"
using namespace nvinfer1;
using namespace std;

bool fpn_1::build(TRTUniquePtr<IBuilder>& builder,TRTUniquePtr<INetworkDefinition>& network,TRTUniquePtr<IBuilderConfig>& config,
  ITensor** inputs,ITensor** outputs,int batch_size,DLRLogger& dlr_logger)
{
  // Add Layers
  mWeightsMap = load_weigths("/usr/local/quake/datas/weights/fpn_1.wts");
  // passby input.1(dlr_input), defined by input.1;
  auto res_1=network->addConstant(Dims2{1,1},mWeightsMap["const_1"]);
  assert(res_1 && "failed to build Node_799.y (type:const)");
  res_1->getOutput(0)->setName("Node_799.y:0");
  auto res_2=network->addShuffle(*res_1->getOutput(0));
  res_2->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_2 && "failed to build Node_799.y_reshape (type:reshape)");
  res_2->getOutput(0)->setName("Node_799_y_reshape");
  outputs[0]=res_2->getOutput(0);
  auto res_3=network->addConvolution(*inputs[0],64,DimsHW{7,7},mWeightsMap["weight_3"],mWeightsMap["bias_3"]);
  res_3->setStride(DimsHW{2,2});
  res_3->setPadding(DimsHW{3,3});
  assert(res_3 && "failed to build Node_303 (type:conv2d)");
  res_3->getOutput(0)->setName("Node_303:0");
  auto res_4=network->addActivation(*res_3->getOutput(0),ActivationType::kRELU);
  assert(res_4 && "failed to build Node_305 (type:relu)");
  res_4->getOutput(0)->setName("Node_305:0");
  auto res_5=network->addPooling(*res_4->getOutput(0),PoolingType::kMAX,DimsHW{3,3});
  res_5->setStride(DimsHW{2,2});
  res_5->setPadding(DimsHW{1,1});
  assert(res_5 && "failed to build Node_310 (type:maxpool2d)");
  res_5->getOutput(0)->setName("Node_310:0");
  auto res_6=network->addConvolution(*res_5->getOutput(0),64,DimsHW{1,1},mWeightsMap["weight_6"],mWeightsMap["bias_6"]);
  assert(res_6 && "failed to build Node_315 (type:conv2d)");
  res_6->getOutput(0)->setName("Node_315:0");
  auto res_7=network->addActivation(*res_6->getOutput(0),ActivationType::kRELU);
  assert(res_7 && "failed to build Node_317 (type:relu)");
  res_7->getOutput(0)->setName("Node_317:0");
  auto res_8=network->addConvolution(*res_7->getOutput(0),64,DimsHW{3,3},mWeightsMap["weight_8"],mWeightsMap["bias_8"]);
  res_8->setPadding(DimsHW{1,1});
  assert(res_8 && "failed to build Node_322 (type:conv2d)");
  res_8->getOutput(0)->setName("Node_322:0");
  auto res_9=network->addActivation(*res_8->getOutput(0),ActivationType::kRELU);
  assert(res_9 && "failed to build Node_324 (type:relu)");
  res_9->getOutput(0)->setName("Node_324:0");
  auto res_10=network->addConvolution(*res_9->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_10"],mWeightsMap["bias_10"]);
  assert(res_10 && "failed to build Node_329 (type:conv2d)");
  res_10->getOutput(0)->setName("Node_329:0");
  auto res_11=network->addConvolution(*res_5->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_11"],mWeightsMap["bias_11"]);
  assert(res_11 && "failed to build Node_335 (type:conv2d)");
  res_11->getOutput(0)->setName("Node_335:0");
  auto res_12=network->addElementWise(*res_10->getOutput(0),*res_11->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_12 && "failed to build Node_337 (type:add)");
  res_12->getOutput(0)->setName("Node_337:0");
  auto res_13=network->addActivation(*res_12->getOutput(0),ActivationType::kRELU);
  assert(res_13 && "failed to build Node_338 (type:relu)");
  res_13->getOutput(0)->setName("Node_338:0");
  auto res_14=network->addConvolution(*res_13->getOutput(0),64,DimsHW{1,1},mWeightsMap["weight_14"],mWeightsMap["bias_14"]);
  assert(res_14 && "failed to build Node_343 (type:conv2d)");
  res_14->getOutput(0)->setName("Node_343:0");
  auto res_15=network->addActivation(*res_14->getOutput(0),ActivationType::kRELU);
  assert(res_15 && "failed to build Node_345 (type:relu)");
  res_15->getOutput(0)->setName("Node_345:0");
  auto res_16=network->addConvolution(*res_15->getOutput(0),64,DimsHW{3,3},mWeightsMap["weight_16"],mWeightsMap["bias_16"]);
  res_16->setPadding(DimsHW{1,1});
  assert(res_16 && "failed to build Node_350 (type:conv2d)");
  res_16->getOutput(0)->setName("Node_350:0");
  auto res_17=network->addActivation(*res_16->getOutput(0),ActivationType::kRELU);
  assert(res_17 && "failed to build Node_352 (type:relu)");
  res_17->getOutput(0)->setName("Node_352:0");
  auto res_18=network->addConvolution(*res_17->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_18"],mWeightsMap["bias_18"]);
  assert(res_18 && "failed to build Node_357 (type:conv2d)");
  res_18->getOutput(0)->setName("Node_357:0");
  auto res_19=network->addElementWise(*res_18->getOutput(0),*res_13->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_19 && "failed to build Node_359 (type:add)");
  res_19->getOutput(0)->setName("Node_359:0");
  auto res_20=network->addActivation(*res_19->getOutput(0),ActivationType::kRELU);
  assert(res_20 && "failed to build Node_360 (type:relu)");
  res_20->getOutput(0)->setName("Node_360:0");
  auto res_21=network->addConvolution(*res_20->getOutput(0),64,DimsHW{1,1},mWeightsMap["weight_21"],mWeightsMap["bias_21"]);
  assert(res_21 && "failed to build Node_365 (type:conv2d)");
  res_21->getOutput(0)->setName("Node_365:0");
  auto res_22=network->addActivation(*res_21->getOutput(0),ActivationType::kRELU);
  assert(res_22 && "failed to build Node_367 (type:relu)");
  res_22->getOutput(0)->setName("Node_367:0");
  auto res_23=network->addConvolution(*res_22->getOutput(0),64,DimsHW{3,3},mWeightsMap["weight_23"],mWeightsMap["bias_23"]);
  res_23->setPadding(DimsHW{1,1});
  assert(res_23 && "failed to build Node_372 (type:conv2d)");
  res_23->getOutput(0)->setName("Node_372:0");
  auto res_24=network->addActivation(*res_23->getOutput(0),ActivationType::kRELU);
  assert(res_24 && "failed to build Node_374 (type:relu)");
  res_24->getOutput(0)->setName("Node_374:0");
  auto res_25=network->addConvolution(*res_24->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_25"],mWeightsMap["bias_25"]);
  assert(res_25 && "failed to build Node_379 (type:conv2d)");
  res_25->getOutput(0)->setName("Node_379:0");
  auto res_26=network->addElementWise(*res_25->getOutput(0),*res_20->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_26 && "failed to build Node_381 (type:add)");
  res_26->getOutput(0)->setName("Node_381:0");
  auto res_27=network->addActivation(*res_26->getOutput(0),ActivationType::kRELU);
  assert(res_27 && "failed to build Node_382 (type:relu)");
  res_27->getOutput(0)->setName("Node_382:0");
  auto res_28=network->addConvolution(*res_27->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_28"],mWeightsMap["bias_28"]);
  assert(res_28 && "failed to build Node_387 (type:conv2d)");
  res_28->getOutput(0)->setName("Node_387:0");
  auto res_29=network->addActivation(*res_28->getOutput(0),ActivationType::kRELU);
  assert(res_29 && "failed to build Node_389 (type:relu)");
  res_29->getOutput(0)->setName("Node_389:0");
  auto res_30=network->addConvolution(*res_29->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_30"],mWeightsMap["bias_30"]);
  res_30->setStride(DimsHW{2,2});
  res_30->setPadding(DimsHW{1,1});
  assert(res_30 && "failed to build Node_394 (type:conv2d)");
  res_30->getOutput(0)->setName("Node_394:0");
  auto res_31=network->addActivation(*res_30->getOutput(0),ActivationType::kRELU);
  assert(res_31 && "failed to build Node_396 (type:relu)");
  res_31->getOutput(0)->setName("Node_396:0");
  auto res_32=network->addConvolution(*res_31->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_32"],mWeightsMap["bias_32"]);
  assert(res_32 && "failed to build Node_401 (type:conv2d)");
  res_32->getOutput(0)->setName("Node_401:0");
  auto res_33=network->addConvolution(*res_27->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_33"],mWeightsMap["bias_33"]);
  res_33->setStride(DimsHW{2,2});
  assert(res_33 && "failed to build Node_407 (type:conv2d)");
  res_33->getOutput(0)->setName("Node_407:0");
  auto res_34=network->addElementWise(*res_32->getOutput(0),*res_33->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_34 && "failed to build Node_409 (type:add)");
  res_34->getOutput(0)->setName("Node_409:0");
  auto res_35=network->addActivation(*res_34->getOutput(0),ActivationType::kRELU);
  assert(res_35 && "failed to build Node_410 (type:relu)");
  res_35->getOutput(0)->setName("Node_410:0");
  auto res_36=network->addConvolution(*res_35->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_36"],mWeightsMap["bias_36"]);
  assert(res_36 && "failed to build Node_415 (type:conv2d)");
  res_36->getOutput(0)->setName("Node_415:0");
  auto res_37=network->addActivation(*res_36->getOutput(0),ActivationType::kRELU);
  assert(res_37 && "failed to build Node_417 (type:relu)");
  res_37->getOutput(0)->setName("Node_417:0");
  auto res_38=network->addConvolution(*res_37->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_38"],mWeightsMap["bias_38"]);
  res_38->setPadding(DimsHW{1,1});
  assert(res_38 && "failed to build Node_422 (type:conv2d)");
  res_38->getOutput(0)->setName("Node_422:0");
  auto res_39=network->addActivation(*res_38->getOutput(0),ActivationType::kRELU);
  assert(res_39 && "failed to build Node_424 (type:relu)");
  res_39->getOutput(0)->setName("Node_424:0");
  auto res_40=network->addConvolution(*res_39->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_40"],mWeightsMap["bias_40"]);
  assert(res_40 && "failed to build Node_429 (type:conv2d)");
  res_40->getOutput(0)->setName("Node_429:0");
  auto res_41=network->addElementWise(*res_40->getOutput(0),*res_35->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_41 && "failed to build Node_431 (type:add)");
  res_41->getOutput(0)->setName("Node_431:0");
  auto res_42=network->addActivation(*res_41->getOutput(0),ActivationType::kRELU);
  assert(res_42 && "failed to build Node_432 (type:relu)");
  res_42->getOutput(0)->setName("Node_432:0");
  auto res_43=network->addConvolution(*res_42->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_43"],mWeightsMap["bias_43"]);
  assert(res_43 && "failed to build Node_437 (type:conv2d)");
  res_43->getOutput(0)->setName("Node_437:0");
  auto res_44=network->addActivation(*res_43->getOutput(0),ActivationType::kRELU);
  assert(res_44 && "failed to build Node_439 (type:relu)");
  res_44->getOutput(0)->setName("Node_439:0");
  auto res_45=network->addConvolution(*res_44->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_45"],mWeightsMap["bias_45"]);
  res_45->setPadding(DimsHW{1,1});
  assert(res_45 && "failed to build Node_444 (type:conv2d)");
  res_45->getOutput(0)->setName("Node_444:0");
  auto res_46=network->addActivation(*res_45->getOutput(0),ActivationType::kRELU);
  assert(res_46 && "failed to build Node_446 (type:relu)");
  res_46->getOutput(0)->setName("Node_446:0");
  auto res_47=network->addConvolution(*res_46->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_47"],mWeightsMap["bias_47"]);
  assert(res_47 && "failed to build Node_451 (type:conv2d)");
  res_47->getOutput(0)->setName("Node_451:0");
  auto res_48=network->addElementWise(*res_47->getOutput(0),*res_42->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_48 && "failed to build Node_453 (type:add)");
  res_48->getOutput(0)->setName("Node_453:0");
  auto res_49=network->addActivation(*res_48->getOutput(0),ActivationType::kRELU);
  assert(res_49 && "failed to build Node_454 (type:relu)");
  res_49->getOutput(0)->setName("Node_454:0");
  auto res_50=network->addConvolution(*res_49->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_50"],mWeightsMap["bias_50"]);
  assert(res_50 && "failed to build Node_459 (type:conv2d)");
  res_50->getOutput(0)->setName("Node_459:0");
  auto res_51=network->addActivation(*res_50->getOutput(0),ActivationType::kRELU);
  assert(res_51 && "failed to build Node_461 (type:relu)");
  res_51->getOutput(0)->setName("Node_461:0");
  auto res_52=network->addConvolution(*res_51->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_52"],mWeightsMap["bias_52"]);
  res_52->setPadding(DimsHW{1,1});
  assert(res_52 && "failed to build Node_466 (type:conv2d)");
  res_52->getOutput(0)->setName("Node_466:0");
  auto res_53=network->addActivation(*res_52->getOutput(0),ActivationType::kRELU);
  assert(res_53 && "failed to build Node_468 (type:relu)");
  res_53->getOutput(0)->setName("Node_468:0");
  auto res_54=network->addConvolution(*res_53->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_54"],mWeightsMap["bias_54"]);
  assert(res_54 && "failed to build Node_473 (type:conv2d)");
  res_54->getOutput(0)->setName("Node_473:0");
  auto res_55=network->addElementWise(*res_54->getOutput(0),*res_49->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_55 && "failed to build Node_475 (type:add)");
  res_55->getOutput(0)->setName("Node_475:0");
  auto res_56=network->addActivation(*res_55->getOutput(0),ActivationType::kRELU);
  assert(res_56 && "failed to build Node_476 (type:relu)");
  res_56->getOutput(0)->setName("Node_476:0");
  auto res_57=network->addConvolution(*res_56->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_57"],mWeightsMap["bias_57"]);
  assert(res_57 && "failed to build Node_481 (type:conv2d)");
  res_57->getOutput(0)->setName("Node_481:0");
  auto res_58=network->addActivation(*res_57->getOutput(0),ActivationType::kRELU);
  assert(res_58 && "failed to build Node_483 (type:relu)");
  res_58->getOutput(0)->setName("Node_483:0");
  auto res_59=network->addConvolution(*res_58->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_59"],mWeightsMap["bias_59"]);
  res_59->setStride(DimsHW{2,2});
  res_59->setPadding(DimsHW{1,1});
  assert(res_59 && "failed to build Node_488 (type:conv2d)");
  res_59->getOutput(0)->setName("Node_488:0");
  auto res_60=network->addActivation(*res_59->getOutput(0),ActivationType::kRELU);
  assert(res_60 && "failed to build Node_490 (type:relu)");
  res_60->getOutput(0)->setName("Node_490:0");
  auto res_61=network->addConvolution(*res_60->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_61"],mWeightsMap["bias_61"]);
  assert(res_61 && "failed to build Node_495 (type:conv2d)");
  res_61->getOutput(0)->setName("Node_495:0");
  auto res_62=network->addConvolution(*res_56->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_62"],mWeightsMap["bias_62"]);
  res_62->setStride(DimsHW{2,2});
  assert(res_62 && "failed to build Node_501 (type:conv2d)");
  res_62->getOutput(0)->setName("Node_501:0");
  auto res_63=network->addElementWise(*res_61->getOutput(0),*res_62->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_63 && "failed to build Node_503 (type:add)");
  res_63->getOutput(0)->setName("Node_503:0");
  auto res_64=network->addActivation(*res_63->getOutput(0),ActivationType::kRELU);
  assert(res_64 && "failed to build Node_504 (type:relu)");
  res_64->getOutput(0)->setName("Node_504:0");
  auto res_65=network->addConvolution(*res_64->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_65"],mWeightsMap["bias_65"]);
  assert(res_65 && "failed to build Node_509 (type:conv2d)");
  res_65->getOutput(0)->setName("Node_509:0");
  auto res_66=network->addActivation(*res_65->getOutput(0),ActivationType::kRELU);
  assert(res_66 && "failed to build Node_511 (type:relu)");
  res_66->getOutput(0)->setName("Node_511:0");
  auto res_67=network->addConvolution(*res_66->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_67"],mWeightsMap["bias_67"]);
  res_67->setPadding(DimsHW{1,1});
  assert(res_67 && "failed to build Node_516 (type:conv2d)");
  res_67->getOutput(0)->setName("Node_516:0");
  auto res_68=network->addActivation(*res_67->getOutput(0),ActivationType::kRELU);
  assert(res_68 && "failed to build Node_518 (type:relu)");
  res_68->getOutput(0)->setName("Node_518:0");
  auto res_69=network->addConvolution(*res_68->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_69"],mWeightsMap["bias_69"]);
  assert(res_69 && "failed to build Node_523 (type:conv2d)");
  res_69->getOutput(0)->setName("Node_523:0");
  auto res_70=network->addElementWise(*res_69->getOutput(0),*res_64->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_70 && "failed to build Node_525 (type:add)");
  res_70->getOutput(0)->setName("Node_525:0");
  auto res_71=network->addActivation(*res_70->getOutput(0),ActivationType::kRELU);
  assert(res_71 && "failed to build Node_526 (type:relu)");
  res_71->getOutput(0)->setName("Node_526:0");
  auto res_72=network->addConvolution(*res_71->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_72"],mWeightsMap["bias_72"]);
  assert(res_72 && "failed to build Node_531 (type:conv2d)");
  res_72->getOutput(0)->setName("Node_531:0");
  auto res_73=network->addActivation(*res_72->getOutput(0),ActivationType::kRELU);
  assert(res_73 && "failed to build Node_533 (type:relu)");
  res_73->getOutput(0)->setName("Node_533:0");
  auto res_74=network->addConvolution(*res_73->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_74"],mWeightsMap["bias_74"]);
  res_74->setPadding(DimsHW{1,1});
  assert(res_74 && "failed to build Node_538 (type:conv2d)");
  res_74->getOutput(0)->setName("Node_538:0");
  auto res_75=network->addActivation(*res_74->getOutput(0),ActivationType::kRELU);
  assert(res_75 && "failed to build Node_540 (type:relu)");
  res_75->getOutput(0)->setName("Node_540:0");
  auto res_76=network->addConvolution(*res_75->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_76"],mWeightsMap["bias_76"]);
  assert(res_76 && "failed to build Node_545 (type:conv2d)");
  res_76->getOutput(0)->setName("Node_545:0");
  auto res_77=network->addElementWise(*res_76->getOutput(0),*res_71->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_77 && "failed to build Node_547 (type:add)");
  res_77->getOutput(0)->setName("Node_547:0");
  auto res_78=network->addActivation(*res_77->getOutput(0),ActivationType::kRELU);
  assert(res_78 && "failed to build Node_548 (type:relu)");
  res_78->getOutput(0)->setName("Node_548:0");
  auto res_79=network->addConvolution(*res_78->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_79"],mWeightsMap["bias_79"]);
  assert(res_79 && "failed to build Node_553 (type:conv2d)");
  res_79->getOutput(0)->setName("Node_553:0");
  auto res_80=network->addActivation(*res_79->getOutput(0),ActivationType::kRELU);
  assert(res_80 && "failed to build Node_555 (type:relu)");
  res_80->getOutput(0)->setName("Node_555:0");
  auto res_81=network->addConvolution(*res_80->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_81"],mWeightsMap["bias_81"]);
  res_81->setPadding(DimsHW{1,1});
  assert(res_81 && "failed to build Node_560 (type:conv2d)");
  res_81->getOutput(0)->setName("Node_560:0");
  auto res_82=network->addActivation(*res_81->getOutput(0),ActivationType::kRELU);
  assert(res_82 && "failed to build Node_562 (type:relu)");
  res_82->getOutput(0)->setName("Node_562:0");
  auto res_83=network->addConvolution(*res_82->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_83"],mWeightsMap["bias_83"]);
  assert(res_83 && "failed to build Node_567 (type:conv2d)");
  res_83->getOutput(0)->setName("Node_567:0");
  auto res_84=network->addElementWise(*res_83->getOutput(0),*res_78->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_84 && "failed to build Node_569 (type:add)");
  res_84->getOutput(0)->setName("Node_569:0");
  auto res_85=network->addActivation(*res_84->getOutput(0),ActivationType::kRELU);
  assert(res_85 && "failed to build Node_570 (type:relu)");
  res_85->getOutput(0)->setName("Node_570:0");
  auto res_86=network->addConvolution(*res_85->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_86"],mWeightsMap["bias_86"]);
  assert(res_86 && "failed to build Node_575 (type:conv2d)");
  res_86->getOutput(0)->setName("Node_575:0");
  auto res_87=network->addActivation(*res_86->getOutput(0),ActivationType::kRELU);
  assert(res_87 && "failed to build Node_577 (type:relu)");
  res_87->getOutput(0)->setName("Node_577:0");
  auto res_88=network->addConvolution(*res_87->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_88"],mWeightsMap["bias_88"]);
  res_88->setPadding(DimsHW{1,1});
  assert(res_88 && "failed to build Node_582 (type:conv2d)");
  res_88->getOutput(0)->setName("Node_582:0");
  auto res_89=network->addActivation(*res_88->getOutput(0),ActivationType::kRELU);
  assert(res_89 && "failed to build Node_584 (type:relu)");
  res_89->getOutput(0)->setName("Node_584:0");
  auto res_90=network->addConvolution(*res_89->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_90"],mWeightsMap["bias_90"]);
  assert(res_90 && "failed to build Node_589 (type:conv2d)");
  res_90->getOutput(0)->setName("Node_589:0");
  auto res_91=network->addElementWise(*res_90->getOutput(0),*res_85->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_91 && "failed to build Node_591 (type:add)");
  res_91->getOutput(0)->setName("Node_591:0");
  auto res_92=network->addActivation(*res_91->getOutput(0),ActivationType::kRELU);
  assert(res_92 && "failed to build Node_592 (type:relu)");
  res_92->getOutput(0)->setName("Node_592:0");
  auto res_93=network->addConvolution(*res_92->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_93"],mWeightsMap["bias_93"]);
  assert(res_93 && "failed to build Node_597 (type:conv2d)");
  res_93->getOutput(0)->setName("Node_597:0");
  auto res_94=network->addActivation(*res_93->getOutput(0),ActivationType::kRELU);
  assert(res_94 && "failed to build Node_599 (type:relu)");
  res_94->getOutput(0)->setName("Node_599:0");
  auto res_95=network->addConvolution(*res_94->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_95"],mWeightsMap["bias_95"]);
  res_95->setPadding(DimsHW{1,1});
  assert(res_95 && "failed to build Node_604 (type:conv2d)");
  res_95->getOutput(0)->setName("Node_604:0");
  auto res_96=network->addActivation(*res_95->getOutput(0),ActivationType::kRELU);
  assert(res_96 && "failed to build Node_606 (type:relu)");
  res_96->getOutput(0)->setName("Node_606:0");
  auto res_97=network->addConvolution(*res_96->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_97"],mWeightsMap["bias_97"]);
  assert(res_97 && "failed to build Node_611 (type:conv2d)");
  res_97->getOutput(0)->setName("Node_611:0");
  auto res_98=network->addElementWise(*res_97->getOutput(0),*res_92->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_98 && "failed to build Node_613 (type:add)");
  res_98->getOutput(0)->setName("Node_613:0");
  auto res_99=network->addActivation(*res_98->getOutput(0),ActivationType::kRELU);
  assert(res_99 && "failed to build Node_614 (type:relu)");
  res_99->getOutput(0)->setName("Node_614:0");
  auto res_100=network->addConvolution(*res_99->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_100"],mWeightsMap["bias_100"]);
  assert(res_100 && "failed to build Node_619 (type:conv2d)");
  res_100->getOutput(0)->setName("Node_619:0");
  auto res_101=network->addActivation(*res_100->getOutput(0),ActivationType::kRELU);
  assert(res_101 && "failed to build Node_621 (type:relu)");
  res_101->getOutput(0)->setName("Node_621:0");
  auto res_102=network->addConvolution(*res_101->getOutput(0),512,DimsHW{3,3},mWeightsMap["weight_102"],mWeightsMap["bias_102"]);
  res_102->setStride(DimsHW{2,2});
  res_102->setPadding(DimsHW{1,1});
  assert(res_102 && "failed to build Node_626 (type:conv2d)");
  res_102->getOutput(0)->setName("Node_626:0");
  auto res_103=network->addActivation(*res_102->getOutput(0),ActivationType::kRELU);
  assert(res_103 && "failed to build Node_628 (type:relu)");
  res_103->getOutput(0)->setName("Node_628:0");
  auto res_104=network->addConvolution(*res_103->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_104"],mWeightsMap["bias_104"]);
  assert(res_104 && "failed to build Node_633 (type:conv2d)");
  res_104->getOutput(0)->setName("Node_633:0");
  auto res_105=network->addConvolution(*res_99->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_105"],mWeightsMap["bias_105"]);
  res_105->setStride(DimsHW{2,2});
  assert(res_105 && "failed to build Node_639 (type:conv2d)");
  res_105->getOutput(0)->setName("Node_639:0");
  auto res_106=network->addElementWise(*res_104->getOutput(0),*res_105->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_106 && "failed to build Node_641 (type:add)");
  res_106->getOutput(0)->setName("Node_641:0");
  auto res_107=network->addActivation(*res_106->getOutput(0),ActivationType::kRELU);
  assert(res_107 && "failed to build Node_642 (type:relu)");
  res_107->getOutput(0)->setName("Node_642:0");
  auto res_108=network->addConvolution(*res_107->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_108"],mWeightsMap["bias_108"]);
  assert(res_108 && "failed to build Node_647 (type:conv2d)");
  res_108->getOutput(0)->setName("Node_647:0");
  auto res_109=network->addActivation(*res_108->getOutput(0),ActivationType::kRELU);
  assert(res_109 && "failed to build Node_649 (type:relu)");
  res_109->getOutput(0)->setName("Node_649:0");
  auto res_110=network->addConvolution(*res_109->getOutput(0),512,DimsHW{3,3},mWeightsMap["weight_110"],mWeightsMap["bias_110"]);
  res_110->setPadding(DimsHW{1,1});
  assert(res_110 && "failed to build Node_654 (type:conv2d)");
  res_110->getOutput(0)->setName("Node_654:0");
  auto res_111=network->addActivation(*res_110->getOutput(0),ActivationType::kRELU);
  assert(res_111 && "failed to build Node_656 (type:relu)");
  res_111->getOutput(0)->setName("Node_656:0");
  auto res_112=network->addConvolution(*res_111->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_112"],mWeightsMap["bias_112"]);
  assert(res_112 && "failed to build Node_661 (type:conv2d)");
  res_112->getOutput(0)->setName("Node_661:0");
  auto res_113=network->addElementWise(*res_112->getOutput(0),*res_107->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_113 && "failed to build Node_663 (type:add)");
  res_113->getOutput(0)->setName("Node_663:0");
  auto res_114=network->addActivation(*res_113->getOutput(0),ActivationType::kRELU);
  assert(res_114 && "failed to build Node_664 (type:relu)");
  res_114->getOutput(0)->setName("Node_664:0");
  auto res_115=network->addConvolution(*res_114->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_115"],mWeightsMap["bias_115"]);
  assert(res_115 && "failed to build Node_669 (type:conv2d)");
  res_115->getOutput(0)->setName("Node_669:0");
  auto res_116=network->addActivation(*res_115->getOutput(0),ActivationType::kRELU);
  assert(res_116 && "failed to build Node_671 (type:relu)");
  res_116->getOutput(0)->setName("Node_671:0");
  auto res_117=network->addConvolution(*res_116->getOutput(0),512,DimsHW{3,3},mWeightsMap["weight_117"],mWeightsMap["bias_117"]);
  res_117->setPadding(DimsHW{1,1});
  assert(res_117 && "failed to build Node_676 (type:conv2d)");
  res_117->getOutput(0)->setName("Node_676:0");
  auto res_118=network->addActivation(*res_117->getOutput(0),ActivationType::kRELU);
  assert(res_118 && "failed to build Node_678 (type:relu)");
  res_118->getOutput(0)->setName("Node_678:0");
  auto res_119=network->addConvolution(*res_118->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_119"],mWeightsMap["bias_119"]);
  assert(res_119 && "failed to build Node_683 (type:conv2d)");
  res_119->getOutput(0)->setName("Node_683:0");
  auto res_120=network->addElementWise(*res_119->getOutput(0),*res_114->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_120 && "failed to build Node_685 (type:add)");
  res_120->getOutput(0)->setName("Node_685:0");
  auto res_121=network->addActivation(*res_120->getOutput(0),ActivationType::kRELU);
  assert(res_121 && "failed to build Node_686 (type:relu)");
  res_121->getOutput(0)->setName("Node_686:0");
  auto res_122=network->addConvolution(*res_121->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_122"],mWeightsMap["bias_122"]);
  assert(res_122 && "failed to build Node_691 (type:conv2d)");
  res_122->getOutput(0)->setName("Node_691:0");

  //correct process
  ITensor* inputTensors_123[1] = {res_122->getOutput(0)};
  auto plugin_123=BILINEAR_UPSAMPLE_Plugin("bilinear_upsample",14,14,false);
  auto res_123=network->addPluginV2(inputTensors_123,1,plugin_123);
  assert(res_123 && "failed to build Node_704 (type:upsample)");
  res_123->getOutput(0)->setName("Node_704");
  outputs[1]=res_123->getOutput(0);

  //failed to check
  /*
  auto res_123=network->addResize(*res_122->getOutput(0));
  res_123->setResizeMode(ResizeMode::kLINEAR);
  res_123->setOutputDimensions(Dims3{256,14,14});
  assert(res_123 && "failed to build Node_704 (type:upsample)");
  res_123->getOutput(0)->setName("Node_704");
  outputs[1]=res_123->getOutput(0);
  */

  // Set configs
  builder->setMaxBatchSize(batch_size);
  config->setMaxWorkspaceSize(87 << 20);
  return true;
}

bool fpn_1::clean_up(){
  return clean_weights(mWeightsMap);
}

