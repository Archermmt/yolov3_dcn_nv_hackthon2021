#include "text_img_general_3.h"
using namespace nvinfer1;
using namespace std;

bool text_img_general_3::build(TRTUniquePtr<IBuilder>& builder,TRTUniquePtr<INetworkDefinition>& network,TRTUniquePtr<IBuilderConfig>& config,
  ITensor** inputs,ITensor** outputs,int batch_size,DLRLogger& dlr_logger)
{
  // Add Layers
  mWeightsMap = load_weigths("/usr/local/quake/datas/weights/text_img_general_3.wts");
  // passby Node_6070_diff(dlr_input), defined by Node_6070_diff;
  // passby Node_6134_diff(dlr_input), defined by Node_6134_diff;
  // passby Node_6198_diff(dlr_input), defined by Node_6198_diff;
  // passby Node_6262_diff(dlr_input), defined by Node_6262_diff;
  // passby Node_6326_diff(dlr_input), defined by Node_6326_diff;
  // passby Node_6390_diff(dlr_input), defined by Node_6390_diff;
  // passby Node_6454_diff(dlr_input), defined by Node_6454_diff;
  // passby Node_6518_diff(dlr_input), defined by Node_6518_diff;
  // passby Node_6582_diff(dlr_input), defined by Node_6582_diff;
  // passby Node_6646_diff(dlr_input), defined by Node_6646_diff;
  // passby Node_6710_diff(dlr_input), defined by Node_6710_diff;
  // passby Node_6774_diff(dlr_input), defined by Node_6774_diff;
  // passby Node_6838_diff(dlr_input), defined by Node_6838_diff;
  // passby Node_6902_diff(dlr_input), defined by Node_6902_diff;
  // passby Node_6966_diff(dlr_input), defined by Node_6966_diff;
  // passby Node_7023_reshape(dlr_input), defined by Node_7023_reshape;
  // passby Node_7087_reshape(dlr_input), defined by Node_7087_reshape;
  // passby Node_7151_reshape(dlr_input), defined by Node_7151_reshape;
  // passby Node_7215_reshape(dlr_input), defined by Node_7215_reshape;
  // passby Node_7279_reshape(dlr_input), defined by Node_7279_reshape;
  // passby Node_7361_concat_2(dlr_input), defined by Node_7361_concat_2;
  // passby Node_7365_concat_2(dlr_input), defined by Node_7365_concat_2;
  // passby Node_7369_concat_2(dlr_input), defined by Node_7369_concat_2;
  // passby Node_7373_concat_2(dlr_input), defined by Node_7373_concat_2;
  // passby Node_7377_concat_2(dlr_input), defined by Node_7377_concat_2;
  // passby Node_7381_concat_2(dlr_input), defined by Node_7381_concat_2;
  // passby Node_7385_concat_2(dlr_input), defined by Node_7385_concat_2;
  // passby Node_7389_concat_2(dlr_input), defined by Node_7389_concat_2;
  // passby Node_7720_concat_1(dlr_input), defined by Node_7720_concat_1;
  auto res_29=network->addConstant(Dims2{128,1},mWeightsMap["const_29"]);
  assert(res_29 && "failed to build multi_experts.0.layer_list.2.net.1.weight (type:const)");
  res_29->getOutput(0)->setName("multi_experts.0.layer_list.2.net.1.weight:0");
  auto res_30=network->addConstant(Dims2{128,1},mWeightsMap["const_30"]);
  assert(res_30 && "failed to build multi_experts.0.layer_list.2.net.1.bias (type:const)");
  res_30->getOutput(0)->setName("multi_experts.0.layer_list.2.net.1.bias:0");
  auto res_31=network->addConstant(Dims2{32,1},mWeightsMap["const_31"]);
  assert(res_31 && "failed to build multi_experts.0.layer_list.3.net.1.weight (type:const)");
  res_31->getOutput(0)->setName("multi_experts.0.layer_list.3.net.1.weight:0");
  auto res_32=network->addConstant(Dims2{32,1},mWeightsMap["const_32"]);
  assert(res_32 && "failed to build multi_experts.0.layer_list.3.net.1.bias (type:const)");
  res_32->getOutput(0)->setName("multi_experts.0.layer_list.3.net.1.bias:0");
  auto res_33=network->addConstant(Dims2{128,1},mWeightsMap["const_33"]);
  assert(res_33 && "failed to build multi_experts.1.layer_list.2.net.1.weight (type:const)");
  res_33->getOutput(0)->setName("multi_experts.1.layer_list.2.net.1.weight:0");
  auto res_34=network->addConstant(Dims2{128,1},mWeightsMap["const_34"]);
  assert(res_34 && "failed to build multi_experts.1.layer_list.2.net.1.bias (type:const)");
  res_34->getOutput(0)->setName("multi_experts.1.layer_list.2.net.1.bias:0");
  auto res_35=network->addConstant(Dims2{32,1},mWeightsMap["const_35"]);
  assert(res_35 && "failed to build multi_experts.1.layer_list.3.net.1.weight (type:const)");
  res_35->getOutput(0)->setName("multi_experts.1.layer_list.3.net.1.weight:0");
  auto res_36=network->addConstant(Dims2{32,1},mWeightsMap["const_36"]);
  assert(res_36 && "failed to build multi_experts.1.layer_list.3.net.1.bias (type:const)");
  res_36->getOutput(0)->setName("multi_experts.1.layer_list.3.net.1.bias:0");
  auto res_37=network->addConstant(Dims2{128,1},mWeightsMap["const_37"]);
  assert(res_37 && "failed to build multi_experts.2.layer_list.2.net.1.weight (type:const)");
  res_37->getOutput(0)->setName("multi_experts.2.layer_list.2.net.1.weight:0");
  auto res_38=network->addConstant(Dims2{128,1},mWeightsMap["const_38"]);
  assert(res_38 && "failed to build multi_experts.2.layer_list.2.net.1.bias (type:const)");
  res_38->getOutput(0)->setName("multi_experts.2.layer_list.2.net.1.bias:0");
  auto res_39=network->addConstant(Dims2{32,1},mWeightsMap["const_39"]);
  assert(res_39 && "failed to build multi_experts.2.layer_list.3.net.1.weight (type:const)");
  res_39->getOutput(0)->setName("multi_experts.2.layer_list.3.net.1.weight:0");
  auto res_40=network->addConstant(Dims2{32,1},mWeightsMap["const_40"]);
  assert(res_40 && "failed to build multi_experts.2.layer_list.3.net.1.bias (type:const)");
  res_40->getOutput(0)->setName("multi_experts.2.layer_list.3.net.1.bias:0");
  auto res_41=network->addConstant(Dims2{128,1},mWeightsMap["const_41"]);
  assert(res_41 && "failed to build multi_experts.3.layer_list.2.net.1.weight (type:const)");
  res_41->getOutput(0)->setName("multi_experts.3.layer_list.2.net.1.weight:0");
  auto res_42=network->addConstant(Dims2{128,1},mWeightsMap["const_42"]);
  assert(res_42 && "failed to build multi_experts.3.layer_list.2.net.1.bias (type:const)");
  res_42->getOutput(0)->setName("multi_experts.3.layer_list.2.net.1.bias:0");
  auto res_43=network->addConstant(Dims2{32,1},mWeightsMap["const_43"]);
  assert(res_43 && "failed to build multi_experts.3.layer_list.3.net.1.weight (type:const)");
  res_43->getOutput(0)->setName("multi_experts.3.layer_list.3.net.1.weight:0");
  auto res_44=network->addConstant(Dims2{32,1},mWeightsMap["const_44"]);
  assert(res_44 && "failed to build multi_experts.3.layer_list.3.net.1.bias (type:const)");
  res_44->getOutput(0)->setName("multi_experts.3.layer_list.3.net.1.bias:0");
  auto res_45=network->addConstant(Dims2{128,1},mWeightsMap["const_45"]);
  assert(res_45 && "failed to build multi_experts.4.layer_list.2.net.1.weight (type:const)");
  res_45->getOutput(0)->setName("multi_experts.4.layer_list.2.net.1.weight:0");
  auto res_46=network->addConstant(Dims2{128,1},mWeightsMap["const_46"]);
  assert(res_46 && "failed to build multi_experts.4.layer_list.2.net.1.bias (type:const)");
  res_46->getOutput(0)->setName("multi_experts.4.layer_list.2.net.1.bias:0");
  auto res_47=network->addConstant(Dims2{32,1},mWeightsMap["const_47"]);
  assert(res_47 && "failed to build multi_experts.4.layer_list.3.net.1.weight (type:const)");
  res_47->getOutput(0)->setName("multi_experts.4.layer_list.3.net.1.weight:0");
  auto res_48=network->addConstant(Dims2{32,1},mWeightsMap["const_48"]);
  assert(res_48 && "failed to build multi_experts.4.layer_list.3.net.1.bias (type:const)");
  res_48->getOutput(0)->setName("multi_experts.4.layer_list.3.net.1.bias:0");
  auto res_49=network->addConstant(Dims2{128,1},mWeightsMap["const_49"]);
  assert(res_49 && "failed to build multi_experts.5.layer_list.2.net.1.weight (type:const)");
  res_49->getOutput(0)->setName("multi_experts.5.layer_list.2.net.1.weight:0");
  auto res_50=network->addConstant(Dims2{128,1},mWeightsMap["const_50"]);
  assert(res_50 && "failed to build multi_experts.5.layer_list.2.net.1.bias (type:const)");
  res_50->getOutput(0)->setName("multi_experts.5.layer_list.2.net.1.bias:0");
  auto res_51=network->addConstant(Dims2{32,1},mWeightsMap["const_51"]);
  assert(res_51 && "failed to build multi_experts.5.layer_list.3.net.1.weight (type:const)");
  res_51->getOutput(0)->setName("multi_experts.5.layer_list.3.net.1.weight:0");
  auto res_52=network->addConstant(Dims2{32,1},mWeightsMap["const_52"]);
  assert(res_52 && "failed to build multi_experts.5.layer_list.3.net.1.bias (type:const)");
  res_52->getOutput(0)->setName("multi_experts.5.layer_list.3.net.1.bias:0");
  auto res_53=network->addConstant(Dims2{128,1},mWeightsMap["const_53"]);
  assert(res_53 && "failed to build multi_experts.6.layer_list.2.net.1.weight (type:const)");
  res_53->getOutput(0)->setName("multi_experts.6.layer_list.2.net.1.weight:0");
  auto res_54=network->addConstant(Dims2{128,1},mWeightsMap["const_54"]);
  assert(res_54 && "failed to build multi_experts.6.layer_list.2.net.1.bias (type:const)");
  res_54->getOutput(0)->setName("multi_experts.6.layer_list.2.net.1.bias:0");
  auto res_55=network->addConstant(Dims2{32,1},mWeightsMap["const_55"]);
  assert(res_55 && "failed to build multi_experts.6.layer_list.3.net.1.weight (type:const)");
  res_55->getOutput(0)->setName("multi_experts.6.layer_list.3.net.1.weight:0");
  auto res_56=network->addConstant(Dims2{32,1},mWeightsMap["const_56"]);
  assert(res_56 && "failed to build multi_experts.6.layer_list.3.net.1.bias (type:const)");
  res_56->getOutput(0)->setName("multi_experts.6.layer_list.3.net.1.bias:0");
  auto res_57=network->addConstant(Dims2{128,1},mWeightsMap["const_57"]);
  assert(res_57 && "failed to build multi_experts.7.layer_list.2.net.1.weight (type:const)");
  res_57->getOutput(0)->setName("multi_experts.7.layer_list.2.net.1.weight:0");
  auto res_58=network->addConstant(Dims2{128,1},mWeightsMap["const_58"]);
  assert(res_58 && "failed to build multi_experts.7.layer_list.2.net.1.bias (type:const)");
  res_58->getOutput(0)->setName("multi_experts.7.layer_list.2.net.1.bias:0");
  auto res_59=network->addConstant(Dims2{32,1},mWeightsMap["const_59"]);
  assert(res_59 && "failed to build multi_experts.7.layer_list.3.net.1.weight (type:const)");
  res_59->getOutput(0)->setName("multi_experts.7.layer_list.3.net.1.weight:0");
  auto res_60=network->addConstant(Dims2{32,1},mWeightsMap["const_60"]);
  assert(res_60 && "failed to build multi_experts.7.layer_list.3.net.1.bias (type:const)");
  res_60->getOutput(0)->setName("multi_experts.7.layer_list.3.net.1.bias:0");
  auto res_61=network->addConstant(Dims2{128,1},mWeightsMap["const_61"]);
  assert(res_61 && "failed to build multi_experts.8.layer_list.2.net.1.weight (type:const)");
  res_61->getOutput(0)->setName("multi_experts.8.layer_list.2.net.1.weight:0");
  auto res_62=network->addConstant(Dims2{128,1},mWeightsMap["const_62"]);
  assert(res_62 && "failed to build multi_experts.8.layer_list.2.net.1.bias (type:const)");
  res_62->getOutput(0)->setName("multi_experts.8.layer_list.2.net.1.bias:0");
  auto res_63=network->addConstant(Dims2{32,1},mWeightsMap["const_63"]);
  assert(res_63 && "failed to build multi_experts.8.layer_list.3.net.1.weight (type:const)");
  res_63->getOutput(0)->setName("multi_experts.8.layer_list.3.net.1.weight:0");
  auto res_64=network->addConstant(Dims2{32,1},mWeightsMap["const_64"]);
  assert(res_64 && "failed to build multi_experts.8.layer_list.3.net.1.bias (type:const)");
  res_64->getOutput(0)->setName("multi_experts.8.layer_list.3.net.1.bias:0");
  auto res_65=network->addConstant(Dims2{128,1},mWeightsMap["const_65"]);
  assert(res_65 && "failed to build multi_experts.9.layer_list.2.net.1.weight (type:const)");
  res_65->getOutput(0)->setName("multi_experts.9.layer_list.2.net.1.weight:0");
  auto res_66=network->addConstant(Dims2{128,1},mWeightsMap["const_66"]);
  assert(res_66 && "failed to build multi_experts.9.layer_list.2.net.1.bias (type:const)");
  res_66->getOutput(0)->setName("multi_experts.9.layer_list.2.net.1.bias:0");
  auto res_67=network->addConstant(Dims2{32,1},mWeightsMap["const_67"]);
  assert(res_67 && "failed to build multi_experts.9.layer_list.3.net.1.weight (type:const)");
  res_67->getOutput(0)->setName("multi_experts.9.layer_list.3.net.1.weight:0");
  auto res_68=network->addConstant(Dims2{32,1},mWeightsMap["const_68"]);
  assert(res_68 && "failed to build multi_experts.9.layer_list.3.net.1.bias (type:const)");
  res_68->getOutput(0)->setName("multi_experts.9.layer_list.3.net.1.bias:0");
  auto res_69=network->addConstant(Dims2{128,1},mWeightsMap["const_69"]);
  assert(res_69 && "failed to build multi_experts.10.layer_list.2.net.1.weight (type:const)");
  res_69->getOutput(0)->setName("multi_experts.10.layer_list.2.net.1.weight:0");
  auto res_70=network->addConstant(Dims2{128,1},mWeightsMap["const_70"]);
  assert(res_70 && "failed to build multi_experts.10.layer_list.2.net.1.bias (type:const)");
  res_70->getOutput(0)->setName("multi_experts.10.layer_list.2.net.1.bias:0");
  auto res_71=network->addConstant(Dims2{32,1},mWeightsMap["const_71"]);
  assert(res_71 && "failed to build multi_experts.10.layer_list.3.net.1.weight (type:const)");
  res_71->getOutput(0)->setName("multi_experts.10.layer_list.3.net.1.weight:0");
  auto res_72=network->addConstant(Dims2{32,1},mWeightsMap["const_72"]);
  assert(res_72 && "failed to build multi_experts.10.layer_list.3.net.1.bias (type:const)");
  res_72->getOutput(0)->setName("multi_experts.10.layer_list.3.net.1.bias:0");
  auto res_73=network->addConstant(Dims2{128,1},mWeightsMap["const_73"]);
  assert(res_73 && "failed to build multi_experts.11.layer_list.2.net.1.weight (type:const)");
  res_73->getOutput(0)->setName("multi_experts.11.layer_list.2.net.1.weight:0");
  auto res_74=network->addConstant(Dims2{128,1},mWeightsMap["const_74"]);
  assert(res_74 && "failed to build multi_experts.11.layer_list.2.net.1.bias (type:const)");
  res_74->getOutput(0)->setName("multi_experts.11.layer_list.2.net.1.bias:0");
  auto res_75=network->addConstant(Dims2{32,1},mWeightsMap["const_75"]);
  assert(res_75 && "failed to build multi_experts.11.layer_list.3.net.1.weight (type:const)");
  res_75->getOutput(0)->setName("multi_experts.11.layer_list.3.net.1.weight:0");
  auto res_76=network->addConstant(Dims2{32,1},mWeightsMap["const_76"]);
  assert(res_76 && "failed to build multi_experts.11.layer_list.3.net.1.bias (type:const)");
  res_76->getOutput(0)->setName("multi_experts.11.layer_list.3.net.1.bias:0");
  auto res_77=network->addConstant(Dims2{128,1},mWeightsMap["const_77"]);
  assert(res_77 && "failed to build multi_experts.12.layer_list.2.net.1.weight (type:const)");
  res_77->getOutput(0)->setName("multi_experts.12.layer_list.2.net.1.weight:0");
  auto res_78=network->addConstant(Dims2{128,1},mWeightsMap["const_78"]);
  assert(res_78 && "failed to build multi_experts.12.layer_list.2.net.1.bias (type:const)");
  res_78->getOutput(0)->setName("multi_experts.12.layer_list.2.net.1.bias:0");
  auto res_79=network->addConstant(Dims2{32,1},mWeightsMap["const_79"]);
  assert(res_79 && "failed to build multi_experts.12.layer_list.3.net.1.weight (type:const)");
  res_79->getOutput(0)->setName("multi_experts.12.layer_list.3.net.1.weight:0");
  auto res_80=network->addConstant(Dims2{32,1},mWeightsMap["const_80"]);
  assert(res_80 && "failed to build multi_experts.12.layer_list.3.net.1.bias (type:const)");
  res_80->getOutput(0)->setName("multi_experts.12.layer_list.3.net.1.bias:0");
  auto res_81=network->addConstant(Dims2{128,1},mWeightsMap["const_81"]);
  assert(res_81 && "failed to build multi_experts.13.layer_list.2.net.1.weight (type:const)");
  res_81->getOutput(0)->setName("multi_experts.13.layer_list.2.net.1.weight:0");
  auto res_82=network->addConstant(Dims2{128,1},mWeightsMap["const_82"]);
  assert(res_82 && "failed to build multi_experts.13.layer_list.2.net.1.bias (type:const)");
  res_82->getOutput(0)->setName("multi_experts.13.layer_list.2.net.1.bias:0");
  auto res_83=network->addConstant(Dims2{32,1},mWeightsMap["const_83"]);
  assert(res_83 && "failed to build multi_experts.13.layer_list.3.net.1.weight (type:const)");
  res_83->getOutput(0)->setName("multi_experts.13.layer_list.3.net.1.weight:0");
  auto res_84=network->addConstant(Dims2{32,1},mWeightsMap["const_84"]);
  assert(res_84 && "failed to build multi_experts.13.layer_list.3.net.1.bias (type:const)");
  res_84->getOutput(0)->setName("multi_experts.13.layer_list.3.net.1.bias:0");
  auto res_85=network->addConstant(Dims2{128,1},mWeightsMap["const_85"]);
  assert(res_85 && "failed to build multi_experts.14.layer_list.2.net.1.weight (type:const)");
  res_85->getOutput(0)->setName("multi_experts.14.layer_list.2.net.1.weight:0");
  auto res_86=network->addConstant(Dims2{128,1},mWeightsMap["const_86"]);
  assert(res_86 && "failed to build multi_experts.14.layer_list.2.net.1.bias (type:const)");
  res_86->getOutput(0)->setName("multi_experts.14.layer_list.2.net.1.bias:0");
  auto res_87=network->addConstant(Dims2{32,1},mWeightsMap["const_87"]);
  assert(res_87 && "failed to build multi_experts.14.layer_list.3.net.1.weight (type:const)");
  res_87->getOutput(0)->setName("multi_experts.14.layer_list.3.net.1.weight:0");
  auto res_88=network->addConstant(Dims2{32,1},mWeightsMap["const_88"]);
  assert(res_88 && "failed to build multi_experts.14.layer_list.3.net.1.bias (type:const)");
  res_88->getOutput(0)->setName("multi_experts.14.layer_list.3.net.1.bias:0");
  auto res_89=network->addConstant(Dims2{128,1},mWeightsMap["const_89"]);
  assert(res_89 && "failed to build multi_experts.15.layer_list.2.net.1.weight (type:const)");
  res_89->getOutput(0)->setName("multi_experts.15.layer_list.2.net.1.weight:0");
  auto res_90=network->addConstant(Dims2{128,1},mWeightsMap["const_90"]);
  assert(res_90 && "failed to build multi_experts.15.layer_list.2.net.1.bias (type:const)");
  res_90->getOutput(0)->setName("multi_experts.15.layer_list.2.net.1.bias:0");
  auto res_91=network->addConstant(Dims2{32,1},mWeightsMap["const_91"]);
  assert(res_91 && "failed to build multi_experts.15.layer_list.3.net.1.weight (type:const)");
  res_91->getOutput(0)->setName("multi_experts.15.layer_list.3.net.1.weight:0");
  auto res_92=network->addConstant(Dims2{32,1},mWeightsMap["const_92"]);
  assert(res_92 && "failed to build multi_experts.15.layer_list.3.net.1.bias (type:const)");
  res_92->getOutput(0)->setName("multi_experts.15.layer_list.3.net.1.bias:0");
  auto res_93=network->addConstant(Dims2{128,1},mWeightsMap["const_93"]);
  assert(res_93 && "failed to build multi_experts.16.layer_list.2.net.1.weight (type:const)");
  res_93->getOutput(0)->setName("multi_experts.16.layer_list.2.net.1.weight:0");
  auto res_94=network->addConstant(Dims2{128,1},mWeightsMap["const_94"]);
  assert(res_94 && "failed to build multi_experts.16.layer_list.2.net.1.bias (type:const)");
  res_94->getOutput(0)->setName("multi_experts.16.layer_list.2.net.1.bias:0");
  auto res_95=network->addConstant(Dims2{32,1},mWeightsMap["const_95"]);
  assert(res_95 && "failed to build multi_experts.16.layer_list.3.net.1.weight (type:const)");
  res_95->getOutput(0)->setName("multi_experts.16.layer_list.3.net.1.weight:0");
  auto res_96=network->addConstant(Dims2{32,1},mWeightsMap["const_96"]);
  assert(res_96 && "failed to build multi_experts.16.layer_list.3.net.1.bias (type:const)");
  res_96->getOutput(0)->setName("multi_experts.16.layer_list.3.net.1.bias:0");
  auto res_97=network->addConstant(Dims2{128,1},mWeightsMap["const_97"]);
  assert(res_97 && "failed to build multi_experts.17.layer_list.2.net.1.weight (type:const)");
  res_97->getOutput(0)->setName("multi_experts.17.layer_list.2.net.1.weight:0");
  auto res_98=network->addConstant(Dims2{128,1},mWeightsMap["const_98"]);
  assert(res_98 && "failed to build multi_experts.17.layer_list.2.net.1.bias (type:const)");
  res_98->getOutput(0)->setName("multi_experts.17.layer_list.2.net.1.bias:0");
  auto res_99=network->addConstant(Dims2{32,1},mWeightsMap["const_99"]);
  assert(res_99 && "failed to build multi_experts.17.layer_list.3.net.1.weight (type:const)");
  res_99->getOutput(0)->setName("multi_experts.17.layer_list.3.net.1.weight:0");
  auto res_100=network->addConstant(Dims2{32,1},mWeightsMap["const_100"]);
  assert(res_100 && "failed to build multi_experts.17.layer_list.3.net.1.bias (type:const)");
  res_100->getOutput(0)->setName("multi_experts.17.layer_list.3.net.1.bias:0");
  auto res_101=network->addConstant(Dims2{128,1},mWeightsMap["const_101"]);
  assert(res_101 && "failed to build multi_experts.18.layer_list.2.net.1.weight (type:const)");
  res_101->getOutput(0)->setName("multi_experts.18.layer_list.2.net.1.weight:0");
  auto res_102=network->addConstant(Dims2{128,1},mWeightsMap["const_102"]);
  assert(res_102 && "failed to build multi_experts.18.layer_list.2.net.1.bias (type:const)");
  res_102->getOutput(0)->setName("multi_experts.18.layer_list.2.net.1.bias:0");
  auto res_103=network->addConstant(Dims2{32,1},mWeightsMap["const_103"]);
  assert(res_103 && "failed to build multi_experts.18.layer_list.3.net.1.weight (type:const)");
  res_103->getOutput(0)->setName("multi_experts.18.layer_list.3.net.1.weight:0");
  auto res_104=network->addConstant(Dims2{32,1},mWeightsMap["const_104"]);
  assert(res_104 && "failed to build multi_experts.18.layer_list.3.net.1.bias (type:const)");
  res_104->getOutput(0)->setName("multi_experts.18.layer_list.3.net.1.bias:0");
  auto res_105=network->addConstant(Dims2{128,1},mWeightsMap["const_105"]);
  assert(res_105 && "failed to build multi_experts.19.layer_list.2.net.1.weight (type:const)");
  res_105->getOutput(0)->setName("multi_experts.19.layer_list.2.net.1.weight:0");
  auto res_106=network->addConstant(Dims2{128,1},mWeightsMap["const_106"]);
  assert(res_106 && "failed to build multi_experts.19.layer_list.2.net.1.bias (type:const)");
  res_106->getOutput(0)->setName("multi_experts.19.layer_list.2.net.1.bias:0");
  auto res_107=network->addConstant(Dims2{32,1},mWeightsMap["const_107"]);
  assert(res_107 && "failed to build multi_experts.19.layer_list.3.net.1.weight (type:const)");
  res_107->getOutput(0)->setName("multi_experts.19.layer_list.3.net.1.weight:0");
  auto res_108=network->addConstant(Dims2{32,1},mWeightsMap["const_108"]);
  assert(res_108 && "failed to build multi_experts.19.layer_list.3.net.1.bias (type:const)");
  res_108->getOutput(0)->setName("multi_experts.19.layer_list.3.net.1.bias:0");
  auto res_109=network->addConstant(Dims2{64,1},mWeightsMap["const_109"]);
  assert(res_109 && "failed to build app_logit_layer.0.layer_list.0.net.1.weight (type:const)");
  res_109->getOutput(0)->setName("app_logit_layer.0.layer_list.0.net.1.weight:0");
  auto res_110=network->addConstant(Dims2{64,1},mWeightsMap["const_110"]);
  assert(res_110 && "failed to build app_logit_layer.0.layer_list.0.net.1.bias (type:const)");
  res_110->getOutput(0)->setName("app_logit_layer.0.layer_list.0.net.1.bias:0");
  auto res_111=network->addConstant(Dims2{32,1},mWeightsMap["const_111"]);
  assert(res_111 && "failed to build app_logit_layer.0.layer_list.1.net.1.weight (type:const)");
  res_111->getOutput(0)->setName("app_logit_layer.0.layer_list.1.net.1.weight:0");
  auto res_112=network->addConstant(Dims2{32,1},mWeightsMap["const_112"]);
  assert(res_112 && "failed to build app_logit_layer.0.layer_list.1.net.1.bias (type:const)");
  res_112->getOutput(0)->setName("app_logit_layer.0.layer_list.1.net.1.bias:0");
  auto res_113=network->addConstant(Dims2{64,1},mWeightsMap["const_113"]);
  assert(res_113 && "failed to build app_logit_layer.1.layer_list.0.net.1.weight (type:const)");
  res_113->getOutput(0)->setName("app_logit_layer.1.layer_list.0.net.1.weight:0");
  auto res_114=network->addConstant(Dims2{64,1},mWeightsMap["const_114"]);
  assert(res_114 && "failed to build app_logit_layer.1.layer_list.0.net.1.bias (type:const)");
  res_114->getOutput(0)->setName("app_logit_layer.1.layer_list.0.net.1.bias:0");
  auto res_115=network->addConstant(Dims2{32,1},mWeightsMap["const_115"]);
  assert(res_115 && "failed to build app_logit_layer.1.layer_list.1.net.1.weight (type:const)");
  res_115->getOutput(0)->setName("app_logit_layer.1.layer_list.1.net.1.weight:0");
  auto res_116=network->addConstant(Dims2{32,1},mWeightsMap["const_116"]);
  assert(res_116 && "failed to build app_logit_layer.1.layer_list.1.net.1.bias (type:const)");
  res_116->getOutput(0)->setName("app_logit_layer.1.layer_list.1.net.1.bias:0");
  auto res_117=network->addConstant(Dims2{64,1},mWeightsMap["const_117"]);
  assert(res_117 && "failed to build app_logit_layer.2.layer_list.0.net.1.weight (type:const)");
  res_117->getOutput(0)->setName("app_logit_layer.2.layer_list.0.net.1.weight:0");
  auto res_118=network->addConstant(Dims2{64,1},mWeightsMap["const_118"]);
  assert(res_118 && "failed to build app_logit_layer.2.layer_list.0.net.1.bias (type:const)");
  res_118->getOutput(0)->setName("app_logit_layer.2.layer_list.0.net.1.bias:0");
  auto res_119=network->addConstant(Dims2{32,1},mWeightsMap["const_119"]);
  assert(res_119 && "failed to build app_logit_layer.2.layer_list.1.net.1.weight (type:const)");
  res_119->getOutput(0)->setName("app_logit_layer.2.layer_list.1.net.1.weight:0");
  auto res_120=network->addConstant(Dims2{32,1},mWeightsMap["const_120"]);
  assert(res_120 && "failed to build app_logit_layer.2.layer_list.1.net.1.bias (type:const)");
  res_120->getOutput(0)->setName("app_logit_layer.2.layer_list.1.net.1.bias:0");
  auto res_121=network->addConstant(Dims2{64,1},mWeightsMap["const_121"]);
  assert(res_121 && "failed to build app_logit_layer.3.layer_list.0.net.1.weight (type:const)");
  res_121->getOutput(0)->setName("app_logit_layer.3.layer_list.0.net.1.weight:0");
  auto res_122=network->addConstant(Dims2{64,1},mWeightsMap["const_122"]);
  assert(res_122 && "failed to build app_logit_layer.3.layer_list.0.net.1.bias (type:const)");
  res_122->getOutput(0)->setName("app_logit_layer.3.layer_list.0.net.1.bias:0");
  auto res_123=network->addConstant(Dims2{32,1},mWeightsMap["const_123"]);
  assert(res_123 && "failed to build app_logit_layer.3.layer_list.1.net.1.weight (type:const)");
  res_123->getOutput(0)->setName("app_logit_layer.3.layer_list.1.net.1.weight:0");
  auto res_124=network->addConstant(Dims2{32,1},mWeightsMap["const_124"]);
  assert(res_124 && "failed to build app_logit_layer.3.layer_list.1.net.1.bias (type:const)");
  res_124->getOutput(0)->setName("app_logit_layer.3.layer_list.1.net.1.bias:0");
  auto res_125=network->addConstant(Dims2{64,1},mWeightsMap["const_125"]);
  assert(res_125 && "failed to build app_logit_layer.4.layer_list.0.net.1.weight (type:const)");
  res_125->getOutput(0)->setName("app_logit_layer.4.layer_list.0.net.1.weight:0");
  auto res_126=network->addConstant(Dims2{64,1},mWeightsMap["const_126"]);
  assert(res_126 && "failed to build app_logit_layer.4.layer_list.0.net.1.bias (type:const)");
  res_126->getOutput(0)->setName("app_logit_layer.4.layer_list.0.net.1.bias:0");
  auto res_127=network->addConstant(Dims2{32,1},mWeightsMap["const_127"]);
  assert(res_127 && "failed to build app_logit_layer.4.layer_list.1.net.1.weight (type:const)");
  res_127->getOutput(0)->setName("app_logit_layer.4.layer_list.1.net.1.weight:0");
  auto res_128=network->addConstant(Dims2{32,1},mWeightsMap["const_128"]);
  assert(res_128 && "failed to build app_logit_layer.4.layer_list.1.net.1.bias (type:const)");
  res_128->getOutput(0)->setName("app_logit_layer.4.layer_list.1.net.1.bias:0");
  auto res_129=network->addConstant(Dims2{64,1},mWeightsMap["const_129"]);
  assert(res_129 && "failed to build app_logit_layer.5.layer_list.0.net.1.weight (type:const)");
  res_129->getOutput(0)->setName("app_logit_layer.5.layer_list.0.net.1.weight:0");
  auto res_130=network->addConstant(Dims2{64,1},mWeightsMap["const_130"]);
  assert(res_130 && "failed to build app_logit_layer.5.layer_list.0.net.1.bias (type:const)");
  res_130->getOutput(0)->setName("app_logit_layer.5.layer_list.0.net.1.bias:0");
  auto res_131=network->addConstant(Dims2{32,1},mWeightsMap["const_131"]);
  assert(res_131 && "failed to build app_logit_layer.5.layer_list.1.net.1.weight (type:const)");
  res_131->getOutput(0)->setName("app_logit_layer.5.layer_list.1.net.1.weight:0");
  auto res_132=network->addConstant(Dims2{32,1},mWeightsMap["const_132"]);
  assert(res_132 && "failed to build app_logit_layer.5.layer_list.1.net.1.bias (type:const)");
  res_132->getOutput(0)->setName("app_logit_layer.5.layer_list.1.net.1.bias:0");
  auto res_133=network->addConstant(Dims2{64,1},mWeightsMap["const_133"]);
  assert(res_133 && "failed to build app_logit_layer.6.layer_list.0.net.1.weight (type:const)");
  res_133->getOutput(0)->setName("app_logit_layer.6.layer_list.0.net.1.weight:0");
  auto res_134=network->addConstant(Dims2{64,1},mWeightsMap["const_134"]);
  assert(res_134 && "failed to build app_logit_layer.6.layer_list.0.net.1.bias (type:const)");
  res_134->getOutput(0)->setName("app_logit_layer.6.layer_list.0.net.1.bias:0");
  auto res_135=network->addConstant(Dims2{32,1},mWeightsMap["const_135"]);
  assert(res_135 && "failed to build app_logit_layer.6.layer_list.1.net.1.weight (type:const)");
  res_135->getOutput(0)->setName("app_logit_layer.6.layer_list.1.net.1.weight:0");
  auto res_136=network->addConstant(Dims2{32,1},mWeightsMap["const_136"]);
  assert(res_136 && "failed to build app_logit_layer.6.layer_list.1.net.1.bias (type:const)");
  res_136->getOutput(0)->setName("app_logit_layer.6.layer_list.1.net.1.bias:0");
  auto res_137=network->addConstant(Dims2{64,1},mWeightsMap["const_137"]);
  assert(res_137 && "failed to build app_logit_layer.7.layer_list.0.net.1.weight (type:const)");
  res_137->getOutput(0)->setName("app_logit_layer.7.layer_list.0.net.1.weight:0");
  auto res_138=network->addConstant(Dims2{64,1},mWeightsMap["const_138"]);
  assert(res_138 && "failed to build app_logit_layer.7.layer_list.0.net.1.bias (type:const)");
  res_138->getOutput(0)->setName("app_logit_layer.7.layer_list.0.net.1.bias:0");
  auto res_139=network->addConstant(Dims2{32,1},mWeightsMap["const_139"]);
  assert(res_139 && "failed to build app_logit_layer.7.layer_list.1.net.1.weight (type:const)");
  res_139->getOutput(0)->setName("app_logit_layer.7.layer_list.1.net.1.weight:0");
  auto res_140=network->addConstant(Dims2{32,1},mWeightsMap["const_140"]);
  assert(res_140 && "failed to build app_logit_layer.7.layer_list.1.net.1.bias (type:const)");
  res_140->getOutput(0)->setName("app_logit_layer.7.layer_list.1.net.1.bias:0");
  auto res_141=network->addConstant(Dims2{1,1},mWeightsMap["const_141"]);
  assert(res_141 && "failed to build Node_6070_modify.y (type:const)");
  res_141->getOutput(0)->setName("Node_6070_modify.y:0");
  auto res_142=network->addConstant(Dims2{1,1},mWeightsMap["const_142"]);
  assert(res_142 && "failed to build Node_6086_modify.y (type:const)");
  res_142->getOutput(0)->setName("Node_6086_modify.y:0");
  auto res_143=network->addConstant(Dims2{1,1},mWeightsMap["const_143"]);
  assert(res_143 && "failed to build Node_6134_modify.y (type:const)");
  res_143->getOutput(0)->setName("Node_6134_modify.y:0");
  auto res_144=network->addConstant(Dims2{1,1},mWeightsMap["const_144"]);
  assert(res_144 && "failed to build Node_6150_modify.y (type:const)");
  res_144->getOutput(0)->setName("Node_6150_modify.y:0");
  auto res_145=network->addConstant(Dims2{1,1},mWeightsMap["const_145"]);
  assert(res_145 && "failed to build Node_6198_modify.y (type:const)");
  res_145->getOutput(0)->setName("Node_6198_modify.y:0");
  auto res_146=network->addConstant(Dims2{1,1},mWeightsMap["const_146"]);
  assert(res_146 && "failed to build Node_6214_modify.y (type:const)");
  res_146->getOutput(0)->setName("Node_6214_modify.y:0");
  auto res_147=network->addConstant(Dims2{1,1},mWeightsMap["const_147"]);
  assert(res_147 && "failed to build Node_6262_modify.y (type:const)");
  res_147->getOutput(0)->setName("Node_6262_modify.y:0");
  auto res_148=network->addConstant(Dims2{1,1},mWeightsMap["const_148"]);
  assert(res_148 && "failed to build Node_6278_modify.y (type:const)");
  res_148->getOutput(0)->setName("Node_6278_modify.y:0");
  auto res_149=network->addConstant(Dims2{1,1},mWeightsMap["const_149"]);
  assert(res_149 && "failed to build Node_6326_modify.y (type:const)");
  res_149->getOutput(0)->setName("Node_6326_modify.y:0");
  auto res_150=network->addConstant(Dims2{1,1},mWeightsMap["const_150"]);
  assert(res_150 && "failed to build Node_6342_modify.y (type:const)");
  res_150->getOutput(0)->setName("Node_6342_modify.y:0");
  auto res_151=network->addConstant(Dims2{1,1},mWeightsMap["const_151"]);
  assert(res_151 && "failed to build Node_6390_modify.y (type:const)");
  res_151->getOutput(0)->setName("Node_6390_modify.y:0");
  auto res_152=network->addConstant(Dims2{1,1},mWeightsMap["const_152"]);
  assert(res_152 && "failed to build Node_6406_modify.y (type:const)");
  res_152->getOutput(0)->setName("Node_6406_modify.y:0");
  auto res_153=network->addConstant(Dims2{1,1},mWeightsMap["const_153"]);
  assert(res_153 && "failed to build Node_6454_modify.y (type:const)");
  res_153->getOutput(0)->setName("Node_6454_modify.y:0");
  auto res_154=network->addConstant(Dims2{1,1},mWeightsMap["const_154"]);
  assert(res_154 && "failed to build Node_6470_modify.y (type:const)");
  res_154->getOutput(0)->setName("Node_6470_modify.y:0");
  auto res_155=network->addConstant(Dims2{1,1},mWeightsMap["const_155"]);
  assert(res_155 && "failed to build Node_6518_modify.y (type:const)");
  res_155->getOutput(0)->setName("Node_6518_modify.y:0");
  auto res_156=network->addConstant(Dims2{1,1},mWeightsMap["const_156"]);
  assert(res_156 && "failed to build Node_6534_modify.y (type:const)");
  res_156->getOutput(0)->setName("Node_6534_modify.y:0");
  auto res_157=network->addConstant(Dims2{1,1},mWeightsMap["const_157"]);
  assert(res_157 && "failed to build Node_6582_modify.y (type:const)");
  res_157->getOutput(0)->setName("Node_6582_modify.y:0");
  auto res_158=network->addConstant(Dims2{1,1},mWeightsMap["const_158"]);
  assert(res_158 && "failed to build Node_6598_modify.y (type:const)");
  res_158->getOutput(0)->setName("Node_6598_modify.y:0");
  auto res_159=network->addConstant(Dims2{1,1},mWeightsMap["const_159"]);
  assert(res_159 && "failed to build Node_6646_modify.y (type:const)");
  res_159->getOutput(0)->setName("Node_6646_modify.y:0");
  auto res_160=network->addConstant(Dims2{1,1},mWeightsMap["const_160"]);
  assert(res_160 && "failed to build Node_6662_modify.y (type:const)");
  res_160->getOutput(0)->setName("Node_6662_modify.y:0");
  auto res_161=network->addConstant(Dims2{1,1},mWeightsMap["const_161"]);
  assert(res_161 && "failed to build Node_6710_modify.y (type:const)");
  res_161->getOutput(0)->setName("Node_6710_modify.y:0");
  auto res_162=network->addConstant(Dims2{1,1},mWeightsMap["const_162"]);
  assert(res_162 && "failed to build Node_6726_modify.y (type:const)");
  res_162->getOutput(0)->setName("Node_6726_modify.y:0");
  auto res_163=network->addConstant(Dims2{1,1},mWeightsMap["const_163"]);
  assert(res_163 && "failed to build Node_6774_modify.y (type:const)");
  res_163->getOutput(0)->setName("Node_6774_modify.y:0");
  auto res_164=network->addConstant(Dims2{1,1},mWeightsMap["const_164"]);
  assert(res_164 && "failed to build Node_6790_modify.y (type:const)");
  res_164->getOutput(0)->setName("Node_6790_modify.y:0");
  auto res_165=network->addConstant(Dims2{1,1},mWeightsMap["const_165"]);
  assert(res_165 && "failed to build Node_6838_modify.y (type:const)");
  res_165->getOutput(0)->setName("Node_6838_modify.y:0");
  auto res_166=network->addConstant(Dims2{1,1},mWeightsMap["const_166"]);
  assert(res_166 && "failed to build Node_6854_modify.y (type:const)");
  res_166->getOutput(0)->setName("Node_6854_modify.y:0");
  auto res_167=network->addConstant(Dims2{1,1},mWeightsMap["const_167"]);
  assert(res_167 && "failed to build Node_6902_modify.y (type:const)");
  res_167->getOutput(0)->setName("Node_6902_modify.y:0");
  auto res_168=network->addConstant(Dims2{1,1},mWeightsMap["const_168"]);
  assert(res_168 && "failed to build Node_6918_modify.y (type:const)");
  res_168->getOutput(0)->setName("Node_6918_modify.y:0");
  auto res_169=network->addConstant(Dims2{1,1},mWeightsMap["const_169"]);
  assert(res_169 && "failed to build Node_6966_modify.y (type:const)");
  res_169->getOutput(0)->setName("Node_6966_modify.y:0");
  auto res_170=network->addConstant(Dims2{1,1},mWeightsMap["const_170"]);
  assert(res_170 && "failed to build Node_6982_modify.y (type:const)");
  res_170->getOutput(0)->setName("Node_6982_modify.y:0");
  auto res_171=network->addConstant(Dims2{1,1},mWeightsMap["const_171"]);
  assert(res_171 && "failed to build Node_7030_modify.y (type:const)");
  res_171->getOutput(0)->setName("Node_7030_modify.y:0");
  auto res_172=network->addConstant(Dims2{1,1},mWeightsMap["const_172"]);
  assert(res_172 && "failed to build Node_7046_modify.y (type:const)");
  res_172->getOutput(0)->setName("Node_7046_modify.y:0");
  auto res_173=network->addConstant(Dims2{1,1},mWeightsMap["const_173"]);
  assert(res_173 && "failed to build Node_7094_modify.y (type:const)");
  res_173->getOutput(0)->setName("Node_7094_modify.y:0");
  auto res_174=network->addConstant(Dims2{1,1},mWeightsMap["const_174"]);
  assert(res_174 && "failed to build Node_7110_modify.y (type:const)");
  res_174->getOutput(0)->setName("Node_7110_modify.y:0");
  auto res_175=network->addConstant(Dims2{1,1},mWeightsMap["const_175"]);
  assert(res_175 && "failed to build Node_7158_modify.y (type:const)");
  res_175->getOutput(0)->setName("Node_7158_modify.y:0");
  auto res_176=network->addConstant(Dims2{1,1},mWeightsMap["const_176"]);
  assert(res_176 && "failed to build Node_7174_modify.y (type:const)");
  res_176->getOutput(0)->setName("Node_7174_modify.y:0");
  auto res_177=network->addConstant(Dims2{1,1},mWeightsMap["const_177"]);
  assert(res_177 && "failed to build Node_7222_modify.y (type:const)");
  res_177->getOutput(0)->setName("Node_7222_modify.y:0");
  auto res_178=network->addConstant(Dims2{1,1},mWeightsMap["const_178"]);
  assert(res_178 && "failed to build Node_7238_modify.y (type:const)");
  res_178->getOutput(0)->setName("Node_7238_modify.y:0");
  auto res_179=network->addConstant(Dims2{1,1},mWeightsMap["const_179"]);
  assert(res_179 && "failed to build Node_7286_modify.y (type:const)");
  res_179->getOutput(0)->setName("Node_7286_modify.y:0");
  auto res_180=network->addConstant(Dims2{1,1},mWeightsMap["const_180"]);
  assert(res_180 && "failed to build Node_7302_modify.y (type:const)");
  res_180->getOutput(0)->setName("Node_7302_modify.y:0");
  auto res_181=network->addConstant(Dims2{1,1},mWeightsMap["const_181"]);
  assert(res_181 && "failed to build Node_7418_modify.y (type:const)");
  res_181->getOutput(0)->setName("Node_7418_modify.y:0");
  auto res_182=network->addConstant(Dims2{1,1},mWeightsMap["const_182"]);
  assert(res_182 && "failed to build Node_7434_modify.y (type:const)");
  res_182->getOutput(0)->setName("Node_7434_modify.y:0");
  auto res_183=network->addConstant(Dims2{1,1},mWeightsMap["const_183"]);
  assert(res_183 && "failed to build Node_7455_modify.y (type:const)");
  res_183->getOutput(0)->setName("Node_7455_modify.y:0");
  auto res_184=network->addConstant(Dims2{1,1},mWeightsMap["const_184"]);
  assert(res_184 && "failed to build Node_7471_modify.y (type:const)");
  res_184->getOutput(0)->setName("Node_7471_modify.y:0");
  auto res_185=network->addConstant(Dims2{1,1},mWeightsMap["const_185"]);
  assert(res_185 && "failed to build Node_7492_modify.y (type:const)");
  res_185->getOutput(0)->setName("Node_7492_modify.y:0");
  auto res_186=network->addConstant(Dims2{1,1},mWeightsMap["const_186"]);
  assert(res_186 && "failed to build Node_7508_modify.y (type:const)");
  res_186->getOutput(0)->setName("Node_7508_modify.y:0");
  auto res_187=network->addConstant(Dims2{1,1},mWeightsMap["const_187"]);
  assert(res_187 && "failed to build Node_7529_modify.y (type:const)");
  res_187->getOutput(0)->setName("Node_7529_modify.y:0");
  auto res_188=network->addConstant(Dims2{1,1},mWeightsMap["const_188"]);
  assert(res_188 && "failed to build Node_7545_modify.y (type:const)");
  res_188->getOutput(0)->setName("Node_7545_modify.y:0");
  auto res_189=network->addConstant(Dims2{1,1},mWeightsMap["const_189"]);
  assert(res_189 && "failed to build Node_7566_modify.y (type:const)");
  res_189->getOutput(0)->setName("Node_7566_modify.y:0");
  auto res_190=network->addConstant(Dims2{1,1},mWeightsMap["const_190"]);
  assert(res_190 && "failed to build Node_7582_modify.y (type:const)");
  res_190->getOutput(0)->setName("Node_7582_modify.y:0");
  auto res_191=network->addConstant(Dims2{1,1},mWeightsMap["const_191"]);
  assert(res_191 && "failed to build Node_7603_modify.y (type:const)");
  res_191->getOutput(0)->setName("Node_7603_modify.y:0");
  auto res_192=network->addConstant(Dims2{1,1},mWeightsMap["const_192"]);
  assert(res_192 && "failed to build Node_7619_modify.y (type:const)");
  res_192->getOutput(0)->setName("Node_7619_modify.y:0");
  auto res_193=network->addConstant(Dims2{1,1},mWeightsMap["const_193"]);
  assert(res_193 && "failed to build Node_7640_modify.y (type:const)");
  res_193->getOutput(0)->setName("Node_7640_modify.y:0");
  auto res_194=network->addConstant(Dims2{1,1},mWeightsMap["const_194"]);
  assert(res_194 && "failed to build Node_7656_modify.y (type:const)");
  res_194->getOutput(0)->setName("Node_7656_modify.y:0");
  auto res_195=network->addConstant(Dims2{1,1},mWeightsMap["const_195"]);
  assert(res_195 && "failed to build Node_7677_modify.y (type:const)");
  res_195->getOutput(0)->setName("Node_7677_modify.y:0");
  auto res_196=network->addConstant(Dims2{1,1},mWeightsMap["const_196"]);
  assert(res_196 && "failed to build Node_7693_modify.y (type:const)");
  res_196->getOutput(0)->setName("Node_7693_modify.y:0");
  auto res_197=network->addConstant(Dims2{1,1},mWeightsMap["const_197"]);
  assert(res_197 && "failed to build Node_6070_power.power (type:const)");
  res_197->getOutput(0)->setName("Node_6070_power.power:0");
  auto res_198=network->addConstant(Dims2{1,1},mWeightsMap["const_198"]);
  assert(res_198 && "failed to build Node_6086_power.power (type:const)");
  res_198->getOutput(0)->setName("Node_6086_power.power:0");
  auto res_199=network->addConstant(Dims2{1,1},mWeightsMap["const_199"]);
  assert(res_199 && "failed to build Node_6134_power.power (type:const)");
  res_199->getOutput(0)->setName("Node_6134_power.power:0");
  auto res_200=network->addConstant(Dims2{1,1},mWeightsMap["const_200"]);
  assert(res_200 && "failed to build Node_6150_power.power (type:const)");
  res_200->getOutput(0)->setName("Node_6150_power.power:0");
  auto res_201=network->addConstant(Dims2{1,1},mWeightsMap["const_201"]);
  assert(res_201 && "failed to build Node_6198_power.power (type:const)");
  res_201->getOutput(0)->setName("Node_6198_power.power:0");
  auto res_202=network->addConstant(Dims2{1,1},mWeightsMap["const_202"]);
  assert(res_202 && "failed to build Node_6214_power.power (type:const)");
  res_202->getOutput(0)->setName("Node_6214_power.power:0");
  auto res_203=network->addConstant(Dims2{1,1},mWeightsMap["const_203"]);
  assert(res_203 && "failed to build Node_6262_power.power (type:const)");
  res_203->getOutput(0)->setName("Node_6262_power.power:0");
  auto res_204=network->addConstant(Dims2{1,1},mWeightsMap["const_204"]);
  assert(res_204 && "failed to build Node_6278_power.power (type:const)");
  res_204->getOutput(0)->setName("Node_6278_power.power:0");
  auto res_205=network->addConstant(Dims2{1,1},mWeightsMap["const_205"]);
  assert(res_205 && "failed to build Node_6326_power.power (type:const)");
  res_205->getOutput(0)->setName("Node_6326_power.power:0");
  auto res_206=network->addConstant(Dims2{1,1},mWeightsMap["const_206"]);
  assert(res_206 && "failed to build Node_6342_power.power (type:const)");
  res_206->getOutput(0)->setName("Node_6342_power.power:0");
  auto res_207=network->addConstant(Dims2{1,1},mWeightsMap["const_207"]);
  assert(res_207 && "failed to build Node_6390_power.power (type:const)");
  res_207->getOutput(0)->setName("Node_6390_power.power:0");
  auto res_208=network->addConstant(Dims2{1,1},mWeightsMap["const_208"]);
  assert(res_208 && "failed to build Node_6406_power.power (type:const)");
  res_208->getOutput(0)->setName("Node_6406_power.power:0");
  auto res_209=network->addConstant(Dims2{1,1},mWeightsMap["const_209"]);
  assert(res_209 && "failed to build Node_6454_power.power (type:const)");
  res_209->getOutput(0)->setName("Node_6454_power.power:0");
  auto res_210=network->addConstant(Dims2{1,1},mWeightsMap["const_210"]);
  assert(res_210 && "failed to build Node_6470_power.power (type:const)");
  res_210->getOutput(0)->setName("Node_6470_power.power:0");
  auto res_211=network->addConstant(Dims2{1,1},mWeightsMap["const_211"]);
  assert(res_211 && "failed to build Node_6518_power.power (type:const)");
  res_211->getOutput(0)->setName("Node_6518_power.power:0");
  auto res_212=network->addConstant(Dims2{1,1},mWeightsMap["const_212"]);
  assert(res_212 && "failed to build Node_6534_power.power (type:const)");
  res_212->getOutput(0)->setName("Node_6534_power.power:0");
  auto res_213=network->addConstant(Dims2{1,1},mWeightsMap["const_213"]);
  assert(res_213 && "failed to build Node_6582_power.power (type:const)");
  res_213->getOutput(0)->setName("Node_6582_power.power:0");
  auto res_214=network->addConstant(Dims2{1,1},mWeightsMap["const_214"]);
  assert(res_214 && "failed to build Node_6598_power.power (type:const)");
  res_214->getOutput(0)->setName("Node_6598_power.power:0");
  auto res_215=network->addConstant(Dims2{1,1},mWeightsMap["const_215"]);
  assert(res_215 && "failed to build Node_6646_power.power (type:const)");
  res_215->getOutput(0)->setName("Node_6646_power.power:0");
  auto res_216=network->addConstant(Dims2{1,1},mWeightsMap["const_216"]);
  assert(res_216 && "failed to build Node_6662_power.power (type:const)");
  res_216->getOutput(0)->setName("Node_6662_power.power:0");
  auto res_217=network->addConstant(Dims2{1,1},mWeightsMap["const_217"]);
  assert(res_217 && "failed to build Node_6710_power.power (type:const)");
  res_217->getOutput(0)->setName("Node_6710_power.power:0");
  auto res_218=network->addConstant(Dims2{1,1},mWeightsMap["const_218"]);
  assert(res_218 && "failed to build Node_6726_power.power (type:const)");
  res_218->getOutput(0)->setName("Node_6726_power.power:0");
  auto res_219=network->addConstant(Dims2{1,1},mWeightsMap["const_219"]);
  assert(res_219 && "failed to build Node_6774_power.power (type:const)");
  res_219->getOutput(0)->setName("Node_6774_power.power:0");
  auto res_220=network->addConstant(Dims2{1,1},mWeightsMap["const_220"]);
  assert(res_220 && "failed to build Node_6790_power.power (type:const)");
  res_220->getOutput(0)->setName("Node_6790_power.power:0");
  auto res_221=network->addConstant(Dims2{1,1},mWeightsMap["const_221"]);
  assert(res_221 && "failed to build Node_6838_power.power (type:const)");
  res_221->getOutput(0)->setName("Node_6838_power.power:0");
  auto res_222=network->addConstant(Dims2{1,1},mWeightsMap["const_222"]);
  assert(res_222 && "failed to build Node_6854_power.power (type:const)");
  res_222->getOutput(0)->setName("Node_6854_power.power:0");
  auto res_223=network->addConstant(Dims2{1,1},mWeightsMap["const_223"]);
  assert(res_223 && "failed to build Node_6902_power.power (type:const)");
  res_223->getOutput(0)->setName("Node_6902_power.power:0");
  auto res_224=network->addConstant(Dims2{1,1},mWeightsMap["const_224"]);
  assert(res_224 && "failed to build Node_6918_power.power (type:const)");
  res_224->getOutput(0)->setName("Node_6918_power.power:0");
  auto res_225=network->addConstant(Dims2{1,1},mWeightsMap["const_225"]);
  assert(res_225 && "failed to build Node_6966_power.power (type:const)");
  res_225->getOutput(0)->setName("Node_6966_power.power:0");
  auto res_226=network->addConstant(Dims2{1,1},mWeightsMap["const_226"]);
  assert(res_226 && "failed to build Node_6982_power.power (type:const)");
  res_226->getOutput(0)->setName("Node_6982_power.power:0");
  auto res_227=network->addConstant(Dims2{1,1},mWeightsMap["const_227"]);
  assert(res_227 && "failed to build Node_7030_power.power (type:const)");
  res_227->getOutput(0)->setName("Node_7030_power.power:0");
  auto res_228=network->addConstant(Dims2{1,1},mWeightsMap["const_228"]);
  assert(res_228 && "failed to build Node_7046_power.power (type:const)");
  res_228->getOutput(0)->setName("Node_7046_power.power:0");
  auto res_229=network->addConstant(Dims2{1,1},mWeightsMap["const_229"]);
  assert(res_229 && "failed to build Node_7094_power.power (type:const)");
  res_229->getOutput(0)->setName("Node_7094_power.power:0");
  auto res_230=network->addConstant(Dims2{1,1},mWeightsMap["const_230"]);
  assert(res_230 && "failed to build Node_7110_power.power (type:const)");
  res_230->getOutput(0)->setName("Node_7110_power.power:0");
  auto res_231=network->addConstant(Dims2{1,1},mWeightsMap["const_231"]);
  assert(res_231 && "failed to build Node_7158_power.power (type:const)");
  res_231->getOutput(0)->setName("Node_7158_power.power:0");
  auto res_232=network->addConstant(Dims2{1,1},mWeightsMap["const_232"]);
  assert(res_232 && "failed to build Node_7174_power.power (type:const)");
  res_232->getOutput(0)->setName("Node_7174_power.power:0");
  auto res_233=network->addConstant(Dims2{1,1},mWeightsMap["const_233"]);
  assert(res_233 && "failed to build Node_7222_power.power (type:const)");
  res_233->getOutput(0)->setName("Node_7222_power.power:0");
  auto res_234=network->addConstant(Dims2{1,1},mWeightsMap["const_234"]);
  assert(res_234 && "failed to build Node_7238_power.power (type:const)");
  res_234->getOutput(0)->setName("Node_7238_power.power:0");
  auto res_235=network->addConstant(Dims2{1,1},mWeightsMap["const_235"]);
  assert(res_235 && "failed to build Node_7286_power.power (type:const)");
  res_235->getOutput(0)->setName("Node_7286_power.power:0");
  auto res_236=network->addConstant(Dims2{1,1},mWeightsMap["const_236"]);
  assert(res_236 && "failed to build Node_7302_power.power (type:const)");
  res_236->getOutput(0)->setName("Node_7302_power.power:0");
  auto res_237=network->addConstant(Dims2{1,1},mWeightsMap["const_237"]);
  assert(res_237 && "failed to build Node_7418_power.power (type:const)");
  res_237->getOutput(0)->setName("Node_7418_power.power:0");
  auto res_238=network->addConstant(Dims2{1,1},mWeightsMap["const_238"]);
  assert(res_238 && "failed to build Node_7434_power.power (type:const)");
  res_238->getOutput(0)->setName("Node_7434_power.power:0");
  auto res_239=network->addConstant(Dims2{1,1},mWeightsMap["const_239"]);
  assert(res_239 && "failed to build Node_7455_power.power (type:const)");
  res_239->getOutput(0)->setName("Node_7455_power.power:0");
  auto res_240=network->addConstant(Dims2{1,1},mWeightsMap["const_240"]);
  assert(res_240 && "failed to build Node_7471_power.power (type:const)");
  res_240->getOutput(0)->setName("Node_7471_power.power:0");
  auto res_241=network->addConstant(Dims2{1,1},mWeightsMap["const_241"]);
  assert(res_241 && "failed to build Node_7492_power.power (type:const)");
  res_241->getOutput(0)->setName("Node_7492_power.power:0");
  auto res_242=network->addConstant(Dims2{1,1},mWeightsMap["const_242"]);
  assert(res_242 && "failed to build Node_7508_power.power (type:const)");
  res_242->getOutput(0)->setName("Node_7508_power.power:0");
  auto res_243=network->addConstant(Dims2{1,1},mWeightsMap["const_243"]);
  assert(res_243 && "failed to build Node_7529_power.power (type:const)");
  res_243->getOutput(0)->setName("Node_7529_power.power:0");
  auto res_244=network->addConstant(Dims2{1,1},mWeightsMap["const_244"]);
  assert(res_244 && "failed to build Node_7545_power.power (type:const)");
  res_244->getOutput(0)->setName("Node_7545_power.power:0");
  auto res_245=network->addConstant(Dims2{1,1},mWeightsMap["const_245"]);
  assert(res_245 && "failed to build Node_7566_power.power (type:const)");
  res_245->getOutput(0)->setName("Node_7566_power.power:0");
  auto res_246=network->addConstant(Dims2{1,1},mWeightsMap["const_246"]);
  assert(res_246 && "failed to build Node_7582_power.power (type:const)");
  res_246->getOutput(0)->setName("Node_7582_power.power:0");
  auto res_247=network->addConstant(Dims2{1,1},mWeightsMap["const_247"]);
  assert(res_247 && "failed to build Node_7603_power.power (type:const)");
  res_247->getOutput(0)->setName("Node_7603_power.power:0");
  auto res_248=network->addConstant(Dims2{1,1},mWeightsMap["const_248"]);
  assert(res_248 && "failed to build Node_7619_power.power (type:const)");
  res_248->getOutput(0)->setName("Node_7619_power.power:0");
  auto res_249=network->addConstant(Dims2{1,1},mWeightsMap["const_249"]);
  assert(res_249 && "failed to build Node_7640_power.power (type:const)");
  res_249->getOutput(0)->setName("Node_7640_power.power:0");
  auto res_250=network->addConstant(Dims2{1,1},mWeightsMap["const_250"]);
  assert(res_250 && "failed to build Node_7656_power.power (type:const)");
  res_250->getOutput(0)->setName("Node_7656_power.power:0");
  auto res_251=network->addConstant(Dims2{1,1},mWeightsMap["const_251"]);
  assert(res_251 && "failed to build Node_7677_power.power (type:const)");
  res_251->getOutput(0)->setName("Node_7677_power.power:0");
  auto res_252=network->addConstant(Dims2{1,1},mWeightsMap["const_252"]);
  assert(res_252 && "failed to build Node_7693_power.power (type:const)");
  res_252->getOutput(0)->setName("Node_7693_power.power:0");
  auto res_253=network->addShuffle(*res_29->getOutput(0));
  res_253->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_253 && "failed to build multi_experts.0.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_253->getOutput(0)->setName("multi_experts.0.layer_list.2.net.1.weight_reshape:0");
  auto res_254=network->addShuffle(*res_30->getOutput(0));
  res_254->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_254 && "failed to build multi_experts.0.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_254->getOutput(0)->setName("multi_experts.0.layer_list.2.net.1.bias_reshape:0");
  auto res_255=network->addShuffle(*res_31->getOutput(0));
  res_255->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_255 && "failed to build multi_experts.0.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_255->getOutput(0)->setName("multi_experts.0.layer_list.3.net.1.weight_reshape:0");
  auto res_256=network->addShuffle(*res_32->getOutput(0));
  res_256->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_256 && "failed to build multi_experts.0.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_256->getOutput(0)->setName("multi_experts.0.layer_list.3.net.1.bias_reshape:0");
  auto res_257=network->addShuffle(*res_33->getOutput(0));
  res_257->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_257 && "failed to build multi_experts.1.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_257->getOutput(0)->setName("multi_experts.1.layer_list.2.net.1.weight_reshape:0");
  auto res_258=network->addShuffle(*res_34->getOutput(0));
  res_258->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_258 && "failed to build multi_experts.1.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_258->getOutput(0)->setName("multi_experts.1.layer_list.2.net.1.bias_reshape:0");
  auto res_259=network->addShuffle(*res_35->getOutput(0));
  res_259->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_259 && "failed to build multi_experts.1.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_259->getOutput(0)->setName("multi_experts.1.layer_list.3.net.1.weight_reshape:0");
  auto res_260=network->addShuffle(*res_36->getOutput(0));
  res_260->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_260 && "failed to build multi_experts.1.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_260->getOutput(0)->setName("multi_experts.1.layer_list.3.net.1.bias_reshape:0");
  auto res_261=network->addShuffle(*res_37->getOutput(0));
  res_261->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_261 && "failed to build multi_experts.2.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_261->getOutput(0)->setName("multi_experts.2.layer_list.2.net.1.weight_reshape:0");
  auto res_262=network->addShuffle(*res_38->getOutput(0));
  res_262->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_262 && "failed to build multi_experts.2.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_262->getOutput(0)->setName("multi_experts.2.layer_list.2.net.1.bias_reshape:0");
  auto res_263=network->addShuffle(*res_39->getOutput(0));
  res_263->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_263 && "failed to build multi_experts.2.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_263->getOutput(0)->setName("multi_experts.2.layer_list.3.net.1.weight_reshape:0");
  auto res_264=network->addShuffle(*res_40->getOutput(0));
  res_264->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_264 && "failed to build multi_experts.2.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_264->getOutput(0)->setName("multi_experts.2.layer_list.3.net.1.bias_reshape:0");
  auto res_265=network->addShuffle(*res_41->getOutput(0));
  res_265->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_265 && "failed to build multi_experts.3.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_265->getOutput(0)->setName("multi_experts.3.layer_list.2.net.1.weight_reshape:0");
  auto res_266=network->addShuffle(*res_42->getOutput(0));
  res_266->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_266 && "failed to build multi_experts.3.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_266->getOutput(0)->setName("multi_experts.3.layer_list.2.net.1.bias_reshape:0");
  auto res_267=network->addShuffle(*res_43->getOutput(0));
  res_267->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_267 && "failed to build multi_experts.3.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_267->getOutput(0)->setName("multi_experts.3.layer_list.3.net.1.weight_reshape:0");
  auto res_268=network->addShuffle(*res_44->getOutput(0));
  res_268->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_268 && "failed to build multi_experts.3.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_268->getOutput(0)->setName("multi_experts.3.layer_list.3.net.1.bias_reshape:0");
  auto res_269=network->addShuffle(*res_45->getOutput(0));
  res_269->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_269 && "failed to build multi_experts.4.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_269->getOutput(0)->setName("multi_experts.4.layer_list.2.net.1.weight_reshape:0");
  auto res_270=network->addShuffle(*res_46->getOutput(0));
  res_270->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_270 && "failed to build multi_experts.4.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_270->getOutput(0)->setName("multi_experts.4.layer_list.2.net.1.bias_reshape:0");
  auto res_271=network->addShuffle(*res_47->getOutput(0));
  res_271->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_271 && "failed to build multi_experts.4.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_271->getOutput(0)->setName("multi_experts.4.layer_list.3.net.1.weight_reshape:0");
  auto res_272=network->addShuffle(*res_48->getOutput(0));
  res_272->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_272 && "failed to build multi_experts.4.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_272->getOutput(0)->setName("multi_experts.4.layer_list.3.net.1.bias_reshape:0");
  auto res_273=network->addShuffle(*res_49->getOutput(0));
  res_273->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_273 && "failed to build multi_experts.5.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_273->getOutput(0)->setName("multi_experts.5.layer_list.2.net.1.weight_reshape:0");
  auto res_274=network->addShuffle(*res_50->getOutput(0));
  res_274->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_274 && "failed to build multi_experts.5.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_274->getOutput(0)->setName("multi_experts.5.layer_list.2.net.1.bias_reshape:0");
  auto res_275=network->addShuffle(*res_51->getOutput(0));
  res_275->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_275 && "failed to build multi_experts.5.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_275->getOutput(0)->setName("multi_experts.5.layer_list.3.net.1.weight_reshape:0");
  auto res_276=network->addShuffle(*res_52->getOutput(0));
  res_276->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_276 && "failed to build multi_experts.5.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_276->getOutput(0)->setName("multi_experts.5.layer_list.3.net.1.bias_reshape:0");
  auto res_277=network->addShuffle(*res_53->getOutput(0));
  res_277->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_277 && "failed to build multi_experts.6.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_277->getOutput(0)->setName("multi_experts.6.layer_list.2.net.1.weight_reshape:0");
  auto res_278=network->addShuffle(*res_54->getOutput(0));
  res_278->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_278 && "failed to build multi_experts.6.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_278->getOutput(0)->setName("multi_experts.6.layer_list.2.net.1.bias_reshape:0");
  auto res_279=network->addShuffle(*res_55->getOutput(0));
  res_279->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_279 && "failed to build multi_experts.6.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_279->getOutput(0)->setName("multi_experts.6.layer_list.3.net.1.weight_reshape:0");
  auto res_280=network->addShuffle(*res_56->getOutput(0));
  res_280->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_280 && "failed to build multi_experts.6.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_280->getOutput(0)->setName("multi_experts.6.layer_list.3.net.1.bias_reshape:0");
  auto res_281=network->addShuffle(*res_57->getOutput(0));
  res_281->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_281 && "failed to build multi_experts.7.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_281->getOutput(0)->setName("multi_experts.7.layer_list.2.net.1.weight_reshape:0");
  auto res_282=network->addShuffle(*res_58->getOutput(0));
  res_282->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_282 && "failed to build multi_experts.7.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_282->getOutput(0)->setName("multi_experts.7.layer_list.2.net.1.bias_reshape:0");
  auto res_283=network->addShuffle(*res_59->getOutput(0));
  res_283->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_283 && "failed to build multi_experts.7.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_283->getOutput(0)->setName("multi_experts.7.layer_list.3.net.1.weight_reshape:0");
  auto res_284=network->addShuffle(*res_60->getOutput(0));
  res_284->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_284 && "failed to build multi_experts.7.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_284->getOutput(0)->setName("multi_experts.7.layer_list.3.net.1.bias_reshape:0");
  auto res_285=network->addShuffle(*res_61->getOutput(0));
  res_285->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_285 && "failed to build multi_experts.8.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_285->getOutput(0)->setName("multi_experts.8.layer_list.2.net.1.weight_reshape:0");
  auto res_286=network->addShuffle(*res_62->getOutput(0));
  res_286->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_286 && "failed to build multi_experts.8.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_286->getOutput(0)->setName("multi_experts.8.layer_list.2.net.1.bias_reshape:0");
  auto res_287=network->addShuffle(*res_63->getOutput(0));
  res_287->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_287 && "failed to build multi_experts.8.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_287->getOutput(0)->setName("multi_experts.8.layer_list.3.net.1.weight_reshape:0");
  auto res_288=network->addShuffle(*res_64->getOutput(0));
  res_288->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_288 && "failed to build multi_experts.8.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_288->getOutput(0)->setName("multi_experts.8.layer_list.3.net.1.bias_reshape:0");
  auto res_289=network->addShuffle(*res_65->getOutput(0));
  res_289->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_289 && "failed to build multi_experts.9.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_289->getOutput(0)->setName("multi_experts.9.layer_list.2.net.1.weight_reshape:0");
  auto res_290=network->addShuffle(*res_66->getOutput(0));
  res_290->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_290 && "failed to build multi_experts.9.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_290->getOutput(0)->setName("multi_experts.9.layer_list.2.net.1.bias_reshape:0");
  auto res_291=network->addShuffle(*res_67->getOutput(0));
  res_291->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_291 && "failed to build multi_experts.9.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_291->getOutput(0)->setName("multi_experts.9.layer_list.3.net.1.weight_reshape:0");
  auto res_292=network->addShuffle(*res_68->getOutput(0));
  res_292->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_292 && "failed to build multi_experts.9.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_292->getOutput(0)->setName("multi_experts.9.layer_list.3.net.1.bias_reshape:0");
  auto res_293=network->addShuffle(*res_69->getOutput(0));
  res_293->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_293 && "failed to build multi_experts.10.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_293->getOutput(0)->setName("multi_experts.10.layer_list.2.net.1.weight_reshape:0");
  auto res_294=network->addShuffle(*res_70->getOutput(0));
  res_294->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_294 && "failed to build multi_experts.10.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_294->getOutput(0)->setName("multi_experts.10.layer_list.2.net.1.bias_reshape:0");
  auto res_295=network->addShuffle(*res_71->getOutput(0));
  res_295->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_295 && "failed to build multi_experts.10.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_295->getOutput(0)->setName("multi_experts.10.layer_list.3.net.1.weight_reshape:0");
  auto res_296=network->addShuffle(*res_72->getOutput(0));
  res_296->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_296 && "failed to build multi_experts.10.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_296->getOutput(0)->setName("multi_experts.10.layer_list.3.net.1.bias_reshape:0");
  auto res_297=network->addShuffle(*res_73->getOutput(0));
  res_297->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_297 && "failed to build multi_experts.11.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_297->getOutput(0)->setName("multi_experts.11.layer_list.2.net.1.weight_reshape:0");
  auto res_298=network->addShuffle(*res_74->getOutput(0));
  res_298->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_298 && "failed to build multi_experts.11.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_298->getOutput(0)->setName("multi_experts.11.layer_list.2.net.1.bias_reshape:0");
  auto res_299=network->addShuffle(*res_75->getOutput(0));
  res_299->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_299 && "failed to build multi_experts.11.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_299->getOutput(0)->setName("multi_experts.11.layer_list.3.net.1.weight_reshape:0");
  auto res_300=network->addShuffle(*res_76->getOutput(0));
  res_300->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_300 && "failed to build multi_experts.11.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_300->getOutput(0)->setName("multi_experts.11.layer_list.3.net.1.bias_reshape:0");
  auto res_301=network->addShuffle(*res_77->getOutput(0));
  res_301->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_301 && "failed to build multi_experts.12.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_301->getOutput(0)->setName("multi_experts.12.layer_list.2.net.1.weight_reshape:0");
  auto res_302=network->addShuffle(*res_78->getOutput(0));
  res_302->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_302 && "failed to build multi_experts.12.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_302->getOutput(0)->setName("multi_experts.12.layer_list.2.net.1.bias_reshape:0");
  auto res_303=network->addShuffle(*res_79->getOutput(0));
  res_303->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_303 && "failed to build multi_experts.12.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_303->getOutput(0)->setName("multi_experts.12.layer_list.3.net.1.weight_reshape:0");
  auto res_304=network->addShuffle(*res_80->getOutput(0));
  res_304->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_304 && "failed to build multi_experts.12.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_304->getOutput(0)->setName("multi_experts.12.layer_list.3.net.1.bias_reshape:0");
  auto res_305=network->addShuffle(*res_81->getOutput(0));
  res_305->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_305 && "failed to build multi_experts.13.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_305->getOutput(0)->setName("multi_experts.13.layer_list.2.net.1.weight_reshape:0");
  auto res_306=network->addShuffle(*res_82->getOutput(0));
  res_306->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_306 && "failed to build multi_experts.13.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_306->getOutput(0)->setName("multi_experts.13.layer_list.2.net.1.bias_reshape:0");
  auto res_307=network->addShuffle(*res_83->getOutput(0));
  res_307->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_307 && "failed to build multi_experts.13.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_307->getOutput(0)->setName("multi_experts.13.layer_list.3.net.1.weight_reshape:0");
  auto res_308=network->addShuffle(*res_84->getOutput(0));
  res_308->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_308 && "failed to build multi_experts.13.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_308->getOutput(0)->setName("multi_experts.13.layer_list.3.net.1.bias_reshape:0");
  auto res_309=network->addShuffle(*res_85->getOutput(0));
  res_309->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_309 && "failed to build multi_experts.14.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_309->getOutput(0)->setName("multi_experts.14.layer_list.2.net.1.weight_reshape:0");
  auto res_310=network->addShuffle(*res_86->getOutput(0));
  res_310->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_310 && "failed to build multi_experts.14.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_310->getOutput(0)->setName("multi_experts.14.layer_list.2.net.1.bias_reshape:0");
  auto res_311=network->addShuffle(*res_87->getOutput(0));
  res_311->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_311 && "failed to build multi_experts.14.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_311->getOutput(0)->setName("multi_experts.14.layer_list.3.net.1.weight_reshape:0");
  auto res_312=network->addShuffle(*res_88->getOutput(0));
  res_312->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_312 && "failed to build multi_experts.14.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_312->getOutput(0)->setName("multi_experts.14.layer_list.3.net.1.bias_reshape:0");
  auto res_313=network->addShuffle(*res_89->getOutput(0));
  res_313->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_313 && "failed to build multi_experts.15.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_313->getOutput(0)->setName("multi_experts.15.layer_list.2.net.1.weight_reshape:0");
  auto res_314=network->addShuffle(*res_90->getOutput(0));
  res_314->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_314 && "failed to build multi_experts.15.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_314->getOutput(0)->setName("multi_experts.15.layer_list.2.net.1.bias_reshape:0");
  auto res_315=network->addShuffle(*res_91->getOutput(0));
  res_315->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_315 && "failed to build multi_experts.15.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_315->getOutput(0)->setName("multi_experts.15.layer_list.3.net.1.weight_reshape:0");
  auto res_316=network->addShuffle(*res_92->getOutput(0));
  res_316->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_316 && "failed to build multi_experts.15.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_316->getOutput(0)->setName("multi_experts.15.layer_list.3.net.1.bias_reshape:0");
  auto res_317=network->addShuffle(*res_93->getOutput(0));
  res_317->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_317 && "failed to build multi_experts.16.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_317->getOutput(0)->setName("multi_experts.16.layer_list.2.net.1.weight_reshape:0");
  auto res_318=network->addShuffle(*res_94->getOutput(0));
  res_318->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_318 && "failed to build multi_experts.16.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_318->getOutput(0)->setName("multi_experts.16.layer_list.2.net.1.bias_reshape:0");
  auto res_319=network->addShuffle(*res_95->getOutput(0));
  res_319->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_319 && "failed to build multi_experts.16.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_319->getOutput(0)->setName("multi_experts.16.layer_list.3.net.1.weight_reshape:0");
  auto res_320=network->addShuffle(*res_96->getOutput(0));
  res_320->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_320 && "failed to build multi_experts.16.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_320->getOutput(0)->setName("multi_experts.16.layer_list.3.net.1.bias_reshape:0");
  auto res_321=network->addShuffle(*res_97->getOutput(0));
  res_321->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_321 && "failed to build multi_experts.17.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_321->getOutput(0)->setName("multi_experts.17.layer_list.2.net.1.weight_reshape:0");
  auto res_322=network->addShuffle(*res_98->getOutput(0));
  res_322->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_322 && "failed to build multi_experts.17.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_322->getOutput(0)->setName("multi_experts.17.layer_list.2.net.1.bias_reshape:0");
  auto res_323=network->addShuffle(*res_99->getOutput(0));
  res_323->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_323 && "failed to build multi_experts.17.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_323->getOutput(0)->setName("multi_experts.17.layer_list.3.net.1.weight_reshape:0");
  auto res_324=network->addShuffle(*res_100->getOutput(0));
  res_324->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_324 && "failed to build multi_experts.17.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_324->getOutput(0)->setName("multi_experts.17.layer_list.3.net.1.bias_reshape:0");
  auto res_325=network->addShuffle(*res_101->getOutput(0));
  res_325->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_325 && "failed to build multi_experts.18.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_325->getOutput(0)->setName("multi_experts.18.layer_list.2.net.1.weight_reshape:0");
  auto res_326=network->addShuffle(*res_102->getOutput(0));
  res_326->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_326 && "failed to build multi_experts.18.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_326->getOutput(0)->setName("multi_experts.18.layer_list.2.net.1.bias_reshape:0");
  auto res_327=network->addShuffle(*res_103->getOutput(0));
  res_327->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_327 && "failed to build multi_experts.18.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_327->getOutput(0)->setName("multi_experts.18.layer_list.3.net.1.weight_reshape:0");
  auto res_328=network->addShuffle(*res_104->getOutput(0));
  res_328->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_328 && "failed to build multi_experts.18.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_328->getOutput(0)->setName("multi_experts.18.layer_list.3.net.1.bias_reshape:0");
  auto res_329=network->addShuffle(*res_105->getOutput(0));
  res_329->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_329 && "failed to build multi_experts.19.layer_list.2.net.1.weight_reshape (type:reshape)");
  res_329->getOutput(0)->setName("multi_experts.19.layer_list.2.net.1.weight_reshape:0");
  auto res_330=network->addShuffle(*res_106->getOutput(0));
  res_330->setReshapeDimensions(Dims{1,{128},{DimensionType::kCHANNEL}});
  assert(res_330 && "failed to build multi_experts.19.layer_list.2.net.1.bias_reshape (type:reshape)");
  res_330->getOutput(0)->setName("multi_experts.19.layer_list.2.net.1.bias_reshape:0");
  auto res_331=network->addShuffle(*res_107->getOutput(0));
  res_331->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_331 && "failed to build multi_experts.19.layer_list.3.net.1.weight_reshape (type:reshape)");
  res_331->getOutput(0)->setName("multi_experts.19.layer_list.3.net.1.weight_reshape:0");
  auto res_332=network->addShuffle(*res_108->getOutput(0));
  res_332->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_332 && "failed to build multi_experts.19.layer_list.3.net.1.bias_reshape (type:reshape)");
  res_332->getOutput(0)->setName("multi_experts.19.layer_list.3.net.1.bias_reshape:0");
  auto res_333=network->addShuffle(*res_109->getOutput(0));
  res_333->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_333 && "failed to build app_logit_layer.0.layer_list.0.net.1.weight_reshape (type:reshape)");
  res_333->getOutput(0)->setName("app_logit_layer.0.layer_list.0.net.1.weight_reshape:0");
  auto res_334=network->addShuffle(*res_110->getOutput(0));
  res_334->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_334 && "failed to build app_logit_layer.0.layer_list.0.net.1.bias_reshape (type:reshape)");
  res_334->getOutput(0)->setName("app_logit_layer.0.layer_list.0.net.1.bias_reshape:0");
  auto res_335=network->addShuffle(*res_111->getOutput(0));
  res_335->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_335 && "failed to build app_logit_layer.0.layer_list.1.net.1.weight_reshape (type:reshape)");
  res_335->getOutput(0)->setName("app_logit_layer.0.layer_list.1.net.1.weight_reshape:0");
  auto res_336=network->addShuffle(*res_112->getOutput(0));
  res_336->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_336 && "failed to build app_logit_layer.0.layer_list.1.net.1.bias_reshape (type:reshape)");
  res_336->getOutput(0)->setName("app_logit_layer.0.layer_list.1.net.1.bias_reshape:0");
  auto res_337=network->addShuffle(*res_113->getOutput(0));
  res_337->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_337 && "failed to build app_logit_layer.1.layer_list.0.net.1.weight_reshape (type:reshape)");
  res_337->getOutput(0)->setName("app_logit_layer.1.layer_list.0.net.1.weight_reshape:0");
  auto res_338=network->addShuffle(*res_114->getOutput(0));
  res_338->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_338 && "failed to build app_logit_layer.1.layer_list.0.net.1.bias_reshape (type:reshape)");
  res_338->getOutput(0)->setName("app_logit_layer.1.layer_list.0.net.1.bias_reshape:0");
  auto res_339=network->addShuffle(*res_115->getOutput(0));
  res_339->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_339 && "failed to build app_logit_layer.1.layer_list.1.net.1.weight_reshape (type:reshape)");
  res_339->getOutput(0)->setName("app_logit_layer.1.layer_list.1.net.1.weight_reshape:0");
  auto res_340=network->addShuffle(*res_116->getOutput(0));
  res_340->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_340 && "failed to build app_logit_layer.1.layer_list.1.net.1.bias_reshape (type:reshape)");
  res_340->getOutput(0)->setName("app_logit_layer.1.layer_list.1.net.1.bias_reshape:0");
  auto res_341=network->addShuffle(*res_117->getOutput(0));
  res_341->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_341 && "failed to build app_logit_layer.2.layer_list.0.net.1.weight_reshape (type:reshape)");
  res_341->getOutput(0)->setName("app_logit_layer.2.layer_list.0.net.1.weight_reshape:0");
  auto res_342=network->addShuffle(*res_118->getOutput(0));
  res_342->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_342 && "failed to build app_logit_layer.2.layer_list.0.net.1.bias_reshape (type:reshape)");
  res_342->getOutput(0)->setName("app_logit_layer.2.layer_list.0.net.1.bias_reshape:0");
  auto res_343=network->addShuffle(*res_119->getOutput(0));
  res_343->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_343 && "failed to build app_logit_layer.2.layer_list.1.net.1.weight_reshape (type:reshape)");
  res_343->getOutput(0)->setName("app_logit_layer.2.layer_list.1.net.1.weight_reshape:0");
  auto res_344=network->addShuffle(*res_120->getOutput(0));
  res_344->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_344 && "failed to build app_logit_layer.2.layer_list.1.net.1.bias_reshape (type:reshape)");
  res_344->getOutput(0)->setName("app_logit_layer.2.layer_list.1.net.1.bias_reshape:0");
  auto res_345=network->addShuffle(*res_121->getOutput(0));
  res_345->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_345 && "failed to build app_logit_layer.3.layer_list.0.net.1.weight_reshape (type:reshape)");
  res_345->getOutput(0)->setName("app_logit_layer.3.layer_list.0.net.1.weight_reshape:0");
  auto res_346=network->addShuffle(*res_122->getOutput(0));
  res_346->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_346 && "failed to build app_logit_layer.3.layer_list.0.net.1.bias_reshape (type:reshape)");
  res_346->getOutput(0)->setName("app_logit_layer.3.layer_list.0.net.1.bias_reshape:0");
  auto res_347=network->addShuffle(*res_123->getOutput(0));
  res_347->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_347 && "failed to build app_logit_layer.3.layer_list.1.net.1.weight_reshape (type:reshape)");
  res_347->getOutput(0)->setName("app_logit_layer.3.layer_list.1.net.1.weight_reshape:0");
  auto res_348=network->addShuffle(*res_124->getOutput(0));
  res_348->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_348 && "failed to build app_logit_layer.3.layer_list.1.net.1.bias_reshape (type:reshape)");
  res_348->getOutput(0)->setName("app_logit_layer.3.layer_list.1.net.1.bias_reshape:0");
  auto res_349=network->addShuffle(*res_125->getOutput(0));
  res_349->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_349 && "failed to build app_logit_layer.4.layer_list.0.net.1.weight_reshape (type:reshape)");
  res_349->getOutput(0)->setName("app_logit_layer.4.layer_list.0.net.1.weight_reshape:0");
  auto res_350=network->addShuffle(*res_126->getOutput(0));
  res_350->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_350 && "failed to build app_logit_layer.4.layer_list.0.net.1.bias_reshape (type:reshape)");
  res_350->getOutput(0)->setName("app_logit_layer.4.layer_list.0.net.1.bias_reshape:0");
  auto res_351=network->addShuffle(*res_127->getOutput(0));
  res_351->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_351 && "failed to build app_logit_layer.4.layer_list.1.net.1.weight_reshape (type:reshape)");
  res_351->getOutput(0)->setName("app_logit_layer.4.layer_list.1.net.1.weight_reshape:0");
  auto res_352=network->addShuffle(*res_128->getOutput(0));
  res_352->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_352 && "failed to build app_logit_layer.4.layer_list.1.net.1.bias_reshape (type:reshape)");
  res_352->getOutput(0)->setName("app_logit_layer.4.layer_list.1.net.1.bias_reshape:0");
  auto res_353=network->addShuffle(*res_129->getOutput(0));
  res_353->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_353 && "failed to build app_logit_layer.5.layer_list.0.net.1.weight_reshape (type:reshape)");
  res_353->getOutput(0)->setName("app_logit_layer.5.layer_list.0.net.1.weight_reshape:0");
  auto res_354=network->addShuffle(*res_130->getOutput(0));
  res_354->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_354 && "failed to build app_logit_layer.5.layer_list.0.net.1.bias_reshape (type:reshape)");
  res_354->getOutput(0)->setName("app_logit_layer.5.layer_list.0.net.1.bias_reshape:0");
  auto res_355=network->addShuffle(*res_131->getOutput(0));
  res_355->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_355 && "failed to build app_logit_layer.5.layer_list.1.net.1.weight_reshape (type:reshape)");
  res_355->getOutput(0)->setName("app_logit_layer.5.layer_list.1.net.1.weight_reshape:0");
  auto res_356=network->addShuffle(*res_132->getOutput(0));
  res_356->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_356 && "failed to build app_logit_layer.5.layer_list.1.net.1.bias_reshape (type:reshape)");
  res_356->getOutput(0)->setName("app_logit_layer.5.layer_list.1.net.1.bias_reshape:0");
  auto res_357=network->addShuffle(*res_133->getOutput(0));
  res_357->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_357 && "failed to build app_logit_layer.6.layer_list.0.net.1.weight_reshape (type:reshape)");
  res_357->getOutput(0)->setName("app_logit_layer.6.layer_list.0.net.1.weight_reshape:0");
  auto res_358=network->addShuffle(*res_134->getOutput(0));
  res_358->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_358 && "failed to build app_logit_layer.6.layer_list.0.net.1.bias_reshape (type:reshape)");
  res_358->getOutput(0)->setName("app_logit_layer.6.layer_list.0.net.1.bias_reshape:0");
  auto res_359=network->addShuffle(*res_135->getOutput(0));
  res_359->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_359 && "failed to build app_logit_layer.6.layer_list.1.net.1.weight_reshape (type:reshape)");
  res_359->getOutput(0)->setName("app_logit_layer.6.layer_list.1.net.1.weight_reshape:0");
  auto res_360=network->addShuffle(*res_136->getOutput(0));
  res_360->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_360 && "failed to build app_logit_layer.6.layer_list.1.net.1.bias_reshape (type:reshape)");
  res_360->getOutput(0)->setName("app_logit_layer.6.layer_list.1.net.1.bias_reshape:0");
  auto res_361=network->addShuffle(*res_137->getOutput(0));
  res_361->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_361 && "failed to build app_logit_layer.7.layer_list.0.net.1.weight_reshape (type:reshape)");
  res_361->getOutput(0)->setName("app_logit_layer.7.layer_list.0.net.1.weight_reshape:0");
  auto res_362=network->addShuffle(*res_138->getOutput(0));
  res_362->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_362 && "failed to build app_logit_layer.7.layer_list.0.net.1.bias_reshape (type:reshape)");
  res_362->getOutput(0)->setName("app_logit_layer.7.layer_list.0.net.1.bias_reshape:0");
  auto res_363=network->addShuffle(*res_139->getOutput(0));
  res_363->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_363 && "failed to build app_logit_layer.7.layer_list.1.net.1.weight_reshape (type:reshape)");
  res_363->getOutput(0)->setName("app_logit_layer.7.layer_list.1.net.1.weight_reshape:0");
  auto res_364=network->addShuffle(*res_140->getOutput(0));
  res_364->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_364 && "failed to build app_logit_layer.7.layer_list.1.net.1.bias_reshape (type:reshape)");
  res_364->getOutput(0)->setName("app_logit_layer.7.layer_list.1.net.1.bias_reshape:0");
  auto res_365=network->addShuffle(*res_141->getOutput(0));
  res_365->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_365 && "failed to build Node_6070_modify.y_reshape (type:reshape)");
  res_365->getOutput(0)->setName("Node_6070_modify.y_reshape:0");
  auto res_366=network->addShuffle(*res_142->getOutput(0));
  res_366->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_366 && "failed to build Node_6086_modify.y_reshape (type:reshape)");
  res_366->getOutput(0)->setName("Node_6086_modify.y_reshape:0");
  auto res_367=network->addShuffle(*res_143->getOutput(0));
  res_367->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_367 && "failed to build Node_6134_modify.y_reshape (type:reshape)");
  res_367->getOutput(0)->setName("Node_6134_modify.y_reshape:0");
  auto res_368=network->addShuffle(*res_144->getOutput(0));
  res_368->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_368 && "failed to build Node_6150_modify.y_reshape (type:reshape)");
  res_368->getOutput(0)->setName("Node_6150_modify.y_reshape:0");
  auto res_369=network->addShuffle(*res_145->getOutput(0));
  res_369->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_369 && "failed to build Node_6198_modify.y_reshape (type:reshape)");
  res_369->getOutput(0)->setName("Node_6198_modify.y_reshape:0");
  auto res_370=network->addShuffle(*res_146->getOutput(0));
  res_370->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_370 && "failed to build Node_6214_modify.y_reshape (type:reshape)");
  res_370->getOutput(0)->setName("Node_6214_modify.y_reshape:0");
  auto res_371=network->addShuffle(*res_147->getOutput(0));
  res_371->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_371 && "failed to build Node_6262_modify.y_reshape (type:reshape)");
  res_371->getOutput(0)->setName("Node_6262_modify.y_reshape:0");
  auto res_372=network->addShuffle(*res_148->getOutput(0));
  res_372->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_372 && "failed to build Node_6278_modify.y_reshape (type:reshape)");
  res_372->getOutput(0)->setName("Node_6278_modify.y_reshape:0");
  auto res_373=network->addShuffle(*res_149->getOutput(0));
  res_373->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_373 && "failed to build Node_6326_modify.y_reshape (type:reshape)");
  res_373->getOutput(0)->setName("Node_6326_modify.y_reshape:0");
  auto res_374=network->addShuffle(*res_150->getOutput(0));
  res_374->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_374 && "failed to build Node_6342_modify.y_reshape (type:reshape)");
  res_374->getOutput(0)->setName("Node_6342_modify.y_reshape:0");
  auto res_375=network->addShuffle(*res_151->getOutput(0));
  res_375->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_375 && "failed to build Node_6390_modify.y_reshape (type:reshape)");
  res_375->getOutput(0)->setName("Node_6390_modify.y_reshape:0");
  auto res_376=network->addShuffle(*res_152->getOutput(0));
  res_376->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_376 && "failed to build Node_6406_modify.y_reshape (type:reshape)");
  res_376->getOutput(0)->setName("Node_6406_modify.y_reshape:0");
  auto res_377=network->addShuffle(*res_153->getOutput(0));
  res_377->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_377 && "failed to build Node_6454_modify.y_reshape (type:reshape)");
  res_377->getOutput(0)->setName("Node_6454_modify.y_reshape:0");
  auto res_378=network->addShuffle(*res_154->getOutput(0));
  res_378->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_378 && "failed to build Node_6470_modify.y_reshape (type:reshape)");
  res_378->getOutput(0)->setName("Node_6470_modify.y_reshape:0");
  auto res_379=network->addShuffle(*res_155->getOutput(0));
  res_379->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_379 && "failed to build Node_6518_modify.y_reshape (type:reshape)");
  res_379->getOutput(0)->setName("Node_6518_modify.y_reshape:0");
  auto res_380=network->addShuffle(*res_156->getOutput(0));
  res_380->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_380 && "failed to build Node_6534_modify.y_reshape (type:reshape)");
  res_380->getOutput(0)->setName("Node_6534_modify.y_reshape:0");
  auto res_381=network->addShuffle(*res_157->getOutput(0));
  res_381->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_381 && "failed to build Node_6582_modify.y_reshape (type:reshape)");
  res_381->getOutput(0)->setName("Node_6582_modify.y_reshape:0");
  auto res_382=network->addShuffle(*res_158->getOutput(0));
  res_382->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_382 && "failed to build Node_6598_modify.y_reshape (type:reshape)");
  res_382->getOutput(0)->setName("Node_6598_modify.y_reshape:0");
  auto res_383=network->addShuffle(*res_159->getOutput(0));
  res_383->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_383 && "failed to build Node_6646_modify.y_reshape (type:reshape)");
  res_383->getOutput(0)->setName("Node_6646_modify.y_reshape:0");
  auto res_384=network->addShuffle(*res_160->getOutput(0));
  res_384->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_384 && "failed to build Node_6662_modify.y_reshape (type:reshape)");
  res_384->getOutput(0)->setName("Node_6662_modify.y_reshape:0");
  auto res_385=network->addShuffle(*res_161->getOutput(0));
  res_385->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_385 && "failed to build Node_6710_modify.y_reshape (type:reshape)");
  res_385->getOutput(0)->setName("Node_6710_modify.y_reshape:0");
  auto res_386=network->addShuffle(*res_162->getOutput(0));
  res_386->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_386 && "failed to build Node_6726_modify.y_reshape (type:reshape)");
  res_386->getOutput(0)->setName("Node_6726_modify.y_reshape:0");
  auto res_387=network->addShuffle(*res_163->getOutput(0));
  res_387->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_387 && "failed to build Node_6774_modify.y_reshape (type:reshape)");
  res_387->getOutput(0)->setName("Node_6774_modify.y_reshape:0");
  auto res_388=network->addShuffle(*res_164->getOutput(0));
  res_388->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_388 && "failed to build Node_6790_modify.y_reshape (type:reshape)");
  res_388->getOutput(0)->setName("Node_6790_modify.y_reshape:0");
  auto res_389=network->addShuffle(*res_165->getOutput(0));
  res_389->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_389 && "failed to build Node_6838_modify.y_reshape (type:reshape)");
  res_389->getOutput(0)->setName("Node_6838_modify.y_reshape:0");
  auto res_390=network->addShuffle(*res_166->getOutput(0));
  res_390->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_390 && "failed to build Node_6854_modify.y_reshape (type:reshape)");
  res_390->getOutput(0)->setName("Node_6854_modify.y_reshape:0");
  auto res_391=network->addShuffle(*res_167->getOutput(0));
  res_391->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_391 && "failed to build Node_6902_modify.y_reshape (type:reshape)");
  res_391->getOutput(0)->setName("Node_6902_modify.y_reshape:0");
  auto res_392=network->addShuffle(*res_168->getOutput(0));
  res_392->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_392 && "failed to build Node_6918_modify.y_reshape (type:reshape)");
  res_392->getOutput(0)->setName("Node_6918_modify.y_reshape:0");
  auto res_393=network->addShuffle(*res_169->getOutput(0));
  res_393->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_393 && "failed to build Node_6966_modify.y_reshape (type:reshape)");
  res_393->getOutput(0)->setName("Node_6966_modify.y_reshape:0");
  auto res_394=network->addShuffle(*res_170->getOutput(0));
  res_394->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_394 && "failed to build Node_6982_modify.y_reshape (type:reshape)");
  res_394->getOutput(0)->setName("Node_6982_modify.y_reshape:0");
  auto res_395=network->addShuffle(*res_171->getOutput(0));
  res_395->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_395 && "failed to build Node_7030_modify.y_reshape (type:reshape)");
  res_395->getOutput(0)->setName("Node_7030_modify.y_reshape:0");
  auto res_396=network->addShuffle(*res_172->getOutput(0));
  res_396->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_396 && "failed to build Node_7046_modify.y_reshape (type:reshape)");
  res_396->getOutput(0)->setName("Node_7046_modify.y_reshape:0");
  auto res_397=network->addShuffle(*res_173->getOutput(0));
  res_397->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_397 && "failed to build Node_7094_modify.y_reshape (type:reshape)");
  res_397->getOutput(0)->setName("Node_7094_modify.y_reshape:0");
  auto res_398=network->addShuffle(*res_174->getOutput(0));
  res_398->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_398 && "failed to build Node_7110_modify.y_reshape (type:reshape)");
  res_398->getOutput(0)->setName("Node_7110_modify.y_reshape:0");
  auto res_399=network->addShuffle(*res_175->getOutput(0));
  res_399->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_399 && "failed to build Node_7158_modify.y_reshape (type:reshape)");
  res_399->getOutput(0)->setName("Node_7158_modify.y_reshape:0");
  auto res_400=network->addShuffle(*res_176->getOutput(0));
  res_400->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_400 && "failed to build Node_7174_modify.y_reshape (type:reshape)");
  res_400->getOutput(0)->setName("Node_7174_modify.y_reshape:0");
  auto res_401=network->addShuffle(*res_177->getOutput(0));
  res_401->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_401 && "failed to build Node_7222_modify.y_reshape (type:reshape)");
  res_401->getOutput(0)->setName("Node_7222_modify.y_reshape:0");
  auto res_402=network->addShuffle(*res_178->getOutput(0));
  res_402->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_402 && "failed to build Node_7238_modify.y_reshape (type:reshape)");
  res_402->getOutput(0)->setName("Node_7238_modify.y_reshape:0");
  auto res_403=network->addShuffle(*res_179->getOutput(0));
  res_403->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_403 && "failed to build Node_7286_modify.y_reshape (type:reshape)");
  res_403->getOutput(0)->setName("Node_7286_modify.y_reshape:0");
  auto res_404=network->addShuffle(*res_180->getOutput(0));
  res_404->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_404 && "failed to build Node_7302_modify.y_reshape (type:reshape)");
  res_404->getOutput(0)->setName("Node_7302_modify.y_reshape:0");
  auto res_405=network->addShuffle(*res_181->getOutput(0));
  res_405->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_405 && "failed to build Node_7418_modify.y_reshape (type:reshape)");
  res_405->getOutput(0)->setName("Node_7418_modify.y_reshape:0");
  auto res_406=network->addShuffle(*res_182->getOutput(0));
  res_406->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_406 && "failed to build Node_7434_modify.y_reshape (type:reshape)");
  res_406->getOutput(0)->setName("Node_7434_modify.y_reshape:0");
  auto res_407=network->addShuffle(*res_183->getOutput(0));
  res_407->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_407 && "failed to build Node_7455_modify.y_reshape (type:reshape)");
  res_407->getOutput(0)->setName("Node_7455_modify.y_reshape:0");
  auto res_408=network->addShuffle(*res_184->getOutput(0));
  res_408->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_408 && "failed to build Node_7471_modify.y_reshape (type:reshape)");
  res_408->getOutput(0)->setName("Node_7471_modify.y_reshape:0");
  auto res_409=network->addShuffle(*res_185->getOutput(0));
  res_409->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_409 && "failed to build Node_7492_modify.y_reshape (type:reshape)");
  res_409->getOutput(0)->setName("Node_7492_modify.y_reshape:0");
  auto res_410=network->addShuffle(*res_186->getOutput(0));
  res_410->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_410 && "failed to build Node_7508_modify.y_reshape (type:reshape)");
  res_410->getOutput(0)->setName("Node_7508_modify.y_reshape:0");
  auto res_411=network->addShuffle(*res_187->getOutput(0));
  res_411->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_411 && "failed to build Node_7529_modify.y_reshape (type:reshape)");
  res_411->getOutput(0)->setName("Node_7529_modify.y_reshape:0");
  auto res_412=network->addShuffle(*res_188->getOutput(0));
  res_412->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_412 && "failed to build Node_7545_modify.y_reshape (type:reshape)");
  res_412->getOutput(0)->setName("Node_7545_modify.y_reshape:0");
  auto res_413=network->addShuffle(*res_189->getOutput(0));
  res_413->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_413 && "failed to build Node_7566_modify.y_reshape (type:reshape)");
  res_413->getOutput(0)->setName("Node_7566_modify.y_reshape:0");
  auto res_414=network->addShuffle(*res_190->getOutput(0));
  res_414->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_414 && "failed to build Node_7582_modify.y_reshape (type:reshape)");
  res_414->getOutput(0)->setName("Node_7582_modify.y_reshape:0");
  auto res_415=network->addShuffle(*res_191->getOutput(0));
  res_415->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_415 && "failed to build Node_7603_modify.y_reshape (type:reshape)");
  res_415->getOutput(0)->setName("Node_7603_modify.y_reshape:0");
  auto res_416=network->addShuffle(*res_192->getOutput(0));
  res_416->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_416 && "failed to build Node_7619_modify.y_reshape (type:reshape)");
  res_416->getOutput(0)->setName("Node_7619_modify.y_reshape:0");
  auto res_417=network->addShuffle(*res_193->getOutput(0));
  res_417->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_417 && "failed to build Node_7640_modify.y_reshape (type:reshape)");
  res_417->getOutput(0)->setName("Node_7640_modify.y_reshape:0");
  auto res_418=network->addShuffle(*res_194->getOutput(0));
  res_418->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_418 && "failed to build Node_7656_modify.y_reshape (type:reshape)");
  res_418->getOutput(0)->setName("Node_7656_modify.y_reshape:0");
  auto res_419=network->addShuffle(*res_195->getOutput(0));
  res_419->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_419 && "failed to build Node_7677_modify.y_reshape (type:reshape)");
  res_419->getOutput(0)->setName("Node_7677_modify.y_reshape:0");
  auto res_420=network->addShuffle(*res_196->getOutput(0));
  res_420->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_420 && "failed to build Node_7693_modify.y_reshape (type:reshape)");
  res_420->getOutput(0)->setName("Node_7693_modify.y_reshape:0");
  auto res_421=network->addShuffle(*res_197->getOutput(0));
  res_421->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_421 && "failed to build Node_6070_power.power_reshape (type:reshape)");
  res_421->getOutput(0)->setName("Node_6070_power.power_reshape:0");
  auto res_422=network->addShuffle(*res_198->getOutput(0));
  res_422->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_422 && "failed to build Node_6086_power.power_reshape (type:reshape)");
  res_422->getOutput(0)->setName("Node_6086_power.power_reshape:0");
  auto res_423=network->addShuffle(*res_199->getOutput(0));
  res_423->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_423 && "failed to build Node_6134_power.power_reshape (type:reshape)");
  res_423->getOutput(0)->setName("Node_6134_power.power_reshape:0");
  auto res_424=network->addShuffle(*res_200->getOutput(0));
  res_424->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_424 && "failed to build Node_6150_power.power_reshape (type:reshape)");
  res_424->getOutput(0)->setName("Node_6150_power.power_reshape:0");
  auto res_425=network->addShuffle(*res_201->getOutput(0));
  res_425->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_425 && "failed to build Node_6198_power.power_reshape (type:reshape)");
  res_425->getOutput(0)->setName("Node_6198_power.power_reshape:0");
  auto res_426=network->addShuffle(*res_202->getOutput(0));
  res_426->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_426 && "failed to build Node_6214_power.power_reshape (type:reshape)");
  res_426->getOutput(0)->setName("Node_6214_power.power_reshape:0");
  auto res_427=network->addShuffle(*res_203->getOutput(0));
  res_427->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_427 && "failed to build Node_6262_power.power_reshape (type:reshape)");
  res_427->getOutput(0)->setName("Node_6262_power.power_reshape:0");
  auto res_428=network->addShuffle(*res_204->getOutput(0));
  res_428->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_428 && "failed to build Node_6278_power.power_reshape (type:reshape)");
  res_428->getOutput(0)->setName("Node_6278_power.power_reshape:0");
  auto res_429=network->addShuffle(*res_205->getOutput(0));
  res_429->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_429 && "failed to build Node_6326_power.power_reshape (type:reshape)");
  res_429->getOutput(0)->setName("Node_6326_power.power_reshape:0");
  auto res_430=network->addShuffle(*res_206->getOutput(0));
  res_430->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_430 && "failed to build Node_6342_power.power_reshape (type:reshape)");
  res_430->getOutput(0)->setName("Node_6342_power.power_reshape:0");
  auto res_431=network->addShuffle(*res_207->getOutput(0));
  res_431->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_431 && "failed to build Node_6390_power.power_reshape (type:reshape)");
  res_431->getOutput(0)->setName("Node_6390_power.power_reshape:0");
  auto res_432=network->addShuffle(*res_208->getOutput(0));
  res_432->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_432 && "failed to build Node_6406_power.power_reshape (type:reshape)");
  res_432->getOutput(0)->setName("Node_6406_power.power_reshape:0");
  auto res_433=network->addShuffle(*res_209->getOutput(0));
  res_433->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_433 && "failed to build Node_6454_power.power_reshape (type:reshape)");
  res_433->getOutput(0)->setName("Node_6454_power.power_reshape:0");
  auto res_434=network->addShuffle(*res_210->getOutput(0));
  res_434->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_434 && "failed to build Node_6470_power.power_reshape (type:reshape)");
  res_434->getOutput(0)->setName("Node_6470_power.power_reshape:0");
  auto res_435=network->addShuffle(*res_211->getOutput(0));
  res_435->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_435 && "failed to build Node_6518_power.power_reshape (type:reshape)");
  res_435->getOutput(0)->setName("Node_6518_power.power_reshape:0");
  auto res_436=network->addShuffle(*res_212->getOutput(0));
  res_436->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_436 && "failed to build Node_6534_power.power_reshape (type:reshape)");
  res_436->getOutput(0)->setName("Node_6534_power.power_reshape:0");
  auto res_437=network->addShuffle(*res_213->getOutput(0));
  res_437->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_437 && "failed to build Node_6582_power.power_reshape (type:reshape)");
  res_437->getOutput(0)->setName("Node_6582_power.power_reshape:0");
  auto res_438=network->addShuffle(*res_214->getOutput(0));
  res_438->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_438 && "failed to build Node_6598_power.power_reshape (type:reshape)");
  res_438->getOutput(0)->setName("Node_6598_power.power_reshape:0");
  auto res_439=network->addShuffle(*res_215->getOutput(0));
  res_439->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_439 && "failed to build Node_6646_power.power_reshape (type:reshape)");
  res_439->getOutput(0)->setName("Node_6646_power.power_reshape:0");
  auto res_440=network->addShuffle(*res_216->getOutput(0));
  res_440->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_440 && "failed to build Node_6662_power.power_reshape (type:reshape)");
  res_440->getOutput(0)->setName("Node_6662_power.power_reshape:0");
  auto res_441=network->addShuffle(*res_217->getOutput(0));
  res_441->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_441 && "failed to build Node_6710_power.power_reshape (type:reshape)");
  res_441->getOutput(0)->setName("Node_6710_power.power_reshape:0");
  auto res_442=network->addShuffle(*res_218->getOutput(0));
  res_442->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_442 && "failed to build Node_6726_power.power_reshape (type:reshape)");
  res_442->getOutput(0)->setName("Node_6726_power.power_reshape:0");
  auto res_443=network->addShuffle(*res_219->getOutput(0));
  res_443->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_443 && "failed to build Node_6774_power.power_reshape (type:reshape)");
  res_443->getOutput(0)->setName("Node_6774_power.power_reshape:0");
  auto res_444=network->addShuffle(*res_220->getOutput(0));
  res_444->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_444 && "failed to build Node_6790_power.power_reshape (type:reshape)");
  res_444->getOutput(0)->setName("Node_6790_power.power_reshape:0");
  auto res_445=network->addShuffle(*res_221->getOutput(0));
  res_445->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_445 && "failed to build Node_6838_power.power_reshape (type:reshape)");
  res_445->getOutput(0)->setName("Node_6838_power.power_reshape:0");
  auto res_446=network->addShuffle(*res_222->getOutput(0));
  res_446->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_446 && "failed to build Node_6854_power.power_reshape (type:reshape)");
  res_446->getOutput(0)->setName("Node_6854_power.power_reshape:0");
  auto res_447=network->addShuffle(*res_223->getOutput(0));
  res_447->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_447 && "failed to build Node_6902_power.power_reshape (type:reshape)");
  res_447->getOutput(0)->setName("Node_6902_power.power_reshape:0");
  auto res_448=network->addShuffle(*res_224->getOutput(0));
  res_448->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_448 && "failed to build Node_6918_power.power_reshape (type:reshape)");
  res_448->getOutput(0)->setName("Node_6918_power.power_reshape:0");
  auto res_449=network->addShuffle(*res_225->getOutput(0));
  res_449->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_449 && "failed to build Node_6966_power.power_reshape (type:reshape)");
  res_449->getOutput(0)->setName("Node_6966_power.power_reshape:0");
  auto res_450=network->addShuffle(*res_226->getOutput(0));
  res_450->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_450 && "failed to build Node_6982_power.power_reshape (type:reshape)");
  res_450->getOutput(0)->setName("Node_6982_power.power_reshape:0");
  auto res_451=network->addShuffle(*res_227->getOutput(0));
  res_451->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_451 && "failed to build Node_7030_power.power_reshape (type:reshape)");
  res_451->getOutput(0)->setName("Node_7030_power.power_reshape:0");
  auto res_452=network->addShuffle(*res_228->getOutput(0));
  res_452->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_452 && "failed to build Node_7046_power.power_reshape (type:reshape)");
  res_452->getOutput(0)->setName("Node_7046_power.power_reshape:0");
  auto res_453=network->addShuffle(*res_229->getOutput(0));
  res_453->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_453 && "failed to build Node_7094_power.power_reshape (type:reshape)");
  res_453->getOutput(0)->setName("Node_7094_power.power_reshape:0");
  auto res_454=network->addShuffle(*res_230->getOutput(0));
  res_454->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_454 && "failed to build Node_7110_power.power_reshape (type:reshape)");
  res_454->getOutput(0)->setName("Node_7110_power.power_reshape:0");
  auto res_455=network->addShuffle(*res_231->getOutput(0));
  res_455->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_455 && "failed to build Node_7158_power.power_reshape (type:reshape)");
  res_455->getOutput(0)->setName("Node_7158_power.power_reshape:0");
  auto res_456=network->addShuffle(*res_232->getOutput(0));
  res_456->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_456 && "failed to build Node_7174_power.power_reshape (type:reshape)");
  res_456->getOutput(0)->setName("Node_7174_power.power_reshape:0");
  auto res_457=network->addShuffle(*res_233->getOutput(0));
  res_457->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_457 && "failed to build Node_7222_power.power_reshape (type:reshape)");
  res_457->getOutput(0)->setName("Node_7222_power.power_reshape:0");
  auto res_458=network->addShuffle(*res_234->getOutput(0));
  res_458->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_458 && "failed to build Node_7238_power.power_reshape (type:reshape)");
  res_458->getOutput(0)->setName("Node_7238_power.power_reshape:0");
  auto res_459=network->addShuffle(*res_235->getOutput(0));
  res_459->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_459 && "failed to build Node_7286_power.power_reshape (type:reshape)");
  res_459->getOutput(0)->setName("Node_7286_power.power_reshape:0");
  auto res_460=network->addShuffle(*res_236->getOutput(0));
  res_460->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_460 && "failed to build Node_7302_power.power_reshape (type:reshape)");
  res_460->getOutput(0)->setName("Node_7302_power.power_reshape:0");
  auto res_461=network->addShuffle(*res_237->getOutput(0));
  res_461->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_461 && "failed to build Node_7418_power.power_reshape (type:reshape)");
  res_461->getOutput(0)->setName("Node_7418_power.power_reshape:0");
  auto res_462=network->addShuffle(*res_238->getOutput(0));
  res_462->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_462 && "failed to build Node_7434_power.power_reshape (type:reshape)");
  res_462->getOutput(0)->setName("Node_7434_power.power_reshape:0");
  auto res_463=network->addShuffle(*res_239->getOutput(0));
  res_463->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_463 && "failed to build Node_7455_power.power_reshape (type:reshape)");
  res_463->getOutput(0)->setName("Node_7455_power.power_reshape:0");
  auto res_464=network->addShuffle(*res_240->getOutput(0));
  res_464->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_464 && "failed to build Node_7471_power.power_reshape (type:reshape)");
  res_464->getOutput(0)->setName("Node_7471_power.power_reshape:0");
  auto res_465=network->addShuffle(*res_241->getOutput(0));
  res_465->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_465 && "failed to build Node_7492_power.power_reshape (type:reshape)");
  res_465->getOutput(0)->setName("Node_7492_power.power_reshape:0");
  auto res_466=network->addShuffle(*res_242->getOutput(0));
  res_466->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_466 && "failed to build Node_7508_power.power_reshape (type:reshape)");
  res_466->getOutput(0)->setName("Node_7508_power.power_reshape:0");
  auto res_467=network->addShuffle(*res_243->getOutput(0));
  res_467->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_467 && "failed to build Node_7529_power.power_reshape (type:reshape)");
  res_467->getOutput(0)->setName("Node_7529_power.power_reshape:0");
  auto res_468=network->addShuffle(*res_244->getOutput(0));
  res_468->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_468 && "failed to build Node_7545_power.power_reshape (type:reshape)");
  res_468->getOutput(0)->setName("Node_7545_power.power_reshape:0");
  auto res_469=network->addShuffle(*res_245->getOutput(0));
  res_469->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_469 && "failed to build Node_7566_power.power_reshape (type:reshape)");
  res_469->getOutput(0)->setName("Node_7566_power.power_reshape:0");
  auto res_470=network->addShuffle(*res_246->getOutput(0));
  res_470->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_470 && "failed to build Node_7582_power.power_reshape (type:reshape)");
  res_470->getOutput(0)->setName("Node_7582_power.power_reshape:0");
  auto res_471=network->addShuffle(*res_247->getOutput(0));
  res_471->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_471 && "failed to build Node_7603_power.power_reshape (type:reshape)");
  res_471->getOutput(0)->setName("Node_7603_power.power_reshape:0");
  auto res_472=network->addShuffle(*res_248->getOutput(0));
  res_472->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_472 && "failed to build Node_7619_power.power_reshape (type:reshape)");
  res_472->getOutput(0)->setName("Node_7619_power.power_reshape:0");
  auto res_473=network->addShuffle(*res_249->getOutput(0));
  res_473->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_473 && "failed to build Node_7640_power.power_reshape (type:reshape)");
  res_473->getOutput(0)->setName("Node_7640_power.power_reshape:0");
  auto res_474=network->addShuffle(*res_250->getOutput(0));
  res_474->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_474 && "failed to build Node_7656_power.power_reshape (type:reshape)");
  res_474->getOutput(0)->setName("Node_7656_power.power_reshape:0");
  auto res_475=network->addShuffle(*res_251->getOutput(0));
  res_475->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_475 && "failed to build Node_7677_power.power_reshape (type:reshape)");
  res_475->getOutput(0)->setName("Node_7677_power.power_reshape:0");
  auto res_476=network->addShuffle(*res_252->getOutput(0));
  res_476->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_476 && "failed to build Node_7693_power.power_reshape (type:reshape)");
  res_476->getOutput(0)->setName("Node_7693_power.power_reshape:0");
  auto res_477=network->addElementWise(*inputs[0],*res_421->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_477 && "failed to build Node_6070_power (type:power)");
  res_477->getOutput(0)->setName("Node_6070_power:0");
  auto res_478=network->addReduce(*res_477->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_478 && "failed to build Node_6070_var (type:mean)");
  res_478->getOutput(0)->setName("Node_6070_var:0");
  auto res_479=network->addElementWise(*res_478->getOutput(0),*res_365->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_479 && "failed to build Node_6070_modify (type:add)");
  res_479->getOutput(0)->setName("Node_6070_modify:0");
  auto res_480=network->addUnary(*res_479->getOutput(0),UnaryOperation::kSQRT);
  assert(res_480 && "failed to build Node_6070_sqrt (type:power)");
  res_480->getOutput(0)->setName("Node_6070_sqrt:0");
  auto res_481=network->addElementWise(*inputs[0],*res_480->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_481 && "failed to build Node_6070_rsqrt (type:divide)");
  res_481->getOutput(0)->setName("Node_6070_rsqrt:0");
  auto res_482=network->addElementWise(*res_481->getOutput(0),*res_253->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_482 && "failed to build Node_6070_mul (type:multiply)");
  res_482->getOutput(0)->setName("Node_6070_mul:0");
  auto res_483=network->addElementWise(*res_482->getOutput(0),*res_254->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_483 && "failed to build Node_6070 (type:add)");
  res_483->getOutput(0)->setName("Node_6070:0");
  auto res_484=network->addActivation(*res_483->getOutput(0),ActivationType::kRELU);
  assert(res_484 && "failed to build Node_6071 (type:relu)");
  res_484->getOutput(0)->setName("Node_6071:0");
  auto res_485=network->addShuffle(*res_484->getOutput(0));
  res_485->setReshapeDimensions(Dims3{128,1,1});
  assert(res_485 && "failed to build Node_6071_reshape (type:reshape)");
  res_485->getOutput(0)->setName("Node_6071_reshape:0");
  auto res_486=network->addFullyConnected(*res_485->getOutput(0),32,mWeightsMap["weight_486"],mWeightsMap["bias_486"]);
  assert(res_486 && "failed to build Node_6079 (type:dense)");
  res_486->getOutput(0)->setName("Node_6079:0");
  auto res_487=network->addShuffle(*res_486->getOutput(0));
  res_487->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_487 && "failed to build Node_6079_reshape (type:reshape)");
  res_487->getOutput(0)->setName("Node_6079_reshape:0");
  auto res_488=network->addReduce(*res_487->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_488 && "failed to build Node_6086_mean (type:mean)");
  res_488->getOutput(0)->setName("Node_6086_mean:0");
  auto res_489=network->addElementWise(*res_487->getOutput(0),*res_488->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_489 && "failed to build Node_6086_diff (type:sub)");
  res_489->getOutput(0)->setName("Node_6086_diff:0");
  auto res_490=network->addElementWise(*res_489->getOutput(0),*res_422->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_490 && "failed to build Node_6086_power (type:power)");
  res_490->getOutput(0)->setName("Node_6086_power:0");
  auto res_491=network->addReduce(*res_490->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_491 && "failed to build Node_6086_var (type:mean)");
  res_491->getOutput(0)->setName("Node_6086_var:0");
  auto res_492=network->addElementWise(*res_491->getOutput(0),*res_366->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_492 && "failed to build Node_6086_modify (type:add)");
  res_492->getOutput(0)->setName("Node_6086_modify:0");
  auto res_493=network->addUnary(*res_492->getOutput(0),UnaryOperation::kSQRT);
  assert(res_493 && "failed to build Node_6086_sqrt (type:power)");
  res_493->getOutput(0)->setName("Node_6086_sqrt:0");
  auto res_494=network->addElementWise(*res_489->getOutput(0),*res_493->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_494 && "failed to build Node_6086_rsqrt (type:divide)");
  res_494->getOutput(0)->setName("Node_6086_rsqrt:0");
  auto res_495=network->addElementWise(*res_494->getOutput(0),*res_255->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_495 && "failed to build Node_6086_mul (type:multiply)");
  res_495->getOutput(0)->setName("Node_6086_mul:0");
  auto res_496=network->addElementWise(*res_495->getOutput(0),*res_256->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_496 && "failed to build Node_6086 (type:add)");
  res_496->getOutput(0)->setName("Node_6086:0");
  auto res_497=network->addActivation(*res_496->getOutput(0),ActivationType::kRELU);
  assert(res_497 && "failed to build Node_6087 (type:relu)");
  res_497->getOutput(0)->setName("Node_6087:0");
  auto res_498=network->addElementWise(*inputs[1],*res_423->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_498 && "failed to build Node_6134_power (type:power)");
  res_498->getOutput(0)->setName("Node_6134_power:0");
  auto res_499=network->addReduce(*res_498->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_499 && "failed to build Node_6134_var (type:mean)");
  res_499->getOutput(0)->setName("Node_6134_var:0");
  auto res_500=network->addElementWise(*res_499->getOutput(0),*res_367->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_500 && "failed to build Node_6134_modify (type:add)");
  res_500->getOutput(0)->setName("Node_6134_modify:0");
  auto res_501=network->addUnary(*res_500->getOutput(0),UnaryOperation::kSQRT);
  assert(res_501 && "failed to build Node_6134_sqrt (type:power)");
  res_501->getOutput(0)->setName("Node_6134_sqrt:0");
  auto res_502=network->addElementWise(*inputs[1],*res_501->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_502 && "failed to build Node_6134_rsqrt (type:divide)");
  res_502->getOutput(0)->setName("Node_6134_rsqrt:0");
  auto res_503=network->addElementWise(*res_502->getOutput(0),*res_257->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_503 && "failed to build Node_6134_mul (type:multiply)");
  res_503->getOutput(0)->setName("Node_6134_mul:0");
  auto res_504=network->addElementWise(*res_503->getOutput(0),*res_258->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_504 && "failed to build Node_6134 (type:add)");
  res_504->getOutput(0)->setName("Node_6134:0");
  auto res_505=network->addActivation(*res_504->getOutput(0),ActivationType::kRELU);
  assert(res_505 && "failed to build Node_6135 (type:relu)");
  res_505->getOutput(0)->setName("Node_6135:0");
  auto res_506=network->addShuffle(*res_505->getOutput(0));
  res_506->setReshapeDimensions(Dims3{128,1,1});
  assert(res_506 && "failed to build Node_6135_reshape (type:reshape)");
  res_506->getOutput(0)->setName("Node_6135_reshape:0");
  auto res_507=network->addFullyConnected(*res_506->getOutput(0),32,mWeightsMap["weight_507"],mWeightsMap["bias_507"]);
  assert(res_507 && "failed to build Node_6143 (type:dense)");
  res_507->getOutput(0)->setName("Node_6143:0");
  auto res_508=network->addShuffle(*res_507->getOutput(0));
  res_508->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_508 && "failed to build Node_6143_reshape (type:reshape)");
  res_508->getOutput(0)->setName("Node_6143_reshape:0");
  auto res_509=network->addReduce(*res_508->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_509 && "failed to build Node_6150_mean (type:mean)");
  res_509->getOutput(0)->setName("Node_6150_mean:0");
  auto res_510=network->addElementWise(*res_508->getOutput(0),*res_509->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_510 && "failed to build Node_6150_diff (type:sub)");
  res_510->getOutput(0)->setName("Node_6150_diff:0");
  auto res_511=network->addElementWise(*res_510->getOutput(0),*res_424->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_511 && "failed to build Node_6150_power (type:power)");
  res_511->getOutput(0)->setName("Node_6150_power:0");
  auto res_512=network->addReduce(*res_511->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_512 && "failed to build Node_6150_var (type:mean)");
  res_512->getOutput(0)->setName("Node_6150_var:0");
  auto res_513=network->addElementWise(*res_512->getOutput(0),*res_368->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_513 && "failed to build Node_6150_modify (type:add)");
  res_513->getOutput(0)->setName("Node_6150_modify:0");
  auto res_514=network->addUnary(*res_513->getOutput(0),UnaryOperation::kSQRT);
  assert(res_514 && "failed to build Node_6150_sqrt (type:power)");
  res_514->getOutput(0)->setName("Node_6150_sqrt:0");
  auto res_515=network->addElementWise(*res_510->getOutput(0),*res_514->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_515 && "failed to build Node_6150_rsqrt (type:divide)");
  res_515->getOutput(0)->setName("Node_6150_rsqrt:0");
  auto res_516=network->addElementWise(*res_515->getOutput(0),*res_259->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_516 && "failed to build Node_6150_mul (type:multiply)");
  res_516->getOutput(0)->setName("Node_6150_mul:0");
  auto res_517=network->addElementWise(*res_516->getOutput(0),*res_260->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_517 && "failed to build Node_6150 (type:add)");
  res_517->getOutput(0)->setName("Node_6150:0");
  auto res_518=network->addActivation(*res_517->getOutput(0),ActivationType::kRELU);
  assert(res_518 && "failed to build Node_6151 (type:relu)");
  res_518->getOutput(0)->setName("Node_6151:0");
  auto res_519=network->addElementWise(*inputs[2],*res_425->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_519 && "failed to build Node_6198_power (type:power)");
  res_519->getOutput(0)->setName("Node_6198_power:0");
  auto res_520=network->addReduce(*res_519->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_520 && "failed to build Node_6198_var (type:mean)");
  res_520->getOutput(0)->setName("Node_6198_var:0");
  auto res_521=network->addElementWise(*res_520->getOutput(0),*res_369->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_521 && "failed to build Node_6198_modify (type:add)");
  res_521->getOutput(0)->setName("Node_6198_modify:0");
  auto res_522=network->addUnary(*res_521->getOutput(0),UnaryOperation::kSQRT);
  assert(res_522 && "failed to build Node_6198_sqrt (type:power)");
  res_522->getOutput(0)->setName("Node_6198_sqrt:0");
  auto res_523=network->addElementWise(*inputs[2],*res_522->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_523 && "failed to build Node_6198_rsqrt (type:divide)");
  res_523->getOutput(0)->setName("Node_6198_rsqrt:0");
  auto res_524=network->addElementWise(*res_523->getOutput(0),*res_261->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_524 && "failed to build Node_6198_mul (type:multiply)");
  res_524->getOutput(0)->setName("Node_6198_mul:0");
  auto res_525=network->addElementWise(*res_524->getOutput(0),*res_262->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_525 && "failed to build Node_6198 (type:add)");
  res_525->getOutput(0)->setName("Node_6198:0");
  auto res_526=network->addActivation(*res_525->getOutput(0),ActivationType::kRELU);
  assert(res_526 && "failed to build Node_6199 (type:relu)");
  res_526->getOutput(0)->setName("Node_6199:0");
  auto res_527=network->addShuffle(*res_526->getOutput(0));
  res_527->setReshapeDimensions(Dims3{128,1,1});
  assert(res_527 && "failed to build Node_6199_reshape (type:reshape)");
  res_527->getOutput(0)->setName("Node_6199_reshape:0");
  auto res_528=network->addFullyConnected(*res_527->getOutput(0),32,mWeightsMap["weight_528"],mWeightsMap["bias_528"]);
  assert(res_528 && "failed to build Node_6207 (type:dense)");
  res_528->getOutput(0)->setName("Node_6207:0");
  auto res_529=network->addShuffle(*res_528->getOutput(0));
  res_529->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_529 && "failed to build Node_6207_reshape (type:reshape)");
  res_529->getOutput(0)->setName("Node_6207_reshape:0");
  auto res_530=network->addReduce(*res_529->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_530 && "failed to build Node_6214_mean (type:mean)");
  res_530->getOutput(0)->setName("Node_6214_mean:0");
  auto res_531=network->addElementWise(*res_529->getOutput(0),*res_530->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_531 && "failed to build Node_6214_diff (type:sub)");
  res_531->getOutput(0)->setName("Node_6214_diff:0");
  auto res_532=network->addElementWise(*res_531->getOutput(0),*res_426->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_532 && "failed to build Node_6214_power (type:power)");
  res_532->getOutput(0)->setName("Node_6214_power:0");
  auto res_533=network->addReduce(*res_532->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_533 && "failed to build Node_6214_var (type:mean)");
  res_533->getOutput(0)->setName("Node_6214_var:0");
  auto res_534=network->addElementWise(*res_533->getOutput(0),*res_370->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_534 && "failed to build Node_6214_modify (type:add)");
  res_534->getOutput(0)->setName("Node_6214_modify:0");
  auto res_535=network->addUnary(*res_534->getOutput(0),UnaryOperation::kSQRT);
  assert(res_535 && "failed to build Node_6214_sqrt (type:power)");
  res_535->getOutput(0)->setName("Node_6214_sqrt:0");
  auto res_536=network->addElementWise(*res_531->getOutput(0),*res_535->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_536 && "failed to build Node_6214_rsqrt (type:divide)");
  res_536->getOutput(0)->setName("Node_6214_rsqrt:0");
  auto res_537=network->addElementWise(*res_536->getOutput(0),*res_263->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_537 && "failed to build Node_6214_mul (type:multiply)");
  res_537->getOutput(0)->setName("Node_6214_mul:0");
  auto res_538=network->addElementWise(*res_537->getOutput(0),*res_264->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_538 && "failed to build Node_6214 (type:add)");
  res_538->getOutput(0)->setName("Node_6214:0");
  auto res_539=network->addActivation(*res_538->getOutput(0),ActivationType::kRELU);
  assert(res_539 && "failed to build Node_6215 (type:relu)");
  res_539->getOutput(0)->setName("Node_6215:0");
  auto res_540=network->addElementWise(*inputs[3],*res_427->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_540 && "failed to build Node_6262_power (type:power)");
  res_540->getOutput(0)->setName("Node_6262_power:0");
  auto res_541=network->addReduce(*res_540->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_541 && "failed to build Node_6262_var (type:mean)");
  res_541->getOutput(0)->setName("Node_6262_var:0");
  auto res_542=network->addElementWise(*res_541->getOutput(0),*res_371->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_542 && "failed to build Node_6262_modify (type:add)");
  res_542->getOutput(0)->setName("Node_6262_modify:0");
  auto res_543=network->addUnary(*res_542->getOutput(0),UnaryOperation::kSQRT);
  assert(res_543 && "failed to build Node_6262_sqrt (type:power)");
  res_543->getOutput(0)->setName("Node_6262_sqrt:0");
  auto res_544=network->addElementWise(*inputs[3],*res_543->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_544 && "failed to build Node_6262_rsqrt (type:divide)");
  res_544->getOutput(0)->setName("Node_6262_rsqrt:0");
  auto res_545=network->addElementWise(*res_544->getOutput(0),*res_265->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_545 && "failed to build Node_6262_mul (type:multiply)");
  res_545->getOutput(0)->setName("Node_6262_mul:0");
  auto res_546=network->addElementWise(*res_545->getOutput(0),*res_266->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_546 && "failed to build Node_6262 (type:add)");
  res_546->getOutput(0)->setName("Node_6262:0");
  auto res_547=network->addActivation(*res_546->getOutput(0),ActivationType::kRELU);
  assert(res_547 && "failed to build Node_6263 (type:relu)");
  res_547->getOutput(0)->setName("Node_6263:0");
  auto res_548=network->addShuffle(*res_547->getOutput(0));
  res_548->setReshapeDimensions(Dims3{128,1,1});
  assert(res_548 && "failed to build Node_6263_reshape (type:reshape)");
  res_548->getOutput(0)->setName("Node_6263_reshape:0");
  auto res_549=network->addFullyConnected(*res_548->getOutput(0),32,mWeightsMap["weight_549"],mWeightsMap["bias_549"]);
  assert(res_549 && "failed to build Node_6271 (type:dense)");
  res_549->getOutput(0)->setName("Node_6271:0");
  auto res_550=network->addShuffle(*res_549->getOutput(0));
  res_550->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_550 && "failed to build Node_6271_reshape (type:reshape)");
  res_550->getOutput(0)->setName("Node_6271_reshape:0");
  auto res_551=network->addReduce(*res_550->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_551 && "failed to build Node_6278_mean (type:mean)");
  res_551->getOutput(0)->setName("Node_6278_mean:0");
  auto res_552=network->addElementWise(*res_550->getOutput(0),*res_551->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_552 && "failed to build Node_6278_diff (type:sub)");
  res_552->getOutput(0)->setName("Node_6278_diff:0");
  auto res_553=network->addElementWise(*res_552->getOutput(0),*res_428->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_553 && "failed to build Node_6278_power (type:power)");
  res_553->getOutput(0)->setName("Node_6278_power:0");
  auto res_554=network->addReduce(*res_553->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_554 && "failed to build Node_6278_var (type:mean)");
  res_554->getOutput(0)->setName("Node_6278_var:0");
  auto res_555=network->addElementWise(*res_554->getOutput(0),*res_372->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_555 && "failed to build Node_6278_modify (type:add)");
  res_555->getOutput(0)->setName("Node_6278_modify:0");
  auto res_556=network->addUnary(*res_555->getOutput(0),UnaryOperation::kSQRT);
  assert(res_556 && "failed to build Node_6278_sqrt (type:power)");
  res_556->getOutput(0)->setName("Node_6278_sqrt:0");
  auto res_557=network->addElementWise(*res_552->getOutput(0),*res_556->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_557 && "failed to build Node_6278_rsqrt (type:divide)");
  res_557->getOutput(0)->setName("Node_6278_rsqrt:0");
  auto res_558=network->addElementWise(*res_557->getOutput(0),*res_267->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_558 && "failed to build Node_6278_mul (type:multiply)");
  res_558->getOutput(0)->setName("Node_6278_mul:0");
  auto res_559=network->addElementWise(*res_558->getOutput(0),*res_268->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_559 && "failed to build Node_6278 (type:add)");
  res_559->getOutput(0)->setName("Node_6278:0");
  auto res_560=network->addActivation(*res_559->getOutput(0),ActivationType::kRELU);
  assert(res_560 && "failed to build Node_6279 (type:relu)");
  res_560->getOutput(0)->setName("Node_6279:0");
  auto res_561=network->addElementWise(*inputs[4],*res_429->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_561 && "failed to build Node_6326_power (type:power)");
  res_561->getOutput(0)->setName("Node_6326_power:0");
  auto res_562=network->addReduce(*res_561->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_562 && "failed to build Node_6326_var (type:mean)");
  res_562->getOutput(0)->setName("Node_6326_var:0");
  auto res_563=network->addElementWise(*res_562->getOutput(0),*res_373->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_563 && "failed to build Node_6326_modify (type:add)");
  res_563->getOutput(0)->setName("Node_6326_modify:0");
  auto res_564=network->addUnary(*res_563->getOutput(0),UnaryOperation::kSQRT);
  assert(res_564 && "failed to build Node_6326_sqrt (type:power)");
  res_564->getOutput(0)->setName("Node_6326_sqrt:0");
  auto res_565=network->addElementWise(*inputs[4],*res_564->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_565 && "failed to build Node_6326_rsqrt (type:divide)");
  res_565->getOutput(0)->setName("Node_6326_rsqrt:0");
  auto res_566=network->addElementWise(*res_565->getOutput(0),*res_269->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_566 && "failed to build Node_6326_mul (type:multiply)");
  res_566->getOutput(0)->setName("Node_6326_mul:0");
  auto res_567=network->addElementWise(*res_566->getOutput(0),*res_270->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_567 && "failed to build Node_6326 (type:add)");
  res_567->getOutput(0)->setName("Node_6326:0");
  auto res_568=network->addActivation(*res_567->getOutput(0),ActivationType::kRELU);
  assert(res_568 && "failed to build Node_6327 (type:relu)");
  res_568->getOutput(0)->setName("Node_6327:0");
  auto res_569=network->addShuffle(*res_568->getOutput(0));
  res_569->setReshapeDimensions(Dims3{128,1,1});
  assert(res_569 && "failed to build Node_6327_reshape (type:reshape)");
  res_569->getOutput(0)->setName("Node_6327_reshape:0");
  auto res_570=network->addFullyConnected(*res_569->getOutput(0),32,mWeightsMap["weight_570"],mWeightsMap["bias_570"]);
  assert(res_570 && "failed to build Node_6335 (type:dense)");
  res_570->getOutput(0)->setName("Node_6335:0");
  auto res_571=network->addShuffle(*res_570->getOutput(0));
  res_571->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_571 && "failed to build Node_6335_reshape (type:reshape)");
  res_571->getOutput(0)->setName("Node_6335_reshape:0");
  auto res_572=network->addReduce(*res_571->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_572 && "failed to build Node_6342_mean (type:mean)");
  res_572->getOutput(0)->setName("Node_6342_mean:0");
  auto res_573=network->addElementWise(*res_571->getOutput(0),*res_572->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_573 && "failed to build Node_6342_diff (type:sub)");
  res_573->getOutput(0)->setName("Node_6342_diff:0");
  auto res_574=network->addElementWise(*res_573->getOutput(0),*res_430->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_574 && "failed to build Node_6342_power (type:power)");
  res_574->getOutput(0)->setName("Node_6342_power:0");
  auto res_575=network->addReduce(*res_574->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_575 && "failed to build Node_6342_var (type:mean)");
  res_575->getOutput(0)->setName("Node_6342_var:0");
  auto res_576=network->addElementWise(*res_575->getOutput(0),*res_374->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_576 && "failed to build Node_6342_modify (type:add)");
  res_576->getOutput(0)->setName("Node_6342_modify:0");
  auto res_577=network->addUnary(*res_576->getOutput(0),UnaryOperation::kSQRT);
  assert(res_577 && "failed to build Node_6342_sqrt (type:power)");
  res_577->getOutput(0)->setName("Node_6342_sqrt:0");
  auto res_578=network->addElementWise(*res_573->getOutput(0),*res_577->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_578 && "failed to build Node_6342_rsqrt (type:divide)");
  res_578->getOutput(0)->setName("Node_6342_rsqrt:0");
  auto res_579=network->addElementWise(*res_578->getOutput(0),*res_271->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_579 && "failed to build Node_6342_mul (type:multiply)");
  res_579->getOutput(0)->setName("Node_6342_mul:0");
  auto res_580=network->addElementWise(*res_579->getOutput(0),*res_272->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_580 && "failed to build Node_6342 (type:add)");
  res_580->getOutput(0)->setName("Node_6342:0");
  auto res_581=network->addActivation(*res_580->getOutput(0),ActivationType::kRELU);
  assert(res_581 && "failed to build Node_6343 (type:relu)");
  res_581->getOutput(0)->setName("Node_6343:0");
  auto res_582=network->addElementWise(*inputs[5],*res_431->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_582 && "failed to build Node_6390_power (type:power)");
  res_582->getOutput(0)->setName("Node_6390_power:0");
  auto res_583=network->addReduce(*res_582->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_583 && "failed to build Node_6390_var (type:mean)");
  res_583->getOutput(0)->setName("Node_6390_var:0");
  auto res_584=network->addElementWise(*res_583->getOutput(0),*res_375->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_584 && "failed to build Node_6390_modify (type:add)");
  res_584->getOutput(0)->setName("Node_6390_modify:0");
  auto res_585=network->addUnary(*res_584->getOutput(0),UnaryOperation::kSQRT);
  assert(res_585 && "failed to build Node_6390_sqrt (type:power)");
  res_585->getOutput(0)->setName("Node_6390_sqrt:0");
  auto res_586=network->addElementWise(*inputs[5],*res_585->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_586 && "failed to build Node_6390_rsqrt (type:divide)");
  res_586->getOutput(0)->setName("Node_6390_rsqrt:0");
  auto res_587=network->addElementWise(*res_586->getOutput(0),*res_273->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_587 && "failed to build Node_6390_mul (type:multiply)");
  res_587->getOutput(0)->setName("Node_6390_mul:0");
  auto res_588=network->addElementWise(*res_587->getOutput(0),*res_274->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_588 && "failed to build Node_6390 (type:add)");
  res_588->getOutput(0)->setName("Node_6390:0");
  auto res_589=network->addActivation(*res_588->getOutput(0),ActivationType::kRELU);
  assert(res_589 && "failed to build Node_6391 (type:relu)");
  res_589->getOutput(0)->setName("Node_6391:0");
  auto res_590=network->addShuffle(*res_589->getOutput(0));
  res_590->setReshapeDimensions(Dims3{128,1,1});
  assert(res_590 && "failed to build Node_6391_reshape (type:reshape)");
  res_590->getOutput(0)->setName("Node_6391_reshape:0");
  auto res_591=network->addFullyConnected(*res_590->getOutput(0),32,mWeightsMap["weight_591"],mWeightsMap["bias_591"]);
  assert(res_591 && "failed to build Node_6399 (type:dense)");
  res_591->getOutput(0)->setName("Node_6399:0");
  auto res_592=network->addShuffle(*res_591->getOutput(0));
  res_592->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_592 && "failed to build Node_6399_reshape (type:reshape)");
  res_592->getOutput(0)->setName("Node_6399_reshape:0");
  auto res_593=network->addReduce(*res_592->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_593 && "failed to build Node_6406_mean (type:mean)");
  res_593->getOutput(0)->setName("Node_6406_mean:0");
  auto res_594=network->addElementWise(*res_592->getOutput(0),*res_593->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_594 && "failed to build Node_6406_diff (type:sub)");
  res_594->getOutput(0)->setName("Node_6406_diff:0");
  auto res_595=network->addElementWise(*res_594->getOutput(0),*res_432->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_595 && "failed to build Node_6406_power (type:power)");
  res_595->getOutput(0)->setName("Node_6406_power:0");
  auto res_596=network->addReduce(*res_595->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_596 && "failed to build Node_6406_var (type:mean)");
  res_596->getOutput(0)->setName("Node_6406_var:0");
  auto res_597=network->addElementWise(*res_596->getOutput(0),*res_376->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_597 && "failed to build Node_6406_modify (type:add)");
  res_597->getOutput(0)->setName("Node_6406_modify:0");
  auto res_598=network->addUnary(*res_597->getOutput(0),UnaryOperation::kSQRT);
  assert(res_598 && "failed to build Node_6406_sqrt (type:power)");
  res_598->getOutput(0)->setName("Node_6406_sqrt:0");
  auto res_599=network->addElementWise(*res_594->getOutput(0),*res_598->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_599 && "failed to build Node_6406_rsqrt (type:divide)");
  res_599->getOutput(0)->setName("Node_6406_rsqrt:0");
  auto res_600=network->addElementWise(*res_599->getOutput(0),*res_275->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_600 && "failed to build Node_6406_mul (type:multiply)");
  res_600->getOutput(0)->setName("Node_6406_mul:0");
  auto res_601=network->addElementWise(*res_600->getOutput(0),*res_276->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_601 && "failed to build Node_6406 (type:add)");
  res_601->getOutput(0)->setName("Node_6406:0");
  auto res_602=network->addActivation(*res_601->getOutput(0),ActivationType::kRELU);
  assert(res_602 && "failed to build Node_6407 (type:relu)");
  res_602->getOutput(0)->setName("Node_6407:0");
  auto res_603=network->addElementWise(*inputs[6],*res_433->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_603 && "failed to build Node_6454_power (type:power)");
  res_603->getOutput(0)->setName("Node_6454_power:0");
  auto res_604=network->addReduce(*res_603->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_604 && "failed to build Node_6454_var (type:mean)");
  res_604->getOutput(0)->setName("Node_6454_var:0");
  auto res_605=network->addElementWise(*res_604->getOutput(0),*res_377->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_605 && "failed to build Node_6454_modify (type:add)");
  res_605->getOutput(0)->setName("Node_6454_modify:0");
  auto res_606=network->addUnary(*res_605->getOutput(0),UnaryOperation::kSQRT);
  assert(res_606 && "failed to build Node_6454_sqrt (type:power)");
  res_606->getOutput(0)->setName("Node_6454_sqrt:0");
  auto res_607=network->addElementWise(*inputs[6],*res_606->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_607 && "failed to build Node_6454_rsqrt (type:divide)");
  res_607->getOutput(0)->setName("Node_6454_rsqrt:0");
  auto res_608=network->addElementWise(*res_607->getOutput(0),*res_277->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_608 && "failed to build Node_6454_mul (type:multiply)");
  res_608->getOutput(0)->setName("Node_6454_mul:0");
  auto res_609=network->addElementWise(*res_608->getOutput(0),*res_278->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_609 && "failed to build Node_6454 (type:add)");
  res_609->getOutput(0)->setName("Node_6454:0");
  auto res_610=network->addActivation(*res_609->getOutput(0),ActivationType::kRELU);
  assert(res_610 && "failed to build Node_6455 (type:relu)");
  res_610->getOutput(0)->setName("Node_6455:0");
  auto res_611=network->addShuffle(*res_610->getOutput(0));
  res_611->setReshapeDimensions(Dims3{128,1,1});
  assert(res_611 && "failed to build Node_6455_reshape (type:reshape)");
  res_611->getOutput(0)->setName("Node_6455_reshape:0");
  auto res_612=network->addFullyConnected(*res_611->getOutput(0),32,mWeightsMap["weight_612"],mWeightsMap["bias_612"]);
  assert(res_612 && "failed to build Node_6463 (type:dense)");
  res_612->getOutput(0)->setName("Node_6463:0");
  auto res_613=network->addShuffle(*res_612->getOutput(0));
  res_613->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_613 && "failed to build Node_6463_reshape (type:reshape)");
  res_613->getOutput(0)->setName("Node_6463_reshape:0");
  auto res_614=network->addReduce(*res_613->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_614 && "failed to build Node_6470_mean (type:mean)");
  res_614->getOutput(0)->setName("Node_6470_mean:0");
  auto res_615=network->addElementWise(*res_613->getOutput(0),*res_614->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_615 && "failed to build Node_6470_diff (type:sub)");
  res_615->getOutput(0)->setName("Node_6470_diff:0");
  auto res_616=network->addElementWise(*res_615->getOutput(0),*res_434->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_616 && "failed to build Node_6470_power (type:power)");
  res_616->getOutput(0)->setName("Node_6470_power:0");
  auto res_617=network->addReduce(*res_616->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_617 && "failed to build Node_6470_var (type:mean)");
  res_617->getOutput(0)->setName("Node_6470_var:0");
  auto res_618=network->addElementWise(*res_617->getOutput(0),*res_378->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_618 && "failed to build Node_6470_modify (type:add)");
  res_618->getOutput(0)->setName("Node_6470_modify:0");
  auto res_619=network->addUnary(*res_618->getOutput(0),UnaryOperation::kSQRT);
  assert(res_619 && "failed to build Node_6470_sqrt (type:power)");
  res_619->getOutput(0)->setName("Node_6470_sqrt:0");
  auto res_620=network->addElementWise(*res_615->getOutput(0),*res_619->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_620 && "failed to build Node_6470_rsqrt (type:divide)");
  res_620->getOutput(0)->setName("Node_6470_rsqrt:0");
  auto res_621=network->addElementWise(*res_620->getOutput(0),*res_279->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_621 && "failed to build Node_6470_mul (type:multiply)");
  res_621->getOutput(0)->setName("Node_6470_mul:0");
  auto res_622=network->addElementWise(*res_621->getOutput(0),*res_280->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_622 && "failed to build Node_6470 (type:add)");
  res_622->getOutput(0)->setName("Node_6470:0");
  auto res_623=network->addActivation(*res_622->getOutput(0),ActivationType::kRELU);
  assert(res_623 && "failed to build Node_6471 (type:relu)");
  res_623->getOutput(0)->setName("Node_6471:0");
  auto res_624=network->addElementWise(*inputs[7],*res_435->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_624 && "failed to build Node_6518_power (type:power)");
  res_624->getOutput(0)->setName("Node_6518_power:0");
  auto res_625=network->addReduce(*res_624->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_625 && "failed to build Node_6518_var (type:mean)");
  res_625->getOutput(0)->setName("Node_6518_var:0");
  auto res_626=network->addElementWise(*res_625->getOutput(0),*res_379->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_626 && "failed to build Node_6518_modify (type:add)");
  res_626->getOutput(0)->setName("Node_6518_modify:0");
  auto res_627=network->addUnary(*res_626->getOutput(0),UnaryOperation::kSQRT);
  assert(res_627 && "failed to build Node_6518_sqrt (type:power)");
  res_627->getOutput(0)->setName("Node_6518_sqrt:0");
  auto res_628=network->addElementWise(*inputs[7],*res_627->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_628 && "failed to build Node_6518_rsqrt (type:divide)");
  res_628->getOutput(0)->setName("Node_6518_rsqrt:0");
  auto res_629=network->addElementWise(*res_628->getOutput(0),*res_281->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_629 && "failed to build Node_6518_mul (type:multiply)");
  res_629->getOutput(0)->setName("Node_6518_mul:0");
  auto res_630=network->addElementWise(*res_629->getOutput(0),*res_282->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_630 && "failed to build Node_6518 (type:add)");
  res_630->getOutput(0)->setName("Node_6518:0");
  auto res_631=network->addActivation(*res_630->getOutput(0),ActivationType::kRELU);
  assert(res_631 && "failed to build Node_6519 (type:relu)");
  res_631->getOutput(0)->setName("Node_6519:0");
  auto res_632=network->addShuffle(*res_631->getOutput(0));
  res_632->setReshapeDimensions(Dims3{128,1,1});
  assert(res_632 && "failed to build Node_6519_reshape (type:reshape)");
  res_632->getOutput(0)->setName("Node_6519_reshape:0");
  auto res_633=network->addFullyConnected(*res_632->getOutput(0),32,mWeightsMap["weight_633"],mWeightsMap["bias_633"]);
  assert(res_633 && "failed to build Node_6527 (type:dense)");
  res_633->getOutput(0)->setName("Node_6527:0");
  auto res_634=network->addShuffle(*res_633->getOutput(0));
  res_634->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_634 && "failed to build Node_6527_reshape (type:reshape)");
  res_634->getOutput(0)->setName("Node_6527_reshape:0");
  auto res_635=network->addReduce(*res_634->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_635 && "failed to build Node_6534_mean (type:mean)");
  res_635->getOutput(0)->setName("Node_6534_mean:0");
  auto res_636=network->addElementWise(*res_634->getOutput(0),*res_635->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_636 && "failed to build Node_6534_diff (type:sub)");
  res_636->getOutput(0)->setName("Node_6534_diff:0");
  auto res_637=network->addElementWise(*res_636->getOutput(0),*res_436->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_637 && "failed to build Node_6534_power (type:power)");
  res_637->getOutput(0)->setName("Node_6534_power:0");
  auto res_638=network->addReduce(*res_637->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_638 && "failed to build Node_6534_var (type:mean)");
  res_638->getOutput(0)->setName("Node_6534_var:0");
  auto res_639=network->addElementWise(*res_638->getOutput(0),*res_380->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_639 && "failed to build Node_6534_modify (type:add)");
  res_639->getOutput(0)->setName("Node_6534_modify:0");
  auto res_640=network->addUnary(*res_639->getOutput(0),UnaryOperation::kSQRT);
  assert(res_640 && "failed to build Node_6534_sqrt (type:power)");
  res_640->getOutput(0)->setName("Node_6534_sqrt:0");
  auto res_641=network->addElementWise(*res_636->getOutput(0),*res_640->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_641 && "failed to build Node_6534_rsqrt (type:divide)");
  res_641->getOutput(0)->setName("Node_6534_rsqrt:0");
  auto res_642=network->addElementWise(*res_641->getOutput(0),*res_283->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_642 && "failed to build Node_6534_mul (type:multiply)");
  res_642->getOutput(0)->setName("Node_6534_mul:0");
  auto res_643=network->addElementWise(*res_642->getOutput(0),*res_284->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_643 && "failed to build Node_6534 (type:add)");
  res_643->getOutput(0)->setName("Node_6534:0");
  auto res_644=network->addActivation(*res_643->getOutput(0),ActivationType::kRELU);
  assert(res_644 && "failed to build Node_6535 (type:relu)");
  res_644->getOutput(0)->setName("Node_6535:0");
  auto res_645=network->addElementWise(*inputs[8],*res_437->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_645 && "failed to build Node_6582_power (type:power)");
  res_645->getOutput(0)->setName("Node_6582_power:0");
  auto res_646=network->addReduce(*res_645->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_646 && "failed to build Node_6582_var (type:mean)");
  res_646->getOutput(0)->setName("Node_6582_var:0");
  auto res_647=network->addElementWise(*res_646->getOutput(0),*res_381->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_647 && "failed to build Node_6582_modify (type:add)");
  res_647->getOutput(0)->setName("Node_6582_modify:0");
  auto res_648=network->addUnary(*res_647->getOutput(0),UnaryOperation::kSQRT);
  assert(res_648 && "failed to build Node_6582_sqrt (type:power)");
  res_648->getOutput(0)->setName("Node_6582_sqrt:0");
  auto res_649=network->addElementWise(*inputs[8],*res_648->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_649 && "failed to build Node_6582_rsqrt (type:divide)");
  res_649->getOutput(0)->setName("Node_6582_rsqrt:0");
  auto res_650=network->addElementWise(*res_649->getOutput(0),*res_285->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_650 && "failed to build Node_6582_mul (type:multiply)");
  res_650->getOutput(0)->setName("Node_6582_mul:0");
  auto res_651=network->addElementWise(*res_650->getOutput(0),*res_286->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_651 && "failed to build Node_6582 (type:add)");
  res_651->getOutput(0)->setName("Node_6582:0");
  auto res_652=network->addActivation(*res_651->getOutput(0),ActivationType::kRELU);
  assert(res_652 && "failed to build Node_6583 (type:relu)");
  res_652->getOutput(0)->setName("Node_6583:0");
  auto res_653=network->addShuffle(*res_652->getOutput(0));
  res_653->setReshapeDimensions(Dims3{128,1,1});
  assert(res_653 && "failed to build Node_6583_reshape (type:reshape)");
  res_653->getOutput(0)->setName("Node_6583_reshape:0");
  auto res_654=network->addFullyConnected(*res_653->getOutput(0),32,mWeightsMap["weight_654"],mWeightsMap["bias_654"]);
  assert(res_654 && "failed to build Node_6591 (type:dense)");
  res_654->getOutput(0)->setName("Node_6591:0");
  auto res_655=network->addShuffle(*res_654->getOutput(0));
  res_655->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_655 && "failed to build Node_6591_reshape (type:reshape)");
  res_655->getOutput(0)->setName("Node_6591_reshape:0");
  auto res_656=network->addReduce(*res_655->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_656 && "failed to build Node_6598_mean (type:mean)");
  res_656->getOutput(0)->setName("Node_6598_mean:0");
  auto res_657=network->addElementWise(*res_655->getOutput(0),*res_656->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_657 && "failed to build Node_6598_diff (type:sub)");
  res_657->getOutput(0)->setName("Node_6598_diff:0");
  auto res_658=network->addElementWise(*res_657->getOutput(0),*res_438->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_658 && "failed to build Node_6598_power (type:power)");
  res_658->getOutput(0)->setName("Node_6598_power:0");
  auto res_659=network->addReduce(*res_658->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_659 && "failed to build Node_6598_var (type:mean)");
  res_659->getOutput(0)->setName("Node_6598_var:0");
  auto res_660=network->addElementWise(*res_659->getOutput(0),*res_382->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_660 && "failed to build Node_6598_modify (type:add)");
  res_660->getOutput(0)->setName("Node_6598_modify:0");
  auto res_661=network->addUnary(*res_660->getOutput(0),UnaryOperation::kSQRT);
  assert(res_661 && "failed to build Node_6598_sqrt (type:power)");
  res_661->getOutput(0)->setName("Node_6598_sqrt:0");
  auto res_662=network->addElementWise(*res_657->getOutput(0),*res_661->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_662 && "failed to build Node_6598_rsqrt (type:divide)");
  res_662->getOutput(0)->setName("Node_6598_rsqrt:0");
  auto res_663=network->addElementWise(*res_662->getOutput(0),*res_287->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_663 && "failed to build Node_6598_mul (type:multiply)");
  res_663->getOutput(0)->setName("Node_6598_mul:0");
  auto res_664=network->addElementWise(*res_663->getOutput(0),*res_288->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_664 && "failed to build Node_6598 (type:add)");
  res_664->getOutput(0)->setName("Node_6598:0");
  auto res_665=network->addActivation(*res_664->getOutput(0),ActivationType::kRELU);
  assert(res_665 && "failed to build Node_6599 (type:relu)");
  res_665->getOutput(0)->setName("Node_6599:0");
  auto res_666=network->addElementWise(*inputs[9],*res_439->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_666 && "failed to build Node_6646_power (type:power)");
  res_666->getOutput(0)->setName("Node_6646_power:0");
  auto res_667=network->addReduce(*res_666->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_667 && "failed to build Node_6646_var (type:mean)");
  res_667->getOutput(0)->setName("Node_6646_var:0");
  auto res_668=network->addElementWise(*res_667->getOutput(0),*res_383->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_668 && "failed to build Node_6646_modify (type:add)");
  res_668->getOutput(0)->setName("Node_6646_modify:0");
  auto res_669=network->addUnary(*res_668->getOutput(0),UnaryOperation::kSQRT);
  assert(res_669 && "failed to build Node_6646_sqrt (type:power)");
  res_669->getOutput(0)->setName("Node_6646_sqrt:0");
  auto res_670=network->addElementWise(*inputs[9],*res_669->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_670 && "failed to build Node_6646_rsqrt (type:divide)");
  res_670->getOutput(0)->setName("Node_6646_rsqrt:0");
  auto res_671=network->addElementWise(*res_670->getOutput(0),*res_289->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_671 && "failed to build Node_6646_mul (type:multiply)");
  res_671->getOutput(0)->setName("Node_6646_mul:0");
  auto res_672=network->addElementWise(*res_671->getOutput(0),*res_290->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_672 && "failed to build Node_6646 (type:add)");
  res_672->getOutput(0)->setName("Node_6646:0");
  auto res_673=network->addActivation(*res_672->getOutput(0),ActivationType::kRELU);
  assert(res_673 && "failed to build Node_6647 (type:relu)");
  res_673->getOutput(0)->setName("Node_6647:0");
  auto res_674=network->addShuffle(*res_673->getOutput(0));
  res_674->setReshapeDimensions(Dims3{128,1,1});
  assert(res_674 && "failed to build Node_6647_reshape (type:reshape)");
  res_674->getOutput(0)->setName("Node_6647_reshape:0");
  auto res_675=network->addFullyConnected(*res_674->getOutput(0),32,mWeightsMap["weight_675"],mWeightsMap["bias_675"]);
  assert(res_675 && "failed to build Node_6655 (type:dense)");
  res_675->getOutput(0)->setName("Node_6655:0");
  auto res_676=network->addShuffle(*res_675->getOutput(0));
  res_676->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_676 && "failed to build Node_6655_reshape (type:reshape)");
  res_676->getOutput(0)->setName("Node_6655_reshape:0");
  auto res_677=network->addReduce(*res_676->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_677 && "failed to build Node_6662_mean (type:mean)");
  res_677->getOutput(0)->setName("Node_6662_mean:0");
  auto res_678=network->addElementWise(*res_676->getOutput(0),*res_677->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_678 && "failed to build Node_6662_diff (type:sub)");
  res_678->getOutput(0)->setName("Node_6662_diff:0");
  auto res_679=network->addElementWise(*res_678->getOutput(0),*res_440->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_679 && "failed to build Node_6662_power (type:power)");
  res_679->getOutput(0)->setName("Node_6662_power:0");
  auto res_680=network->addReduce(*res_679->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_680 && "failed to build Node_6662_var (type:mean)");
  res_680->getOutput(0)->setName("Node_6662_var:0");
  auto res_681=network->addElementWise(*res_680->getOutput(0),*res_384->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_681 && "failed to build Node_6662_modify (type:add)");
  res_681->getOutput(0)->setName("Node_6662_modify:0");
  auto res_682=network->addUnary(*res_681->getOutput(0),UnaryOperation::kSQRT);
  assert(res_682 && "failed to build Node_6662_sqrt (type:power)");
  res_682->getOutput(0)->setName("Node_6662_sqrt:0");
  auto res_683=network->addElementWise(*res_678->getOutput(0),*res_682->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_683 && "failed to build Node_6662_rsqrt (type:divide)");
  res_683->getOutput(0)->setName("Node_6662_rsqrt:0");
  auto res_684=network->addElementWise(*res_683->getOutput(0),*res_291->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_684 && "failed to build Node_6662_mul (type:multiply)");
  res_684->getOutput(0)->setName("Node_6662_mul:0");
  auto res_685=network->addElementWise(*res_684->getOutput(0),*res_292->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_685 && "failed to build Node_6662 (type:add)");
  res_685->getOutput(0)->setName("Node_6662:0");
  auto res_686=network->addActivation(*res_685->getOutput(0),ActivationType::kRELU);
  assert(res_686 && "failed to build Node_6663 (type:relu)");
  res_686->getOutput(0)->setName("Node_6663:0");
  auto res_687=network->addElementWise(*inputs[10],*res_441->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_687 && "failed to build Node_6710_power (type:power)");
  res_687->getOutput(0)->setName("Node_6710_power:0");
  auto res_688=network->addReduce(*res_687->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_688 && "failed to build Node_6710_var (type:mean)");
  res_688->getOutput(0)->setName("Node_6710_var:0");
  auto res_689=network->addElementWise(*res_688->getOutput(0),*res_385->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_689 && "failed to build Node_6710_modify (type:add)");
  res_689->getOutput(0)->setName("Node_6710_modify:0");
  auto res_690=network->addUnary(*res_689->getOutput(0),UnaryOperation::kSQRT);
  assert(res_690 && "failed to build Node_6710_sqrt (type:power)");
  res_690->getOutput(0)->setName("Node_6710_sqrt:0");
  auto res_691=network->addElementWise(*inputs[10],*res_690->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_691 && "failed to build Node_6710_rsqrt (type:divide)");
  res_691->getOutput(0)->setName("Node_6710_rsqrt:0");
  auto res_692=network->addElementWise(*res_691->getOutput(0),*res_293->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_692 && "failed to build Node_6710_mul (type:multiply)");
  res_692->getOutput(0)->setName("Node_6710_mul:0");
  auto res_693=network->addElementWise(*res_692->getOutput(0),*res_294->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_693 && "failed to build Node_6710 (type:add)");
  res_693->getOutput(0)->setName("Node_6710:0");
  auto res_694=network->addActivation(*res_693->getOutput(0),ActivationType::kRELU);
  assert(res_694 && "failed to build Node_6711 (type:relu)");
  res_694->getOutput(0)->setName("Node_6711:0");
  auto res_695=network->addShuffle(*res_694->getOutput(0));
  res_695->setReshapeDimensions(Dims3{128,1,1});
  assert(res_695 && "failed to build Node_6711_reshape (type:reshape)");
  res_695->getOutput(0)->setName("Node_6711_reshape:0");
  auto res_696=network->addFullyConnected(*res_695->getOutput(0),32,mWeightsMap["weight_696"],mWeightsMap["bias_696"]);
  assert(res_696 && "failed to build Node_6719 (type:dense)");
  res_696->getOutput(0)->setName("Node_6719:0");
  auto res_697=network->addShuffle(*res_696->getOutput(0));
  res_697->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_697 && "failed to build Node_6719_reshape (type:reshape)");
  res_697->getOutput(0)->setName("Node_6719_reshape:0");
  auto res_698=network->addReduce(*res_697->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_698 && "failed to build Node_6726_mean (type:mean)");
  res_698->getOutput(0)->setName("Node_6726_mean:0");
  auto res_699=network->addElementWise(*res_697->getOutput(0),*res_698->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_699 && "failed to build Node_6726_diff (type:sub)");
  res_699->getOutput(0)->setName("Node_6726_diff:0");
  auto res_700=network->addElementWise(*res_699->getOutput(0),*res_442->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_700 && "failed to build Node_6726_power (type:power)");
  res_700->getOutput(0)->setName("Node_6726_power:0");
  auto res_701=network->addReduce(*res_700->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_701 && "failed to build Node_6726_var (type:mean)");
  res_701->getOutput(0)->setName("Node_6726_var:0");
  auto res_702=network->addElementWise(*res_701->getOutput(0),*res_386->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_702 && "failed to build Node_6726_modify (type:add)");
  res_702->getOutput(0)->setName("Node_6726_modify:0");
  auto res_703=network->addUnary(*res_702->getOutput(0),UnaryOperation::kSQRT);
  assert(res_703 && "failed to build Node_6726_sqrt (type:power)");
  res_703->getOutput(0)->setName("Node_6726_sqrt:0");
  auto res_704=network->addElementWise(*res_699->getOutput(0),*res_703->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_704 && "failed to build Node_6726_rsqrt (type:divide)");
  res_704->getOutput(0)->setName("Node_6726_rsqrt:0");
  auto res_705=network->addElementWise(*res_704->getOutput(0),*res_295->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_705 && "failed to build Node_6726_mul (type:multiply)");
  res_705->getOutput(0)->setName("Node_6726_mul:0");
  auto res_706=network->addElementWise(*res_705->getOutput(0),*res_296->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_706 && "failed to build Node_6726 (type:add)");
  res_706->getOutput(0)->setName("Node_6726:0");
  auto res_707=network->addActivation(*res_706->getOutput(0),ActivationType::kRELU);
  assert(res_707 && "failed to build Node_6727 (type:relu)");
  res_707->getOutput(0)->setName("Node_6727:0");
  auto res_708=network->addElementWise(*inputs[11],*res_443->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_708 && "failed to build Node_6774_power (type:power)");
  res_708->getOutput(0)->setName("Node_6774_power:0");
  auto res_709=network->addReduce(*res_708->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_709 && "failed to build Node_6774_var (type:mean)");
  res_709->getOutput(0)->setName("Node_6774_var:0");
  auto res_710=network->addElementWise(*res_709->getOutput(0),*res_387->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_710 && "failed to build Node_6774_modify (type:add)");
  res_710->getOutput(0)->setName("Node_6774_modify:0");
  auto res_711=network->addUnary(*res_710->getOutput(0),UnaryOperation::kSQRT);
  assert(res_711 && "failed to build Node_6774_sqrt (type:power)");
  res_711->getOutput(0)->setName("Node_6774_sqrt:0");
  auto res_712=network->addElementWise(*inputs[11],*res_711->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_712 && "failed to build Node_6774_rsqrt (type:divide)");
  res_712->getOutput(0)->setName("Node_6774_rsqrt:0");
  auto res_713=network->addElementWise(*res_712->getOutput(0),*res_297->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_713 && "failed to build Node_6774_mul (type:multiply)");
  res_713->getOutput(0)->setName("Node_6774_mul:0");
  auto res_714=network->addElementWise(*res_713->getOutput(0),*res_298->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_714 && "failed to build Node_6774 (type:add)");
  res_714->getOutput(0)->setName("Node_6774:0");
  auto res_715=network->addActivation(*res_714->getOutput(0),ActivationType::kRELU);
  assert(res_715 && "failed to build Node_6775 (type:relu)");
  res_715->getOutput(0)->setName("Node_6775:0");
  auto res_716=network->addShuffle(*res_715->getOutput(0));
  res_716->setReshapeDimensions(Dims3{128,1,1});
  assert(res_716 && "failed to build Node_6775_reshape (type:reshape)");
  res_716->getOutput(0)->setName("Node_6775_reshape:0");
  auto res_717=network->addFullyConnected(*res_716->getOutput(0),32,mWeightsMap["weight_717"],mWeightsMap["bias_717"]);
  assert(res_717 && "failed to build Node_6783 (type:dense)");
  res_717->getOutput(0)->setName("Node_6783:0");
  auto res_718=network->addShuffle(*res_717->getOutput(0));
  res_718->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_718 && "failed to build Node_6783_reshape (type:reshape)");
  res_718->getOutput(0)->setName("Node_6783_reshape:0");
  auto res_719=network->addReduce(*res_718->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_719 && "failed to build Node_6790_mean (type:mean)");
  res_719->getOutput(0)->setName("Node_6790_mean:0");
  auto res_720=network->addElementWise(*res_718->getOutput(0),*res_719->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_720 && "failed to build Node_6790_diff (type:sub)");
  res_720->getOutput(0)->setName("Node_6790_diff:0");
  auto res_721=network->addElementWise(*res_720->getOutput(0),*res_444->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_721 && "failed to build Node_6790_power (type:power)");
  res_721->getOutput(0)->setName("Node_6790_power:0");
  auto res_722=network->addReduce(*res_721->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_722 && "failed to build Node_6790_var (type:mean)");
  res_722->getOutput(0)->setName("Node_6790_var:0");
  auto res_723=network->addElementWise(*res_722->getOutput(0),*res_388->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_723 && "failed to build Node_6790_modify (type:add)");
  res_723->getOutput(0)->setName("Node_6790_modify:0");
  auto res_724=network->addUnary(*res_723->getOutput(0),UnaryOperation::kSQRT);
  assert(res_724 && "failed to build Node_6790_sqrt (type:power)");
  res_724->getOutput(0)->setName("Node_6790_sqrt:0");
  auto res_725=network->addElementWise(*res_720->getOutput(0),*res_724->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_725 && "failed to build Node_6790_rsqrt (type:divide)");
  res_725->getOutput(0)->setName("Node_6790_rsqrt:0");
  auto res_726=network->addElementWise(*res_725->getOutput(0),*res_299->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_726 && "failed to build Node_6790_mul (type:multiply)");
  res_726->getOutput(0)->setName("Node_6790_mul:0");
  auto res_727=network->addElementWise(*res_726->getOutput(0),*res_300->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_727 && "failed to build Node_6790 (type:add)");
  res_727->getOutput(0)->setName("Node_6790:0");
  auto res_728=network->addActivation(*res_727->getOutput(0),ActivationType::kRELU);
  assert(res_728 && "failed to build Node_6791 (type:relu)");
  res_728->getOutput(0)->setName("Node_6791:0");
  auto res_729=network->addElementWise(*inputs[12],*res_445->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_729 && "failed to build Node_6838_power (type:power)");
  res_729->getOutput(0)->setName("Node_6838_power:0");
  auto res_730=network->addReduce(*res_729->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_730 && "failed to build Node_6838_var (type:mean)");
  res_730->getOutput(0)->setName("Node_6838_var:0");
  auto res_731=network->addElementWise(*res_730->getOutput(0),*res_389->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_731 && "failed to build Node_6838_modify (type:add)");
  res_731->getOutput(0)->setName("Node_6838_modify:0");
  auto res_732=network->addUnary(*res_731->getOutput(0),UnaryOperation::kSQRT);
  assert(res_732 && "failed to build Node_6838_sqrt (type:power)");
  res_732->getOutput(0)->setName("Node_6838_sqrt:0");
  auto res_733=network->addElementWise(*inputs[12],*res_732->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_733 && "failed to build Node_6838_rsqrt (type:divide)");
  res_733->getOutput(0)->setName("Node_6838_rsqrt:0");
  auto res_734=network->addElementWise(*res_733->getOutput(0),*res_301->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_734 && "failed to build Node_6838_mul (type:multiply)");
  res_734->getOutput(0)->setName("Node_6838_mul:0");
  auto res_735=network->addElementWise(*res_734->getOutput(0),*res_302->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_735 && "failed to build Node_6838 (type:add)");
  res_735->getOutput(0)->setName("Node_6838:0");
  auto res_736=network->addActivation(*res_735->getOutput(0),ActivationType::kRELU);
  assert(res_736 && "failed to build Node_6839 (type:relu)");
  res_736->getOutput(0)->setName("Node_6839:0");
  auto res_737=network->addShuffle(*res_736->getOutput(0));
  res_737->setReshapeDimensions(Dims3{128,1,1});
  assert(res_737 && "failed to build Node_6839_reshape (type:reshape)");
  res_737->getOutput(0)->setName("Node_6839_reshape:0");
  auto res_738=network->addFullyConnected(*res_737->getOutput(0),32,mWeightsMap["weight_738"],mWeightsMap["bias_738"]);
  assert(res_738 && "failed to build Node_6847 (type:dense)");
  res_738->getOutput(0)->setName("Node_6847:0");
  auto res_739=network->addShuffle(*res_738->getOutput(0));
  res_739->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_739 && "failed to build Node_6847_reshape (type:reshape)");
  res_739->getOutput(0)->setName("Node_6847_reshape:0");
  auto res_740=network->addReduce(*res_739->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_740 && "failed to build Node_6854_mean (type:mean)");
  res_740->getOutput(0)->setName("Node_6854_mean:0");
  auto res_741=network->addElementWise(*res_739->getOutput(0),*res_740->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_741 && "failed to build Node_6854_diff (type:sub)");
  res_741->getOutput(0)->setName("Node_6854_diff:0");
  auto res_742=network->addElementWise(*res_741->getOutput(0),*res_446->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_742 && "failed to build Node_6854_power (type:power)");
  res_742->getOutput(0)->setName("Node_6854_power:0");
  auto res_743=network->addReduce(*res_742->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_743 && "failed to build Node_6854_var (type:mean)");
  res_743->getOutput(0)->setName("Node_6854_var:0");
  auto res_744=network->addElementWise(*res_743->getOutput(0),*res_390->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_744 && "failed to build Node_6854_modify (type:add)");
  res_744->getOutput(0)->setName("Node_6854_modify:0");
  auto res_745=network->addUnary(*res_744->getOutput(0),UnaryOperation::kSQRT);
  assert(res_745 && "failed to build Node_6854_sqrt (type:power)");
  res_745->getOutput(0)->setName("Node_6854_sqrt:0");
  auto res_746=network->addElementWise(*res_741->getOutput(0),*res_745->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_746 && "failed to build Node_6854_rsqrt (type:divide)");
  res_746->getOutput(0)->setName("Node_6854_rsqrt:0");
  auto res_747=network->addElementWise(*res_746->getOutput(0),*res_303->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_747 && "failed to build Node_6854_mul (type:multiply)");
  res_747->getOutput(0)->setName("Node_6854_mul:0");
  auto res_748=network->addElementWise(*res_747->getOutput(0),*res_304->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_748 && "failed to build Node_6854 (type:add)");
  res_748->getOutput(0)->setName("Node_6854:0");
  auto res_749=network->addActivation(*res_748->getOutput(0),ActivationType::kRELU);
  assert(res_749 && "failed to build Node_6855 (type:relu)");
  res_749->getOutput(0)->setName("Node_6855:0");
  auto res_750=network->addElementWise(*inputs[13],*res_447->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_750 && "failed to build Node_6902_power (type:power)");
  res_750->getOutput(0)->setName("Node_6902_power:0");
  auto res_751=network->addReduce(*res_750->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_751 && "failed to build Node_6902_var (type:mean)");
  res_751->getOutput(0)->setName("Node_6902_var:0");
  auto res_752=network->addElementWise(*res_751->getOutput(0),*res_391->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_752 && "failed to build Node_6902_modify (type:add)");
  res_752->getOutput(0)->setName("Node_6902_modify:0");
  auto res_753=network->addUnary(*res_752->getOutput(0),UnaryOperation::kSQRT);
  assert(res_753 && "failed to build Node_6902_sqrt (type:power)");
  res_753->getOutput(0)->setName("Node_6902_sqrt:0");
  auto res_754=network->addElementWise(*inputs[13],*res_753->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_754 && "failed to build Node_6902_rsqrt (type:divide)");
  res_754->getOutput(0)->setName("Node_6902_rsqrt:0");
  auto res_755=network->addElementWise(*res_754->getOutput(0),*res_305->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_755 && "failed to build Node_6902_mul (type:multiply)");
  res_755->getOutput(0)->setName("Node_6902_mul:0");
  auto res_756=network->addElementWise(*res_755->getOutput(0),*res_306->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_756 && "failed to build Node_6902 (type:add)");
  res_756->getOutput(0)->setName("Node_6902:0");
  auto res_757=network->addActivation(*res_756->getOutput(0),ActivationType::kRELU);
  assert(res_757 && "failed to build Node_6903 (type:relu)");
  res_757->getOutput(0)->setName("Node_6903:0");
  auto res_758=network->addShuffle(*res_757->getOutput(0));
  res_758->setReshapeDimensions(Dims3{128,1,1});
  assert(res_758 && "failed to build Node_6903_reshape (type:reshape)");
  res_758->getOutput(0)->setName("Node_6903_reshape:0");
  auto res_759=network->addFullyConnected(*res_758->getOutput(0),32,mWeightsMap["weight_759"],mWeightsMap["bias_759"]);
  assert(res_759 && "failed to build Node_6911 (type:dense)");
  res_759->getOutput(0)->setName("Node_6911:0");
  auto res_760=network->addShuffle(*res_759->getOutput(0));
  res_760->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_760 && "failed to build Node_6911_reshape (type:reshape)");
  res_760->getOutput(0)->setName("Node_6911_reshape:0");
  auto res_761=network->addReduce(*res_760->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_761 && "failed to build Node_6918_mean (type:mean)");
  res_761->getOutput(0)->setName("Node_6918_mean:0");
  auto res_762=network->addElementWise(*res_760->getOutput(0),*res_761->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_762 && "failed to build Node_6918_diff (type:sub)");
  res_762->getOutput(0)->setName("Node_6918_diff:0");
  auto res_763=network->addElementWise(*res_762->getOutput(0),*res_448->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_763 && "failed to build Node_6918_power (type:power)");
  res_763->getOutput(0)->setName("Node_6918_power:0");
  auto res_764=network->addReduce(*res_763->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_764 && "failed to build Node_6918_var (type:mean)");
  res_764->getOutput(0)->setName("Node_6918_var:0");
  auto res_765=network->addElementWise(*res_764->getOutput(0),*res_392->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_765 && "failed to build Node_6918_modify (type:add)");
  res_765->getOutput(0)->setName("Node_6918_modify:0");
  auto res_766=network->addUnary(*res_765->getOutput(0),UnaryOperation::kSQRT);
  assert(res_766 && "failed to build Node_6918_sqrt (type:power)");
  res_766->getOutput(0)->setName("Node_6918_sqrt:0");
  auto res_767=network->addElementWise(*res_762->getOutput(0),*res_766->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_767 && "failed to build Node_6918_rsqrt (type:divide)");
  res_767->getOutput(0)->setName("Node_6918_rsqrt:0");
  auto res_768=network->addElementWise(*res_767->getOutput(0),*res_307->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_768 && "failed to build Node_6918_mul (type:multiply)");
  res_768->getOutput(0)->setName("Node_6918_mul:0");
  auto res_769=network->addElementWise(*res_768->getOutput(0),*res_308->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_769 && "failed to build Node_6918 (type:add)");
  res_769->getOutput(0)->setName("Node_6918:0");
  auto res_770=network->addActivation(*res_769->getOutput(0),ActivationType::kRELU);
  assert(res_770 && "failed to build Node_6919 (type:relu)");
  res_770->getOutput(0)->setName("Node_6919:0");
  auto res_771=network->addElementWise(*inputs[14],*res_449->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_771 && "failed to build Node_6966_power (type:power)");
  res_771->getOutput(0)->setName("Node_6966_power:0");
  auto res_772=network->addReduce(*res_771->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_772 && "failed to build Node_6966_var (type:mean)");
  res_772->getOutput(0)->setName("Node_6966_var:0");
  auto res_773=network->addElementWise(*res_772->getOutput(0),*res_393->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_773 && "failed to build Node_6966_modify (type:add)");
  res_773->getOutput(0)->setName("Node_6966_modify:0");
  auto res_774=network->addUnary(*res_773->getOutput(0),UnaryOperation::kSQRT);
  assert(res_774 && "failed to build Node_6966_sqrt (type:power)");
  res_774->getOutput(0)->setName("Node_6966_sqrt:0");
  auto res_775=network->addElementWise(*inputs[14],*res_774->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_775 && "failed to build Node_6966_rsqrt (type:divide)");
  res_775->getOutput(0)->setName("Node_6966_rsqrt:0");
  auto res_776=network->addElementWise(*res_775->getOutput(0),*res_309->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_776 && "failed to build Node_6966_mul (type:multiply)");
  res_776->getOutput(0)->setName("Node_6966_mul:0");
  auto res_777=network->addElementWise(*res_776->getOutput(0),*res_310->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_777 && "failed to build Node_6966 (type:add)");
  res_777->getOutput(0)->setName("Node_6966:0");
  auto res_778=network->addActivation(*res_777->getOutput(0),ActivationType::kRELU);
  assert(res_778 && "failed to build Node_6967 (type:relu)");
  res_778->getOutput(0)->setName("Node_6967:0");
  auto res_779=network->addShuffle(*res_778->getOutput(0));
  res_779->setReshapeDimensions(Dims3{128,1,1});
  assert(res_779 && "failed to build Node_6967_reshape (type:reshape)");
  res_779->getOutput(0)->setName("Node_6967_reshape:0");
  auto res_780=network->addFullyConnected(*res_779->getOutput(0),32,mWeightsMap["weight_780"],mWeightsMap["bias_780"]);
  assert(res_780 && "failed to build Node_6975 (type:dense)");
  res_780->getOutput(0)->setName("Node_6975:0");
  auto res_781=network->addShuffle(*res_780->getOutput(0));
  res_781->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_781 && "failed to build Node_6975_reshape (type:reshape)");
  res_781->getOutput(0)->setName("Node_6975_reshape:0");
  auto res_782=network->addReduce(*res_781->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_782 && "failed to build Node_6982_mean (type:mean)");
  res_782->getOutput(0)->setName("Node_6982_mean:0");
  auto res_783=network->addElementWise(*res_781->getOutput(0),*res_782->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_783 && "failed to build Node_6982_diff (type:sub)");
  res_783->getOutput(0)->setName("Node_6982_diff:0");
  auto res_784=network->addElementWise(*res_783->getOutput(0),*res_450->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_784 && "failed to build Node_6982_power (type:power)");
  res_784->getOutput(0)->setName("Node_6982_power:0");
  auto res_785=network->addReduce(*res_784->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_785 && "failed to build Node_6982_var (type:mean)");
  res_785->getOutput(0)->setName("Node_6982_var:0");
  auto res_786=network->addElementWise(*res_785->getOutput(0),*res_394->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_786 && "failed to build Node_6982_modify (type:add)");
  res_786->getOutput(0)->setName("Node_6982_modify:0");
  auto res_787=network->addUnary(*res_786->getOutput(0),UnaryOperation::kSQRT);
  assert(res_787 && "failed to build Node_6982_sqrt (type:power)");
  res_787->getOutput(0)->setName("Node_6982_sqrt:0");
  auto res_788=network->addElementWise(*res_783->getOutput(0),*res_787->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_788 && "failed to build Node_6982_rsqrt (type:divide)");
  res_788->getOutput(0)->setName("Node_6982_rsqrt:0");
  auto res_789=network->addElementWise(*res_788->getOutput(0),*res_311->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_789 && "failed to build Node_6982_mul (type:multiply)");
  res_789->getOutput(0)->setName("Node_6982_mul:0");
  auto res_790=network->addElementWise(*res_789->getOutput(0),*res_312->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_790 && "failed to build Node_6982 (type:add)");
  res_790->getOutput(0)->setName("Node_6982:0");
  auto res_791=network->addActivation(*res_790->getOutput(0),ActivationType::kRELU);
  assert(res_791 && "failed to build Node_6983 (type:relu)");
  res_791->getOutput(0)->setName("Node_6983:0");
  auto res_792=network->addReduce(*inputs[15],ReduceOperation::kAVG,1,true);
  assert(res_792 && "failed to build Node_7030_mean (type:mean)");
  res_792->getOutput(0)->setName("Node_7030_mean:0");
  auto res_793=network->addElementWise(*inputs[15],*res_792->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_793 && "failed to build Node_7030_diff (type:sub)");
  res_793->getOutput(0)->setName("Node_7030_diff:0");
  auto res_794=network->addElementWise(*res_793->getOutput(0),*res_451->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_794 && "failed to build Node_7030_power (type:power)");
  res_794->getOutput(0)->setName("Node_7030_power:0");
  auto res_795=network->addReduce(*res_794->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_795 && "failed to build Node_7030_var (type:mean)");
  res_795->getOutput(0)->setName("Node_7030_var:0");
  auto res_796=network->addElementWise(*res_795->getOutput(0),*res_395->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_796 && "failed to build Node_7030_modify (type:add)");
  res_796->getOutput(0)->setName("Node_7030_modify:0");
  auto res_797=network->addUnary(*res_796->getOutput(0),UnaryOperation::kSQRT);
  assert(res_797 && "failed to build Node_7030_sqrt (type:power)");
  res_797->getOutput(0)->setName("Node_7030_sqrt:0");
  auto res_798=network->addElementWise(*res_793->getOutput(0),*res_797->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_798 && "failed to build Node_7030_rsqrt (type:divide)");
  res_798->getOutput(0)->setName("Node_7030_rsqrt:0");
  auto res_799=network->addElementWise(*res_798->getOutput(0),*res_313->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_799 && "failed to build Node_7030_mul (type:multiply)");
  res_799->getOutput(0)->setName("Node_7030_mul:0");
  auto res_800=network->addElementWise(*res_799->getOutput(0),*res_314->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_800 && "failed to build Node_7030 (type:add)");
  res_800->getOutput(0)->setName("Node_7030:0");
  auto res_801=network->addActivation(*res_800->getOutput(0),ActivationType::kRELU);
  assert(res_801 && "failed to build Node_7031 (type:relu)");
  res_801->getOutput(0)->setName("Node_7031:0");
  auto res_802=network->addShuffle(*res_801->getOutput(0));
  res_802->setReshapeDimensions(Dims3{128,1,1});
  assert(res_802 && "failed to build Node_7031_reshape (type:reshape)");
  res_802->getOutput(0)->setName("Node_7031_reshape:0");
  auto res_803=network->addFullyConnected(*res_802->getOutput(0),32,mWeightsMap["weight_803"],mWeightsMap["bias_803"]);
  assert(res_803 && "failed to build Node_7039 (type:dense)");
  res_803->getOutput(0)->setName("Node_7039:0");
  auto res_804=network->addShuffle(*res_803->getOutput(0));
  res_804->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_804 && "failed to build Node_7039_reshape (type:reshape)");
  res_804->getOutput(0)->setName("Node_7039_reshape:0");
  auto res_805=network->addReduce(*res_804->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_805 && "failed to build Node_7046_mean (type:mean)");
  res_805->getOutput(0)->setName("Node_7046_mean:0");
  auto res_806=network->addElementWise(*res_804->getOutput(0),*res_805->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_806 && "failed to build Node_7046_diff (type:sub)");
  res_806->getOutput(0)->setName("Node_7046_diff:0");
  auto res_807=network->addElementWise(*res_806->getOutput(0),*res_452->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_807 && "failed to build Node_7046_power (type:power)");
  res_807->getOutput(0)->setName("Node_7046_power:0");
  auto res_808=network->addReduce(*res_807->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_808 && "failed to build Node_7046_var (type:mean)");
  res_808->getOutput(0)->setName("Node_7046_var:0");
  auto res_809=network->addElementWise(*res_808->getOutput(0),*res_396->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_809 && "failed to build Node_7046_modify (type:add)");
  res_809->getOutput(0)->setName("Node_7046_modify:0");
  auto res_810=network->addUnary(*res_809->getOutput(0),UnaryOperation::kSQRT);
  assert(res_810 && "failed to build Node_7046_sqrt (type:power)");
  res_810->getOutput(0)->setName("Node_7046_sqrt:0");
  auto res_811=network->addElementWise(*res_806->getOutput(0),*res_810->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_811 && "failed to build Node_7046_rsqrt (type:divide)");
  res_811->getOutput(0)->setName("Node_7046_rsqrt:0");
  auto res_812=network->addElementWise(*res_811->getOutput(0),*res_315->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_812 && "failed to build Node_7046_mul (type:multiply)");
  res_812->getOutput(0)->setName("Node_7046_mul:0");
  auto res_813=network->addElementWise(*res_812->getOutput(0),*res_316->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_813 && "failed to build Node_7046 (type:add)");
  res_813->getOutput(0)->setName("Node_7046:0");
  auto res_814=network->addActivation(*res_813->getOutput(0),ActivationType::kRELU);
  assert(res_814 && "failed to build Node_7047 (type:relu)");
  res_814->getOutput(0)->setName("Node_7047:0");
  auto res_815=network->addReduce(*inputs[16],ReduceOperation::kAVG,1,true);
  assert(res_815 && "failed to build Node_7094_mean (type:mean)");
  res_815->getOutput(0)->setName("Node_7094_mean:0");
  auto res_816=network->addElementWise(*inputs[16],*res_815->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_816 && "failed to build Node_7094_diff (type:sub)");
  res_816->getOutput(0)->setName("Node_7094_diff:0");
  auto res_817=network->addElementWise(*res_816->getOutput(0),*res_453->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_817 && "failed to build Node_7094_power (type:power)");
  res_817->getOutput(0)->setName("Node_7094_power:0");
  auto res_818=network->addReduce(*res_817->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_818 && "failed to build Node_7094_var (type:mean)");
  res_818->getOutput(0)->setName("Node_7094_var:0");
  auto res_819=network->addElementWise(*res_818->getOutput(0),*res_397->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_819 && "failed to build Node_7094_modify (type:add)");
  res_819->getOutput(0)->setName("Node_7094_modify:0");
  auto res_820=network->addUnary(*res_819->getOutput(0),UnaryOperation::kSQRT);
  assert(res_820 && "failed to build Node_7094_sqrt (type:power)");
  res_820->getOutput(0)->setName("Node_7094_sqrt:0");
  auto res_821=network->addElementWise(*res_816->getOutput(0),*res_820->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_821 && "failed to build Node_7094_rsqrt (type:divide)");
  res_821->getOutput(0)->setName("Node_7094_rsqrt:0");
  auto res_822=network->addElementWise(*res_821->getOutput(0),*res_317->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_822 && "failed to build Node_7094_mul (type:multiply)");
  res_822->getOutput(0)->setName("Node_7094_mul:0");
  auto res_823=network->addElementWise(*res_822->getOutput(0),*res_318->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_823 && "failed to build Node_7094 (type:add)");
  res_823->getOutput(0)->setName("Node_7094:0");
  auto res_824=network->addActivation(*res_823->getOutput(0),ActivationType::kRELU);
  assert(res_824 && "failed to build Node_7095 (type:relu)");
  res_824->getOutput(0)->setName("Node_7095:0");
  auto res_825=network->addShuffle(*res_824->getOutput(0));
  res_825->setReshapeDimensions(Dims3{128,1,1});
  assert(res_825 && "failed to build Node_7095_reshape (type:reshape)");
  res_825->getOutput(0)->setName("Node_7095_reshape:0");
  auto res_826=network->addFullyConnected(*res_825->getOutput(0),32,mWeightsMap["weight_826"],mWeightsMap["bias_826"]);
  assert(res_826 && "failed to build Node_7103 (type:dense)");
  res_826->getOutput(0)->setName("Node_7103:0");
  auto res_827=network->addShuffle(*res_826->getOutput(0));
  res_827->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_827 && "failed to build Node_7103_reshape (type:reshape)");
  res_827->getOutput(0)->setName("Node_7103_reshape:0");
  auto res_828=network->addReduce(*res_827->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_828 && "failed to build Node_7110_mean (type:mean)");
  res_828->getOutput(0)->setName("Node_7110_mean:0");
  auto res_829=network->addElementWise(*res_827->getOutput(0),*res_828->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_829 && "failed to build Node_7110_diff (type:sub)");
  res_829->getOutput(0)->setName("Node_7110_diff:0");
  auto res_830=network->addElementWise(*res_829->getOutput(0),*res_454->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_830 && "failed to build Node_7110_power (type:power)");
  res_830->getOutput(0)->setName("Node_7110_power:0");
  auto res_831=network->addReduce(*res_830->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_831 && "failed to build Node_7110_var (type:mean)");
  res_831->getOutput(0)->setName("Node_7110_var:0");
  auto res_832=network->addElementWise(*res_831->getOutput(0),*res_398->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_832 && "failed to build Node_7110_modify (type:add)");
  res_832->getOutput(0)->setName("Node_7110_modify:0");
  auto res_833=network->addUnary(*res_832->getOutput(0),UnaryOperation::kSQRT);
  assert(res_833 && "failed to build Node_7110_sqrt (type:power)");
  res_833->getOutput(0)->setName("Node_7110_sqrt:0");
  auto res_834=network->addElementWise(*res_829->getOutput(0),*res_833->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_834 && "failed to build Node_7110_rsqrt (type:divide)");
  res_834->getOutput(0)->setName("Node_7110_rsqrt:0");
  auto res_835=network->addElementWise(*res_834->getOutput(0),*res_319->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_835 && "failed to build Node_7110_mul (type:multiply)");
  res_835->getOutput(0)->setName("Node_7110_mul:0");
  auto res_836=network->addElementWise(*res_835->getOutput(0),*res_320->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_836 && "failed to build Node_7110 (type:add)");
  res_836->getOutput(0)->setName("Node_7110:0");
  auto res_837=network->addActivation(*res_836->getOutput(0),ActivationType::kRELU);
  assert(res_837 && "failed to build Node_7111 (type:relu)");
  res_837->getOutput(0)->setName("Node_7111:0");
  auto res_838=network->addReduce(*inputs[17],ReduceOperation::kAVG,1,true);
  assert(res_838 && "failed to build Node_7158_mean (type:mean)");
  res_838->getOutput(0)->setName("Node_7158_mean:0");
  auto res_839=network->addElementWise(*inputs[17],*res_838->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_839 && "failed to build Node_7158_diff (type:sub)");
  res_839->getOutput(0)->setName("Node_7158_diff:0");
  auto res_840=network->addElementWise(*res_839->getOutput(0),*res_455->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_840 && "failed to build Node_7158_power (type:power)");
  res_840->getOutput(0)->setName("Node_7158_power:0");
  auto res_841=network->addReduce(*res_840->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_841 && "failed to build Node_7158_var (type:mean)");
  res_841->getOutput(0)->setName("Node_7158_var:0");
  auto res_842=network->addElementWise(*res_841->getOutput(0),*res_399->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_842 && "failed to build Node_7158_modify (type:add)");
  res_842->getOutput(0)->setName("Node_7158_modify:0");
  auto res_843=network->addUnary(*res_842->getOutput(0),UnaryOperation::kSQRT);
  assert(res_843 && "failed to build Node_7158_sqrt (type:power)");
  res_843->getOutput(0)->setName("Node_7158_sqrt:0");
  auto res_844=network->addElementWise(*res_839->getOutput(0),*res_843->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_844 && "failed to build Node_7158_rsqrt (type:divide)");
  res_844->getOutput(0)->setName("Node_7158_rsqrt:0");
  auto res_845=network->addElementWise(*res_844->getOutput(0),*res_321->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_845 && "failed to build Node_7158_mul (type:multiply)");
  res_845->getOutput(0)->setName("Node_7158_mul:0");
  auto res_846=network->addElementWise(*res_845->getOutput(0),*res_322->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_846 && "failed to build Node_7158 (type:add)");
  res_846->getOutput(0)->setName("Node_7158:0");
  auto res_847=network->addActivation(*res_846->getOutput(0),ActivationType::kRELU);
  assert(res_847 && "failed to build Node_7159 (type:relu)");
  res_847->getOutput(0)->setName("Node_7159:0");
  auto res_848=network->addShuffle(*res_847->getOutput(0));
  res_848->setReshapeDimensions(Dims3{128,1,1});
  assert(res_848 && "failed to build Node_7159_reshape (type:reshape)");
  res_848->getOutput(0)->setName("Node_7159_reshape:0");
  auto res_849=network->addFullyConnected(*res_848->getOutput(0),32,mWeightsMap["weight_849"],mWeightsMap["bias_849"]);
  assert(res_849 && "failed to build Node_7167 (type:dense)");
  res_849->getOutput(0)->setName("Node_7167:0");
  auto res_850=network->addShuffle(*res_849->getOutput(0));
  res_850->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_850 && "failed to build Node_7167_reshape (type:reshape)");
  res_850->getOutput(0)->setName("Node_7167_reshape:0");
  auto res_851=network->addReduce(*res_850->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_851 && "failed to build Node_7174_mean (type:mean)");
  res_851->getOutput(0)->setName("Node_7174_mean:0");
  auto res_852=network->addElementWise(*res_850->getOutput(0),*res_851->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_852 && "failed to build Node_7174_diff (type:sub)");
  res_852->getOutput(0)->setName("Node_7174_diff:0");
  auto res_853=network->addElementWise(*res_852->getOutput(0),*res_456->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_853 && "failed to build Node_7174_power (type:power)");
  res_853->getOutput(0)->setName("Node_7174_power:0");
  auto res_854=network->addReduce(*res_853->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_854 && "failed to build Node_7174_var (type:mean)");
  res_854->getOutput(0)->setName("Node_7174_var:0");
  auto res_855=network->addElementWise(*res_854->getOutput(0),*res_400->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_855 && "failed to build Node_7174_modify (type:add)");
  res_855->getOutput(0)->setName("Node_7174_modify:0");
  auto res_856=network->addUnary(*res_855->getOutput(0),UnaryOperation::kSQRT);
  assert(res_856 && "failed to build Node_7174_sqrt (type:power)");
  res_856->getOutput(0)->setName("Node_7174_sqrt:0");
  auto res_857=network->addElementWise(*res_852->getOutput(0),*res_856->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_857 && "failed to build Node_7174_rsqrt (type:divide)");
  res_857->getOutput(0)->setName("Node_7174_rsqrt:0");
  auto res_858=network->addElementWise(*res_857->getOutput(0),*res_323->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_858 && "failed to build Node_7174_mul (type:multiply)");
  res_858->getOutput(0)->setName("Node_7174_mul:0");
  auto res_859=network->addElementWise(*res_858->getOutput(0),*res_324->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_859 && "failed to build Node_7174 (type:add)");
  res_859->getOutput(0)->setName("Node_7174:0");
  auto res_860=network->addActivation(*res_859->getOutput(0),ActivationType::kRELU);
  assert(res_860 && "failed to build Node_7175 (type:relu)");
  res_860->getOutput(0)->setName("Node_7175:0");
  auto res_861=network->addReduce(*inputs[18],ReduceOperation::kAVG,1,true);
  assert(res_861 && "failed to build Node_7222_mean (type:mean)");
  res_861->getOutput(0)->setName("Node_7222_mean:0");
  auto res_862=network->addElementWise(*inputs[18],*res_861->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_862 && "failed to build Node_7222_diff (type:sub)");
  res_862->getOutput(0)->setName("Node_7222_diff:0");
  auto res_863=network->addElementWise(*res_862->getOutput(0),*res_457->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_863 && "failed to build Node_7222_power (type:power)");
  res_863->getOutput(0)->setName("Node_7222_power:0");
  auto res_864=network->addReduce(*res_863->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_864 && "failed to build Node_7222_var (type:mean)");
  res_864->getOutput(0)->setName("Node_7222_var:0");
  auto res_865=network->addElementWise(*res_864->getOutput(0),*res_401->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_865 && "failed to build Node_7222_modify (type:add)");
  res_865->getOutput(0)->setName("Node_7222_modify:0");
  auto res_866=network->addUnary(*res_865->getOutput(0),UnaryOperation::kSQRT);
  assert(res_866 && "failed to build Node_7222_sqrt (type:power)");
  res_866->getOutput(0)->setName("Node_7222_sqrt:0");
  auto res_867=network->addElementWise(*res_862->getOutput(0),*res_866->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_867 && "failed to build Node_7222_rsqrt (type:divide)");
  res_867->getOutput(0)->setName("Node_7222_rsqrt:0");
  auto res_868=network->addElementWise(*res_867->getOutput(0),*res_325->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_868 && "failed to build Node_7222_mul (type:multiply)");
  res_868->getOutput(0)->setName("Node_7222_mul:0");
  auto res_869=network->addElementWise(*res_868->getOutput(0),*res_326->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_869 && "failed to build Node_7222 (type:add)");
  res_869->getOutput(0)->setName("Node_7222:0");
  auto res_870=network->addActivation(*res_869->getOutput(0),ActivationType::kRELU);
  assert(res_870 && "failed to build Node_7223 (type:relu)");
  res_870->getOutput(0)->setName("Node_7223:0");
  auto res_871=network->addShuffle(*res_870->getOutput(0));
  res_871->setReshapeDimensions(Dims3{128,1,1});
  assert(res_871 && "failed to build Node_7223_reshape (type:reshape)");
  res_871->getOutput(0)->setName("Node_7223_reshape:0");
  auto res_872=network->addFullyConnected(*res_871->getOutput(0),32,mWeightsMap["weight_872"],mWeightsMap["bias_872"]);
  assert(res_872 && "failed to build Node_7231 (type:dense)");
  res_872->getOutput(0)->setName("Node_7231:0");
  auto res_873=network->addShuffle(*res_872->getOutput(0));
  res_873->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_873 && "failed to build Node_7231_reshape (type:reshape)");
  res_873->getOutput(0)->setName("Node_7231_reshape:0");
  auto res_874=network->addReduce(*res_873->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_874 && "failed to build Node_7238_mean (type:mean)");
  res_874->getOutput(0)->setName("Node_7238_mean:0");
  auto res_875=network->addElementWise(*res_873->getOutput(0),*res_874->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_875 && "failed to build Node_7238_diff (type:sub)");
  res_875->getOutput(0)->setName("Node_7238_diff:0");
  auto res_876=network->addElementWise(*res_875->getOutput(0),*res_458->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_876 && "failed to build Node_7238_power (type:power)");
  res_876->getOutput(0)->setName("Node_7238_power:0");
  auto res_877=network->addReduce(*res_876->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_877 && "failed to build Node_7238_var (type:mean)");
  res_877->getOutput(0)->setName("Node_7238_var:0");
  auto res_878=network->addElementWise(*res_877->getOutput(0),*res_402->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_878 && "failed to build Node_7238_modify (type:add)");
  res_878->getOutput(0)->setName("Node_7238_modify:0");
  auto res_879=network->addUnary(*res_878->getOutput(0),UnaryOperation::kSQRT);
  assert(res_879 && "failed to build Node_7238_sqrt (type:power)");
  res_879->getOutput(0)->setName("Node_7238_sqrt:0");
  auto res_880=network->addElementWise(*res_875->getOutput(0),*res_879->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_880 && "failed to build Node_7238_rsqrt (type:divide)");
  res_880->getOutput(0)->setName("Node_7238_rsqrt:0");
  auto res_881=network->addElementWise(*res_880->getOutput(0),*res_327->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_881 && "failed to build Node_7238_mul (type:multiply)");
  res_881->getOutput(0)->setName("Node_7238_mul:0");
  auto res_882=network->addElementWise(*res_881->getOutput(0),*res_328->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_882 && "failed to build Node_7238 (type:add)");
  res_882->getOutput(0)->setName("Node_7238:0");
  auto res_883=network->addActivation(*res_882->getOutput(0),ActivationType::kRELU);
  assert(res_883 && "failed to build Node_7239 (type:relu)");
  res_883->getOutput(0)->setName("Node_7239:0");
  auto res_884=network->addReduce(*inputs[19],ReduceOperation::kAVG,1,true);
  assert(res_884 && "failed to build Node_7286_mean (type:mean)");
  res_884->getOutput(0)->setName("Node_7286_mean:0");
  auto res_885=network->addElementWise(*inputs[19],*res_884->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_885 && "failed to build Node_7286_diff (type:sub)");
  res_885->getOutput(0)->setName("Node_7286_diff:0");
  auto res_886=network->addElementWise(*res_885->getOutput(0),*res_459->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_886 && "failed to build Node_7286_power (type:power)");
  res_886->getOutput(0)->setName("Node_7286_power:0");
  auto res_887=network->addReduce(*res_886->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_887 && "failed to build Node_7286_var (type:mean)");
  res_887->getOutput(0)->setName("Node_7286_var:0");
  auto res_888=network->addElementWise(*res_887->getOutput(0),*res_403->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_888 && "failed to build Node_7286_modify (type:add)");
  res_888->getOutput(0)->setName("Node_7286_modify:0");
  auto res_889=network->addUnary(*res_888->getOutput(0),UnaryOperation::kSQRT);
  assert(res_889 && "failed to build Node_7286_sqrt (type:power)");
  res_889->getOutput(0)->setName("Node_7286_sqrt:0");
  auto res_890=network->addElementWise(*res_885->getOutput(0),*res_889->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_890 && "failed to build Node_7286_rsqrt (type:divide)");
  res_890->getOutput(0)->setName("Node_7286_rsqrt:0");
  auto res_891=network->addElementWise(*res_890->getOutput(0),*res_329->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_891 && "failed to build Node_7286_mul (type:multiply)");
  res_891->getOutput(0)->setName("Node_7286_mul:0");
  auto res_892=network->addElementWise(*res_891->getOutput(0),*res_330->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_892 && "failed to build Node_7286 (type:add)");
  res_892->getOutput(0)->setName("Node_7286:0");
  auto res_893=network->addActivation(*res_892->getOutput(0),ActivationType::kRELU);
  assert(res_893 && "failed to build Node_7287 (type:relu)");
  res_893->getOutput(0)->setName("Node_7287:0");
  auto res_894=network->addShuffle(*res_893->getOutput(0));
  res_894->setReshapeDimensions(Dims3{128,1,1});
  assert(res_894 && "failed to build Node_7287_reshape (type:reshape)");
  res_894->getOutput(0)->setName("Node_7287_reshape:0");
  auto res_895=network->addFullyConnected(*res_894->getOutput(0),32,mWeightsMap["weight_895"],mWeightsMap["bias_895"]);
  assert(res_895 && "failed to build Node_7295 (type:dense)");
  res_895->getOutput(0)->setName("Node_7295:0");
  auto res_896=network->addShuffle(*res_895->getOutput(0));
  res_896->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_896 && "failed to build Node_7295_reshape (type:reshape)");
  res_896->getOutput(0)->setName("Node_7295_reshape:0");
  auto res_897=network->addReduce(*res_896->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_897 && "failed to build Node_7302_mean (type:mean)");
  res_897->getOutput(0)->setName("Node_7302_mean:0");
  auto res_898=network->addElementWise(*res_896->getOutput(0),*res_897->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_898 && "failed to build Node_7302_diff (type:sub)");
  res_898->getOutput(0)->setName("Node_7302_diff:0");
  auto res_899=network->addElementWise(*res_898->getOutput(0),*res_460->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_899 && "failed to build Node_7302_power (type:power)");
  res_899->getOutput(0)->setName("Node_7302_power:0");
  auto res_900=network->addReduce(*res_899->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_900 && "failed to build Node_7302_var (type:mean)");
  res_900->getOutput(0)->setName("Node_7302_var:0");
  auto res_901=network->addElementWise(*res_900->getOutput(0),*res_404->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_901 && "failed to build Node_7302_modify (type:add)");
  res_901->getOutput(0)->setName("Node_7302_modify:0");
  auto res_902=network->addUnary(*res_901->getOutput(0),UnaryOperation::kSQRT);
  assert(res_902 && "failed to build Node_7302_sqrt (type:power)");
  res_902->getOutput(0)->setName("Node_7302_sqrt:0");
  auto res_903=network->addElementWise(*res_898->getOutput(0),*res_902->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_903 && "failed to build Node_7302_rsqrt (type:divide)");
  res_903->getOutput(0)->setName("Node_7302_rsqrt:0");
  auto res_904=network->addElementWise(*res_903->getOutput(0),*res_331->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_904 && "failed to build Node_7302_mul (type:multiply)");
  res_904->getOutput(0)->setName("Node_7302_mul:0");
  auto res_905=network->addElementWise(*res_904->getOutput(0),*res_332->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_905 && "failed to build Node_7302 (type:add)");
  res_905->getOutput(0)->setName("Node_7302:0");
  auto res_906=network->addActivation(*res_905->getOutput(0),ActivationType::kRELU);
  assert(res_906 && "failed to build Node_7303 (type:relu)");
  res_906->getOutput(0)->setName("Node_7303:0");
  ITensor* inputTensors_907[20] = {res_497->getOutput(0),res_518->getOutput(0),res_539->getOutput(0),res_560->getOutput(0),res_581->getOutput(0),res_602->getOutput(0),res_623->getOutput(0),res_644->getOutput(0),res_665->getOutput(0),res_686->getOutput(0),res_707->getOutput(0),res_728->getOutput(0),res_749->getOutput(0),res_770->getOutput(0),res_791->getOutput(0),res_814->getOutput(0),res_837->getOutput(0),res_860->getOutput(0),res_883->getOutput(0),res_906->getOutput(0)};
  auto res_907=network->addConcatenation(inputTensors_907,20);
  res_907->setAxis(0);
  assert(res_907 && "failed to build Node_7308 (type:concat)");
  res_907->getOutput(0)->setName("Node_7308:0");
  auto res_908=network->addShuffle(*res_907->getOutput(0));
  res_908->setReshapeDimensions(Dims{2,{20,32},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_908 && "failed to build Node_7308_reshape (type:reshape)");
  res_908->getOutput(0)->setName("Node_7308_reshape:0");
  auto res_909=network->addElementWise(*res_908->getOutput(0),*inputs[20],ElementWiseOperation::kPROD);
  assert(res_909 && "failed to build Node_7362 (type:multiply)");
  res_909->getOutput(0)->setName("Node_7362:0");
  auto res_910=network->addShuffle(*res_909->getOutput(0));
  res_910->setReshapeDimensions(Dims3{640,1,1});
  assert(res_910 && "failed to build Node_7392_reshape (type:reshape)");
  res_910->getOutput(0)->setName("Node_7392_reshape:0");
  auto res_911=network->addFullyConnected(*res_910->getOutput(0),64,mWeightsMap["weight_911"],mWeightsMap["bias_911"]);
  assert(res_911 && "failed to build Node_7411 (type:dense)");
  res_911->getOutput(0)->setName("Node_7411:0");
  auto res_912=network->addShuffle(*res_911->getOutput(0));
  res_912->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_912 && "failed to build Node_7411_reshape (type:reshape)");
  res_912->getOutput(0)->setName("Node_7411_reshape:0");
  auto res_913=network->addReduce(*res_912->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_913 && "failed to build Node_7418_mean (type:mean)");
  res_913->getOutput(0)->setName("Node_7418_mean:0");
  auto res_914=network->addElementWise(*res_912->getOutput(0),*res_913->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_914 && "failed to build Node_7418_diff (type:sub)");
  res_914->getOutput(0)->setName("Node_7418_diff:0");
  auto res_915=network->addElementWise(*res_914->getOutput(0),*res_461->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_915 && "failed to build Node_7418_power (type:power)");
  res_915->getOutput(0)->setName("Node_7418_power:0");
  auto res_916=network->addReduce(*res_915->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_916 && "failed to build Node_7418_var (type:mean)");
  res_916->getOutput(0)->setName("Node_7418_var:0");
  auto res_917=network->addElementWise(*res_916->getOutput(0),*res_405->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_917 && "failed to build Node_7418_modify (type:add)");
  res_917->getOutput(0)->setName("Node_7418_modify:0");
  auto res_918=network->addUnary(*res_917->getOutput(0),UnaryOperation::kSQRT);
  assert(res_918 && "failed to build Node_7418_sqrt (type:power)");
  res_918->getOutput(0)->setName("Node_7418_sqrt:0");
  auto res_919=network->addElementWise(*res_914->getOutput(0),*res_918->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_919 && "failed to build Node_7418_rsqrt (type:divide)");
  res_919->getOutput(0)->setName("Node_7418_rsqrt:0");
  auto res_920=network->addElementWise(*res_919->getOutput(0),*res_333->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_920 && "failed to build Node_7418_mul (type:multiply)");
  res_920->getOutput(0)->setName("Node_7418_mul:0");
  auto res_921=network->addElementWise(*res_920->getOutput(0),*res_334->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_921 && "failed to build Node_7418 (type:add)");
  res_921->getOutput(0)->setName("Node_7418:0");
  auto res_922=network->addActivation(*res_921->getOutput(0),ActivationType::kRELU);
  assert(res_922 && "failed to build Node_7419 (type:relu)");
  res_922->getOutput(0)->setName("Node_7419:0");
  auto res_923=network->addShuffle(*res_922->getOutput(0));
  res_923->setReshapeDimensions(Dims3{64,1,1});
  assert(res_923 && "failed to build Node_7419_reshape (type:reshape)");
  res_923->getOutput(0)->setName("Node_7419_reshape:0");
  auto res_924=network->addFullyConnected(*res_923->getOutput(0),32,mWeightsMap["weight_924"],mWeightsMap["bias_924"]);
  assert(res_924 && "failed to build Node_7427 (type:dense)");
  res_924->getOutput(0)->setName("Node_7427:0");
  auto res_925=network->addShuffle(*res_924->getOutput(0));
  res_925->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_925 && "failed to build Node_7427_reshape (type:reshape)");
  res_925->getOutput(0)->setName("Node_7427_reshape:0");
  auto res_926=network->addReduce(*res_925->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_926 && "failed to build Node_7434_mean (type:mean)");
  res_926->getOutput(0)->setName("Node_7434_mean:0");
  auto res_927=network->addElementWise(*res_925->getOutput(0),*res_926->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_927 && "failed to build Node_7434_diff (type:sub)");
  res_927->getOutput(0)->setName("Node_7434_diff:0");
  auto res_928=network->addElementWise(*res_927->getOutput(0),*res_462->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_928 && "failed to build Node_7434_power (type:power)");
  res_928->getOutput(0)->setName("Node_7434_power:0");
  auto res_929=network->addReduce(*res_928->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_929 && "failed to build Node_7434_var (type:mean)");
  res_929->getOutput(0)->setName("Node_7434_var:0");
  auto res_930=network->addElementWise(*res_929->getOutput(0),*res_406->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_930 && "failed to build Node_7434_modify (type:add)");
  res_930->getOutput(0)->setName("Node_7434_modify:0");
  auto res_931=network->addUnary(*res_930->getOutput(0),UnaryOperation::kSQRT);
  assert(res_931 && "failed to build Node_7434_sqrt (type:power)");
  res_931->getOutput(0)->setName("Node_7434_sqrt:0");
  auto res_932=network->addElementWise(*res_927->getOutput(0),*res_931->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_932 && "failed to build Node_7434_rsqrt (type:divide)");
  res_932->getOutput(0)->setName("Node_7434_rsqrt:0");
  auto res_933=network->addElementWise(*res_932->getOutput(0),*res_335->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_933 && "failed to build Node_7434_mul (type:multiply)");
  res_933->getOutput(0)->setName("Node_7434_mul:0");
  auto res_934=network->addElementWise(*res_933->getOutput(0),*res_336->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_934 && "failed to build Node_7434 (type:add)");
  res_934->getOutput(0)->setName("Node_7434:0");
  auto res_935=network->addActivation(*res_934->getOutput(0),ActivationType::kRELU);
  assert(res_935 && "failed to build Node_7435 (type:relu)");
  res_935->getOutput(0)->setName("Node_7435:0");
  auto res_936=network->addShuffle(*res_935->getOutput(0));
  res_936->setReshapeDimensions(Dims3{32,1,1});
  assert(res_936 && "failed to build Node_7435_reshape (type:reshape)");
  res_936->getOutput(0)->setName("Node_7435_reshape:0");
  auto res_937=network->addFullyConnected(*res_936->getOutput(0),2,mWeightsMap["weight_937"],mWeightsMap["bias_937"]);
  assert(res_937 && "failed to build Node_7443 (type:dense)");
  res_937->getOutput(0)->setName("Node_7443:0");
  auto res_938=network->addShuffle(*res_937->getOutput(0));
  res_938->setReshapeDimensions(Dims{2,{2,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_938 && "failed to build Node_7443_reshape (type:reshape)");
  res_938->getOutput(0)->setName("Node_7443_reshape:0");
  auto res_939=network->addElementWise(*res_908->getOutput(0),*inputs[21],ElementWiseOperation::kPROD);
  assert(res_939 && "failed to build Node_7366 (type:multiply)");
  res_939->getOutput(0)->setName("Node_7366:0");
  auto res_940=network->addShuffle(*res_939->getOutput(0));
  res_940->setReshapeDimensions(Dims3{640,1,1});
  assert(res_940 && "failed to build Node_7394_reshape (type:reshape)");
  res_940->getOutput(0)->setName("Node_7394_reshape:0");
  auto res_941=network->addFullyConnected(*res_940->getOutput(0),64,mWeightsMap["weight_941"],mWeightsMap["bias_941"]);
  assert(res_941 && "failed to build Node_7448 (type:dense)");
  res_941->getOutput(0)->setName("Node_7448:0");
  auto res_942=network->addShuffle(*res_941->getOutput(0));
  res_942->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_942 && "failed to build Node_7448_reshape (type:reshape)");
  res_942->getOutput(0)->setName("Node_7448_reshape:0");
  auto res_943=network->addReduce(*res_942->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_943 && "failed to build Node_7455_mean (type:mean)");
  res_943->getOutput(0)->setName("Node_7455_mean:0");
  auto res_944=network->addElementWise(*res_942->getOutput(0),*res_943->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_944 && "failed to build Node_7455_diff (type:sub)");
  res_944->getOutput(0)->setName("Node_7455_diff:0");
  auto res_945=network->addElementWise(*res_944->getOutput(0),*res_463->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_945 && "failed to build Node_7455_power (type:power)");
  res_945->getOutput(0)->setName("Node_7455_power:0");
  auto res_946=network->addReduce(*res_945->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_946 && "failed to build Node_7455_var (type:mean)");
  res_946->getOutput(0)->setName("Node_7455_var:0");
  auto res_947=network->addElementWise(*res_946->getOutput(0),*res_407->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_947 && "failed to build Node_7455_modify (type:add)");
  res_947->getOutput(0)->setName("Node_7455_modify:0");
  auto res_948=network->addUnary(*res_947->getOutput(0),UnaryOperation::kSQRT);
  assert(res_948 && "failed to build Node_7455_sqrt (type:power)");
  res_948->getOutput(0)->setName("Node_7455_sqrt:0");
  auto res_949=network->addElementWise(*res_944->getOutput(0),*res_948->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_949 && "failed to build Node_7455_rsqrt (type:divide)");
  res_949->getOutput(0)->setName("Node_7455_rsqrt:0");
  auto res_950=network->addElementWise(*res_949->getOutput(0),*res_337->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_950 && "failed to build Node_7455_mul (type:multiply)");
  res_950->getOutput(0)->setName("Node_7455_mul:0");
  auto res_951=network->addElementWise(*res_950->getOutput(0),*res_338->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_951 && "failed to build Node_7455 (type:add)");
  res_951->getOutput(0)->setName("Node_7455:0");
  auto res_952=network->addActivation(*res_951->getOutput(0),ActivationType::kRELU);
  assert(res_952 && "failed to build Node_7456 (type:relu)");
  res_952->getOutput(0)->setName("Node_7456:0");
  auto res_953=network->addShuffle(*res_952->getOutput(0));
  res_953->setReshapeDimensions(Dims3{64,1,1});
  assert(res_953 && "failed to build Node_7456_reshape (type:reshape)");
  res_953->getOutput(0)->setName("Node_7456_reshape:0");
  auto res_954=network->addFullyConnected(*res_953->getOutput(0),32,mWeightsMap["weight_954"],mWeightsMap["bias_954"]);
  assert(res_954 && "failed to build Node_7464 (type:dense)");
  res_954->getOutput(0)->setName("Node_7464:0");
  auto res_955=network->addShuffle(*res_954->getOutput(0));
  res_955->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_955 && "failed to build Node_7464_reshape (type:reshape)");
  res_955->getOutput(0)->setName("Node_7464_reshape:0");
  auto res_956=network->addReduce(*res_955->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_956 && "failed to build Node_7471_mean (type:mean)");
  res_956->getOutput(0)->setName("Node_7471_mean:0");
  auto res_957=network->addElementWise(*res_955->getOutput(0),*res_956->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_957 && "failed to build Node_7471_diff (type:sub)");
  res_957->getOutput(0)->setName("Node_7471_diff:0");
  auto res_958=network->addElementWise(*res_957->getOutput(0),*res_464->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_958 && "failed to build Node_7471_power (type:power)");
  res_958->getOutput(0)->setName("Node_7471_power:0");
  auto res_959=network->addReduce(*res_958->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_959 && "failed to build Node_7471_var (type:mean)");
  res_959->getOutput(0)->setName("Node_7471_var:0");
  auto res_960=network->addElementWise(*res_959->getOutput(0),*res_408->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_960 && "failed to build Node_7471_modify (type:add)");
  res_960->getOutput(0)->setName("Node_7471_modify:0");
  auto res_961=network->addUnary(*res_960->getOutput(0),UnaryOperation::kSQRT);
  assert(res_961 && "failed to build Node_7471_sqrt (type:power)");
  res_961->getOutput(0)->setName("Node_7471_sqrt:0");
  auto res_962=network->addElementWise(*res_957->getOutput(0),*res_961->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_962 && "failed to build Node_7471_rsqrt (type:divide)");
  res_962->getOutput(0)->setName("Node_7471_rsqrt:0");
  auto res_963=network->addElementWise(*res_962->getOutput(0),*res_339->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_963 && "failed to build Node_7471_mul (type:multiply)");
  res_963->getOutput(0)->setName("Node_7471_mul:0");
  auto res_964=network->addElementWise(*res_963->getOutput(0),*res_340->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_964 && "failed to build Node_7471 (type:add)");
  res_964->getOutput(0)->setName("Node_7471:0");
  auto res_965=network->addActivation(*res_964->getOutput(0),ActivationType::kRELU);
  assert(res_965 && "failed to build Node_7472 (type:relu)");
  res_965->getOutput(0)->setName("Node_7472:0");
  auto res_966=network->addShuffle(*res_965->getOutput(0));
  res_966->setReshapeDimensions(Dims3{32,1,1});
  assert(res_966 && "failed to build Node_7472_reshape (type:reshape)");
  res_966->getOutput(0)->setName("Node_7472_reshape:0");
  auto res_967=network->addFullyConnected(*res_966->getOutput(0),2,mWeightsMap["weight_967"],mWeightsMap["bias_967"]);
  assert(res_967 && "failed to build Node_7480 (type:dense)");
  res_967->getOutput(0)->setName("Node_7480:0");
  auto res_968=network->addShuffle(*res_967->getOutput(0));
  res_968->setReshapeDimensions(Dims{2,{2,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_968 && "failed to build Node_7480_reshape (type:reshape)");
  res_968->getOutput(0)->setName("Node_7480_reshape:0");
  auto res_969=network->addElementWise(*res_908->getOutput(0),*inputs[22],ElementWiseOperation::kPROD);
  assert(res_969 && "failed to build Node_7370 (type:multiply)");
  res_969->getOutput(0)->setName("Node_7370:0");
  auto res_970=network->addShuffle(*res_969->getOutput(0));
  res_970->setReshapeDimensions(Dims3{640,1,1});
  assert(res_970 && "failed to build Node_7396_reshape (type:reshape)");
  res_970->getOutput(0)->setName("Node_7396_reshape:0");
  auto res_971=network->addFullyConnected(*res_970->getOutput(0),64,mWeightsMap["weight_971"],mWeightsMap["bias_971"]);
  assert(res_971 && "failed to build Node_7485 (type:dense)");
  res_971->getOutput(0)->setName("Node_7485:0");
  auto res_972=network->addShuffle(*res_971->getOutput(0));
  res_972->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_972 && "failed to build Node_7485_reshape (type:reshape)");
  res_972->getOutput(0)->setName("Node_7485_reshape:0");
  auto res_973=network->addReduce(*res_972->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_973 && "failed to build Node_7492_mean (type:mean)");
  res_973->getOutput(0)->setName("Node_7492_mean:0");
  auto res_974=network->addElementWise(*res_972->getOutput(0),*res_973->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_974 && "failed to build Node_7492_diff (type:sub)");
  res_974->getOutput(0)->setName("Node_7492_diff:0");
  auto res_975=network->addElementWise(*res_974->getOutput(0),*res_465->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_975 && "failed to build Node_7492_power (type:power)");
  res_975->getOutput(0)->setName("Node_7492_power:0");
  auto res_976=network->addReduce(*res_975->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_976 && "failed to build Node_7492_var (type:mean)");
  res_976->getOutput(0)->setName("Node_7492_var:0");
  auto res_977=network->addElementWise(*res_976->getOutput(0),*res_409->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_977 && "failed to build Node_7492_modify (type:add)");
  res_977->getOutput(0)->setName("Node_7492_modify:0");
  auto res_978=network->addUnary(*res_977->getOutput(0),UnaryOperation::kSQRT);
  assert(res_978 && "failed to build Node_7492_sqrt (type:power)");
  res_978->getOutput(0)->setName("Node_7492_sqrt:0");
  auto res_979=network->addElementWise(*res_974->getOutput(0),*res_978->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_979 && "failed to build Node_7492_rsqrt (type:divide)");
  res_979->getOutput(0)->setName("Node_7492_rsqrt:0");
  auto res_980=network->addElementWise(*res_979->getOutput(0),*res_341->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_980 && "failed to build Node_7492_mul (type:multiply)");
  res_980->getOutput(0)->setName("Node_7492_mul:0");
  auto res_981=network->addElementWise(*res_980->getOutput(0),*res_342->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_981 && "failed to build Node_7492 (type:add)");
  res_981->getOutput(0)->setName("Node_7492:0");
  auto res_982=network->addActivation(*res_981->getOutput(0),ActivationType::kRELU);
  assert(res_982 && "failed to build Node_7493 (type:relu)");
  res_982->getOutput(0)->setName("Node_7493:0");
  auto res_983=network->addShuffle(*res_982->getOutput(0));
  res_983->setReshapeDimensions(Dims3{64,1,1});
  assert(res_983 && "failed to build Node_7493_reshape (type:reshape)");
  res_983->getOutput(0)->setName("Node_7493_reshape:0");
  auto res_984=network->addFullyConnected(*res_983->getOutput(0),32,mWeightsMap["weight_984"],mWeightsMap["bias_984"]);
  assert(res_984 && "failed to build Node_7501 (type:dense)");
  res_984->getOutput(0)->setName("Node_7501:0");
  auto res_985=network->addShuffle(*res_984->getOutput(0));
  res_985->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_985 && "failed to build Node_7501_reshape (type:reshape)");
  res_985->getOutput(0)->setName("Node_7501_reshape:0");
  auto res_986=network->addReduce(*res_985->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_986 && "failed to build Node_7508_mean (type:mean)");
  res_986->getOutput(0)->setName("Node_7508_mean:0");
  auto res_987=network->addElementWise(*res_985->getOutput(0),*res_986->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_987 && "failed to build Node_7508_diff (type:sub)");
  res_987->getOutput(0)->setName("Node_7508_diff:0");
  auto res_988=network->addElementWise(*res_987->getOutput(0),*res_466->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_988 && "failed to build Node_7508_power (type:power)");
  res_988->getOutput(0)->setName("Node_7508_power:0");
  auto res_989=network->addReduce(*res_988->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_989 && "failed to build Node_7508_var (type:mean)");
  res_989->getOutput(0)->setName("Node_7508_var:0");
  auto res_990=network->addElementWise(*res_989->getOutput(0),*res_410->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_990 && "failed to build Node_7508_modify (type:add)");
  res_990->getOutput(0)->setName("Node_7508_modify:0");
  auto res_991=network->addUnary(*res_990->getOutput(0),UnaryOperation::kSQRT);
  assert(res_991 && "failed to build Node_7508_sqrt (type:power)");
  res_991->getOutput(0)->setName("Node_7508_sqrt:0");
  auto res_992=network->addElementWise(*res_987->getOutput(0),*res_991->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_992 && "failed to build Node_7508_rsqrt (type:divide)");
  res_992->getOutput(0)->setName("Node_7508_rsqrt:0");
  auto res_993=network->addElementWise(*res_992->getOutput(0),*res_343->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_993 && "failed to build Node_7508_mul (type:multiply)");
  res_993->getOutput(0)->setName("Node_7508_mul:0");
  auto res_994=network->addElementWise(*res_993->getOutput(0),*res_344->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_994 && "failed to build Node_7508 (type:add)");
  res_994->getOutput(0)->setName("Node_7508:0");
  auto res_995=network->addActivation(*res_994->getOutput(0),ActivationType::kRELU);
  assert(res_995 && "failed to build Node_7509 (type:relu)");
  res_995->getOutput(0)->setName("Node_7509:0");
  auto res_996=network->addShuffle(*res_995->getOutput(0));
  res_996->setReshapeDimensions(Dims3{32,1,1});
  assert(res_996 && "failed to build Node_7509_reshape (type:reshape)");
  res_996->getOutput(0)->setName("Node_7509_reshape:0");
  auto res_997=network->addFullyConnected(*res_996->getOutput(0),2,mWeightsMap["weight_997"],mWeightsMap["bias_997"]);
  assert(res_997 && "failed to build Node_7517 (type:dense)");
  res_997->getOutput(0)->setName("Node_7517:0");
  auto res_998=network->addShuffle(*res_997->getOutput(0));
  res_998->setReshapeDimensions(Dims{2,{2,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_998 && "failed to build Node_7517_reshape (type:reshape)");
  res_998->getOutput(0)->setName("Node_7517_reshape:0");
  auto res_999=network->addElementWise(*res_908->getOutput(0),*inputs[23],ElementWiseOperation::kPROD);
  assert(res_999 && "failed to build Node_7374 (type:multiply)");
  res_999->getOutput(0)->setName("Node_7374:0");
  auto res_1000=network->addShuffle(*res_999->getOutput(0));
  res_1000->setReshapeDimensions(Dims3{640,1,1});
  assert(res_1000 && "failed to build Node_7398_reshape (type:reshape)");
  res_1000->getOutput(0)->setName("Node_7398_reshape:0");
  auto res_1001=network->addFullyConnected(*res_1000->getOutput(0),64,mWeightsMap["weight_1001"],mWeightsMap["bias_1001"]);
  assert(res_1001 && "failed to build Node_7522 (type:dense)");
  res_1001->getOutput(0)->setName("Node_7522:0");
  auto res_1002=network->addShuffle(*res_1001->getOutput(0));
  res_1002->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_1002 && "failed to build Node_7522_reshape (type:reshape)");
  res_1002->getOutput(0)->setName("Node_7522_reshape:0");
  auto res_1003=network->addReduce(*res_1002->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1003 && "failed to build Node_7529_mean (type:mean)");
  res_1003->getOutput(0)->setName("Node_7529_mean:0");
  auto res_1004=network->addElementWise(*res_1002->getOutput(0),*res_1003->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1004 && "failed to build Node_7529_diff (type:sub)");
  res_1004->getOutput(0)->setName("Node_7529_diff:0");
  auto res_1005=network->addElementWise(*res_1004->getOutput(0),*res_467->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1005 && "failed to build Node_7529_power (type:power)");
  res_1005->getOutput(0)->setName("Node_7529_power:0");
  auto res_1006=network->addReduce(*res_1005->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1006 && "failed to build Node_7529_var (type:mean)");
  res_1006->getOutput(0)->setName("Node_7529_var:0");
  auto res_1007=network->addElementWise(*res_1006->getOutput(0),*res_411->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1007 && "failed to build Node_7529_modify (type:add)");
  res_1007->getOutput(0)->setName("Node_7529_modify:0");
  auto res_1008=network->addUnary(*res_1007->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1008 && "failed to build Node_7529_sqrt (type:power)");
  res_1008->getOutput(0)->setName("Node_7529_sqrt:0");
  auto res_1009=network->addElementWise(*res_1004->getOutput(0),*res_1008->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1009 && "failed to build Node_7529_rsqrt (type:divide)");
  res_1009->getOutput(0)->setName("Node_7529_rsqrt:0");
  auto res_1010=network->addElementWise(*res_1009->getOutput(0),*res_345->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1010 && "failed to build Node_7529_mul (type:multiply)");
  res_1010->getOutput(0)->setName("Node_7529_mul:0");
  auto res_1011=network->addElementWise(*res_1010->getOutput(0),*res_346->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1011 && "failed to build Node_7529 (type:add)");
  res_1011->getOutput(0)->setName("Node_7529:0");
  auto res_1012=network->addActivation(*res_1011->getOutput(0),ActivationType::kRELU);
  assert(res_1012 && "failed to build Node_7530 (type:relu)");
  res_1012->getOutput(0)->setName("Node_7530:0");
  auto res_1013=network->addShuffle(*res_1012->getOutput(0));
  res_1013->setReshapeDimensions(Dims3{64,1,1});
  assert(res_1013 && "failed to build Node_7530_reshape (type:reshape)");
  res_1013->getOutput(0)->setName("Node_7530_reshape:0");
  auto res_1014=network->addFullyConnected(*res_1013->getOutput(0),32,mWeightsMap["weight_1014"],mWeightsMap["bias_1014"]);
  assert(res_1014 && "failed to build Node_7538 (type:dense)");
  res_1014->getOutput(0)->setName("Node_7538:0");
  auto res_1015=network->addShuffle(*res_1014->getOutput(0));
  res_1015->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_1015 && "failed to build Node_7538_reshape (type:reshape)");
  res_1015->getOutput(0)->setName("Node_7538_reshape:0");
  auto res_1016=network->addReduce(*res_1015->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1016 && "failed to build Node_7545_mean (type:mean)");
  res_1016->getOutput(0)->setName("Node_7545_mean:0");
  auto res_1017=network->addElementWise(*res_1015->getOutput(0),*res_1016->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1017 && "failed to build Node_7545_diff (type:sub)");
  res_1017->getOutput(0)->setName("Node_7545_diff:0");
  auto res_1018=network->addElementWise(*res_1017->getOutput(0),*res_468->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1018 && "failed to build Node_7545_power (type:power)");
  res_1018->getOutput(0)->setName("Node_7545_power:0");
  auto res_1019=network->addReduce(*res_1018->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1019 && "failed to build Node_7545_var (type:mean)");
  res_1019->getOutput(0)->setName("Node_7545_var:0");
  auto res_1020=network->addElementWise(*res_1019->getOutput(0),*res_412->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1020 && "failed to build Node_7545_modify (type:add)");
  res_1020->getOutput(0)->setName("Node_7545_modify:0");
  auto res_1021=network->addUnary(*res_1020->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1021 && "failed to build Node_7545_sqrt (type:power)");
  res_1021->getOutput(0)->setName("Node_7545_sqrt:0");
  auto res_1022=network->addElementWise(*res_1017->getOutput(0),*res_1021->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1022 && "failed to build Node_7545_rsqrt (type:divide)");
  res_1022->getOutput(0)->setName("Node_7545_rsqrt:0");
  auto res_1023=network->addElementWise(*res_1022->getOutput(0),*res_347->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1023 && "failed to build Node_7545_mul (type:multiply)");
  res_1023->getOutput(0)->setName("Node_7545_mul:0");
  auto res_1024=network->addElementWise(*res_1023->getOutput(0),*res_348->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1024 && "failed to build Node_7545 (type:add)");
  res_1024->getOutput(0)->setName("Node_7545:0");
  auto res_1025=network->addActivation(*res_1024->getOutput(0),ActivationType::kRELU);
  assert(res_1025 && "failed to build Node_7546 (type:relu)");
  res_1025->getOutput(0)->setName("Node_7546:0");
  auto res_1026=network->addShuffle(*res_1025->getOutput(0));
  res_1026->setReshapeDimensions(Dims3{32,1,1});
  assert(res_1026 && "failed to build Node_7546_reshape (type:reshape)");
  res_1026->getOutput(0)->setName("Node_7546_reshape:0");
  auto res_1027=network->addFullyConnected(*res_1026->getOutput(0),2,mWeightsMap["weight_1027"],mWeightsMap["bias_1027"]);
  assert(res_1027 && "failed to build Node_7554 (type:dense)");
  res_1027->getOutput(0)->setName("Node_7554:0");
  auto res_1028=network->addShuffle(*res_1027->getOutput(0));
  res_1028->setReshapeDimensions(Dims{2,{2,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1028 && "failed to build Node_7554_reshape (type:reshape)");
  res_1028->getOutput(0)->setName("Node_7554_reshape:0");
  auto res_1029=network->addElementWise(*res_908->getOutput(0),*inputs[24],ElementWiseOperation::kPROD);
  assert(res_1029 && "failed to build Node_7378 (type:multiply)");
  res_1029->getOutput(0)->setName("Node_7378:0");
  auto res_1030=network->addShuffle(*res_1029->getOutput(0));
  res_1030->setReshapeDimensions(Dims3{640,1,1});
  assert(res_1030 && "failed to build Node_7400_reshape (type:reshape)");
  res_1030->getOutput(0)->setName("Node_7400_reshape:0");
  auto res_1031=network->addFullyConnected(*res_1030->getOutput(0),64,mWeightsMap["weight_1031"],mWeightsMap["bias_1031"]);
  assert(res_1031 && "failed to build Node_7559 (type:dense)");
  res_1031->getOutput(0)->setName("Node_7559:0");
  auto res_1032=network->addShuffle(*res_1031->getOutput(0));
  res_1032->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_1032 && "failed to build Node_7559_reshape (type:reshape)");
  res_1032->getOutput(0)->setName("Node_7559_reshape:0");
  auto res_1033=network->addReduce(*res_1032->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1033 && "failed to build Node_7566_mean (type:mean)");
  res_1033->getOutput(0)->setName("Node_7566_mean:0");
  auto res_1034=network->addElementWise(*res_1032->getOutput(0),*res_1033->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1034 && "failed to build Node_7566_diff (type:sub)");
  res_1034->getOutput(0)->setName("Node_7566_diff:0");
  auto res_1035=network->addElementWise(*res_1034->getOutput(0),*res_469->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1035 && "failed to build Node_7566_power (type:power)");
  res_1035->getOutput(0)->setName("Node_7566_power:0");
  auto res_1036=network->addReduce(*res_1035->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1036 && "failed to build Node_7566_var (type:mean)");
  res_1036->getOutput(0)->setName("Node_7566_var:0");
  auto res_1037=network->addElementWise(*res_1036->getOutput(0),*res_413->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1037 && "failed to build Node_7566_modify (type:add)");
  res_1037->getOutput(0)->setName("Node_7566_modify:0");
  auto res_1038=network->addUnary(*res_1037->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1038 && "failed to build Node_7566_sqrt (type:power)");
  res_1038->getOutput(0)->setName("Node_7566_sqrt:0");
  auto res_1039=network->addElementWise(*res_1034->getOutput(0),*res_1038->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1039 && "failed to build Node_7566_rsqrt (type:divide)");
  res_1039->getOutput(0)->setName("Node_7566_rsqrt:0");
  auto res_1040=network->addElementWise(*res_1039->getOutput(0),*res_349->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1040 && "failed to build Node_7566_mul (type:multiply)");
  res_1040->getOutput(0)->setName("Node_7566_mul:0");
  auto res_1041=network->addElementWise(*res_1040->getOutput(0),*res_350->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1041 && "failed to build Node_7566 (type:add)");
  res_1041->getOutput(0)->setName("Node_7566:0");
  auto res_1042=network->addActivation(*res_1041->getOutput(0),ActivationType::kRELU);
  assert(res_1042 && "failed to build Node_7567 (type:relu)");
  res_1042->getOutput(0)->setName("Node_7567:0");
  auto res_1043=network->addShuffle(*res_1042->getOutput(0));
  res_1043->setReshapeDimensions(Dims3{64,1,1});
  assert(res_1043 && "failed to build Node_7567_reshape (type:reshape)");
  res_1043->getOutput(0)->setName("Node_7567_reshape:0");
  auto res_1044=network->addFullyConnected(*res_1043->getOutput(0),32,mWeightsMap["weight_1044"],mWeightsMap["bias_1044"]);
  assert(res_1044 && "failed to build Node_7575 (type:dense)");
  res_1044->getOutput(0)->setName("Node_7575:0");
  auto res_1045=network->addShuffle(*res_1044->getOutput(0));
  res_1045->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_1045 && "failed to build Node_7575_reshape (type:reshape)");
  res_1045->getOutput(0)->setName("Node_7575_reshape:0");
  auto res_1046=network->addReduce(*res_1045->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1046 && "failed to build Node_7582_mean (type:mean)");
  res_1046->getOutput(0)->setName("Node_7582_mean:0");
  auto res_1047=network->addElementWise(*res_1045->getOutput(0),*res_1046->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1047 && "failed to build Node_7582_diff (type:sub)");
  res_1047->getOutput(0)->setName("Node_7582_diff:0");
  auto res_1048=network->addElementWise(*res_1047->getOutput(0),*res_470->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1048 && "failed to build Node_7582_power (type:power)");
  res_1048->getOutput(0)->setName("Node_7582_power:0");
  auto res_1049=network->addReduce(*res_1048->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1049 && "failed to build Node_7582_var (type:mean)");
  res_1049->getOutput(0)->setName("Node_7582_var:0");
  auto res_1050=network->addElementWise(*res_1049->getOutput(0),*res_414->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1050 && "failed to build Node_7582_modify (type:add)");
  res_1050->getOutput(0)->setName("Node_7582_modify:0");
  auto res_1051=network->addUnary(*res_1050->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1051 && "failed to build Node_7582_sqrt (type:power)");
  res_1051->getOutput(0)->setName("Node_7582_sqrt:0");
  auto res_1052=network->addElementWise(*res_1047->getOutput(0),*res_1051->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1052 && "failed to build Node_7582_rsqrt (type:divide)");
  res_1052->getOutput(0)->setName("Node_7582_rsqrt:0");
  auto res_1053=network->addElementWise(*res_1052->getOutput(0),*res_351->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1053 && "failed to build Node_7582_mul (type:multiply)");
  res_1053->getOutput(0)->setName("Node_7582_mul:0");
  auto res_1054=network->addElementWise(*res_1053->getOutput(0),*res_352->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1054 && "failed to build Node_7582 (type:add)");
  res_1054->getOutput(0)->setName("Node_7582:0");
  auto res_1055=network->addActivation(*res_1054->getOutput(0),ActivationType::kRELU);
  assert(res_1055 && "failed to build Node_7583 (type:relu)");
  res_1055->getOutput(0)->setName("Node_7583:0");
  auto res_1056=network->addShuffle(*res_1055->getOutput(0));
  res_1056->setReshapeDimensions(Dims3{32,1,1});
  assert(res_1056 && "failed to build Node_7583_reshape (type:reshape)");
  res_1056->getOutput(0)->setName("Node_7583_reshape:0");
  auto res_1057=network->addFullyConnected(*res_1056->getOutput(0),2,mWeightsMap["weight_1057"],mWeightsMap["bias_1057"]);
  assert(res_1057 && "failed to build Node_7591 (type:dense)");
  res_1057->getOutput(0)->setName("Node_7591:0");
  auto res_1058=network->addShuffle(*res_1057->getOutput(0));
  res_1058->setReshapeDimensions(Dims{2,{2,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1058 && "failed to build Node_7591_reshape (type:reshape)");
  res_1058->getOutput(0)->setName("Node_7591_reshape:0");
  auto res_1059=network->addElementWise(*res_908->getOutput(0),*inputs[25],ElementWiseOperation::kPROD);
  assert(res_1059 && "failed to build Node_7382 (type:multiply)");
  res_1059->getOutput(0)->setName("Node_7382:0");
  auto res_1060=network->addShuffle(*res_1059->getOutput(0));
  res_1060->setReshapeDimensions(Dims3{640,1,1});
  assert(res_1060 && "failed to build Node_7402_reshape (type:reshape)");
  res_1060->getOutput(0)->setName("Node_7402_reshape:0");
  auto res_1061=network->addFullyConnected(*res_1060->getOutput(0),64,mWeightsMap["weight_1061"],mWeightsMap["bias_1061"]);
  assert(res_1061 && "failed to build Node_7596 (type:dense)");
  res_1061->getOutput(0)->setName("Node_7596:0");
  auto res_1062=network->addShuffle(*res_1061->getOutput(0));
  res_1062->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_1062 && "failed to build Node_7596_reshape (type:reshape)");
  res_1062->getOutput(0)->setName("Node_7596_reshape:0");
  auto res_1063=network->addReduce(*res_1062->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1063 && "failed to build Node_7603_mean (type:mean)");
  res_1063->getOutput(0)->setName("Node_7603_mean:0");
  auto res_1064=network->addElementWise(*res_1062->getOutput(0),*res_1063->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1064 && "failed to build Node_7603_diff (type:sub)");
  res_1064->getOutput(0)->setName("Node_7603_diff:0");
  auto res_1065=network->addElementWise(*res_1064->getOutput(0),*res_471->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1065 && "failed to build Node_7603_power (type:power)");
  res_1065->getOutput(0)->setName("Node_7603_power:0");
  auto res_1066=network->addReduce(*res_1065->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1066 && "failed to build Node_7603_var (type:mean)");
  res_1066->getOutput(0)->setName("Node_7603_var:0");
  auto res_1067=network->addElementWise(*res_1066->getOutput(0),*res_415->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1067 && "failed to build Node_7603_modify (type:add)");
  res_1067->getOutput(0)->setName("Node_7603_modify:0");
  auto res_1068=network->addUnary(*res_1067->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1068 && "failed to build Node_7603_sqrt (type:power)");
  res_1068->getOutput(0)->setName("Node_7603_sqrt:0");
  auto res_1069=network->addElementWise(*res_1064->getOutput(0),*res_1068->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1069 && "failed to build Node_7603_rsqrt (type:divide)");
  res_1069->getOutput(0)->setName("Node_7603_rsqrt:0");
  auto res_1070=network->addElementWise(*res_1069->getOutput(0),*res_353->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1070 && "failed to build Node_7603_mul (type:multiply)");
  res_1070->getOutput(0)->setName("Node_7603_mul:0");
  auto res_1071=network->addElementWise(*res_1070->getOutput(0),*res_354->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1071 && "failed to build Node_7603 (type:add)");
  res_1071->getOutput(0)->setName("Node_7603:0");
  auto res_1072=network->addActivation(*res_1071->getOutput(0),ActivationType::kRELU);
  assert(res_1072 && "failed to build Node_7604 (type:relu)");
  res_1072->getOutput(0)->setName("Node_7604:0");
  auto res_1073=network->addShuffle(*res_1072->getOutput(0));
  res_1073->setReshapeDimensions(Dims3{64,1,1});
  assert(res_1073 && "failed to build Node_7604_reshape (type:reshape)");
  res_1073->getOutput(0)->setName("Node_7604_reshape:0");
  auto res_1074=network->addFullyConnected(*res_1073->getOutput(0),32,mWeightsMap["weight_1074"],mWeightsMap["bias_1074"]);
  assert(res_1074 && "failed to build Node_7612 (type:dense)");
  res_1074->getOutput(0)->setName("Node_7612:0");
  auto res_1075=network->addShuffle(*res_1074->getOutput(0));
  res_1075->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_1075 && "failed to build Node_7612_reshape (type:reshape)");
  res_1075->getOutput(0)->setName("Node_7612_reshape:0");
  auto res_1076=network->addReduce(*res_1075->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1076 && "failed to build Node_7619_mean (type:mean)");
  res_1076->getOutput(0)->setName("Node_7619_mean:0");
  auto res_1077=network->addElementWise(*res_1075->getOutput(0),*res_1076->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1077 && "failed to build Node_7619_diff (type:sub)");
  res_1077->getOutput(0)->setName("Node_7619_diff:0");
  auto res_1078=network->addElementWise(*res_1077->getOutput(0),*res_472->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1078 && "failed to build Node_7619_power (type:power)");
  res_1078->getOutput(0)->setName("Node_7619_power:0");
  auto res_1079=network->addReduce(*res_1078->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1079 && "failed to build Node_7619_var (type:mean)");
  res_1079->getOutput(0)->setName("Node_7619_var:0");
  auto res_1080=network->addElementWise(*res_1079->getOutput(0),*res_416->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1080 && "failed to build Node_7619_modify (type:add)");
  res_1080->getOutput(0)->setName("Node_7619_modify:0");
  auto res_1081=network->addUnary(*res_1080->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1081 && "failed to build Node_7619_sqrt (type:power)");
  res_1081->getOutput(0)->setName("Node_7619_sqrt:0");
  auto res_1082=network->addElementWise(*res_1077->getOutput(0),*res_1081->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1082 && "failed to build Node_7619_rsqrt (type:divide)");
  res_1082->getOutput(0)->setName("Node_7619_rsqrt:0");
  auto res_1083=network->addElementWise(*res_1082->getOutput(0),*res_355->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1083 && "failed to build Node_7619_mul (type:multiply)");
  res_1083->getOutput(0)->setName("Node_7619_mul:0");
  auto res_1084=network->addElementWise(*res_1083->getOutput(0),*res_356->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1084 && "failed to build Node_7619 (type:add)");
  res_1084->getOutput(0)->setName("Node_7619:0");
  auto res_1085=network->addActivation(*res_1084->getOutput(0),ActivationType::kRELU);
  assert(res_1085 && "failed to build Node_7620 (type:relu)");
  res_1085->getOutput(0)->setName("Node_7620:0");
  auto res_1086=network->addShuffle(*res_1085->getOutput(0));
  res_1086->setReshapeDimensions(Dims3{32,1,1});
  assert(res_1086 && "failed to build Node_7620_reshape (type:reshape)");
  res_1086->getOutput(0)->setName("Node_7620_reshape:0");
  auto res_1087=network->addFullyConnected(*res_1086->getOutput(0),2,mWeightsMap["weight_1087"],mWeightsMap["bias_1087"]);
  assert(res_1087 && "failed to build Node_7628 (type:dense)");
  res_1087->getOutput(0)->setName("Node_7628:0");
  auto res_1088=network->addShuffle(*res_1087->getOutput(0));
  res_1088->setReshapeDimensions(Dims{2,{2,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1088 && "failed to build Node_7628_reshape (type:reshape)");
  res_1088->getOutput(0)->setName("Node_7628_reshape:0");
  auto res_1089=network->addElementWise(*res_908->getOutput(0),*inputs[26],ElementWiseOperation::kPROD);
  assert(res_1089 && "failed to build Node_7386 (type:multiply)");
  res_1089->getOutput(0)->setName("Node_7386:0");
  auto res_1090=network->addShuffle(*res_1089->getOutput(0));
  res_1090->setReshapeDimensions(Dims3{640,1,1});
  assert(res_1090 && "failed to build Node_7404_reshape (type:reshape)");
  res_1090->getOutput(0)->setName("Node_7404_reshape:0");
  auto res_1091=network->addFullyConnected(*res_1090->getOutput(0),64,mWeightsMap["weight_1091"],mWeightsMap["bias_1091"]);
  assert(res_1091 && "failed to build Node_7633 (type:dense)");
  res_1091->getOutput(0)->setName("Node_7633:0");
  auto res_1092=network->addShuffle(*res_1091->getOutput(0));
  res_1092->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_1092 && "failed to build Node_7633_reshape (type:reshape)");
  res_1092->getOutput(0)->setName("Node_7633_reshape:0");
  auto res_1093=network->addReduce(*res_1092->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1093 && "failed to build Node_7640_mean (type:mean)");
  res_1093->getOutput(0)->setName("Node_7640_mean:0");
  auto res_1094=network->addElementWise(*res_1092->getOutput(0),*res_1093->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1094 && "failed to build Node_7640_diff (type:sub)");
  res_1094->getOutput(0)->setName("Node_7640_diff:0");
  auto res_1095=network->addElementWise(*res_1094->getOutput(0),*res_473->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1095 && "failed to build Node_7640_power (type:power)");
  res_1095->getOutput(0)->setName("Node_7640_power:0");
  auto res_1096=network->addReduce(*res_1095->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1096 && "failed to build Node_7640_var (type:mean)");
  res_1096->getOutput(0)->setName("Node_7640_var:0");
  auto res_1097=network->addElementWise(*res_1096->getOutput(0),*res_417->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1097 && "failed to build Node_7640_modify (type:add)");
  res_1097->getOutput(0)->setName("Node_7640_modify:0");
  auto res_1098=network->addUnary(*res_1097->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1098 && "failed to build Node_7640_sqrt (type:power)");
  res_1098->getOutput(0)->setName("Node_7640_sqrt:0");
  auto res_1099=network->addElementWise(*res_1094->getOutput(0),*res_1098->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1099 && "failed to build Node_7640_rsqrt (type:divide)");
  res_1099->getOutput(0)->setName("Node_7640_rsqrt:0");
  auto res_1100=network->addElementWise(*res_1099->getOutput(0),*res_357->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1100 && "failed to build Node_7640_mul (type:multiply)");
  res_1100->getOutput(0)->setName("Node_7640_mul:0");
  auto res_1101=network->addElementWise(*res_1100->getOutput(0),*res_358->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1101 && "failed to build Node_7640 (type:add)");
  res_1101->getOutput(0)->setName("Node_7640:0");
  auto res_1102=network->addActivation(*res_1101->getOutput(0),ActivationType::kRELU);
  assert(res_1102 && "failed to build Node_7641 (type:relu)");
  res_1102->getOutput(0)->setName("Node_7641:0");
  auto res_1103=network->addShuffle(*res_1102->getOutput(0));
  res_1103->setReshapeDimensions(Dims3{64,1,1});
  assert(res_1103 && "failed to build Node_7641_reshape (type:reshape)");
  res_1103->getOutput(0)->setName("Node_7641_reshape:0");
  auto res_1104=network->addFullyConnected(*res_1103->getOutput(0),32,mWeightsMap["weight_1104"],mWeightsMap["bias_1104"]);
  assert(res_1104 && "failed to build Node_7649 (type:dense)");
  res_1104->getOutput(0)->setName("Node_7649:0");
  auto res_1105=network->addShuffle(*res_1104->getOutput(0));
  res_1105->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_1105 && "failed to build Node_7649_reshape (type:reshape)");
  res_1105->getOutput(0)->setName("Node_7649_reshape:0");
  auto res_1106=network->addReduce(*res_1105->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1106 && "failed to build Node_7656_mean (type:mean)");
  res_1106->getOutput(0)->setName("Node_7656_mean:0");
  auto res_1107=network->addElementWise(*res_1105->getOutput(0),*res_1106->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1107 && "failed to build Node_7656_diff (type:sub)");
  res_1107->getOutput(0)->setName("Node_7656_diff:0");
  auto res_1108=network->addElementWise(*res_1107->getOutput(0),*res_474->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1108 && "failed to build Node_7656_power (type:power)");
  res_1108->getOutput(0)->setName("Node_7656_power:0");
  auto res_1109=network->addReduce(*res_1108->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1109 && "failed to build Node_7656_var (type:mean)");
  res_1109->getOutput(0)->setName("Node_7656_var:0");
  auto res_1110=network->addElementWise(*res_1109->getOutput(0),*res_418->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1110 && "failed to build Node_7656_modify (type:add)");
  res_1110->getOutput(0)->setName("Node_7656_modify:0");
  auto res_1111=network->addUnary(*res_1110->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1111 && "failed to build Node_7656_sqrt (type:power)");
  res_1111->getOutput(0)->setName("Node_7656_sqrt:0");
  auto res_1112=network->addElementWise(*res_1107->getOutput(0),*res_1111->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1112 && "failed to build Node_7656_rsqrt (type:divide)");
  res_1112->getOutput(0)->setName("Node_7656_rsqrt:0");
  auto res_1113=network->addElementWise(*res_1112->getOutput(0),*res_359->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1113 && "failed to build Node_7656_mul (type:multiply)");
  res_1113->getOutput(0)->setName("Node_7656_mul:0");
  auto res_1114=network->addElementWise(*res_1113->getOutput(0),*res_360->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1114 && "failed to build Node_7656 (type:add)");
  res_1114->getOutput(0)->setName("Node_7656:0");
  auto res_1115=network->addActivation(*res_1114->getOutput(0),ActivationType::kRELU);
  assert(res_1115 && "failed to build Node_7657 (type:relu)");
  res_1115->getOutput(0)->setName("Node_7657:0");
  auto res_1116=network->addShuffle(*res_1115->getOutput(0));
  res_1116->setReshapeDimensions(Dims3{32,1,1});
  assert(res_1116 && "failed to build Node_7657_reshape (type:reshape)");
  res_1116->getOutput(0)->setName("Node_7657_reshape:0");
  auto res_1117=network->addFullyConnected(*res_1116->getOutput(0),2,mWeightsMap["weight_1117"],mWeightsMap["bias_1117"]);
  assert(res_1117 && "failed to build Node_7665 (type:dense)");
  res_1117->getOutput(0)->setName("Node_7665:0");
  auto res_1118=network->addShuffle(*res_1117->getOutput(0));
  res_1118->setReshapeDimensions(Dims{2,{2,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1118 && "failed to build Node_7665_reshape (type:reshape)");
  res_1118->getOutput(0)->setName("Node_7665_reshape:0");
  auto res_1119=network->addElementWise(*res_908->getOutput(0),*inputs[27],ElementWiseOperation::kPROD);
  assert(res_1119 && "failed to build Node_7390 (type:multiply)");
  res_1119->getOutput(0)->setName("Node_7390:0");
  auto res_1120=network->addShuffle(*res_1119->getOutput(0));
  res_1120->setReshapeDimensions(Dims3{640,1,1});
  assert(res_1120 && "failed to build Node_7406_reshape (type:reshape)");
  res_1120->getOutput(0)->setName("Node_7406_reshape:0");
  auto res_1121=network->addFullyConnected(*res_1120->getOutput(0),64,mWeightsMap["weight_1121"],mWeightsMap["bias_1121"]);
  assert(res_1121 && "failed to build Node_7670 (type:dense)");
  res_1121->getOutput(0)->setName("Node_7670:0");
  auto res_1122=network->addShuffle(*res_1121->getOutput(0));
  res_1122->setReshapeDimensions(Dims{1,{64},{DimensionType::kCHANNEL}});
  assert(res_1122 && "failed to build Node_7670_reshape (type:reshape)");
  res_1122->getOutput(0)->setName("Node_7670_reshape:0");
  auto res_1123=network->addReduce(*res_1122->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1123 && "failed to build Node_7677_mean (type:mean)");
  res_1123->getOutput(0)->setName("Node_7677_mean:0");
  auto res_1124=network->addElementWise(*res_1122->getOutput(0),*res_1123->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1124 && "failed to build Node_7677_diff (type:sub)");
  res_1124->getOutput(0)->setName("Node_7677_diff:0");
  auto res_1125=network->addElementWise(*res_1124->getOutput(0),*res_475->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1125 && "failed to build Node_7677_power (type:power)");
  res_1125->getOutput(0)->setName("Node_7677_power:0");
  auto res_1126=network->addReduce(*res_1125->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1126 && "failed to build Node_7677_var (type:mean)");
  res_1126->getOutput(0)->setName("Node_7677_var:0");
  auto res_1127=network->addElementWise(*res_1126->getOutput(0),*res_419->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1127 && "failed to build Node_7677_modify (type:add)");
  res_1127->getOutput(0)->setName("Node_7677_modify:0");
  auto res_1128=network->addUnary(*res_1127->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1128 && "failed to build Node_7677_sqrt (type:power)");
  res_1128->getOutput(0)->setName("Node_7677_sqrt:0");
  auto res_1129=network->addElementWise(*res_1124->getOutput(0),*res_1128->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1129 && "failed to build Node_7677_rsqrt (type:divide)");
  res_1129->getOutput(0)->setName("Node_7677_rsqrt:0");
  auto res_1130=network->addElementWise(*res_1129->getOutput(0),*res_361->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1130 && "failed to build Node_7677_mul (type:multiply)");
  res_1130->getOutput(0)->setName("Node_7677_mul:0");
  auto res_1131=network->addElementWise(*res_1130->getOutput(0),*res_362->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1131 && "failed to build Node_7677 (type:add)");
  res_1131->getOutput(0)->setName("Node_7677:0");
  auto res_1132=network->addActivation(*res_1131->getOutput(0),ActivationType::kRELU);
  assert(res_1132 && "failed to build Node_7678 (type:relu)");
  res_1132->getOutput(0)->setName("Node_7678:0");
  auto res_1133=network->addShuffle(*res_1132->getOutput(0));
  res_1133->setReshapeDimensions(Dims3{64,1,1});
  assert(res_1133 && "failed to build Node_7678_reshape (type:reshape)");
  res_1133->getOutput(0)->setName("Node_7678_reshape:0");
  auto res_1134=network->addFullyConnected(*res_1133->getOutput(0),32,mWeightsMap["weight_1134"],mWeightsMap["bias_1134"]);
  assert(res_1134 && "failed to build Node_7686 (type:dense)");
  res_1134->getOutput(0)->setName("Node_7686:0");
  auto res_1135=network->addShuffle(*res_1134->getOutput(0));
  res_1135->setReshapeDimensions(Dims{1,{32},{DimensionType::kCHANNEL}});
  assert(res_1135 && "failed to build Node_7686_reshape (type:reshape)");
  res_1135->getOutput(0)->setName("Node_7686_reshape:0");
  auto res_1136=network->addReduce(*res_1135->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1136 && "failed to build Node_7693_mean (type:mean)");
  res_1136->getOutput(0)->setName("Node_7693_mean:0");
  auto res_1137=network->addElementWise(*res_1135->getOutput(0),*res_1136->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1137 && "failed to build Node_7693_diff (type:sub)");
  res_1137->getOutput(0)->setName("Node_7693_diff:0");
  auto res_1138=network->addElementWise(*res_1137->getOutput(0),*res_476->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1138 && "failed to build Node_7693_power (type:power)");
  res_1138->getOutput(0)->setName("Node_7693_power:0");
  auto res_1139=network->addReduce(*res_1138->getOutput(0),ReduceOperation::kAVG,1,true);
  assert(res_1139 && "failed to build Node_7693_var (type:mean)");
  res_1139->getOutput(0)->setName("Node_7693_var:0");
  auto res_1140=network->addElementWise(*res_1139->getOutput(0),*res_420->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1140 && "failed to build Node_7693_modify (type:add)");
  res_1140->getOutput(0)->setName("Node_7693_modify:0");
  auto res_1141=network->addUnary(*res_1140->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1141 && "failed to build Node_7693_sqrt (type:power)");
  res_1141->getOutput(0)->setName("Node_7693_sqrt:0");
  auto res_1142=network->addElementWise(*res_1137->getOutput(0),*res_1141->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1142 && "failed to build Node_7693_rsqrt (type:divide)");
  res_1142->getOutput(0)->setName("Node_7693_rsqrt:0");
  auto res_1143=network->addElementWise(*res_1142->getOutput(0),*res_363->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1143 && "failed to build Node_7693_mul (type:multiply)");
  res_1143->getOutput(0)->setName("Node_7693_mul:0");
  auto res_1144=network->addElementWise(*res_1143->getOutput(0),*res_364->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1144 && "failed to build Node_7693 (type:add)");
  res_1144->getOutput(0)->setName("Node_7693:0");
  auto res_1145=network->addActivation(*res_1144->getOutput(0),ActivationType::kRELU);
  assert(res_1145 && "failed to build Node_7694 (type:relu)");
  res_1145->getOutput(0)->setName("Node_7694:0");
  auto res_1146=network->addShuffle(*res_1145->getOutput(0));
  res_1146->setReshapeDimensions(Dims3{32,1,1});
  assert(res_1146 && "failed to build Node_7694_reshape (type:reshape)");
  res_1146->getOutput(0)->setName("Node_7694_reshape:0");
  auto res_1147=network->addFullyConnected(*res_1146->getOutput(0),2,mWeightsMap["weight_1147"],mWeightsMap["bias_1147"]);
  assert(res_1147 && "failed to build Node_7702 (type:dense)");
  res_1147->getOutput(0)->setName("Node_7702:0");
  auto res_1148=network->addShuffle(*res_1147->getOutput(0));
  res_1148->setReshapeDimensions(Dims{2,{2,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1148 && "failed to build Node_7702_reshape (type:reshape)");
  res_1148->getOutput(0)->setName("Node_7702_reshape:0");
  ITensor* inputTensors_1149[8] = {res_938->getOutput(0),res_968->getOutput(0),res_998->getOutput(0),res_1028->getOutput(0),res_1058->getOutput(0),res_1088->getOutput(0),res_1118->getOutput(0),res_1148->getOutput(0)};
  auto res_1149=network->addConcatenation(inputTensors_1149,8);
  res_1149->setAxis(1);
  assert(res_1149 && "failed to build Node_7704 (type:concat)");
  res_1149->getOutput(0)->setName("Node_7704:0");
  auto res_1150=network->addElementWise(*res_1149->getOutput(0),*inputs[28],ElementWiseOperation::kPROD);
  assert(res_1150 && "failed to build Node_7721 (type:multiply)");
  res_1150->getOutput(0)->setName("Node_7721:0");
  auto res_1151=network->addReduce(*res_1150->getOutput(0),ReduceOperation::kSUM,2,false);
  assert(res_1151 && "failed to build Node_7723 (type:dlr_sum)");
  res_1151->getOutput(0)->setName("Node_7723:0");
  auto res_1152=network->addSoftMax(*res_1151->getOutput(0));
  res_1152->setAxes(1);
  assert(res_1152 && "failed to build Node_7739 (type:softmax)");
  res_1152->getOutput(0)->setName("score");
  outputs[0]=res_1152->getOutput(0);
  std::cout<<"input of slice "<<std::endl;
  show_output_shape(res_1152);
  auto res_1153=network->addSlice(*res_1152->getOutput(0),Dims{1},Dims{1},Dims{1});
  //correct
  //auto res_667=network->addSlice(*res_1152->getOutput(0),\
    Dims{1,{1},{DimensionType::kCHANNEL}},\
    Dims{1,{1},{DimensionType::kCHANNEL}}, \
    Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_1153 && "failed to build Node_7767 (type:dlr_slice)");
  res_1153->getOutput(0)->setName("Node_7767");
  outputs[1]=res_1153->getOutput(0);
  // Set configs
  builder->setMaxBatchSize(batch_size);
  config->setMaxWorkspaceSize(1 << 20);
  return true;
}

bool text_img_general_3::clean_up(){
  return clean_weights(mWeightsMap);
}

