#include "test_1.h"
#include "tensorrt/gelu.h"
using namespace nvinfer1;
using namespace std;

bool test_1::build(TRTUniquePtr<IBuilder>& builder,TRTUniquePtr<INetworkDefinition>& network,TRTUniquePtr<IBuilderConfig>& config,
  ITensor** inputs,ITensor** outputs,int batch_size,DLRLogger& dlr_logger)
{
  // Add Layers
  mWeightsMap = load_weigths("/usr/local/quake/datas/weights/const_shape.wts");
  // passby input_ids_int32(dlr_input), defined by input_ids_int32;
  // passby input_mask_float32(dlr_input), defined by input_mask_float32;
  // passby segment_ids_int32(dlr_input), defined by segment_ids_int32;
  // passby input0.1(dlr_input), defined by input0.1;
  auto res_4=network->addConstant(Dims2{256,512},mWeightsMap["const_4"]);
  assert(res_4 && "failed to build Node_40 (type:const)");
  res_4->getOutput(0)->setName("Node_40:0");
  auto res_5=network->addConstant(Dims2{1,512},mWeightsMap["const_5"]);
  assert(res_5 && "failed to build bert_model.embeddings.LayerNorm.weight (type:const)");
  res_5->getOutput(0)->setName("bert_model.embeddings.LayerNorm.weight:0");
  auto res_6=network->addConstant(Dims2{1,512},mWeightsMap["const_6"]);
  assert(res_6 && "failed to build bert_model.embeddings.LayerNorm.bias (type:const)");
  res_6->getOutput(0)->setName("bert_model.embeddings.LayerNorm.bias:0");
  auto res_7=network->addConstant(Dims2{1,512},mWeightsMap["const_7"]);
  assert(res_7 && "failed to build bert_model.encoder.layer.0.attention.output.LayerNorm.weight (type:const)");
  res_7->getOutput(0)->setName("bert_model.encoder.layer.0.attention.output.LayerNorm.weight:0");
  auto res_8=network->addConstant(Dims2{1,512},mWeightsMap["const_8"]);
  assert(res_8 && "failed to build bert_model.encoder.layer.0.attention.output.LayerNorm.bias (type:const)");
  res_8->getOutput(0)->setName("bert_model.encoder.layer.0.attention.output.LayerNorm.bias:0");
  auto res_9=network->addConstant(Dims2{1,512},mWeightsMap["const_9"]);
  assert(res_9 && "failed to build bert_model.encoder.layer.0.output.LayerNorm.weight (type:const)");
  res_9->getOutput(0)->setName("bert_model.encoder.layer.0.output.LayerNorm.weight:0");
  auto res_10=network->addConstant(Dims2{1,512},mWeightsMap["const_10"]);
  assert(res_10 && "failed to build bert_model.encoder.layer.0.output.LayerNorm.bias (type:const)");
  res_10->getOutput(0)->setName("bert_model.encoder.layer.0.output.LayerNorm.bias:0");
  auto res_11=network->addConstant(Dims2{1,512},mWeightsMap["const_11"]);
  assert(res_11 && "failed to build bert_model.encoder.layer.1.attention.output.LayerNorm.weight (type:const)");
  res_11->getOutput(0)->setName("bert_model.encoder.layer.1.attention.output.LayerNorm.weight:0");
  auto res_12=network->addConstant(Dims2{1,512},mWeightsMap["const_12"]);
  assert(res_12 && "failed to build bert_model.encoder.layer.1.attention.output.LayerNorm.bias (type:const)");
  res_12->getOutput(0)->setName("bert_model.encoder.layer.1.attention.output.LayerNorm.bias:0");
  auto res_13=network->addConstant(Dims2{1,512},mWeightsMap["const_13"]);
  assert(res_13 && "failed to build bert_model.encoder.layer.1.output.LayerNorm.weight (type:const)");
  res_13->getOutput(0)->setName("bert_model.encoder.layer.1.output.LayerNorm.weight:0");
  auto res_14=network->addConstant(Dims2{1,512},mWeightsMap["const_14"]);
  assert(res_14 && "failed to build bert_model.encoder.layer.1.output.LayerNorm.bias (type:const)");
  res_14->getOutput(0)->setName("bert_model.encoder.layer.1.output.LayerNorm.bias:0");
  auto res_15=network->addConstant(Dims2{1,512},mWeightsMap["const_15"]);
  assert(res_15 && "failed to build bert_model.encoder.layer.2.attention.output.LayerNorm.weight (type:const)");
  res_15->getOutput(0)->setName("bert_model.encoder.layer.2.attention.output.LayerNorm.weight:0");
  auto res_16=network->addConstant(Dims2{1,512},mWeightsMap["const_16"]);
  assert(res_16 && "failed to build bert_model.encoder.layer.2.attention.output.LayerNorm.bias (type:const)");
  res_16->getOutput(0)->setName("bert_model.encoder.layer.2.attention.output.LayerNorm.bias:0");
  auto res_17=network->addConstant(Dims2{1,512},mWeightsMap["const_17"]);
  assert(res_17 && "failed to build bert_model.encoder.layer.2.output.LayerNorm.weight (type:const)");
  res_17->getOutput(0)->setName("bert_model.encoder.layer.2.output.LayerNorm.weight:0");
  auto res_18=network->addConstant(Dims2{1,512},mWeightsMap["const_18"]);
  assert(res_18 && "failed to build bert_model.encoder.layer.2.output.LayerNorm.bias (type:const)");
  res_18->getOutput(0)->setName("bert_model.encoder.layer.2.output.LayerNorm.bias:0");
  auto res_19=network->addConstant(Dims2{1,512},mWeightsMap["const_19"]);
  assert(res_19 && "failed to build bert_model.encoder.layer.3.attention.output.LayerNorm.weight (type:const)");
  res_19->getOutput(0)->setName("bert_model.encoder.layer.3.attention.output.LayerNorm.weight:0");
  auto res_20=network->addConstant(Dims2{1,512},mWeightsMap["const_20"]);
  assert(res_20 && "failed to build bert_model.encoder.layer.3.attention.output.LayerNorm.bias (type:const)");
  res_20->getOutput(0)->setName("bert_model.encoder.layer.3.attention.output.LayerNorm.bias:0");
  auto res_21=network->addConstant(Dims2{1,512},mWeightsMap["const_21"]);
  assert(res_21 && "failed to build bert_model.encoder.layer.3.output.LayerNorm.weight (type:const)");
  res_21->getOutput(0)->setName("bert_model.encoder.layer.3.output.LayerNorm.weight:0");
  auto res_22=network->addConstant(Dims2{1,512},mWeightsMap["const_22"]);
  assert(res_22 && "failed to build bert_model.encoder.layer.3.output.LayerNorm.bias (type:const)");
  res_22->getOutput(0)->setName("bert_model.encoder.layer.3.output.LayerNorm.bias:0");
  auto res_23=network->addConstant(Dims2{1,512},mWeightsMap["const_23"]);
  assert(res_23 && "failed to build bert_model.encoder.layer.4.attention.output.LayerNorm.weight (type:const)");
  res_23->getOutput(0)->setName("bert_model.encoder.layer.4.attention.output.LayerNorm.weight:0");
  auto res_24=network->addConstant(Dims2{1,512},mWeightsMap["const_24"]);
  assert(res_24 && "failed to build bert_model.encoder.layer.4.attention.output.LayerNorm.bias (type:const)");
  res_24->getOutput(0)->setName("bert_model.encoder.layer.4.attention.output.LayerNorm.bias:0");
  auto res_25=network->addConstant(Dims2{1,512},mWeightsMap["const_25"]);
  assert(res_25 && "failed to build bert_model.encoder.layer.4.output.LayerNorm.weight (type:const)");
  res_25->getOutput(0)->setName("bert_model.encoder.layer.4.output.LayerNorm.weight:0");
  auto res_26=network->addConstant(Dims2{1,512},mWeightsMap["const_26"]);
  assert(res_26 && "failed to build bert_model.encoder.layer.4.output.LayerNorm.bias (type:const)");
  res_26->getOutput(0)->setName("bert_model.encoder.layer.4.output.LayerNorm.bias:0");
  auto res_27=network->addConstant(Dims2{1,512},mWeightsMap["const_27"]);
  assert(res_27 && "failed to build bert_model.encoder.layer.5.attention.output.LayerNorm.weight (type:const)");
  res_27->getOutput(0)->setName("bert_model.encoder.layer.5.attention.output.LayerNorm.weight:0");
  auto res_28=network->addConstant(Dims2{1,512},mWeightsMap["const_28"]);
  assert(res_28 && "failed to build bert_model.encoder.layer.5.attention.output.LayerNorm.bias (type:const)");
  res_28->getOutput(0)->setName("bert_model.encoder.layer.5.attention.output.LayerNorm.bias:0");
  auto res_29=network->addConstant(Dims2{1,512},mWeightsMap["const_29"]);
  assert(res_29 && "failed to build bert_model.encoder.layer.5.output.LayerNorm.weight (type:const)");
  res_29->getOutput(0)->setName("bert_model.encoder.layer.5.output.LayerNorm.weight:0");
  auto res_30=network->addConstant(Dims2{1,512},mWeightsMap["const_30"]);
  assert(res_30 && "failed to build bert_model.encoder.layer.5.output.LayerNorm.bias (type:const)");
  res_30->getOutput(0)->setName("bert_model.encoder.layer.5.output.LayerNorm.bias:0");
  auto res_31=network->addConstant(Dims2{1,512},mWeightsMap["const_31"]);
  assert(res_31 && "failed to build bert_model.encoder.layer.6.attention.output.LayerNorm.weight (type:const)");
  res_31->getOutput(0)->setName("bert_model.encoder.layer.6.attention.output.LayerNorm.weight:0");
  auto res_32=network->addConstant(Dims2{1,512},mWeightsMap["const_32"]);
  assert(res_32 && "failed to build bert_model.encoder.layer.6.attention.output.LayerNorm.bias (type:const)");
  res_32->getOutput(0)->setName("bert_model.encoder.layer.6.attention.output.LayerNorm.bias:0");
  auto res_33=network->addConstant(Dims2{1,512},mWeightsMap["const_33"]);
  assert(res_33 && "failed to build bert_model.encoder.layer.6.output.LayerNorm.weight (type:const)");
  res_33->getOutput(0)->setName("bert_model.encoder.layer.6.output.LayerNorm.weight:0");
  auto res_34=network->addConstant(Dims2{1,512},mWeightsMap["const_34"]);
  assert(res_34 && "failed to build bert_model.encoder.layer.6.output.LayerNorm.bias (type:const)");
  res_34->getOutput(0)->setName("bert_model.encoder.layer.6.output.LayerNorm.bias:0");
  auto res_35=network->addConstant(Dims2{1,512},mWeightsMap["const_35"]);
  assert(res_35 && "failed to build bert_model.encoder.layer.7.attention.output.LayerNorm.weight (type:const)");
  res_35->getOutput(0)->setName("bert_model.encoder.layer.7.attention.output.LayerNorm.weight:0");
  auto res_36=network->addConstant(Dims2{1,512},mWeightsMap["const_36"]);
  assert(res_36 && "failed to build bert_model.encoder.layer.7.attention.output.LayerNorm.bias (type:const)");
  res_36->getOutput(0)->setName("bert_model.encoder.layer.7.attention.output.LayerNorm.bias:0");
  auto res_37=network->addConstant(Dims2{1,512},mWeightsMap["const_37"]);
  assert(res_37 && "failed to build bert_model.encoder.layer.7.output.LayerNorm.weight (type:const)");
  res_37->getOutput(0)->setName("bert_model.encoder.layer.7.output.LayerNorm.weight:0");
  auto res_38=network->addConstant(Dims2{1,512},mWeightsMap["const_38"]);
  assert(res_38 && "failed to build bert_model.encoder.layer.7.output.LayerNorm.bias (type:const)");
  res_38->getOutput(0)->setName("bert_model.encoder.layer.7.output.LayerNorm.bias:0");
  auto res_39=network->addConstant(Dims2{512,512},mWeightsMap["const_39"]);
  assert(res_39 && "failed to build bert_model.encoder.layer.0.attention.self.query.weight (type:const)");
  res_39->getOutput(0)->setName("bert_model.encoder.layer.0.attention.self.query.weight:0");
  auto res_40=network->addConstant(Dims2{1,512},mWeightsMap["const_40"]);
  assert(res_40 && "failed to build bert_model.encoder.layer.0.attention.self.query.bias (type:const)");
  res_40->getOutput(0)->setName("bert_model.encoder.layer.0.attention.self.query.bias:0");
  auto res_41=network->addConstant(Dims2{512,512},mWeightsMap["const_41"]);
  assert(res_41 && "failed to build bert_model.encoder.layer.0.attention.self.key.weight (type:const)");
  res_41->getOutput(0)->setName("bert_model.encoder.layer.0.attention.self.key.weight:0");
  auto res_42=network->addConstant(Dims2{1,512},mWeightsMap["const_42"]);
  assert(res_42 && "failed to build bert_model.encoder.layer.0.attention.self.key.bias (type:const)");
  res_42->getOutput(0)->setName("bert_model.encoder.layer.0.attention.self.key.bias:0");
  auto res_43=network->addConstant(Dims2{512,512},mWeightsMap["const_43"]);
  assert(res_43 && "failed to build bert_model.encoder.layer.0.attention.self.value.weight (type:const)");
  res_43->getOutput(0)->setName("bert_model.encoder.layer.0.attention.self.value.weight:0");
  auto res_44=network->addConstant(Dims2{1,512},mWeightsMap["const_44"]);
  assert(res_44 && "failed to build bert_model.encoder.layer.0.attention.self.value.bias (type:const)");
  res_44->getOutput(0)->setName("bert_model.encoder.layer.0.attention.self.value.bias:0");
  auto res_45=network->addConstant(Dims2{512,512},mWeightsMap["const_45"]);
  assert(res_45 && "failed to build bert_model.encoder.layer.0.attention.output.dense.weight (type:const)");
  res_45->getOutput(0)->setName("bert_model.encoder.layer.0.attention.output.dense.weight:0");
  auto res_46=network->addConstant(Dims2{1,512},mWeightsMap["const_46"]);
  assert(res_46 && "failed to build bert_model.encoder.layer.0.attention.output.dense.bias (type:const)");
  res_46->getOutput(0)->setName("bert_model.encoder.layer.0.attention.output.dense.bias:0");
  auto res_47=network->addConstant(Dims2{512,2048},mWeightsMap["const_47"]);
  assert(res_47 && "failed to build bert_model.encoder.layer.0.intermediate.dense.weight (type:const)");
  res_47->getOutput(0)->setName("bert_model.encoder.layer.0.intermediate.dense.weight:0");
  auto res_48=network->addConstant(Dims2{1,2048},mWeightsMap["const_48"]);
  assert(res_48 && "failed to build bert_model.encoder.layer.0.intermediate.dense.bias (type:const)");
  res_48->getOutput(0)->setName("bert_model.encoder.layer.0.intermediate.dense.bias:0");
  auto res_49=network->addConstant(Dims2{2048,512},mWeightsMap["const_49"]);
  assert(res_49 && "failed to build bert_model.encoder.layer.0.output.dense.weight (type:const)");
  res_49->getOutput(0)->setName("bert_model.encoder.layer.0.output.dense.weight:0");
  auto res_50=network->addConstant(Dims2{1,512},mWeightsMap["const_50"]);
  assert(res_50 && "failed to build bert_model.encoder.layer.0.output.dense.bias (type:const)");
  res_50->getOutput(0)->setName("bert_model.encoder.layer.0.output.dense.bias:0");
  auto res_51=network->addConstant(Dims2{512,512},mWeightsMap["const_51"]);
  assert(res_51 && "failed to build bert_model.encoder.layer.1.attention.self.query.weight (type:const)");
  res_51->getOutput(0)->setName("bert_model.encoder.layer.1.attention.self.query.weight:0");
  auto res_52=network->addConstant(Dims2{1,512},mWeightsMap["const_52"]);
  assert(res_52 && "failed to build bert_model.encoder.layer.1.attention.self.query.bias (type:const)");
  res_52->getOutput(0)->setName("bert_model.encoder.layer.1.attention.self.query.bias:0");
  auto res_53=network->addConstant(Dims2{512,512},mWeightsMap["const_53"]);
  assert(res_53 && "failed to build bert_model.encoder.layer.1.attention.self.key.weight (type:const)");
  res_53->getOutput(0)->setName("bert_model.encoder.layer.1.attention.self.key.weight:0");
  auto res_54=network->addConstant(Dims2{1,512},mWeightsMap["const_54"]);
  assert(res_54 && "failed to build bert_model.encoder.layer.1.attention.self.key.bias (type:const)");
  res_54->getOutput(0)->setName("bert_model.encoder.layer.1.attention.self.key.bias:0");
  auto res_55=network->addConstant(Dims2{512,512},mWeightsMap["const_55"]);
  assert(res_55 && "failed to build bert_model.encoder.layer.1.attention.self.value.weight (type:const)");
  res_55->getOutput(0)->setName("bert_model.encoder.layer.1.attention.self.value.weight:0");
  auto res_56=network->addConstant(Dims2{1,512},mWeightsMap["const_56"]);
  assert(res_56 && "failed to build bert_model.encoder.layer.1.attention.self.value.bias (type:const)");
  res_56->getOutput(0)->setName("bert_model.encoder.layer.1.attention.self.value.bias:0");
  auto res_57=network->addConstant(Dims2{512,512},mWeightsMap["const_57"]);
  assert(res_57 && "failed to build bert_model.encoder.layer.1.attention.output.dense.weight (type:const)");
  res_57->getOutput(0)->setName("bert_model.encoder.layer.1.attention.output.dense.weight:0");
  auto res_58=network->addConstant(Dims2{1,512},mWeightsMap["const_58"]);
  assert(res_58 && "failed to build bert_model.encoder.layer.1.attention.output.dense.bias (type:const)");
  res_58->getOutput(0)->setName("bert_model.encoder.layer.1.attention.output.dense.bias:0");
  auto res_59=network->addConstant(Dims2{512,2048},mWeightsMap["const_59"]);
  assert(res_59 && "failed to build bert_model.encoder.layer.1.intermediate.dense.weight (type:const)");
  res_59->getOutput(0)->setName("bert_model.encoder.layer.1.intermediate.dense.weight:0");
  auto res_60=network->addConstant(Dims2{1,2048},mWeightsMap["const_60"]);
  assert(res_60 && "failed to build bert_model.encoder.layer.1.intermediate.dense.bias (type:const)");
  res_60->getOutput(0)->setName("bert_model.encoder.layer.1.intermediate.dense.bias:0");
  auto res_61=network->addConstant(Dims2{2048,512},mWeightsMap["const_61"]);
  assert(res_61 && "failed to build bert_model.encoder.layer.1.output.dense.weight (type:const)");
  res_61->getOutput(0)->setName("bert_model.encoder.layer.1.output.dense.weight:0");
  auto res_62=network->addConstant(Dims2{1,512},mWeightsMap["const_62"]);
  assert(res_62 && "failed to build bert_model.encoder.layer.1.output.dense.bias (type:const)");
  res_62->getOutput(0)->setName("bert_model.encoder.layer.1.output.dense.bias:0");
  auto res_63=network->addConstant(Dims2{512,512},mWeightsMap["const_63"]);
  assert(res_63 && "failed to build bert_model.encoder.layer.2.attention.self.query.weight (type:const)");
  res_63->getOutput(0)->setName("bert_model.encoder.layer.2.attention.self.query.weight:0");
  auto res_64=network->addConstant(Dims2{1,512},mWeightsMap["const_64"]);
  assert(res_64 && "failed to build bert_model.encoder.layer.2.attention.self.query.bias (type:const)");
  res_64->getOutput(0)->setName("bert_model.encoder.layer.2.attention.self.query.bias:0");
  auto res_65=network->addConstant(Dims2{512,512},mWeightsMap["const_65"]);
  assert(res_65 && "failed to build bert_model.encoder.layer.2.attention.self.key.weight (type:const)");
  res_65->getOutput(0)->setName("bert_model.encoder.layer.2.attention.self.key.weight:0");
  auto res_66=network->addConstant(Dims2{1,512},mWeightsMap["const_66"]);
  assert(res_66 && "failed to build bert_model.encoder.layer.2.attention.self.key.bias (type:const)");
  res_66->getOutput(0)->setName("bert_model.encoder.layer.2.attention.self.key.bias:0");
  auto res_67=network->addConstant(Dims2{512,512},mWeightsMap["const_67"]);
  assert(res_67 && "failed to build bert_model.encoder.layer.2.attention.self.value.weight (type:const)");
  res_67->getOutput(0)->setName("bert_model.encoder.layer.2.attention.self.value.weight:0");
  auto res_68=network->addConstant(Dims2{1,512},mWeightsMap["const_68"]);
  assert(res_68 && "failed to build bert_model.encoder.layer.2.attention.self.value.bias (type:const)");
  res_68->getOutput(0)->setName("bert_model.encoder.layer.2.attention.self.value.bias:0");
  auto res_69=network->addConstant(Dims2{512,512},mWeightsMap["const_69"]);
  assert(res_69 && "failed to build bert_model.encoder.layer.2.attention.output.dense.weight (type:const)");
  res_69->getOutput(0)->setName("bert_model.encoder.layer.2.attention.output.dense.weight:0");
  auto res_70=network->addConstant(Dims2{1,512},mWeightsMap["const_70"]);
  assert(res_70 && "failed to build bert_model.encoder.layer.2.attention.output.dense.bias (type:const)");
  res_70->getOutput(0)->setName("bert_model.encoder.layer.2.attention.output.dense.bias:0");
  auto res_71=network->addConstant(Dims2{512,2048},mWeightsMap["const_71"]);
  assert(res_71 && "failed to build bert_model.encoder.layer.2.intermediate.dense.weight (type:const)");
  res_71->getOutput(0)->setName("bert_model.encoder.layer.2.intermediate.dense.weight:0");
  auto res_72=network->addConstant(Dims2{1,2048},mWeightsMap["const_72"]);
  assert(res_72 && "failed to build bert_model.encoder.layer.2.intermediate.dense.bias (type:const)");
  res_72->getOutput(0)->setName("bert_model.encoder.layer.2.intermediate.dense.bias:0");
  auto res_73=network->addConstant(Dims2{2048,512},mWeightsMap["const_73"]);
  assert(res_73 && "failed to build bert_model.encoder.layer.2.output.dense.weight (type:const)");
  res_73->getOutput(0)->setName("bert_model.encoder.layer.2.output.dense.weight:0");
  auto res_74=network->addConstant(Dims2{1,512},mWeightsMap["const_74"]);
  assert(res_74 && "failed to build bert_model.encoder.layer.2.output.dense.bias (type:const)");
  res_74->getOutput(0)->setName("bert_model.encoder.layer.2.output.dense.bias:0");
  auto res_75=network->addConstant(Dims2{512,512},mWeightsMap["const_75"]);
  assert(res_75 && "failed to build bert_model.encoder.layer.3.attention.self.query.weight (type:const)");
  res_75->getOutput(0)->setName("bert_model.encoder.layer.3.attention.self.query.weight:0");
  auto res_76=network->addConstant(Dims2{1,512},mWeightsMap["const_76"]);
  assert(res_76 && "failed to build bert_model.encoder.layer.3.attention.self.query.bias (type:const)");
  res_76->getOutput(0)->setName("bert_model.encoder.layer.3.attention.self.query.bias:0");
  auto res_77=network->addConstant(Dims2{512,512},mWeightsMap["const_77"]);
  assert(res_77 && "failed to build bert_model.encoder.layer.3.attention.self.key.weight (type:const)");
  res_77->getOutput(0)->setName("bert_model.encoder.layer.3.attention.self.key.weight:0");
  auto res_78=network->addConstant(Dims2{1,512},mWeightsMap["const_78"]);
  assert(res_78 && "failed to build bert_model.encoder.layer.3.attention.self.key.bias (type:const)");
  res_78->getOutput(0)->setName("bert_model.encoder.layer.3.attention.self.key.bias:0");
  auto res_79=network->addConstant(Dims2{512,512},mWeightsMap["const_79"]);
  assert(res_79 && "failed to build bert_model.encoder.layer.3.attention.self.value.weight (type:const)");
  res_79->getOutput(0)->setName("bert_model.encoder.layer.3.attention.self.value.weight:0");
  auto res_80=network->addConstant(Dims2{1,512},mWeightsMap["const_80"]);
  assert(res_80 && "failed to build bert_model.encoder.layer.3.attention.self.value.bias (type:const)");
  res_80->getOutput(0)->setName("bert_model.encoder.layer.3.attention.self.value.bias:0");
  auto res_81=network->addConstant(Dims2{512,512},mWeightsMap["const_81"]);
  assert(res_81 && "failed to build bert_model.encoder.layer.3.attention.output.dense.weight (type:const)");
  res_81->getOutput(0)->setName("bert_model.encoder.layer.3.attention.output.dense.weight:0");
  auto res_82=network->addConstant(Dims2{1,512},mWeightsMap["const_82"]);
  assert(res_82 && "failed to build bert_model.encoder.layer.3.attention.output.dense.bias (type:const)");
  res_82->getOutput(0)->setName("bert_model.encoder.layer.3.attention.output.dense.bias:0");
  auto res_83=network->addConstant(Dims2{512,2048},mWeightsMap["const_83"]);
  assert(res_83 && "failed to build bert_model.encoder.layer.3.intermediate.dense.weight (type:const)");
  res_83->getOutput(0)->setName("bert_model.encoder.layer.3.intermediate.dense.weight:0");
  auto res_84=network->addConstant(Dims2{1,2048},mWeightsMap["const_84"]);
  assert(res_84 && "failed to build bert_model.encoder.layer.3.intermediate.dense.bias (type:const)");
  res_84->getOutput(0)->setName("bert_model.encoder.layer.3.intermediate.dense.bias:0");
  auto res_85=network->addConstant(Dims2{2048,512},mWeightsMap["const_85"]);
  assert(res_85 && "failed to build bert_model.encoder.layer.3.output.dense.weight (type:const)");
  res_85->getOutput(0)->setName("bert_model.encoder.layer.3.output.dense.weight:0");
  auto res_86=network->addConstant(Dims2{1,512},mWeightsMap["const_86"]);
  assert(res_86 && "failed to build bert_model.encoder.layer.3.output.dense.bias (type:const)");
  res_86->getOutput(0)->setName("bert_model.encoder.layer.3.output.dense.bias:0");
  auto res_87=network->addConstant(Dims2{512,512},mWeightsMap["const_87"]);
  assert(res_87 && "failed to build bert_model.encoder.layer.4.attention.self.query.weight (type:const)");
  res_87->getOutput(0)->setName("bert_model.encoder.layer.4.attention.self.query.weight:0");
  auto res_88=network->addConstant(Dims2{1,512},mWeightsMap["const_88"]);
  assert(res_88 && "failed to build bert_model.encoder.layer.4.attention.self.query.bias (type:const)");
  res_88->getOutput(0)->setName("bert_model.encoder.layer.4.attention.self.query.bias:0");
  auto res_89=network->addConstant(Dims2{512,512},mWeightsMap["const_89"]);
  assert(res_89 && "failed to build bert_model.encoder.layer.4.attention.self.key.weight (type:const)");
  res_89->getOutput(0)->setName("bert_model.encoder.layer.4.attention.self.key.weight:0");
  auto res_90=network->addConstant(Dims2{1,512},mWeightsMap["const_90"]);
  assert(res_90 && "failed to build bert_model.encoder.layer.4.attention.self.key.bias (type:const)");
  res_90->getOutput(0)->setName("bert_model.encoder.layer.4.attention.self.key.bias:0");
  auto res_91=network->addConstant(Dims2{512,512},mWeightsMap["const_91"]);
  assert(res_91 && "failed to build bert_model.encoder.layer.4.attention.self.value.weight (type:const)");
  res_91->getOutput(0)->setName("bert_model.encoder.layer.4.attention.self.value.weight:0");
  auto res_92=network->addConstant(Dims2{1,512},mWeightsMap["const_92"]);
  assert(res_92 && "failed to build bert_model.encoder.layer.4.attention.self.value.bias (type:const)");
  res_92->getOutput(0)->setName("bert_model.encoder.layer.4.attention.self.value.bias:0");
  auto res_93=network->addConstant(Dims2{512,512},mWeightsMap["const_93"]);
  assert(res_93 && "failed to build bert_model.encoder.layer.4.attention.output.dense.weight (type:const)");
  res_93->getOutput(0)->setName("bert_model.encoder.layer.4.attention.output.dense.weight:0");
  auto res_94=network->addConstant(Dims2{1,512},mWeightsMap["const_94"]);
  assert(res_94 && "failed to build bert_model.encoder.layer.4.attention.output.dense.bias (type:const)");
  res_94->getOutput(0)->setName("bert_model.encoder.layer.4.attention.output.dense.bias:0");
  auto res_95=network->addConstant(Dims2{512,2048},mWeightsMap["const_95"]);
  assert(res_95 && "failed to build bert_model.encoder.layer.4.intermediate.dense.weight (type:const)");
  res_95->getOutput(0)->setName("bert_model.encoder.layer.4.intermediate.dense.weight:0");
  auto res_96=network->addConstant(Dims2{1,2048},mWeightsMap["const_96"]);
  assert(res_96 && "failed to build bert_model.encoder.layer.4.intermediate.dense.bias (type:const)");
  res_96->getOutput(0)->setName("bert_model.encoder.layer.4.intermediate.dense.bias:0");
  auto res_97=network->addConstant(Dims2{2048,512},mWeightsMap["const_97"]);
  assert(res_97 && "failed to build bert_model.encoder.layer.4.output.dense.weight (type:const)");
  res_97->getOutput(0)->setName("bert_model.encoder.layer.4.output.dense.weight:0");
  auto res_98=network->addConstant(Dims2{1,512},mWeightsMap["const_98"]);
  assert(res_98 && "failed to build bert_model.encoder.layer.4.output.dense.bias (type:const)");
  res_98->getOutput(0)->setName("bert_model.encoder.layer.4.output.dense.bias:0");
  auto res_99=network->addConstant(Dims2{512,512},mWeightsMap["const_99"]);
  assert(res_99 && "failed to build bert_model.encoder.layer.5.attention.self.query.weight (type:const)");
  res_99->getOutput(0)->setName("bert_model.encoder.layer.5.attention.self.query.weight:0");
  auto res_100=network->addConstant(Dims2{1,512},mWeightsMap["const_100"]);
  assert(res_100 && "failed to build bert_model.encoder.layer.5.attention.self.query.bias (type:const)");
  res_100->getOutput(0)->setName("bert_model.encoder.layer.5.attention.self.query.bias:0");
  auto res_101=network->addConstant(Dims2{512,512},mWeightsMap["const_101"]);
  assert(res_101 && "failed to build bert_model.encoder.layer.5.attention.self.key.weight (type:const)");
  res_101->getOutput(0)->setName("bert_model.encoder.layer.5.attention.self.key.weight:0");
  auto res_102=network->addConstant(Dims2{1,512},mWeightsMap["const_102"]);
  assert(res_102 && "failed to build bert_model.encoder.layer.5.attention.self.key.bias (type:const)");
  res_102->getOutput(0)->setName("bert_model.encoder.layer.5.attention.self.key.bias:0");
  auto res_103=network->addConstant(Dims2{512,512},mWeightsMap["const_103"]);
  assert(res_103 && "failed to build bert_model.encoder.layer.5.attention.self.value.weight (type:const)");
  res_103->getOutput(0)->setName("bert_model.encoder.layer.5.attention.self.value.weight:0");
  auto res_104=network->addConstant(Dims2{1,512},mWeightsMap["const_104"]);
  assert(res_104 && "failed to build bert_model.encoder.layer.5.attention.self.value.bias (type:const)");
  res_104->getOutput(0)->setName("bert_model.encoder.layer.5.attention.self.value.bias:0");
  auto res_105=network->addConstant(Dims2{512,512},mWeightsMap["const_105"]);
  assert(res_105 && "failed to build bert_model.encoder.layer.5.attention.output.dense.weight (type:const)");
  res_105->getOutput(0)->setName("bert_model.encoder.layer.5.attention.output.dense.weight:0");
  auto res_106=network->addConstant(Dims2{1,512},mWeightsMap["const_106"]);
  assert(res_106 && "failed to build bert_model.encoder.layer.5.attention.output.dense.bias (type:const)");
  res_106->getOutput(0)->setName("bert_model.encoder.layer.5.attention.output.dense.bias:0");
  auto res_107=network->addConstant(Dims2{512,2048},mWeightsMap["const_107"]);
  assert(res_107 && "failed to build bert_model.encoder.layer.5.intermediate.dense.weight (type:const)");
  res_107->getOutput(0)->setName("bert_model.encoder.layer.5.intermediate.dense.weight:0");
  auto res_108=network->addConstant(Dims2{1,2048},mWeightsMap["const_108"]);
  assert(res_108 && "failed to build bert_model.encoder.layer.5.intermediate.dense.bias (type:const)");
  res_108->getOutput(0)->setName("bert_model.encoder.layer.5.intermediate.dense.bias:0");
  auto res_109=network->addConstant(Dims2{2048,512},mWeightsMap["const_109"]);
  assert(res_109 && "failed to build bert_model.encoder.layer.5.output.dense.weight (type:const)");
  res_109->getOutput(0)->setName("bert_model.encoder.layer.5.output.dense.weight:0");
  auto res_110=network->addConstant(Dims2{1,512},mWeightsMap["const_110"]);
  assert(res_110 && "failed to build bert_model.encoder.layer.5.output.dense.bias (type:const)");
  res_110->getOutput(0)->setName("bert_model.encoder.layer.5.output.dense.bias:0");
  auto res_111=network->addConstant(Dims2{512,512},mWeightsMap["const_111"]);
  assert(res_111 && "failed to build bert_model.encoder.layer.6.attention.self.query.weight (type:const)");
  res_111->getOutput(0)->setName("bert_model.encoder.layer.6.attention.self.query.weight:0");
  auto res_112=network->addConstant(Dims2{1,512},mWeightsMap["const_112"]);
  assert(res_112 && "failed to build bert_model.encoder.layer.6.attention.self.query.bias (type:const)");
  res_112->getOutput(0)->setName("bert_model.encoder.layer.6.attention.self.query.bias:0");
  auto res_113=network->addConstant(Dims2{512,512},mWeightsMap["const_113"]);
  assert(res_113 && "failed to build bert_model.encoder.layer.6.attention.self.key.weight (type:const)");
  res_113->getOutput(0)->setName("bert_model.encoder.layer.6.attention.self.key.weight:0");
  auto res_114=network->addConstant(Dims2{1,512},mWeightsMap["const_114"]);
  assert(res_114 && "failed to build bert_model.encoder.layer.6.attention.self.key.bias (type:const)");
  res_114->getOutput(0)->setName("bert_model.encoder.layer.6.attention.self.key.bias:0");
  auto res_115=network->addConstant(Dims2{512,512},mWeightsMap["const_115"]);
  assert(res_115 && "failed to build bert_model.encoder.layer.6.attention.self.value.weight (type:const)");
  res_115->getOutput(0)->setName("bert_model.encoder.layer.6.attention.self.value.weight:0");
  auto res_116=network->addConstant(Dims2{1,512},mWeightsMap["const_116"]);
  assert(res_116 && "failed to build bert_model.encoder.layer.6.attention.self.value.bias (type:const)");
  res_116->getOutput(0)->setName("bert_model.encoder.layer.6.attention.self.value.bias:0");
  auto res_117=network->addConstant(Dims2{512,512},mWeightsMap["const_117"]);
  assert(res_117 && "failed to build bert_model.encoder.layer.6.attention.output.dense.weight (type:const)");
  res_117->getOutput(0)->setName("bert_model.encoder.layer.6.attention.output.dense.weight:0");
  auto res_118=network->addConstant(Dims2{1,512},mWeightsMap["const_118"]);
  assert(res_118 && "failed to build bert_model.encoder.layer.6.attention.output.dense.bias (type:const)");
  res_118->getOutput(0)->setName("bert_model.encoder.layer.6.attention.output.dense.bias:0");
  auto res_119=network->addConstant(Dims2{512,2048},mWeightsMap["const_119"]);
  assert(res_119 && "failed to build bert_model.encoder.layer.6.intermediate.dense.weight (type:const)");
  res_119->getOutput(0)->setName("bert_model.encoder.layer.6.intermediate.dense.weight:0");
  auto res_120=network->addConstant(Dims2{1,2048},mWeightsMap["const_120"]);
  assert(res_120 && "failed to build bert_model.encoder.layer.6.intermediate.dense.bias (type:const)");
  res_120->getOutput(0)->setName("bert_model.encoder.layer.6.intermediate.dense.bias:0");
  auto res_121=network->addConstant(Dims2{2048,512},mWeightsMap["const_121"]);
  assert(res_121 && "failed to build bert_model.encoder.layer.6.output.dense.weight (type:const)");
  res_121->getOutput(0)->setName("bert_model.encoder.layer.6.output.dense.weight:0");
  auto res_122=network->addConstant(Dims2{1,512},mWeightsMap["const_122"]);
  assert(res_122 && "failed to build bert_model.encoder.layer.6.output.dense.bias (type:const)");
  res_122->getOutput(0)->setName("bert_model.encoder.layer.6.output.dense.bias:0");
  auto res_123=network->addConstant(Dims2{512,512},mWeightsMap["const_123"]);
  assert(res_123 && "failed to build bert_model.encoder.layer.7.attention.self.query.weight (type:const)");
  res_123->getOutput(0)->setName("bert_model.encoder.layer.7.attention.self.query.weight:0");
  auto res_124=network->addConstant(Dims2{1,512},mWeightsMap["const_124"]);
  assert(res_124 && "failed to build bert_model.encoder.layer.7.attention.self.query.bias (type:const)");
  res_124->getOutput(0)->setName("bert_model.encoder.layer.7.attention.self.query.bias:0");
  auto res_125=network->addConstant(Dims2{512,512},mWeightsMap["const_125"]);
  assert(res_125 && "failed to build bert_model.encoder.layer.7.attention.self.key.weight (type:const)");
  res_125->getOutput(0)->setName("bert_model.encoder.layer.7.attention.self.key.weight:0");
  auto res_126=network->addConstant(Dims2{1,512},mWeightsMap["const_126"]);
  assert(res_126 && "failed to build bert_model.encoder.layer.7.attention.self.key.bias (type:const)");
  res_126->getOutput(0)->setName("bert_model.encoder.layer.7.attention.self.key.bias:0");
  auto res_127=network->addConstant(Dims2{512,512},mWeightsMap["const_127"]);
  assert(res_127 && "failed to build bert_model.encoder.layer.7.attention.self.value.weight (type:const)");
  res_127->getOutput(0)->setName("bert_model.encoder.layer.7.attention.self.value.weight:0");
  auto res_128=network->addConstant(Dims2{1,512},mWeightsMap["const_128"]);
  assert(res_128 && "failed to build bert_model.encoder.layer.7.attention.self.value.bias (type:const)");
  res_128->getOutput(0)->setName("bert_model.encoder.layer.7.attention.self.value.bias:0");
  auto res_129=network->addConstant(Dims2{512,512},mWeightsMap["const_129"]);
  assert(res_129 && "failed to build bert_model.encoder.layer.7.attention.output.dense.weight (type:const)");
  res_129->getOutput(0)->setName("bert_model.encoder.layer.7.attention.output.dense.weight:0");
  auto res_130=network->addConstant(Dims2{1,512},mWeightsMap["const_130"]);
  assert(res_130 && "failed to build bert_model.encoder.layer.7.attention.output.dense.bias (type:const)");
  res_130->getOutput(0)->setName("bert_model.encoder.layer.7.attention.output.dense.bias:0");
  auto res_131=network->addConstant(Dims2{512,2048},mWeightsMap["const_131"]);
  assert(res_131 && "failed to build bert_model.encoder.layer.7.intermediate.dense.weight (type:const)");
  res_131->getOutput(0)->setName("bert_model.encoder.layer.7.intermediate.dense.weight:0");
  auto res_132=network->addConstant(Dims2{1,2048},mWeightsMap["const_132"]);
  assert(res_132 && "failed to build bert_model.encoder.layer.7.intermediate.dense.bias (type:const)");
  res_132->getOutput(0)->setName("bert_model.encoder.layer.7.intermediate.dense.bias:0");
  auto res_133=network->addConstant(Dims2{2048,512},mWeightsMap["const_133"]);
  assert(res_133 && "failed to build bert_model.encoder.layer.7.output.dense.weight (type:const)");
  res_133->getOutput(0)->setName("bert_model.encoder.layer.7.output.dense.weight:0");
  auto res_134=network->addConstant(Dims2{1,512},mWeightsMap["const_134"]);
  assert(res_134 && "failed to build bert_model.encoder.layer.7.output.dense.bias (type:const)");
  res_134->getOutput(0)->setName("bert_model.encoder.layer.7.output.dense.bias:0");
  auto res_135=network->addConstant(Dims2{21128,512},mWeightsMap["const_135"]);
  assert(res_135 && "failed to build bert_model.embeddings.word_embeddings.weight (type:const)");
  res_135->getOutput(0)->setName("bert_model.embeddings.word_embeddings.weight:0");
  auto res_136=network->addConstant(Dims2{3,512},mWeightsMap["const_136"]);
  assert(res_136 && "failed to build bert_model.embeddings.token_type_embeddings.weight (type:const)");
  res_136->getOutput(0)->setName("bert_model.embeddings.token_type_embeddings.weight:0");
  auto res_137=network->addConstant(Dims3{1,1,1},mWeightsMap["const_137"]);
  assert(res_137 && "failed to build Node_15.x (type:const)");
  res_137->getOutput(0)->setName("Node_15.x:0");
  auto res_138=network->addConstant(Dims3{1,1,1},mWeightsMap["const_138"]);
  assert(res_138 && "failed to build Node_16.y (type:const)");
  res_138->getOutput(0)->setName("Node_16.y:0");
  auto res_139=network->addConstant(Dims3{1,1,1},mWeightsMap["const_139"]);
  assert(res_139 && "failed to build Node_118.y (type:const)");
  res_139->getOutput(0)->setName("Node_118.y:0");
  auto res_140=network->addConstant(Dims3{1,1,1},mWeightsMap["const_140"]);
  assert(res_140 && "failed to build Node_240.y (type:const)");
  res_140->getOutput(0)->setName("Node_240.y:0");
  auto res_141=network->addConstant(Dims3{1,1,1},mWeightsMap["const_141"]);
  assert(res_141 && "failed to build Node_362.y (type:const)");
  res_141->getOutput(0)->setName("Node_362.y:0");
  auto res_142=network->addConstant(Dims3{1,1,1},mWeightsMap["const_142"]);
  assert(res_142 && "failed to build Node_484.y (type:const)");
  res_142->getOutput(0)->setName("Node_484.y:0");
  auto res_143=network->addConstant(Dims3{1,1,1},mWeightsMap["const_143"]);
  assert(res_143 && "failed to build Node_606.y (type:const)");
  res_143->getOutput(0)->setName("Node_606.y:0");
  auto res_144=network->addConstant(Dims3{1,1,1},mWeightsMap["const_144"]);
  assert(res_144 && "failed to build Node_728.y (type:const)");
  res_144->getOutput(0)->setName("Node_728.y:0");
  auto res_145=network->addConstant(Dims3{1,1,1},mWeightsMap["const_145"]);
  assert(res_145 && "failed to build Node_850.y (type:const)");
  res_145->getOutput(0)->setName("Node_850.y:0");
  auto res_146=network->addConstant(Dims3{1,1,1},mWeightsMap["const_146"]);
  assert(res_146 && "failed to build Node_972.y (type:const)");
  res_146->getOutput(0)->setName("Node_972.y:0");
  auto res_147=network->addConstant(Dims2{1,1},mWeightsMap["const_147"]);
  assert(res_147 && "failed to build Node_53_modify.y (type:const)");
  res_147->getOutput(0)->setName("Node_53_modify.y:0");
  auto res_148=network->addConstant(Dims2{1,1},mWeightsMap["const_148"]);
  assert(res_148 && "failed to build Node_153_modify.y (type:const)");
  res_148->getOutput(0)->setName("Node_153_modify.y:0");
  auto res_149=network->addConstant(Dims2{1,1},mWeightsMap["const_149"]);
  assert(res_149 && "failed to build Node_178_modify.y (type:const)");
  res_149->getOutput(0)->setName("Node_178_modify.y:0");
  auto res_150=network->addConstant(Dims2{1,1},mWeightsMap["const_150"]);
  assert(res_150 && "failed to build Node_275_modify.y (type:const)");
  res_150->getOutput(0)->setName("Node_275_modify.y:0");
  auto res_151=network->addConstant(Dims2{1,1},mWeightsMap["const_151"]);
  assert(res_151 && "failed to build Node_300_modify.y (type:const)");
  res_151->getOutput(0)->setName("Node_300_modify.y:0");
  auto res_152=network->addConstant(Dims2{1,1},mWeightsMap["const_152"]);
  assert(res_152 && "failed to build Node_397_modify.y (type:const)");
  res_152->getOutput(0)->setName("Node_397_modify.y:0");
  auto res_153=network->addConstant(Dims2{1,1},mWeightsMap["const_153"]);
  assert(res_153 && "failed to build Node_422_modify.y (type:const)");
  res_153->getOutput(0)->setName("Node_422_modify.y:0");
  auto res_154=network->addConstant(Dims2{1,1},mWeightsMap["const_154"]);
  assert(res_154 && "failed to build Node_519_modify.y (type:const)");
  res_154->getOutput(0)->setName("Node_519_modify.y:0");
  auto res_155=network->addConstant(Dims2{1,1},mWeightsMap["const_155"]);
  assert(res_155 && "failed to build Node_544_modify.y (type:const)");
  res_155->getOutput(0)->setName("Node_544_modify.y:0");
  auto res_156=network->addConstant(Dims2{1,1},mWeightsMap["const_156"]);
  assert(res_156 && "failed to build Node_641_modify.y (type:const)");
  res_156->getOutput(0)->setName("Node_641_modify.y:0");
  auto res_157=network->addConstant(Dims2{1,1},mWeightsMap["const_157"]);
  assert(res_157 && "failed to build Node_666_modify.y (type:const)");
  res_157->getOutput(0)->setName("Node_666_modify.y:0");
  auto res_158=network->addConstant(Dims2{1,1},mWeightsMap["const_158"]);
  assert(res_158 && "failed to build Node_763_modify.y (type:const)");
  res_158->getOutput(0)->setName("Node_763_modify.y:0");
  auto res_159=network->addConstant(Dims2{1,1},mWeightsMap["const_159"]);
  assert(res_159 && "failed to build Node_788_modify.y (type:const)");
  res_159->getOutput(0)->setName("Node_788_modify.y:0");
  auto res_160=network->addConstant(Dims2{1,1},mWeightsMap["const_160"]);
  assert(res_160 && "failed to build Node_885_modify.y (type:const)");
  res_160->getOutput(0)->setName("Node_885_modify.y:0");
  auto res_161=network->addConstant(Dims2{1,1},mWeightsMap["const_161"]);
  assert(res_161 && "failed to build Node_910_modify.y (type:const)");
  res_161->getOutput(0)->setName("Node_910_modify.y:0");
  auto res_162=network->addConstant(Dims2{1,1},mWeightsMap["const_162"]);
  assert(res_162 && "failed to build Node_1007_modify.y (type:const)");
  res_162->getOutput(0)->setName("Node_1007_modify.y:0");
  auto res_163=network->addConstant(Dims2{1,1},mWeightsMap["const_163"]);
  assert(res_163 && "failed to build Node_1032_modify.y (type:const)");
  res_163->getOutput(0)->setName("Node_1032_modify.y:0");
  auto res_164=network->addConstant(Dims2{1,1},mWeightsMap["const_164"]);
  assert(res_164 && "failed to build Node_53_power.power (type:const)");
  res_164->getOutput(0)->setName("Node_53_power.power:0");
  auto res_165=network->addConstant(Dims2{1,1},mWeightsMap["const_165"]);
  assert(res_165 && "failed to build Node_153_power.power (type:const)");
  res_165->getOutput(0)->setName("Node_153_power.power:0");
  auto res_166=network->addConstant(Dims2{1,1},mWeightsMap["const_166"]);
  assert(res_166 && "failed to build Node_178_power.power (type:const)");
  res_166->getOutput(0)->setName("Node_178_power.power:0");
  auto res_167=network->addConstant(Dims2{1,1},mWeightsMap["const_167"]);
  assert(res_167 && "failed to build Node_275_power.power (type:const)");
  res_167->getOutput(0)->setName("Node_275_power.power:0");
  auto res_168=network->addConstant(Dims2{1,1},mWeightsMap["const_168"]);
  assert(res_168 && "failed to build Node_300_power.power (type:const)");
  res_168->getOutput(0)->setName("Node_300_power.power:0");
  auto res_169=network->addConstant(Dims2{1,1},mWeightsMap["const_169"]);
  assert(res_169 && "failed to build Node_397_power.power (type:const)");
  res_169->getOutput(0)->setName("Node_397_power.power:0");
  auto res_170=network->addConstant(Dims2{1,1},mWeightsMap["const_170"]);
  assert(res_170 && "failed to build Node_422_power.power (type:const)");
  res_170->getOutput(0)->setName("Node_422_power.power:0");
  auto res_171=network->addConstant(Dims2{1,1},mWeightsMap["const_171"]);
  assert(res_171 && "failed to build Node_519_power.power (type:const)");
  res_171->getOutput(0)->setName("Node_519_power.power:0");
  auto res_172=network->addConstant(Dims2{1,1},mWeightsMap["const_172"]);
  assert(res_172 && "failed to build Node_544_power.power (type:const)");
  res_172->getOutput(0)->setName("Node_544_power.power:0");
  auto res_173=network->addConstant(Dims2{1,1},mWeightsMap["const_173"]);
  assert(res_173 && "failed to build Node_641_power.power (type:const)");
  res_173->getOutput(0)->setName("Node_641_power.power:0");
  auto res_174=network->addConstant(Dims2{1,1},mWeightsMap["const_174"]);
  assert(res_174 && "failed to build Node_666_power.power (type:const)");
  res_174->getOutput(0)->setName("Node_666_power.power:0");
  auto res_175=network->addConstant(Dims2{1,1},mWeightsMap["const_175"]);
  assert(res_175 && "failed to build Node_763_power.power (type:const)");
  res_175->getOutput(0)->setName("Node_763_power.power:0");
  auto res_176=network->addConstant(Dims2{1,1},mWeightsMap["const_176"]);
  assert(res_176 && "failed to build Node_788_power.power (type:const)");
  res_176->getOutput(0)->setName("Node_788_power.power:0");
  auto res_177=network->addConstant(Dims2{1,1},mWeightsMap["const_177"]);
  assert(res_177 && "failed to build Node_885_power.power (type:const)");
  res_177->getOutput(0)->setName("Node_885_power.power:0");
  auto res_178=network->addConstant(Dims2{1,1},mWeightsMap["const_178"]);
  assert(res_178 && "failed to build Node_910_power.power (type:const)");
  res_178->getOutput(0)->setName("Node_910_power.power:0");
  auto res_179=network->addConstant(Dims2{1,1},mWeightsMap["const_179"]);
  assert(res_179 && "failed to build Node_1007_power.power (type:const)");
  res_179->getOutput(0)->setName("Node_1007_power.power:0");
  auto res_180=network->addConstant(Dims2{1,1},mWeightsMap["const_180"]);
  assert(res_180 && "failed to build Node_1032_power.power (type:const)");
  res_180->getOutput(0)->setName("Node_1032_power.power:0");

  //correct codes
  /*
  auto res_181=network->addConstant(Dims2{1,1},mWeightsMap["const_181"]);
  assert(res_181 && "failed to build Node_2220.power (type:const)");
  res_181->getOutput(0)->setName("Node_2220.power:0");
  auto res_182=network->addShuffle(*res_181->getOutput(0));
  res_182->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_182 && "failed to build Node_2220.power_reshape (type:reshape)");
  res_182->getOutput(0)->setName("Node_2220.power_reshape:0");
  */
  //BUG : failed to build the network 
   
  auto res_182=network->addConstant(Dims{1},mWeightsMap["const_180"]);
  assert(res_182 && "failed to build Node_2220.power_reshape (type:reshape)");
  res_182->getOutput(0)->setName("Node_2220.power_reshape:0");

  auto res_183=network->addGather(*res_135->getOutput(0),*inputs[0],0);
  assert(res_183 && "failed to build Node_31 (type:gather)");
  res_183->getOutput(0)->setName("Node_31:0");
  auto res_184=network->addElementWise(*res_183->getOutput(0),*res_4->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_184 && "failed to build Node_41 (type:add)");
  res_184->getOutput(0)->setName("Node_41:0");
  auto res_185=network->addShuffle(*inputs[1]);
  res_185->setReshapeDimensions(Dims3{1,1,256});
  assert(res_185 && "failed to build Node_13 (type:reshape)");
  res_185->getOutput(0)->setName("Node_13:0");
  auto res_186=network->addElementWise(*res_137->getOutput(0),*res_185->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_186 && "failed to build Node_15 (type:sub)");
  res_186->getOutput(0)->setName("Node_15:0");
  auto res_187=network->addElementWise(*res_186->getOutput(0),*res_138->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_187 && "failed to build Node_16 (type:multiply)");
  res_187->getOutput(0)->setName("Node_16:0");
  auto res_188=network->addGather(*res_136->getOutput(0),*inputs[2],0);
  assert(res_188 && "failed to build Node_45 (type:gather)");
  res_188->getOutput(0)->setName("Node_45:0");
  auto res_189=network->addElementWise(*res_184->getOutput(0),*res_188->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_189 && "failed to build Node_46 (type:add)");
  res_189->getOutput(0)->setName("Node_46:0");
  auto res_190=network->addReduce(*res_189->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_190 && "failed to build Node_53_mean (type:mean)");
  res_190->getOutput(0)->setName("Node_53_mean:0");
  auto res_191=network->addElementWise(*res_189->getOutput(0),*res_190->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_191 && "failed to build Node_53_diff (type:sub)");
  res_191->getOutput(0)->setName("Node_53_diff:0");
  auto res_192=network->addElementWise(*res_191->getOutput(0),*res_164->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_192 && "failed to build Node_53_power (type:power)");
  res_192->getOutput(0)->setName("Node_53_power:0");
  auto res_193=network->addReduce(*res_192->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_193 && "failed to build Node_53_var (type:mean)");
  res_193->getOutput(0)->setName("Node_53_var:0");
  auto res_194=network->addElementWise(*res_193->getOutput(0),*res_147->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_194 && "failed to build Node_53_modify (type:add)");
  res_194->getOutput(0)->setName("Node_53_modify:0");
  auto res_195=network->addUnary(*res_194->getOutput(0),UnaryOperation::kSQRT);
  assert(res_195 && "failed to build Node_53_sqrt (type:power)");
  res_195->getOutput(0)->setName("Node_53_sqrt:0");
  auto res_196=network->addElementWise(*res_191->getOutput(0),*res_195->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_196 && "failed to build Node_53_rsqrt (type:divide)");
  res_196->getOutput(0)->setName("Node_53_rsqrt:0");
  auto res_197=network->addElementWise(*res_196->getOutput(0),*res_5->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_197 && "failed to build Node_53_mul (type:multiply)");
  res_197->getOutput(0)->setName("Node_53_mul:0");
  auto res_198=network->addElementWise(*res_197->getOutput(0),*res_6->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_198 && "failed to build Node_53 (type:add)");
  res_198->getOutput(0)->setName("Node_53:0");
  auto res_199=network->addMatrixMultiply(*res_198->getOutput(0),MatrixOperation::kNONE,*res_39->getOutput(0),MatrixOperation::kNONE);
  assert(res_199 && "failed to build Node_73 (type:matmul)");
  res_199->getOutput(0)->setName("Node_73:0");
  auto res_200=network->addElementWise(*res_199->getOutput(0),*res_40->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_200 && "failed to build Node_73_add (type:add)");
  res_200->getOutput(0)->setName("Node_73_add:0");
  auto res_201=network->addShuffle(*res_200->getOutput(0));
  res_201->setReshapeDimensions(Dims3{256,8,64});
  assert(res_201 && "failed to build Node_93 (type:reshape)");
  res_201->getOutput(0)->setName("Node_93:0");
  auto res_202=network->addShuffle(*res_201->getOutput(0));
  Permutation permute_202;
  permute_202.order[0]=1;
  permute_202.order[1]=0;
  permute_202.order[2]=2;
  res_202->setFirstTranspose(permute_202);
  assert(res_202 && "failed to build Node_95 (type:transpose)");
  res_202->getOutput(0)->setName("Node_95:0");
  auto res_203=network->addMatrixMultiply(*res_198->getOutput(0),MatrixOperation::kNONE,*res_41->getOutput(0),MatrixOperation::kNONE);
  assert(res_203 && "failed to build Node_79 (type:matmul)");
  res_203->getOutput(0)->setName("Node_79:0");
  auto res_204=network->addElementWise(*res_203->getOutput(0),*res_42->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_204 && "failed to build Node_79_add (type:add)");
  res_204->getOutput(0)->setName("Node_79_add:0");
  auto res_205=network->addShuffle(*res_204->getOutput(0));
  res_205->setReshapeDimensions(Dims3{256,8,64});
  assert(res_205 && "failed to build Node_103 (type:reshape)");
  res_205->getOutput(0)->setName("Node_103:0");
  auto res_206=network->addShuffle(*res_205->getOutput(0));
  Permutation permute_206;
  permute_206.order[0]=1;
  permute_206.order[1]=2;
  permute_206.order[2]=0;
  res_206->setFirstTranspose(permute_206);
  assert(res_206 && "failed to build Node_116 (type:transpose)");
  res_206->getOutput(0)->setName("Node_116:0");
  auto res_207=network->addMatrixMultiply(*res_202->getOutput(0),MatrixOperation::kNONE,*res_206->getOutput(0),MatrixOperation::kNONE);
  assert(res_207 && "failed to build Node_117 (type:matmul)");
  res_207->getOutput(0)->setName("Node_117:0");
  auto res_208=network->addElementWise(*res_207->getOutput(0),*res_139->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_208 && "failed to build Node_118 (type:divide)");
  res_208->getOutput(0)->setName("Node_118:0");
  auto res_209=network->addElementWise(*res_208->getOutput(0),*res_187->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_209 && "failed to build Node_119 (type:add)");
  res_209->getOutput(0)->setName("Node_119:0");
  auto res_210=network->addSoftMax(*res_209->getOutput(0));
  res_210->setAxes(4);
  assert(res_210 && "failed to build Node_120 (type:softmax)");
  res_210->getOutput(0)->setName("Node_120:0");
  auto res_211=network->addMatrixMultiply(*res_198->getOutput(0),MatrixOperation::kNONE,*res_43->getOutput(0),MatrixOperation::kNONE);
  assert(res_211 && "failed to build Node_85 (type:matmul)");
  res_211->getOutput(0)->setName("Node_85:0");
  auto res_212=network->addElementWise(*res_211->getOutput(0),*res_44->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_212 && "failed to build Node_85_add (type:add)");
  res_212->getOutput(0)->setName("Node_85_add:0");
  auto res_213=network->addShuffle(*res_212->getOutput(0));
  res_213->setReshapeDimensions(Dims3{256,8,64});
  assert(res_213 && "failed to build Node_113 (type:reshape)");
  res_213->getOutput(0)->setName("Node_113:0");
  auto res_214=network->addShuffle(*res_213->getOutput(0));
  Permutation permute_214;
  permute_214.order[0]=1;
  permute_214.order[1]=0;
  permute_214.order[2]=2;
  res_214->setFirstTranspose(permute_214);
  assert(res_214 && "failed to build Node_115 (type:transpose)");
  res_214->getOutput(0)->setName("Node_115:0");
  auto res_215=network->addMatrixMultiply(*res_210->getOutput(0),MatrixOperation::kNONE,*res_214->getOutput(0),MatrixOperation::kNONE);
  assert(res_215 && "failed to build Node_124 (type:matmul)");
  res_215->getOutput(0)->setName("Node_124:0");
  auto res_216=network->addShuffle(*res_215->getOutput(0));
  Permutation permute_216;
  permute_216.order[0]=1;
  permute_216.order[1]=0;
  permute_216.order[2]=2;
  res_216->setFirstTranspose(permute_216);
  assert(res_216 && "failed to build Node_126 (type:transpose)");
  res_216->getOutput(0)->setName("Node_126:0");
  auto res_217=network->addIdentity(*res_216->getOutput(0));
  assert(res_217 && "failed to build Node_127 (type:contiguous)");
  res_217->getOutput(0)->setName("Node_127:0");
  auto res_218=network->addShuffle(*res_217->getOutput(0));
  res_218->setReshapeDimensions(Dims{2,{256,512},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_218 && "failed to build Node_135 (type:reshape)");
  res_218->getOutput(0)->setName("Node_135:0");
  auto res_219=network->addMatrixMultiply(*res_218->getOutput(0),MatrixOperation::kNONE,*res_45->getOutput(0),MatrixOperation::kNONE);
  assert(res_219 && "failed to build Node_142 (type:matmul)");
  res_219->getOutput(0)->setName("Node_142:0");
  auto res_220=network->addElementWise(*res_219->getOutput(0),*res_46->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_220 && "failed to build Node_142_add (type:add)");
  res_220->getOutput(0)->setName("Node_142_add:0");
  auto res_221=network->addElementWise(*res_220->getOutput(0),*res_198->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_221 && "failed to build Node_146 (type:add)");
  res_221->getOutput(0)->setName("Node_146:0");
  auto res_222=network->addReduce(*res_221->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_222 && "failed to build Node_153_mean (type:mean)");
  res_222->getOutput(0)->setName("Node_153_mean:0");
  auto res_223=network->addElementWise(*res_221->getOutput(0),*res_222->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_223 && "failed to build Node_153_diff (type:sub)");
  res_223->getOutput(0)->setName("Node_153_diff:0");
  auto res_224=network->addElementWise(*res_223->getOutput(0),*res_165->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_224 && "failed to build Node_153_power (type:power)");
  res_224->getOutput(0)->setName("Node_153_power:0");
  auto res_225=network->addReduce(*res_224->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_225 && "failed to build Node_153_var (type:mean)");
  res_225->getOutput(0)->setName("Node_153_var:0");
  auto res_226=network->addElementWise(*res_225->getOutput(0),*res_148->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_226 && "failed to build Node_153_modify (type:add)");
  res_226->getOutput(0)->setName("Node_153_modify:0");
  auto res_227=network->addUnary(*res_226->getOutput(0),UnaryOperation::kSQRT);
  assert(res_227 && "failed to build Node_153_sqrt (type:power)");
  res_227->getOutput(0)->setName("Node_153_sqrt:0");
  auto res_228=network->addElementWise(*res_223->getOutput(0),*res_227->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_228 && "failed to build Node_153_rsqrt (type:divide)");
  res_228->getOutput(0)->setName("Node_153_rsqrt:0");
  auto res_229=network->addElementWise(*res_228->getOutput(0),*res_7->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_229 && "failed to build Node_153_mul (type:multiply)");
  res_229->getOutput(0)->setName("Node_153_mul:0");
  auto res_230=network->addElementWise(*res_229->getOutput(0),*res_8->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_230 && "failed to build Node_153 (type:add)");
  res_230->getOutput(0)->setName("Node_153:0");
  auto res_231=network->addMatrixMultiply(*res_230->getOutput(0),MatrixOperation::kNONE,*res_47->getOutput(0),MatrixOperation::kNONE);
  assert(res_231 && "failed to build Node_159 (type:matmul)");
  res_231->getOutput(0)->setName("Node_159:0");
  auto res_232=network->addElementWise(*res_231->getOutput(0),*res_48->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_232 && "failed to build Node_159_add (type:add)");
  res_232->getOutput(0)->setName("Node_159_add:0");
  ITensor* inputTensors_233[1] = {res_232->getOutput(0)};
  auto plugin_233=GELU_Plugin("gelu");
  auto res_233=network->addPluginV2(inputTensors_233,1,plugin_233);
  assert(res_233 && "failed to build Node_160 (type:gelu)");
  res_233->getOutput(0)->setName("Node_160:0");
  auto res_234=network->addMatrixMultiply(*res_233->getOutput(0),MatrixOperation::kNONE,*res_49->getOutput(0),MatrixOperation::kNONE);
  assert(res_234 && "failed to build Node_167 (type:matmul)");
  res_234->getOutput(0)->setName("Node_167:0");
  auto res_235=network->addElementWise(*res_234->getOutput(0),*res_50->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_235 && "failed to build Node_167_add (type:add)");
  res_235->getOutput(0)->setName("Node_167_add:0");
  auto res_236=network->addElementWise(*res_235->getOutput(0),*res_230->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_236 && "failed to build Node_171 (type:add)");
  res_236->getOutput(0)->setName("Node_171:0");
  auto res_237=network->addReduce(*res_236->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_237 && "failed to build Node_178_mean (type:mean)");
  res_237->getOutput(0)->setName("Node_178_mean:0");
  auto res_238=network->addElementWise(*res_236->getOutput(0),*res_237->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_238 && "failed to build Node_178_diff (type:sub)");
  res_238->getOutput(0)->setName("Node_178_diff:0");
  auto res_239=network->addElementWise(*res_238->getOutput(0),*res_166->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_239 && "failed to build Node_178_power (type:power)");
  res_239->getOutput(0)->setName("Node_178_power:0");
  auto res_240=network->addReduce(*res_239->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_240 && "failed to build Node_178_var (type:mean)");
  res_240->getOutput(0)->setName("Node_178_var:0");
  auto res_241=network->addElementWise(*res_240->getOutput(0),*res_149->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_241 && "failed to build Node_178_modify (type:add)");
  res_241->getOutput(0)->setName("Node_178_modify:0");
  auto res_242=network->addUnary(*res_241->getOutput(0),UnaryOperation::kSQRT);
  assert(res_242 && "failed to build Node_178_sqrt (type:power)");
  res_242->getOutput(0)->setName("Node_178_sqrt:0");
  auto res_243=network->addElementWise(*res_238->getOutput(0),*res_242->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_243 && "failed to build Node_178_rsqrt (type:divide)");
  res_243->getOutput(0)->setName("Node_178_rsqrt:0");
  auto res_244=network->addElementWise(*res_243->getOutput(0),*res_9->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_244 && "failed to build Node_178_mul (type:multiply)");
  res_244->getOutput(0)->setName("Node_178_mul:0");
  auto res_245=network->addElementWise(*res_244->getOutput(0),*res_10->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_245 && "failed to build Node_178 (type:add)");
  res_245->getOutput(0)->setName("Node_178:0");
  auto res_246=network->addMatrixMultiply(*res_245->getOutput(0),MatrixOperation::kNONE,*res_51->getOutput(0),MatrixOperation::kNONE);
  assert(res_246 && "failed to build Node_195 (type:matmul)");
  res_246->getOutput(0)->setName("Node_195:0");
  auto res_247=network->addElementWise(*res_246->getOutput(0),*res_52->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_247 && "failed to build Node_195_add (type:add)");
  res_247->getOutput(0)->setName("Node_195_add:0");
  auto res_248=network->addShuffle(*res_247->getOutput(0));
  res_248->setReshapeDimensions(Dims3{256,8,64});
  assert(res_248 && "failed to build Node_215 (type:reshape)");
  res_248->getOutput(0)->setName("Node_215:0");
  auto res_249=network->addShuffle(*res_248->getOutput(0));
  Permutation permute_249;
  permute_249.order[0]=1;
  permute_249.order[1]=0;
  permute_249.order[2]=2;
  res_249->setFirstTranspose(permute_249);
  assert(res_249 && "failed to build Node_217 (type:transpose)");
  res_249->getOutput(0)->setName("Node_217:0");
  auto res_250=network->addMatrixMultiply(*res_245->getOutput(0),MatrixOperation::kNONE,*res_53->getOutput(0),MatrixOperation::kNONE);
  assert(res_250 && "failed to build Node_201 (type:matmul)");
  res_250->getOutput(0)->setName("Node_201:0");
  auto res_251=network->addElementWise(*res_250->getOutput(0),*res_54->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_251 && "failed to build Node_201_add (type:add)");
  res_251->getOutput(0)->setName("Node_201_add:0");
  auto res_252=network->addShuffle(*res_251->getOutput(0));
  res_252->setReshapeDimensions(Dims3{256,8,64});
  assert(res_252 && "failed to build Node_225 (type:reshape)");
  res_252->getOutput(0)->setName("Node_225:0");
  auto res_253=network->addShuffle(*res_252->getOutput(0));
  Permutation permute_253;
  permute_253.order[0]=1;
  permute_253.order[1]=2;
  permute_253.order[2]=0;
  res_253->setFirstTranspose(permute_253);
  assert(res_253 && "failed to build Node_238 (type:transpose)");
  res_253->getOutput(0)->setName("Node_238:0");
  auto res_254=network->addMatrixMultiply(*res_249->getOutput(0),MatrixOperation::kNONE,*res_253->getOutput(0),MatrixOperation::kNONE);
  assert(res_254 && "failed to build Node_239 (type:matmul)");
  res_254->getOutput(0)->setName("Node_239:0");
  auto res_255=network->addElementWise(*res_254->getOutput(0),*res_140->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_255 && "failed to build Node_240 (type:divide)");
  res_255->getOutput(0)->setName("Node_240:0");
  auto res_256=network->addElementWise(*res_255->getOutput(0),*res_187->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_256 && "failed to build Node_241 (type:add)");
  res_256->getOutput(0)->setName("Node_241:0");
  auto res_257=network->addSoftMax(*res_256->getOutput(0));
  res_257->setAxes(4);
  assert(res_257 && "failed to build Node_242 (type:softmax)");
  res_257->getOutput(0)->setName("Node_242:0");
  auto res_258=network->addMatrixMultiply(*res_245->getOutput(0),MatrixOperation::kNONE,*res_55->getOutput(0),MatrixOperation::kNONE);
  assert(res_258 && "failed to build Node_207 (type:matmul)");
  res_258->getOutput(0)->setName("Node_207:0");
  auto res_259=network->addElementWise(*res_258->getOutput(0),*res_56->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_259 && "failed to build Node_207_add (type:add)");
  res_259->getOutput(0)->setName("Node_207_add:0");
  auto res_260=network->addShuffle(*res_259->getOutput(0));
  res_260->setReshapeDimensions(Dims3{256,8,64});
  assert(res_260 && "failed to build Node_235 (type:reshape)");
  res_260->getOutput(0)->setName("Node_235:0");
  auto res_261=network->addShuffle(*res_260->getOutput(0));
  Permutation permute_261;
  permute_261.order[0]=1;
  permute_261.order[1]=0;
  permute_261.order[2]=2;
  res_261->setFirstTranspose(permute_261);
  assert(res_261 && "failed to build Node_237 (type:transpose)");
  res_261->getOutput(0)->setName("Node_237:0");
  auto res_262=network->addMatrixMultiply(*res_257->getOutput(0),MatrixOperation::kNONE,*res_261->getOutput(0),MatrixOperation::kNONE);
  assert(res_262 && "failed to build Node_246 (type:matmul)");
  res_262->getOutput(0)->setName("Node_246:0");
  auto res_263=network->addShuffle(*res_262->getOutput(0));
  Permutation permute_263;
  permute_263.order[0]=1;
  permute_263.order[1]=0;
  permute_263.order[2]=2;
  res_263->setFirstTranspose(permute_263);
  assert(res_263 && "failed to build Node_248 (type:transpose)");
  res_263->getOutput(0)->setName("Node_248:0");
  auto res_264=network->addIdentity(*res_263->getOutput(0));
  assert(res_264 && "failed to build Node_249 (type:contiguous)");
  res_264->getOutput(0)->setName("Node_249:0");
  auto res_265=network->addShuffle(*res_264->getOutput(0));
  res_265->setReshapeDimensions(Dims{2,{256,512},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_265 && "failed to build Node_257 (type:reshape)");
  res_265->getOutput(0)->setName("Node_257:0");
  auto res_266=network->addMatrixMultiply(*res_265->getOutput(0),MatrixOperation::kNONE,*res_57->getOutput(0),MatrixOperation::kNONE);
  assert(res_266 && "failed to build Node_264 (type:matmul)");
  res_266->getOutput(0)->setName("Node_264:0");
  auto res_267=network->addElementWise(*res_266->getOutput(0),*res_58->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_267 && "failed to build Node_264_add (type:add)");
  res_267->getOutput(0)->setName("Node_264_add:0");
  auto res_268=network->addElementWise(*res_267->getOutput(0),*res_245->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_268 && "failed to build Node_268 (type:add)");
  res_268->getOutput(0)->setName("Node_268:0");
  auto res_269=network->addReduce(*res_268->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_269 && "failed to build Node_275_mean (type:mean)");
  res_269->getOutput(0)->setName("Node_275_mean:0");
  auto res_270=network->addElementWise(*res_268->getOutput(0),*res_269->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_270 && "failed to build Node_275_diff (type:sub)");
  res_270->getOutput(0)->setName("Node_275_diff:0");
  auto res_271=network->addElementWise(*res_270->getOutput(0),*res_167->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_271 && "failed to build Node_275_power (type:power)");
  res_271->getOutput(0)->setName("Node_275_power:0");
  auto res_272=network->addReduce(*res_271->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_272 && "failed to build Node_275_var (type:mean)");
  res_272->getOutput(0)->setName("Node_275_var:0");
  auto res_273=network->addElementWise(*res_272->getOutput(0),*res_150->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_273 && "failed to build Node_275_modify (type:add)");
  res_273->getOutput(0)->setName("Node_275_modify:0");
  auto res_274=network->addUnary(*res_273->getOutput(0),UnaryOperation::kSQRT);
  assert(res_274 && "failed to build Node_275_sqrt (type:power)");
  res_274->getOutput(0)->setName("Node_275_sqrt:0");
  auto res_275=network->addElementWise(*res_270->getOutput(0),*res_274->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_275 && "failed to build Node_275_rsqrt (type:divide)");
  res_275->getOutput(0)->setName("Node_275_rsqrt:0");
  auto res_276=network->addElementWise(*res_275->getOutput(0),*res_11->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_276 && "failed to build Node_275_mul (type:multiply)");
  res_276->getOutput(0)->setName("Node_275_mul:0");
  auto res_277=network->addElementWise(*res_276->getOutput(0),*res_12->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_277 && "failed to build Node_275 (type:add)");
  res_277->getOutput(0)->setName("Node_275:0");
  auto res_278=network->addMatrixMultiply(*res_277->getOutput(0),MatrixOperation::kNONE,*res_59->getOutput(0),MatrixOperation::kNONE);
  assert(res_278 && "failed to build Node_281 (type:matmul)");
  res_278->getOutput(0)->setName("Node_281:0");
  auto res_279=network->addElementWise(*res_278->getOutput(0),*res_60->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_279 && "failed to build Node_281_add (type:add)");
  res_279->getOutput(0)->setName("Node_281_add:0");
  ITensor* inputTensors_280[1] = {res_279->getOutput(0)};
  auto plugin_280=GELU_Plugin("gelu");
  auto res_280=network->addPluginV2(inputTensors_280,1,plugin_280);
  assert(res_280 && "failed to build Node_282 (type:gelu)");
  res_280->getOutput(0)->setName("Node_282:0");
  auto res_281=network->addMatrixMultiply(*res_280->getOutput(0),MatrixOperation::kNONE,*res_61->getOutput(0),MatrixOperation::kNONE);
  assert(res_281 && "failed to build Node_289 (type:matmul)");
  res_281->getOutput(0)->setName("Node_289:0");
  auto res_282=network->addElementWise(*res_281->getOutput(0),*res_62->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_282 && "failed to build Node_289_add (type:add)");
  res_282->getOutput(0)->setName("Node_289_add:0");
  auto res_283=network->addElementWise(*res_282->getOutput(0),*res_277->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_283 && "failed to build Node_293 (type:add)");
  res_283->getOutput(0)->setName("Node_293:0");
  auto res_284=network->addReduce(*res_283->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_284 && "failed to build Node_300_mean (type:mean)");
  res_284->getOutput(0)->setName("Node_300_mean:0");
  auto res_285=network->addElementWise(*res_283->getOutput(0),*res_284->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_285 && "failed to build Node_300_diff (type:sub)");
  res_285->getOutput(0)->setName("Node_300_diff:0");
  auto res_286=network->addElementWise(*res_285->getOutput(0),*res_168->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_286 && "failed to build Node_300_power (type:power)");
  res_286->getOutput(0)->setName("Node_300_power:0");
  auto res_287=network->addReduce(*res_286->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_287 && "failed to build Node_300_var (type:mean)");
  res_287->getOutput(0)->setName("Node_300_var:0");
  auto res_288=network->addElementWise(*res_287->getOutput(0),*res_151->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_288 && "failed to build Node_300_modify (type:add)");
  res_288->getOutput(0)->setName("Node_300_modify:0");
  auto res_289=network->addUnary(*res_288->getOutput(0),UnaryOperation::kSQRT);
  assert(res_289 && "failed to build Node_300_sqrt (type:power)");
  res_289->getOutput(0)->setName("Node_300_sqrt:0");
  auto res_290=network->addElementWise(*res_285->getOutput(0),*res_289->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_290 && "failed to build Node_300_rsqrt (type:divide)");
  res_290->getOutput(0)->setName("Node_300_rsqrt:0");
  auto res_291=network->addElementWise(*res_290->getOutput(0),*res_13->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_291 && "failed to build Node_300_mul (type:multiply)");
  res_291->getOutput(0)->setName("Node_300_mul:0");
  auto res_292=network->addElementWise(*res_291->getOutput(0),*res_14->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_292 && "failed to build Node_300 (type:add)");
  res_292->getOutput(0)->setName("Node_300:0");
  auto res_293=network->addMatrixMultiply(*res_292->getOutput(0),MatrixOperation::kNONE,*res_63->getOutput(0),MatrixOperation::kNONE);
  assert(res_293 && "failed to build Node_317 (type:matmul)");
  res_293->getOutput(0)->setName("Node_317:0");
  auto res_294=network->addElementWise(*res_293->getOutput(0),*res_64->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_294 && "failed to build Node_317_add (type:add)");
  res_294->getOutput(0)->setName("Node_317_add:0");
  auto res_295=network->addShuffle(*res_294->getOutput(0));
  res_295->setReshapeDimensions(Dims3{256,8,64});
  assert(res_295 && "failed to build Node_337 (type:reshape)");
  res_295->getOutput(0)->setName("Node_337:0");
  auto res_296=network->addShuffle(*res_295->getOutput(0));
  Permutation permute_296;
  permute_296.order[0]=1;
  permute_296.order[1]=0;
  permute_296.order[2]=2;
  res_296->setFirstTranspose(permute_296);
  assert(res_296 && "failed to build Node_339 (type:transpose)");
  res_296->getOutput(0)->setName("Node_339:0");
  auto res_297=network->addMatrixMultiply(*res_292->getOutput(0),MatrixOperation::kNONE,*res_65->getOutput(0),MatrixOperation::kNONE);
  assert(res_297 && "failed to build Node_323 (type:matmul)");
  res_297->getOutput(0)->setName("Node_323:0");
  auto res_298=network->addElementWise(*res_297->getOutput(0),*res_66->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_298 && "failed to build Node_323_add (type:add)");
  res_298->getOutput(0)->setName("Node_323_add:0");
  auto res_299=network->addShuffle(*res_298->getOutput(0));
  res_299->setReshapeDimensions(Dims3{256,8,64});
  assert(res_299 && "failed to build Node_347 (type:reshape)");
  res_299->getOutput(0)->setName("Node_347:0");
  auto res_300=network->addShuffle(*res_299->getOutput(0));
  Permutation permute_300;
  permute_300.order[0]=1;
  permute_300.order[1]=2;
  permute_300.order[2]=0;
  res_300->setFirstTranspose(permute_300);
  assert(res_300 && "failed to build Node_360 (type:transpose)");
  res_300->getOutput(0)->setName("Node_360:0");
  auto res_301=network->addMatrixMultiply(*res_296->getOutput(0),MatrixOperation::kNONE,*res_300->getOutput(0),MatrixOperation::kNONE);
  assert(res_301 && "failed to build Node_361 (type:matmul)");
  res_301->getOutput(0)->setName("Node_361:0");
  auto res_302=network->addElementWise(*res_301->getOutput(0),*res_141->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_302 && "failed to build Node_362 (type:divide)");
  res_302->getOutput(0)->setName("Node_362:0");
  auto res_303=network->addElementWise(*res_302->getOutput(0),*res_187->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_303 && "failed to build Node_363 (type:add)");
  res_303->getOutput(0)->setName("Node_363:0");
  auto res_304=network->addSoftMax(*res_303->getOutput(0));
  res_304->setAxes(4);
  assert(res_304 && "failed to build Node_364 (type:softmax)");
  res_304->getOutput(0)->setName("Node_364:0");
  auto res_305=network->addMatrixMultiply(*res_292->getOutput(0),MatrixOperation::kNONE,*res_67->getOutput(0),MatrixOperation::kNONE);
  assert(res_305 && "failed to build Node_329 (type:matmul)");
  res_305->getOutput(0)->setName("Node_329:0");
  auto res_306=network->addElementWise(*res_305->getOutput(0),*res_68->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_306 && "failed to build Node_329_add (type:add)");
  res_306->getOutput(0)->setName("Node_329_add:0");
  auto res_307=network->addShuffle(*res_306->getOutput(0));
  res_307->setReshapeDimensions(Dims3{256,8,64});
  assert(res_307 && "failed to build Node_357 (type:reshape)");
  res_307->getOutput(0)->setName("Node_357:0");
  auto res_308=network->addShuffle(*res_307->getOutput(0));
  Permutation permute_308;
  permute_308.order[0]=1;
  permute_308.order[1]=0;
  permute_308.order[2]=2;
  res_308->setFirstTranspose(permute_308);
  assert(res_308 && "failed to build Node_359 (type:transpose)");
  res_308->getOutput(0)->setName("Node_359:0");
  auto res_309=network->addMatrixMultiply(*res_304->getOutput(0),MatrixOperation::kNONE,*res_308->getOutput(0),MatrixOperation::kNONE);
  assert(res_309 && "failed to build Node_368 (type:matmul)");
  res_309->getOutput(0)->setName("Node_368:0");
  auto res_310=network->addShuffle(*res_309->getOutput(0));
  Permutation permute_310;
  permute_310.order[0]=1;
  permute_310.order[1]=0;
  permute_310.order[2]=2;
  res_310->setFirstTranspose(permute_310);
  assert(res_310 && "failed to build Node_370 (type:transpose)");
  res_310->getOutput(0)->setName("Node_370:0");
  auto res_311=network->addIdentity(*res_310->getOutput(0));
  assert(res_311 && "failed to build Node_371 (type:contiguous)");
  res_311->getOutput(0)->setName("Node_371:0");
  auto res_312=network->addShuffle(*res_311->getOutput(0));
  res_312->setReshapeDimensions(Dims{2,{256,512},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_312 && "failed to build Node_379 (type:reshape)");
  res_312->getOutput(0)->setName("Node_379:0");
  auto res_313=network->addMatrixMultiply(*res_312->getOutput(0),MatrixOperation::kNONE,*res_69->getOutput(0),MatrixOperation::kNONE);
  assert(res_313 && "failed to build Node_386 (type:matmul)");
  res_313->getOutput(0)->setName("Node_386:0");
  auto res_314=network->addElementWise(*res_313->getOutput(0),*res_70->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_314 && "failed to build Node_386_add (type:add)");
  res_314->getOutput(0)->setName("Node_386_add:0");
  auto res_315=network->addElementWise(*res_314->getOutput(0),*res_292->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_315 && "failed to build Node_390 (type:add)");
  res_315->getOutput(0)->setName("Node_390:0");
  auto res_316=network->addReduce(*res_315->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_316 && "failed to build Node_397_mean (type:mean)");
  res_316->getOutput(0)->setName("Node_397_mean:0");
  auto res_317=network->addElementWise(*res_315->getOutput(0),*res_316->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_317 && "failed to build Node_397_diff (type:sub)");
  res_317->getOutput(0)->setName("Node_397_diff:0");
  auto res_318=network->addElementWise(*res_317->getOutput(0),*res_169->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_318 && "failed to build Node_397_power (type:power)");
  res_318->getOutput(0)->setName("Node_397_power:0");
  auto res_319=network->addReduce(*res_318->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_319 && "failed to build Node_397_var (type:mean)");
  res_319->getOutput(0)->setName("Node_397_var:0");
  auto res_320=network->addElementWise(*res_319->getOutput(0),*res_152->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_320 && "failed to build Node_397_modify (type:add)");
  res_320->getOutput(0)->setName("Node_397_modify:0");
  auto res_321=network->addUnary(*res_320->getOutput(0),UnaryOperation::kSQRT);
  assert(res_321 && "failed to build Node_397_sqrt (type:power)");
  res_321->getOutput(0)->setName("Node_397_sqrt:0");
  auto res_322=network->addElementWise(*res_317->getOutput(0),*res_321->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_322 && "failed to build Node_397_rsqrt (type:divide)");
  res_322->getOutput(0)->setName("Node_397_rsqrt:0");
  auto res_323=network->addElementWise(*res_322->getOutput(0),*res_15->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_323 && "failed to build Node_397_mul (type:multiply)");
  res_323->getOutput(0)->setName("Node_397_mul:0");
  auto res_324=network->addElementWise(*res_323->getOutput(0),*res_16->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_324 && "failed to build Node_397 (type:add)");
  res_324->getOutput(0)->setName("Node_397:0");
  auto res_325=network->addMatrixMultiply(*res_324->getOutput(0),MatrixOperation::kNONE,*res_71->getOutput(0),MatrixOperation::kNONE);
  assert(res_325 && "failed to build Node_403 (type:matmul)");
  res_325->getOutput(0)->setName("Node_403:0");
  auto res_326=network->addElementWise(*res_325->getOutput(0),*res_72->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_326 && "failed to build Node_403_add (type:add)");
  res_326->getOutput(0)->setName("Node_403_add:0");
  ITensor* inputTensors_327[1] = {res_326->getOutput(0)};
  auto plugin_327=GELU_Plugin("gelu");
  auto res_327=network->addPluginV2(inputTensors_327,1,plugin_327);
  assert(res_327 && "failed to build Node_404 (type:gelu)");
  res_327->getOutput(0)->setName("Node_404:0");
  auto res_328=network->addMatrixMultiply(*res_327->getOutput(0),MatrixOperation::kNONE,*res_73->getOutput(0),MatrixOperation::kNONE);
  assert(res_328 && "failed to build Node_411 (type:matmul)");
  res_328->getOutput(0)->setName("Node_411:0");
  auto res_329=network->addElementWise(*res_328->getOutput(0),*res_74->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_329 && "failed to build Node_411_add (type:add)");
  res_329->getOutput(0)->setName("Node_411_add:0");
  auto res_330=network->addElementWise(*res_329->getOutput(0),*res_324->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_330 && "failed to build Node_415 (type:add)");
  res_330->getOutput(0)->setName("Node_415:0");
  auto res_331=network->addReduce(*res_330->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_331 && "failed to build Node_422_mean (type:mean)");
  res_331->getOutput(0)->setName("Node_422_mean:0");
  auto res_332=network->addElementWise(*res_330->getOutput(0),*res_331->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_332 && "failed to build Node_422_diff (type:sub)");
  res_332->getOutput(0)->setName("Node_422_diff:0");
  auto res_333=network->addElementWise(*res_332->getOutput(0),*res_170->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_333 && "failed to build Node_422_power (type:power)");
  res_333->getOutput(0)->setName("Node_422_power:0");
  auto res_334=network->addReduce(*res_333->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_334 && "failed to build Node_422_var (type:mean)");
  res_334->getOutput(0)->setName("Node_422_var:0");
  auto res_335=network->addElementWise(*res_334->getOutput(0),*res_153->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_335 && "failed to build Node_422_modify (type:add)");
  res_335->getOutput(0)->setName("Node_422_modify:0");
  auto res_336=network->addUnary(*res_335->getOutput(0),UnaryOperation::kSQRT);
  assert(res_336 && "failed to build Node_422_sqrt (type:power)");
  res_336->getOutput(0)->setName("Node_422_sqrt:0");
  auto res_337=network->addElementWise(*res_332->getOutput(0),*res_336->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_337 && "failed to build Node_422_rsqrt (type:divide)");
  res_337->getOutput(0)->setName("Node_422_rsqrt:0");
  auto res_338=network->addElementWise(*res_337->getOutput(0),*res_17->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_338 && "failed to build Node_422_mul (type:multiply)");
  res_338->getOutput(0)->setName("Node_422_mul:0");
  auto res_339=network->addElementWise(*res_338->getOutput(0),*res_18->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_339 && "failed to build Node_422 (type:add)");
  res_339->getOutput(0)->setName("Node_422:0");
  auto res_340=network->addMatrixMultiply(*res_339->getOutput(0),MatrixOperation::kNONE,*res_75->getOutput(0),MatrixOperation::kNONE);
  assert(res_340 && "failed to build Node_439 (type:matmul)");
  res_340->getOutput(0)->setName("Node_439:0");
  auto res_341=network->addElementWise(*res_340->getOutput(0),*res_76->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_341 && "failed to build Node_439_add (type:add)");
  res_341->getOutput(0)->setName("Node_439_add:0");
  auto res_342=network->addShuffle(*res_341->getOutput(0));
  res_342->setReshapeDimensions(Dims3{256,8,64});
  assert(res_342 && "failed to build Node_459 (type:reshape)");
  res_342->getOutput(0)->setName("Node_459:0");
  auto res_343=network->addShuffle(*res_342->getOutput(0));
  Permutation permute_343;
  permute_343.order[0]=1;
  permute_343.order[1]=0;
  permute_343.order[2]=2;
  res_343->setFirstTranspose(permute_343);
  assert(res_343 && "failed to build Node_461 (type:transpose)");
  res_343->getOutput(0)->setName("Node_461:0");
  auto res_344=network->addMatrixMultiply(*res_339->getOutput(0),MatrixOperation::kNONE,*res_77->getOutput(0),MatrixOperation::kNONE);
  assert(res_344 && "failed to build Node_445 (type:matmul)");
  res_344->getOutput(0)->setName("Node_445:0");
  auto res_345=network->addElementWise(*res_344->getOutput(0),*res_78->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_345 && "failed to build Node_445_add (type:add)");
  res_345->getOutput(0)->setName("Node_445_add:0");
  auto res_346=network->addShuffle(*res_345->getOutput(0));
  res_346->setReshapeDimensions(Dims3{256,8,64});
  assert(res_346 && "failed to build Node_469 (type:reshape)");
  res_346->getOutput(0)->setName("Node_469:0");
  auto res_347=network->addShuffle(*res_346->getOutput(0));
  Permutation permute_347;
  permute_347.order[0]=1;
  permute_347.order[1]=2;
  permute_347.order[2]=0;
  res_347->setFirstTranspose(permute_347);
  assert(res_347 && "failed to build Node_482 (type:transpose)");
  res_347->getOutput(0)->setName("Node_482:0");
  auto res_348=network->addMatrixMultiply(*res_343->getOutput(0),MatrixOperation::kNONE,*res_347->getOutput(0),MatrixOperation::kNONE);
  assert(res_348 && "failed to build Node_483 (type:matmul)");
  res_348->getOutput(0)->setName("Node_483:0");
  auto res_349=network->addElementWise(*res_348->getOutput(0),*res_142->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_349 && "failed to build Node_484 (type:divide)");
  res_349->getOutput(0)->setName("Node_484:0");
  auto res_350=network->addElementWise(*res_349->getOutput(0),*res_187->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_350 && "failed to build Node_485 (type:add)");
  res_350->getOutput(0)->setName("Node_485:0");
  auto res_351=network->addSoftMax(*res_350->getOutput(0));
  res_351->setAxes(4);
  assert(res_351 && "failed to build Node_486 (type:softmax)");
  res_351->getOutput(0)->setName("Node_486:0");
  auto res_352=network->addMatrixMultiply(*res_339->getOutput(0),MatrixOperation::kNONE,*res_79->getOutput(0),MatrixOperation::kNONE);
  assert(res_352 && "failed to build Node_451 (type:matmul)");
  res_352->getOutput(0)->setName("Node_451:0");
  auto res_353=network->addElementWise(*res_352->getOutput(0),*res_80->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_353 && "failed to build Node_451_add (type:add)");
  res_353->getOutput(0)->setName("Node_451_add:0");
  auto res_354=network->addShuffle(*res_353->getOutput(0));
  res_354->setReshapeDimensions(Dims3{256,8,64});
  assert(res_354 && "failed to build Node_479 (type:reshape)");
  res_354->getOutput(0)->setName("Node_479:0");
  auto res_355=network->addShuffle(*res_354->getOutput(0));
  Permutation permute_355;
  permute_355.order[0]=1;
  permute_355.order[1]=0;
  permute_355.order[2]=2;
  res_355->setFirstTranspose(permute_355);
  assert(res_355 && "failed to build Node_481 (type:transpose)");
  res_355->getOutput(0)->setName("Node_481:0");
  auto res_356=network->addMatrixMultiply(*res_351->getOutput(0),MatrixOperation::kNONE,*res_355->getOutput(0),MatrixOperation::kNONE);
  assert(res_356 && "failed to build Node_490 (type:matmul)");
  res_356->getOutput(0)->setName("Node_490:0");
  auto res_357=network->addShuffle(*res_356->getOutput(0));
  Permutation permute_357;
  permute_357.order[0]=1;
  permute_357.order[1]=0;
  permute_357.order[2]=2;
  res_357->setFirstTranspose(permute_357);
  assert(res_357 && "failed to build Node_492 (type:transpose)");
  res_357->getOutput(0)->setName("Node_492:0");
  auto res_358=network->addIdentity(*res_357->getOutput(0));
  assert(res_358 && "failed to build Node_493 (type:contiguous)");
  res_358->getOutput(0)->setName("Node_493:0");
  auto res_359=network->addShuffle(*res_358->getOutput(0));
  res_359->setReshapeDimensions(Dims{2,{256,512},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_359 && "failed to build Node_501 (type:reshape)");
  res_359->getOutput(0)->setName("Node_501:0");
  auto res_360=network->addMatrixMultiply(*res_359->getOutput(0),MatrixOperation::kNONE,*res_81->getOutput(0),MatrixOperation::kNONE);
  assert(res_360 && "failed to build Node_508 (type:matmul)");
  res_360->getOutput(0)->setName("Node_508:0");
  auto res_361=network->addElementWise(*res_360->getOutput(0),*res_82->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_361 && "failed to build Node_508_add (type:add)");
  res_361->getOutput(0)->setName("Node_508_add:0");
  auto res_362=network->addElementWise(*res_361->getOutput(0),*res_339->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_362 && "failed to build Node_512 (type:add)");
  res_362->getOutput(0)->setName("Node_512:0");
  auto res_363=network->addReduce(*res_362->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_363 && "failed to build Node_519_mean (type:mean)");
  res_363->getOutput(0)->setName("Node_519_mean:0");
  auto res_364=network->addElementWise(*res_362->getOutput(0),*res_363->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_364 && "failed to build Node_519_diff (type:sub)");
  res_364->getOutput(0)->setName("Node_519_diff:0");
  auto res_365=network->addElementWise(*res_364->getOutput(0),*res_171->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_365 && "failed to build Node_519_power (type:power)");
  res_365->getOutput(0)->setName("Node_519_power:0");
  auto res_366=network->addReduce(*res_365->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_366 && "failed to build Node_519_var (type:mean)");
  res_366->getOutput(0)->setName("Node_519_var:0");
  auto res_367=network->addElementWise(*res_366->getOutput(0),*res_154->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_367 && "failed to build Node_519_modify (type:add)");
  res_367->getOutput(0)->setName("Node_519_modify:0");
  auto res_368=network->addUnary(*res_367->getOutput(0),UnaryOperation::kSQRT);
  assert(res_368 && "failed to build Node_519_sqrt (type:power)");
  res_368->getOutput(0)->setName("Node_519_sqrt:0");
  auto res_369=network->addElementWise(*res_364->getOutput(0),*res_368->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_369 && "failed to build Node_519_rsqrt (type:divide)");
  res_369->getOutput(0)->setName("Node_519_rsqrt:0");
  auto res_370=network->addElementWise(*res_369->getOutput(0),*res_19->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_370 && "failed to build Node_519_mul (type:multiply)");
  res_370->getOutput(0)->setName("Node_519_mul:0");
  auto res_371=network->addElementWise(*res_370->getOutput(0),*res_20->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_371 && "failed to build Node_519 (type:add)");
  res_371->getOutput(0)->setName("Node_519:0");
  auto res_372=network->addMatrixMultiply(*res_371->getOutput(0),MatrixOperation::kNONE,*res_83->getOutput(0),MatrixOperation::kNONE);
  assert(res_372 && "failed to build Node_525 (type:matmul)");
  res_372->getOutput(0)->setName("Node_525:0");
  auto res_373=network->addElementWise(*res_372->getOutput(0),*res_84->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_373 && "failed to build Node_525_add (type:add)");
  res_373->getOutput(0)->setName("Node_525_add:0");
  ITensor* inputTensors_374[1] = {res_373->getOutput(0)};
  auto plugin_374=GELU_Plugin("gelu");
  auto res_374=network->addPluginV2(inputTensors_374,1,plugin_374);
  assert(res_374 && "failed to build Node_526 (type:gelu)");
  res_374->getOutput(0)->setName("Node_526:0");
  auto res_375=network->addMatrixMultiply(*res_374->getOutput(0),MatrixOperation::kNONE,*res_85->getOutput(0),MatrixOperation::kNONE);
  assert(res_375 && "failed to build Node_533 (type:matmul)");
  res_375->getOutput(0)->setName("Node_533:0");
  auto res_376=network->addElementWise(*res_375->getOutput(0),*res_86->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_376 && "failed to build Node_533_add (type:add)");
  res_376->getOutput(0)->setName("Node_533_add:0");
  auto res_377=network->addElementWise(*res_376->getOutput(0),*res_371->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_377 && "failed to build Node_537 (type:add)");
  res_377->getOutput(0)->setName("Node_537:0");
  auto res_378=network->addReduce(*res_377->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_378 && "failed to build Node_544_mean (type:mean)");
  res_378->getOutput(0)->setName("Node_544_mean:0");
  auto res_379=network->addElementWise(*res_377->getOutput(0),*res_378->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_379 && "failed to build Node_544_diff (type:sub)");
  res_379->getOutput(0)->setName("Node_544_diff:0");
  auto res_380=network->addElementWise(*res_379->getOutput(0),*res_172->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_380 && "failed to build Node_544_power (type:power)");
  res_380->getOutput(0)->setName("Node_544_power:0");
  auto res_381=network->addReduce(*res_380->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_381 && "failed to build Node_544_var (type:mean)");
  res_381->getOutput(0)->setName("Node_544_var:0");
  auto res_382=network->addElementWise(*res_381->getOutput(0),*res_155->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_382 && "failed to build Node_544_modify (type:add)");
  res_382->getOutput(0)->setName("Node_544_modify:0");
  auto res_383=network->addUnary(*res_382->getOutput(0),UnaryOperation::kSQRT);
  assert(res_383 && "failed to build Node_544_sqrt (type:power)");
  res_383->getOutput(0)->setName("Node_544_sqrt:0");
  auto res_384=network->addElementWise(*res_379->getOutput(0),*res_383->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_384 && "failed to build Node_544_rsqrt (type:divide)");
  res_384->getOutput(0)->setName("Node_544_rsqrt:0");
  auto res_385=network->addElementWise(*res_384->getOutput(0),*res_21->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_385 && "failed to build Node_544_mul (type:multiply)");
  res_385->getOutput(0)->setName("Node_544_mul:0");
  auto res_386=network->addElementWise(*res_385->getOutput(0),*res_22->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_386 && "failed to build Node_544 (type:add)");
  res_386->getOutput(0)->setName("Node_544:0");
  auto res_387=network->addMatrixMultiply(*res_386->getOutput(0),MatrixOperation::kNONE,*res_87->getOutput(0),MatrixOperation::kNONE);
  assert(res_387 && "failed to build Node_561 (type:matmul)");
  res_387->getOutput(0)->setName("Node_561:0");
  auto res_388=network->addElementWise(*res_387->getOutput(0),*res_88->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_388 && "failed to build Node_561_add (type:add)");
  res_388->getOutput(0)->setName("Node_561_add:0");
  auto res_389=network->addShuffle(*res_388->getOutput(0));
  res_389->setReshapeDimensions(Dims3{256,8,64});
  assert(res_389 && "failed to build Node_581 (type:reshape)");
  res_389->getOutput(0)->setName("Node_581:0");
  auto res_390=network->addShuffle(*res_389->getOutput(0));
  Permutation permute_390;
  permute_390.order[0]=1;
  permute_390.order[1]=0;
  permute_390.order[2]=2;
  res_390->setFirstTranspose(permute_390);
  assert(res_390 && "failed to build Node_583 (type:transpose)");
  res_390->getOutput(0)->setName("Node_583:0");
  auto res_391=network->addMatrixMultiply(*res_386->getOutput(0),MatrixOperation::kNONE,*res_89->getOutput(0),MatrixOperation::kNONE);
  assert(res_391 && "failed to build Node_567 (type:matmul)");
  res_391->getOutput(0)->setName("Node_567:0");
  auto res_392=network->addElementWise(*res_391->getOutput(0),*res_90->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_392 && "failed to build Node_567_add (type:add)");
  res_392->getOutput(0)->setName("Node_567_add:0");
  auto res_393=network->addShuffle(*res_392->getOutput(0));
  res_393->setReshapeDimensions(Dims3{256,8,64});
  assert(res_393 && "failed to build Node_591 (type:reshape)");
  res_393->getOutput(0)->setName("Node_591:0");
  auto res_394=network->addShuffle(*res_393->getOutput(0));
  Permutation permute_394;
  permute_394.order[0]=1;
  permute_394.order[1]=2;
  permute_394.order[2]=0;
  res_394->setFirstTranspose(permute_394);
  assert(res_394 && "failed to build Node_604 (type:transpose)");
  res_394->getOutput(0)->setName("Node_604:0");
  auto res_395=network->addMatrixMultiply(*res_390->getOutput(0),MatrixOperation::kNONE,*res_394->getOutput(0),MatrixOperation::kNONE);
  assert(res_395 && "failed to build Node_605 (type:matmul)");
  res_395->getOutput(0)->setName("Node_605:0");
  auto res_396=network->addElementWise(*res_395->getOutput(0),*res_143->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_396 && "failed to build Node_606 (type:divide)");
  res_396->getOutput(0)->setName("Node_606:0");
  auto res_397=network->addElementWise(*res_396->getOutput(0),*res_187->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_397 && "failed to build Node_607 (type:add)");
  res_397->getOutput(0)->setName("Node_607:0");
  auto res_398=network->addSoftMax(*res_397->getOutput(0));
  res_398->setAxes(4);
  assert(res_398 && "failed to build Node_608 (type:softmax)");
  res_398->getOutput(0)->setName("Node_608:0");
  auto res_399=network->addMatrixMultiply(*res_386->getOutput(0),MatrixOperation::kNONE,*res_91->getOutput(0),MatrixOperation::kNONE);
  assert(res_399 && "failed to build Node_573 (type:matmul)");
  res_399->getOutput(0)->setName("Node_573:0");
  auto res_400=network->addElementWise(*res_399->getOutput(0),*res_92->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_400 && "failed to build Node_573_add (type:add)");
  res_400->getOutput(0)->setName("Node_573_add:0");
  auto res_401=network->addShuffle(*res_400->getOutput(0));
  res_401->setReshapeDimensions(Dims3{256,8,64});
  assert(res_401 && "failed to build Node_601 (type:reshape)");
  res_401->getOutput(0)->setName("Node_601:0");
  auto res_402=network->addShuffle(*res_401->getOutput(0));
  Permutation permute_402;
  permute_402.order[0]=1;
  permute_402.order[1]=0;
  permute_402.order[2]=2;
  res_402->setFirstTranspose(permute_402);
  assert(res_402 && "failed to build Node_603 (type:transpose)");
  res_402->getOutput(0)->setName("Node_603:0");
  auto res_403=network->addMatrixMultiply(*res_398->getOutput(0),MatrixOperation::kNONE,*res_402->getOutput(0),MatrixOperation::kNONE);
  assert(res_403 && "failed to build Node_612 (type:matmul)");
  res_403->getOutput(0)->setName("Node_612:0");
  auto res_404=network->addShuffle(*res_403->getOutput(0));
  Permutation permute_404;
  permute_404.order[0]=1;
  permute_404.order[1]=0;
  permute_404.order[2]=2;
  res_404->setFirstTranspose(permute_404);
  assert(res_404 && "failed to build Node_614 (type:transpose)");
  res_404->getOutput(0)->setName("Node_614:0");
  auto res_405=network->addIdentity(*res_404->getOutput(0));
  assert(res_405 && "failed to build Node_615 (type:contiguous)");
  res_405->getOutput(0)->setName("Node_615:0");
  auto res_406=network->addShuffle(*res_405->getOutput(0));
  res_406->setReshapeDimensions(Dims{2,{256,512},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_406 && "failed to build Node_623 (type:reshape)");
  res_406->getOutput(0)->setName("Node_623:0");
  auto res_407=network->addMatrixMultiply(*res_406->getOutput(0),MatrixOperation::kNONE,*res_93->getOutput(0),MatrixOperation::kNONE);
  assert(res_407 && "failed to build Node_630 (type:matmul)");
  res_407->getOutput(0)->setName("Node_630:0");
  auto res_408=network->addElementWise(*res_407->getOutput(0),*res_94->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_408 && "failed to build Node_630_add (type:add)");
  res_408->getOutput(0)->setName("Node_630_add:0");
  auto res_409=network->addElementWise(*res_408->getOutput(0),*res_386->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_409 && "failed to build Node_634 (type:add)");
  res_409->getOutput(0)->setName("Node_634:0");
  auto res_410=network->addReduce(*res_409->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_410 && "failed to build Node_641_mean (type:mean)");
  res_410->getOutput(0)->setName("Node_641_mean:0");
  auto res_411=network->addElementWise(*res_409->getOutput(0),*res_410->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_411 && "failed to build Node_641_diff (type:sub)");
  res_411->getOutput(0)->setName("Node_641_diff:0");
  auto res_412=network->addElementWise(*res_411->getOutput(0),*res_173->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_412 && "failed to build Node_641_power (type:power)");
  res_412->getOutput(0)->setName("Node_641_power:0");
  auto res_413=network->addReduce(*res_412->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_413 && "failed to build Node_641_var (type:mean)");
  res_413->getOutput(0)->setName("Node_641_var:0");
  auto res_414=network->addElementWise(*res_413->getOutput(0),*res_156->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_414 && "failed to build Node_641_modify (type:add)");
  res_414->getOutput(0)->setName("Node_641_modify:0");
  auto res_415=network->addUnary(*res_414->getOutput(0),UnaryOperation::kSQRT);
  assert(res_415 && "failed to build Node_641_sqrt (type:power)");
  res_415->getOutput(0)->setName("Node_641_sqrt:0");
  auto res_416=network->addElementWise(*res_411->getOutput(0),*res_415->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_416 && "failed to build Node_641_rsqrt (type:divide)");
  res_416->getOutput(0)->setName("Node_641_rsqrt:0");
  auto res_417=network->addElementWise(*res_416->getOutput(0),*res_23->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_417 && "failed to build Node_641_mul (type:multiply)");
  res_417->getOutput(0)->setName("Node_641_mul:0");
  auto res_418=network->addElementWise(*res_417->getOutput(0),*res_24->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_418 && "failed to build Node_641 (type:add)");
  res_418->getOutput(0)->setName("Node_641:0");
  auto res_419=network->addMatrixMultiply(*res_418->getOutput(0),MatrixOperation::kNONE,*res_95->getOutput(0),MatrixOperation::kNONE);
  assert(res_419 && "failed to build Node_647 (type:matmul)");
  res_419->getOutput(0)->setName("Node_647:0");
  auto res_420=network->addElementWise(*res_419->getOutput(0),*res_96->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_420 && "failed to build Node_647_add (type:add)");
  res_420->getOutput(0)->setName("Node_647_add:0");
  ITensor* inputTensors_421[1] = {res_420->getOutput(0)};
  auto plugin_421=GELU_Plugin("gelu");
  auto res_421=network->addPluginV2(inputTensors_421,1,plugin_421);
  assert(res_421 && "failed to build Node_648 (type:gelu)");
  res_421->getOutput(0)->setName("Node_648:0");
  auto res_422=network->addMatrixMultiply(*res_421->getOutput(0),MatrixOperation::kNONE,*res_97->getOutput(0),MatrixOperation::kNONE);
  assert(res_422 && "failed to build Node_655 (type:matmul)");
  res_422->getOutput(0)->setName("Node_655:0");
  auto res_423=network->addElementWise(*res_422->getOutput(0),*res_98->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_423 && "failed to build Node_655_add (type:add)");
  res_423->getOutput(0)->setName("Node_655_add:0");
  auto res_424=network->addElementWise(*res_423->getOutput(0),*res_418->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_424 && "failed to build Node_659 (type:add)");
  res_424->getOutput(0)->setName("Node_659:0");
  auto res_425=network->addReduce(*res_424->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_425 && "failed to build Node_666_mean (type:mean)");
  res_425->getOutput(0)->setName("Node_666_mean:0");
  auto res_426=network->addElementWise(*res_424->getOutput(0),*res_425->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_426 && "failed to build Node_666_diff (type:sub)");
  res_426->getOutput(0)->setName("Node_666_diff:0");
  auto res_427=network->addElementWise(*res_426->getOutput(0),*res_174->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_427 && "failed to build Node_666_power (type:power)");
  res_427->getOutput(0)->setName("Node_666_power:0");
  auto res_428=network->addReduce(*res_427->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_428 && "failed to build Node_666_var (type:mean)");
  res_428->getOutput(0)->setName("Node_666_var:0");
  auto res_429=network->addElementWise(*res_428->getOutput(0),*res_157->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_429 && "failed to build Node_666_modify (type:add)");
  res_429->getOutput(0)->setName("Node_666_modify:0");
  auto res_430=network->addUnary(*res_429->getOutput(0),UnaryOperation::kSQRT);
  assert(res_430 && "failed to build Node_666_sqrt (type:power)");
  res_430->getOutput(0)->setName("Node_666_sqrt:0");
  auto res_431=network->addElementWise(*res_426->getOutput(0),*res_430->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_431 && "failed to build Node_666_rsqrt (type:divide)");
  res_431->getOutput(0)->setName("Node_666_rsqrt:0");
  auto res_432=network->addElementWise(*res_431->getOutput(0),*res_25->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_432 && "failed to build Node_666_mul (type:multiply)");
  res_432->getOutput(0)->setName("Node_666_mul:0");
  auto res_433=network->addElementWise(*res_432->getOutput(0),*res_26->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_433 && "failed to build Node_666 (type:add)");
  res_433->getOutput(0)->setName("Node_666:0");
  auto res_434=network->addMatrixMultiply(*res_433->getOutput(0),MatrixOperation::kNONE,*res_99->getOutput(0),MatrixOperation::kNONE);
  assert(res_434 && "failed to build Node_683 (type:matmul)");
  res_434->getOutput(0)->setName("Node_683:0");
  auto res_435=network->addElementWise(*res_434->getOutput(0),*res_100->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_435 && "failed to build Node_683_add (type:add)");
  res_435->getOutput(0)->setName("Node_683_add:0");
  auto res_436=network->addShuffle(*res_435->getOutput(0));
  res_436->setReshapeDimensions(Dims3{256,8,64});
  assert(res_436 && "failed to build Node_703 (type:reshape)");
  res_436->getOutput(0)->setName("Node_703:0");
  auto res_437=network->addShuffle(*res_436->getOutput(0));
  Permutation permute_437;
  permute_437.order[0]=1;
  permute_437.order[1]=0;
  permute_437.order[2]=2;
  res_437->setFirstTranspose(permute_437);
  assert(res_437 && "failed to build Node_705 (type:transpose)");
  res_437->getOutput(0)->setName("Node_705:0");
  auto res_438=network->addMatrixMultiply(*res_433->getOutput(0),MatrixOperation::kNONE,*res_101->getOutput(0),MatrixOperation::kNONE);
  assert(res_438 && "failed to build Node_689 (type:matmul)");
  res_438->getOutput(0)->setName("Node_689:0");
  auto res_439=network->addElementWise(*res_438->getOutput(0),*res_102->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_439 && "failed to build Node_689_add (type:add)");
  res_439->getOutput(0)->setName("Node_689_add:0");
  auto res_440=network->addShuffle(*res_439->getOutput(0));
  res_440->setReshapeDimensions(Dims3{256,8,64});
  assert(res_440 && "failed to build Node_713 (type:reshape)");
  res_440->getOutput(0)->setName("Node_713:0");
  auto res_441=network->addShuffle(*res_440->getOutput(0));
  Permutation permute_441;
  permute_441.order[0]=1;
  permute_441.order[1]=2;
  permute_441.order[2]=0;
  res_441->setFirstTranspose(permute_441);
  assert(res_441 && "failed to build Node_726 (type:transpose)");
  res_441->getOutput(0)->setName("Node_726:0");
  auto res_442=network->addMatrixMultiply(*res_437->getOutput(0),MatrixOperation::kNONE,*res_441->getOutput(0),MatrixOperation::kNONE);
  assert(res_442 && "failed to build Node_727 (type:matmul)");
  res_442->getOutput(0)->setName("Node_727:0");
  auto res_443=network->addElementWise(*res_442->getOutput(0),*res_144->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_443 && "failed to build Node_728 (type:divide)");
  res_443->getOutput(0)->setName("Node_728:0");
  auto res_444=network->addElementWise(*res_443->getOutput(0),*res_187->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_444 && "failed to build Node_729 (type:add)");
  res_444->getOutput(0)->setName("Node_729:0");
  auto res_445=network->addSoftMax(*res_444->getOutput(0));
  res_445->setAxes(4);
  assert(res_445 && "failed to build Node_730 (type:softmax)");
  res_445->getOutput(0)->setName("Node_730:0");
  auto res_446=network->addMatrixMultiply(*res_433->getOutput(0),MatrixOperation::kNONE,*res_103->getOutput(0),MatrixOperation::kNONE);
  assert(res_446 && "failed to build Node_695 (type:matmul)");
  res_446->getOutput(0)->setName("Node_695:0");
  auto res_447=network->addElementWise(*res_446->getOutput(0),*res_104->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_447 && "failed to build Node_695_add (type:add)");
  res_447->getOutput(0)->setName("Node_695_add:0");
  auto res_448=network->addShuffle(*res_447->getOutput(0));
  res_448->setReshapeDimensions(Dims3{256,8,64});
  assert(res_448 && "failed to build Node_723 (type:reshape)");
  res_448->getOutput(0)->setName("Node_723:0");
  auto res_449=network->addShuffle(*res_448->getOutput(0));
  Permutation permute_449;
  permute_449.order[0]=1;
  permute_449.order[1]=0;
  permute_449.order[2]=2;
  res_449->setFirstTranspose(permute_449);
  assert(res_449 && "failed to build Node_725 (type:transpose)");
  res_449->getOutput(0)->setName("Node_725:0");
  auto res_450=network->addMatrixMultiply(*res_445->getOutput(0),MatrixOperation::kNONE,*res_449->getOutput(0),MatrixOperation::kNONE);
  assert(res_450 && "failed to build Node_734 (type:matmul)");
  res_450->getOutput(0)->setName("Node_734:0");
  auto res_451=network->addShuffle(*res_450->getOutput(0));
  Permutation permute_451;
  permute_451.order[0]=1;
  permute_451.order[1]=0;
  permute_451.order[2]=2;
  res_451->setFirstTranspose(permute_451);
  assert(res_451 && "failed to build Node_736 (type:transpose)");
  res_451->getOutput(0)->setName("Node_736:0");
  auto res_452=network->addIdentity(*res_451->getOutput(0));
  assert(res_452 && "failed to build Node_737 (type:contiguous)");
  res_452->getOutput(0)->setName("Node_737:0");
  auto res_453=network->addShuffle(*res_452->getOutput(0));
  res_453->setReshapeDimensions(Dims{2,{256,512},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_453 && "failed to build Node_745 (type:reshape)");
  res_453->getOutput(0)->setName("Node_745:0");
  auto res_454=network->addMatrixMultiply(*res_453->getOutput(0),MatrixOperation::kNONE,*res_105->getOutput(0),MatrixOperation::kNONE);
  assert(res_454 && "failed to build Node_752 (type:matmul)");
  res_454->getOutput(0)->setName("Node_752:0");
  auto res_455=network->addElementWise(*res_454->getOutput(0),*res_106->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_455 && "failed to build Node_752_add (type:add)");
  res_455->getOutput(0)->setName("Node_752_add:0");
  auto res_456=network->addElementWise(*res_455->getOutput(0),*res_433->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_456 && "failed to build Node_756 (type:add)");
  res_456->getOutput(0)->setName("Node_756:0");
  auto res_457=network->addReduce(*res_456->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_457 && "failed to build Node_763_mean (type:mean)");
  res_457->getOutput(0)->setName("Node_763_mean:0");
  auto res_458=network->addElementWise(*res_456->getOutput(0),*res_457->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_458 && "failed to build Node_763_diff (type:sub)");
  res_458->getOutput(0)->setName("Node_763_diff:0");
  auto res_459=network->addElementWise(*res_458->getOutput(0),*res_175->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_459 && "failed to build Node_763_power (type:power)");
  res_459->getOutput(0)->setName("Node_763_power:0");
  auto res_460=network->addReduce(*res_459->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_460 && "failed to build Node_763_var (type:mean)");
  res_460->getOutput(0)->setName("Node_763_var:0");
  auto res_461=network->addElementWise(*res_460->getOutput(0),*res_158->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_461 && "failed to build Node_763_modify (type:add)");
  res_461->getOutput(0)->setName("Node_763_modify:0");
  auto res_462=network->addUnary(*res_461->getOutput(0),UnaryOperation::kSQRT);
  assert(res_462 && "failed to build Node_763_sqrt (type:power)");
  res_462->getOutput(0)->setName("Node_763_sqrt:0");
  auto res_463=network->addElementWise(*res_458->getOutput(0),*res_462->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_463 && "failed to build Node_763_rsqrt (type:divide)");
  res_463->getOutput(0)->setName("Node_763_rsqrt:0");
  auto res_464=network->addElementWise(*res_463->getOutput(0),*res_27->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_464 && "failed to build Node_763_mul (type:multiply)");
  res_464->getOutput(0)->setName("Node_763_mul:0");
  auto res_465=network->addElementWise(*res_464->getOutput(0),*res_28->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_465 && "failed to build Node_763 (type:add)");
  res_465->getOutput(0)->setName("Node_763:0");
  auto res_466=network->addMatrixMultiply(*res_465->getOutput(0),MatrixOperation::kNONE,*res_107->getOutput(0),MatrixOperation::kNONE);
  assert(res_466 && "failed to build Node_769 (type:matmul)");
  res_466->getOutput(0)->setName("Node_769:0");
  auto res_467=network->addElementWise(*res_466->getOutput(0),*res_108->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_467 && "failed to build Node_769_add (type:add)");
  res_467->getOutput(0)->setName("Node_769_add:0");
  ITensor* inputTensors_468[1] = {res_467->getOutput(0)};
  auto plugin_468=GELU_Plugin("gelu");
  auto res_468=network->addPluginV2(inputTensors_468,1,plugin_468);
  assert(res_468 && "failed to build Node_770 (type:gelu)");
  res_468->getOutput(0)->setName("Node_770:0");
  auto res_469=network->addMatrixMultiply(*res_468->getOutput(0),MatrixOperation::kNONE,*res_109->getOutput(0),MatrixOperation::kNONE);
  assert(res_469 && "failed to build Node_777 (type:matmul)");
  res_469->getOutput(0)->setName("Node_777:0");
  auto res_470=network->addElementWise(*res_469->getOutput(0),*res_110->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_470 && "failed to build Node_777_add (type:add)");
  res_470->getOutput(0)->setName("Node_777_add:0");
  auto res_471=network->addElementWise(*res_470->getOutput(0),*res_465->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_471 && "failed to build Node_781 (type:add)");
  res_471->getOutput(0)->setName("Node_781:0");
  auto res_472=network->addReduce(*res_471->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_472 && "failed to build Node_788_mean (type:mean)");
  res_472->getOutput(0)->setName("Node_788_mean:0");
  auto res_473=network->addElementWise(*res_471->getOutput(0),*res_472->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_473 && "failed to build Node_788_diff (type:sub)");
  res_473->getOutput(0)->setName("Node_788_diff:0");
  auto res_474=network->addElementWise(*res_473->getOutput(0),*res_176->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_474 && "failed to build Node_788_power (type:power)");
  res_474->getOutput(0)->setName("Node_788_power:0");
  auto res_475=network->addReduce(*res_474->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_475 && "failed to build Node_788_var (type:mean)");
  res_475->getOutput(0)->setName("Node_788_var:0");
  auto res_476=network->addElementWise(*res_475->getOutput(0),*res_159->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_476 && "failed to build Node_788_modify (type:add)");
  res_476->getOutput(0)->setName("Node_788_modify:0");
  auto res_477=network->addUnary(*res_476->getOutput(0),UnaryOperation::kSQRT);
  assert(res_477 && "failed to build Node_788_sqrt (type:power)");
  res_477->getOutput(0)->setName("Node_788_sqrt:0");
  auto res_478=network->addElementWise(*res_473->getOutput(0),*res_477->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_478 && "failed to build Node_788_rsqrt (type:divide)");
  res_478->getOutput(0)->setName("Node_788_rsqrt:0");
  auto res_479=network->addElementWise(*res_478->getOutput(0),*res_29->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_479 && "failed to build Node_788_mul (type:multiply)");
  res_479->getOutput(0)->setName("Node_788_mul:0");
  auto res_480=network->addElementWise(*res_479->getOutput(0),*res_30->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_480 && "failed to build Node_788 (type:add)");
  res_480->getOutput(0)->setName("Node_788:0");
  auto res_481=network->addMatrixMultiply(*res_480->getOutput(0),MatrixOperation::kNONE,*res_111->getOutput(0),MatrixOperation::kNONE);
  assert(res_481 && "failed to build Node_805 (type:matmul)");
  res_481->getOutput(0)->setName("Node_805:0");
  auto res_482=network->addElementWise(*res_481->getOutput(0),*res_112->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_482 && "failed to build Node_805_add (type:add)");
  res_482->getOutput(0)->setName("Node_805_add:0");
  auto res_483=network->addShuffle(*res_482->getOutput(0));
  res_483->setReshapeDimensions(Dims3{256,8,64});
  assert(res_483 && "failed to build Node_825 (type:reshape)");
  res_483->getOutput(0)->setName("Node_825:0");
  auto res_484=network->addShuffle(*res_483->getOutput(0));
  Permutation permute_484;
  permute_484.order[0]=1;
  permute_484.order[1]=0;
  permute_484.order[2]=2;
  res_484->setFirstTranspose(permute_484);
  assert(res_484 && "failed to build Node_827 (type:transpose)");
  res_484->getOutput(0)->setName("Node_827:0");
  auto res_485=network->addMatrixMultiply(*res_480->getOutput(0),MatrixOperation::kNONE,*res_113->getOutput(0),MatrixOperation::kNONE);
  assert(res_485 && "failed to build Node_811 (type:matmul)");
  res_485->getOutput(0)->setName("Node_811:0");
  auto res_486=network->addElementWise(*res_485->getOutput(0),*res_114->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_486 && "failed to build Node_811_add (type:add)");
  res_486->getOutput(0)->setName("Node_811_add:0");
  auto res_487=network->addShuffle(*res_486->getOutput(0));
  res_487->setReshapeDimensions(Dims3{256,8,64});
  assert(res_487 && "failed to build Node_835 (type:reshape)");
  res_487->getOutput(0)->setName("Node_835:0");
  auto res_488=network->addShuffle(*res_487->getOutput(0));
  Permutation permute_488;
  permute_488.order[0]=1;
  permute_488.order[1]=2;
  permute_488.order[2]=0;
  res_488->setFirstTranspose(permute_488);
  assert(res_488 && "failed to build Node_848 (type:transpose)");
  res_488->getOutput(0)->setName("Node_848:0");
  auto res_489=network->addMatrixMultiply(*res_484->getOutput(0),MatrixOperation::kNONE,*res_488->getOutput(0),MatrixOperation::kNONE);
  assert(res_489 && "failed to build Node_849 (type:matmul)");
  res_489->getOutput(0)->setName("Node_849:0");
  auto res_490=network->addElementWise(*res_489->getOutput(0),*res_145->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_490 && "failed to build Node_850 (type:divide)");
  res_490->getOutput(0)->setName("Node_850:0");
  auto res_491=network->addElementWise(*res_490->getOutput(0),*res_187->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_491 && "failed to build Node_851 (type:add)");
  res_491->getOutput(0)->setName("Node_851:0");
  auto res_492=network->addSoftMax(*res_491->getOutput(0));
  res_492->setAxes(4);
  assert(res_492 && "failed to build Node_852 (type:softmax)");
  res_492->getOutput(0)->setName("Node_852:0");
  auto res_493=network->addMatrixMultiply(*res_480->getOutput(0),MatrixOperation::kNONE,*res_115->getOutput(0),MatrixOperation::kNONE);
  assert(res_493 && "failed to build Node_817 (type:matmul)");
  res_493->getOutput(0)->setName("Node_817:0");
  auto res_494=network->addElementWise(*res_493->getOutput(0),*res_116->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_494 && "failed to build Node_817_add (type:add)");
  res_494->getOutput(0)->setName("Node_817_add:0");
  auto res_495=network->addShuffle(*res_494->getOutput(0));
  res_495->setReshapeDimensions(Dims3{256,8,64});
  assert(res_495 && "failed to build Node_845 (type:reshape)");
  res_495->getOutput(0)->setName("Node_845:0");
  auto res_496=network->addShuffle(*res_495->getOutput(0));
  Permutation permute_496;
  permute_496.order[0]=1;
  permute_496.order[1]=0;
  permute_496.order[2]=2;
  res_496->setFirstTranspose(permute_496);
  assert(res_496 && "failed to build Node_847 (type:transpose)");
  res_496->getOutput(0)->setName("Node_847:0");
  auto res_497=network->addMatrixMultiply(*res_492->getOutput(0),MatrixOperation::kNONE,*res_496->getOutput(0),MatrixOperation::kNONE);
  assert(res_497 && "failed to build Node_856 (type:matmul)");
  res_497->getOutput(0)->setName("Node_856:0");
  auto res_498=network->addShuffle(*res_497->getOutput(0));
  Permutation permute_498;
  permute_498.order[0]=1;
  permute_498.order[1]=0;
  permute_498.order[2]=2;
  res_498->setFirstTranspose(permute_498);
  assert(res_498 && "failed to build Node_858 (type:transpose)");
  res_498->getOutput(0)->setName("Node_858:0");
  auto res_499=network->addIdentity(*res_498->getOutput(0));
  assert(res_499 && "failed to build Node_859 (type:contiguous)");
  res_499->getOutput(0)->setName("Node_859:0");
  auto res_500=network->addShuffle(*res_499->getOutput(0));
  res_500->setReshapeDimensions(Dims{2,{256,512},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_500 && "failed to build Node_867 (type:reshape)");
  res_500->getOutput(0)->setName("Node_867:0");
  auto res_501=network->addMatrixMultiply(*res_500->getOutput(0),MatrixOperation::kNONE,*res_117->getOutput(0),MatrixOperation::kNONE);
  assert(res_501 && "failed to build Node_874 (type:matmul)");
  res_501->getOutput(0)->setName("Node_874:0");
  auto res_502=network->addElementWise(*res_501->getOutput(0),*res_118->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_502 && "failed to build Node_874_add (type:add)");
  res_502->getOutput(0)->setName("Node_874_add:0");
  auto res_503=network->addElementWise(*res_502->getOutput(0),*res_480->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_503 && "failed to build Node_878 (type:add)");
  res_503->getOutput(0)->setName("Node_878:0");
  auto res_504=network->addReduce(*res_503->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_504 && "failed to build Node_885_mean (type:mean)");
  res_504->getOutput(0)->setName("Node_885_mean:0");
  auto res_505=network->addElementWise(*res_503->getOutput(0),*res_504->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_505 && "failed to build Node_885_diff (type:sub)");
  res_505->getOutput(0)->setName("Node_885_diff:0");
  auto res_506=network->addElementWise(*res_505->getOutput(0),*res_177->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_506 && "failed to build Node_885_power (type:power)");
  res_506->getOutput(0)->setName("Node_885_power:0");
  auto res_507=network->addReduce(*res_506->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_507 && "failed to build Node_885_var (type:mean)");
  res_507->getOutput(0)->setName("Node_885_var:0");
  auto res_508=network->addElementWise(*res_507->getOutput(0),*res_160->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_508 && "failed to build Node_885_modify (type:add)");
  res_508->getOutput(0)->setName("Node_885_modify:0");
  auto res_509=network->addUnary(*res_508->getOutput(0),UnaryOperation::kSQRT);
  assert(res_509 && "failed to build Node_885_sqrt (type:power)");
  res_509->getOutput(0)->setName("Node_885_sqrt:0");
  auto res_510=network->addElementWise(*res_505->getOutput(0),*res_509->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_510 && "failed to build Node_885_rsqrt (type:divide)");
  res_510->getOutput(0)->setName("Node_885_rsqrt:0");
  auto res_511=network->addElementWise(*res_510->getOutput(0),*res_31->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_511 && "failed to build Node_885_mul (type:multiply)");
  res_511->getOutput(0)->setName("Node_885_mul:0");
  auto res_512=network->addElementWise(*res_511->getOutput(0),*res_32->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_512 && "failed to build Node_885 (type:add)");
  res_512->getOutput(0)->setName("Node_885:0");
  auto res_513=network->addMatrixMultiply(*res_512->getOutput(0),MatrixOperation::kNONE,*res_119->getOutput(0),MatrixOperation::kNONE);
  assert(res_513 && "failed to build Node_891 (type:matmul)");
  res_513->getOutput(0)->setName("Node_891:0");
  auto res_514=network->addElementWise(*res_513->getOutput(0),*res_120->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_514 && "failed to build Node_891_add (type:add)");
  res_514->getOutput(0)->setName("Node_891_add:0");
  ITensor* inputTensors_515[1] = {res_514->getOutput(0)};
  auto plugin_515=GELU_Plugin("gelu");
  auto res_515=network->addPluginV2(inputTensors_515,1,plugin_515);
  assert(res_515 && "failed to build Node_892 (type:gelu)");
  res_515->getOutput(0)->setName("Node_892:0");
  auto res_516=network->addMatrixMultiply(*res_515->getOutput(0),MatrixOperation::kNONE,*res_121->getOutput(0),MatrixOperation::kNONE);
  assert(res_516 && "failed to build Node_899 (type:matmul)");
  res_516->getOutput(0)->setName("Node_899:0");
  auto res_517=network->addElementWise(*res_516->getOutput(0),*res_122->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_517 && "failed to build Node_899_add (type:add)");
  res_517->getOutput(0)->setName("Node_899_add:0");
  auto res_518=network->addElementWise(*res_517->getOutput(0),*res_512->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_518 && "failed to build Node_903 (type:add)");
  res_518->getOutput(0)->setName("Node_903:0");
  auto res_519=network->addReduce(*res_518->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_519 && "failed to build Node_910_mean (type:mean)");
  res_519->getOutput(0)->setName("Node_910_mean:0");
  auto res_520=network->addElementWise(*res_518->getOutput(0),*res_519->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_520 && "failed to build Node_910_diff (type:sub)");
  res_520->getOutput(0)->setName("Node_910_diff:0");
  auto res_521=network->addElementWise(*res_520->getOutput(0),*res_178->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_521 && "failed to build Node_910_power (type:power)");
  res_521->getOutput(0)->setName("Node_910_power:0");
  auto res_522=network->addReduce(*res_521->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_522 && "failed to build Node_910_var (type:mean)");
  res_522->getOutput(0)->setName("Node_910_var:0");
  auto res_523=network->addElementWise(*res_522->getOutput(0),*res_161->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_523 && "failed to build Node_910_modify (type:add)");
  res_523->getOutput(0)->setName("Node_910_modify:0");
  auto res_524=network->addUnary(*res_523->getOutput(0),UnaryOperation::kSQRT);
  assert(res_524 && "failed to build Node_910_sqrt (type:power)");
  res_524->getOutput(0)->setName("Node_910_sqrt:0");
  auto res_525=network->addElementWise(*res_520->getOutput(0),*res_524->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_525 && "failed to build Node_910_rsqrt (type:divide)");
  res_525->getOutput(0)->setName("Node_910_rsqrt:0");
  auto res_526=network->addElementWise(*res_525->getOutput(0),*res_33->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_526 && "failed to build Node_910_mul (type:multiply)");
  res_526->getOutput(0)->setName("Node_910_mul:0");
  auto res_527=network->addElementWise(*res_526->getOutput(0),*res_34->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_527 && "failed to build Node_910 (type:add)");
  res_527->getOutput(0)->setName("Node_910:0");
  auto res_528=network->addMatrixMultiply(*res_527->getOutput(0),MatrixOperation::kNONE,*res_123->getOutput(0),MatrixOperation::kNONE);
  assert(res_528 && "failed to build Node_927 (type:matmul)");
  res_528->getOutput(0)->setName("Node_927:0");
  auto res_529=network->addElementWise(*res_528->getOutput(0),*res_124->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_529 && "failed to build Node_927_add (type:add)");
  res_529->getOutput(0)->setName("Node_927_add:0");
  auto res_530=network->addShuffle(*res_529->getOutput(0));
  res_530->setReshapeDimensions(Dims3{256,8,64});
  assert(res_530 && "failed to build Node_947 (type:reshape)");
  res_530->getOutput(0)->setName("Node_947:0");
  auto res_531=network->addShuffle(*res_530->getOutput(0));
  Permutation permute_531;
  permute_531.order[0]=1;
  permute_531.order[1]=0;
  permute_531.order[2]=2;
  res_531->setFirstTranspose(permute_531);
  assert(res_531 && "failed to build Node_949 (type:transpose)");
  res_531->getOutput(0)->setName("Node_949:0");
  auto res_532=network->addMatrixMultiply(*res_527->getOutput(0),MatrixOperation::kNONE,*res_125->getOutput(0),MatrixOperation::kNONE);
  assert(res_532 && "failed to build Node_933 (type:matmul)");
  res_532->getOutput(0)->setName("Node_933:0");
  auto res_533=network->addElementWise(*res_532->getOutput(0),*res_126->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_533 && "failed to build Node_933_add (type:add)");
  res_533->getOutput(0)->setName("Node_933_add:0");
  auto res_534=network->addShuffle(*res_533->getOutput(0));
  res_534->setReshapeDimensions(Dims3{256,8,64});
  assert(res_534 && "failed to build Node_957 (type:reshape)");
  res_534->getOutput(0)->setName("Node_957:0");
  auto res_535=network->addShuffle(*res_534->getOutput(0));
  Permutation permute_535;
  permute_535.order[0]=1;
  permute_535.order[1]=2;
  permute_535.order[2]=0;
  res_535->setFirstTranspose(permute_535);
  assert(res_535 && "failed to build Node_970 (type:transpose)");
  res_535->getOutput(0)->setName("Node_970:0");
  auto res_536=network->addMatrixMultiply(*res_531->getOutput(0),MatrixOperation::kNONE,*res_535->getOutput(0),MatrixOperation::kNONE);
  assert(res_536 && "failed to build Node_971 (type:matmul)");
  res_536->getOutput(0)->setName("Node_971:0");
  auto res_537=network->addElementWise(*res_536->getOutput(0),*res_146->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_537 && "failed to build Node_972 (type:divide)");
  res_537->getOutput(0)->setName("Node_972:0");
  auto res_538=network->addElementWise(*res_537->getOutput(0),*res_187->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_538 && "failed to build Node_973 (type:add)");
  res_538->getOutput(0)->setName("Node_973:0");
  auto res_539=network->addSoftMax(*res_538->getOutput(0));
  res_539->setAxes(4);
  assert(res_539 && "failed to build Node_974 (type:softmax)");
  res_539->getOutput(0)->setName("Node_974:0");
  auto res_540=network->addMatrixMultiply(*res_527->getOutput(0),MatrixOperation::kNONE,*res_127->getOutput(0),MatrixOperation::kNONE);
  assert(res_540 && "failed to build Node_939 (type:matmul)");
  res_540->getOutput(0)->setName("Node_939:0");
  auto res_541=network->addElementWise(*res_540->getOutput(0),*res_128->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_541 && "failed to build Node_939_add (type:add)");
  res_541->getOutput(0)->setName("Node_939_add:0");
  auto res_542=network->addShuffle(*res_541->getOutput(0));
  res_542->setReshapeDimensions(Dims3{256,8,64});
  assert(res_542 && "failed to build Node_967 (type:reshape)");
  res_542->getOutput(0)->setName("Node_967:0");
  auto res_543=network->addShuffle(*res_542->getOutput(0));
  Permutation permute_543;
  permute_543.order[0]=1;
  permute_543.order[1]=0;
  permute_543.order[2]=2;
  res_543->setFirstTranspose(permute_543);
  assert(res_543 && "failed to build Node_969 (type:transpose)");
  res_543->getOutput(0)->setName("Node_969:0");
  auto res_544=network->addMatrixMultiply(*res_539->getOutput(0),MatrixOperation::kNONE,*res_543->getOutput(0),MatrixOperation::kNONE);
  assert(res_544 && "failed to build Node_978 (type:matmul)");
  res_544->getOutput(0)->setName("Node_978:0");
  auto res_545=network->addShuffle(*res_544->getOutput(0));
  Permutation permute_545;
  permute_545.order[0]=1;
  permute_545.order[1]=0;
  permute_545.order[2]=2;
  res_545->setFirstTranspose(permute_545);
  assert(res_545 && "failed to build Node_980 (type:transpose)");
  res_545->getOutput(0)->setName("Node_980:0");
  auto res_546=network->addIdentity(*res_545->getOutput(0));
  assert(res_546 && "failed to build Node_981 (type:contiguous)");
  res_546->getOutput(0)->setName("Node_981:0");
  auto res_547=network->addShuffle(*res_546->getOutput(0));
  res_547->setReshapeDimensions(Dims{2,{256,512},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_547 && "failed to build Node_989 (type:reshape)");
  res_547->getOutput(0)->setName("Node_989:0");
  auto res_548=network->addMatrixMultiply(*res_547->getOutput(0),MatrixOperation::kNONE,*res_129->getOutput(0),MatrixOperation::kNONE);
  assert(res_548 && "failed to build Node_996 (type:matmul)");
  res_548->getOutput(0)->setName("Node_996:0");
  auto res_549=network->addElementWise(*res_548->getOutput(0),*res_130->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_549 && "failed to build Node_996_add (type:add)");
  res_549->getOutput(0)->setName("Node_996_add:0");
  auto res_550=network->addElementWise(*res_549->getOutput(0),*res_527->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_550 && "failed to build Node_1000 (type:add)");
  res_550->getOutput(0)->setName("Node_1000:0");
  auto res_551=network->addReduce(*res_550->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_551 && "failed to build Node_1007_mean (type:mean)");
  res_551->getOutput(0)->setName("Node_1007_mean:0");
  auto res_552=network->addElementWise(*res_550->getOutput(0),*res_551->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_552 && "failed to build Node_1007_diff (type:sub)");
  res_552->getOutput(0)->setName("Node_1007_diff:0");
  auto res_553=network->addElementWise(*res_552->getOutput(0),*res_179->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_553 && "failed to build Node_1007_power (type:power)");
  res_553->getOutput(0)->setName("Node_1007_power:0");
  auto res_554=network->addReduce(*res_553->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_554 && "failed to build Node_1007_var (type:mean)");
  res_554->getOutput(0)->setName("Node_1007_var:0");
  auto res_555=network->addElementWise(*res_554->getOutput(0),*res_162->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_555 && "failed to build Node_1007_modify (type:add)");
  res_555->getOutput(0)->setName("Node_1007_modify:0");
  auto res_556=network->addUnary(*res_555->getOutput(0),UnaryOperation::kSQRT);
  assert(res_556 && "failed to build Node_1007_sqrt (type:power)");
  res_556->getOutput(0)->setName("Node_1007_sqrt:0");
  auto res_557=network->addElementWise(*res_552->getOutput(0),*res_556->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_557 && "failed to build Node_1007_rsqrt (type:divide)");
  res_557->getOutput(0)->setName("Node_1007_rsqrt:0");
  auto res_558=network->addElementWise(*res_557->getOutput(0),*res_35->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_558 && "failed to build Node_1007_mul (type:multiply)");
  res_558->getOutput(0)->setName("Node_1007_mul:0");
  auto res_559=network->addElementWise(*res_558->getOutput(0),*res_36->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_559 && "failed to build Node_1007 (type:add)");
  res_559->getOutput(0)->setName("Node_1007:0");
  auto res_560=network->addMatrixMultiply(*res_559->getOutput(0),MatrixOperation::kNONE,*res_131->getOutput(0),MatrixOperation::kNONE);
  assert(res_560 && "failed to build Node_1013 (type:matmul)");
  res_560->getOutput(0)->setName("Node_1013:0");
  auto res_561=network->addElementWise(*res_560->getOutput(0),*res_132->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_561 && "failed to build Node_1013_add (type:add)");
  res_561->getOutput(0)->setName("Node_1013_add:0");
  ITensor* inputTensors_562[1] = {res_561->getOutput(0)};
  auto plugin_562=GELU_Plugin("gelu");
  auto res_562=network->addPluginV2(inputTensors_562,1,plugin_562);
  assert(res_562 && "failed to build Node_1014 (type:gelu)");
  res_562->getOutput(0)->setName("Node_1014:0");
  auto res_563=network->addMatrixMultiply(*res_562->getOutput(0),MatrixOperation::kNONE,*res_133->getOutput(0),MatrixOperation::kNONE);
  assert(res_563 && "failed to build Node_1021 (type:matmul)");
  res_563->getOutput(0)->setName("Node_1021:0");
  auto res_564=network->addElementWise(*res_563->getOutput(0),*res_134->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_564 && "failed to build Node_1021_add (type:add)");
  res_564->getOutput(0)->setName("Node_1021_add:0");
  auto res_565=network->addElementWise(*res_564->getOutput(0),*res_559->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_565 && "failed to build Node_1025 (type:add)");
  res_565->getOutput(0)->setName("Node_1025:0");
  auto res_566=network->addReduce(*res_565->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_566 && "failed to build Node_1032_mean (type:mean)");
  res_566->getOutput(0)->setName("Node_1032_mean:0");
  auto res_567=network->addElementWise(*res_565->getOutput(0),*res_566->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_567 && "failed to build Node_1032_diff (type:sub)");
  res_567->getOutput(0)->setName("Node_1032_diff:0");
  auto res_568=network->addElementWise(*res_567->getOutput(0),*res_180->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_568 && "failed to build Node_1032_power (type:power)");
  res_568->getOutput(0)->setName("Node_1032_power:0");
  auto res_569=network->addReduce(*res_568->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_569 && "failed to build Node_1032_var (type:mean)");
  res_569->getOutput(0)->setName("Node_1032_var:0");
  auto res_570=network->addElementWise(*res_569->getOutput(0),*res_163->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_570 && "failed to build Node_1032_modify (type:add)");
  res_570->getOutput(0)->setName("Node_1032_modify:0");
  auto res_571=network->addUnary(*res_570->getOutput(0),UnaryOperation::kSQRT);
  assert(res_571 && "failed to build Node_1032_sqrt (type:power)");
  res_571->getOutput(0)->setName("Node_1032_sqrt:0");
  auto res_572=network->addElementWise(*res_567->getOutput(0),*res_571->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_572 && "failed to build Node_1032_rsqrt (type:divide)");
  res_572->getOutput(0)->setName("Node_1032_rsqrt:0");
  auto res_573=network->addElementWise(*res_572->getOutput(0),*res_37->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_573 && "failed to build Node_1032_mul (type:multiply)");
  res_573->getOutput(0)->setName("Node_1032_mul:0");
  auto res_574=network->addElementWise(*res_573->getOutput(0),*res_38->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_574 && "failed to build Node_1032 (type:add)");
  res_574->getOutput(0)->setName("Node_1032:0");
  auto res_575=network->addSlice(*res_574->getOutput(0),Dims2{0,0},Dims2{1,512},Dims2{1,1});
  assert(res_575 && "failed to build Node_1046 (type:dlr_slice)");
  res_575->getOutput(0)->setName("Node_1046:0");
  auto res_576=network->addShuffle(*res_575->getOutput(0));
  res_576->setReshapeDimensions(Dims3{512,1,1});
  assert(res_576 && "failed to build Node_1048_reshape (type:reshape)");
  res_576->getOutput(0)->setName("Node_1048_reshape:0");
  auto res_577=network->addFullyConnected(*res_576->getOutput(0),512,mWeightsMap["weight_577"],mWeightsMap["bias_577"]);
  assert(res_577 && "failed to build Node_2234 (type:dense)");
  res_577->getOutput(0)->setName("Node_2234:0");
  auto res_578=network->addShuffle(*res_577->getOutput(0));
  res_578->setReshapeDimensions(Dims{1,{512},{DimensionType::kCHANNEL}});
  assert(res_578 && "failed to build Node_2234_reshape (type:reshape)");
  res_578->getOutput(0)->setName("Node_2234_reshape:0");
  auto res_579=network->addConvolution(*inputs[3],64,DimsHW{7,7},mWeightsMap["weight_579"],mWeightsMap["bias_579"]);
  res_579->setStride(DimsHW{2,2});
  res_579->setPadding(DimsHW{3,3});
  assert(res_579 && "failed to build Node_1063 (type:conv2d)");
  res_579->getOutput(0)->setName("Node_1063:0");
  auto res_580=network->addActivation(*res_579->getOutput(0),ActivationType::kRELU);
  assert(res_580 && "failed to build Node_1073 (type:relu)");
  res_580->getOutput(0)->setName("Node_1073:0");
  auto res_581=network->addPooling(*res_580->getOutput(0),PoolingType::kMAX,DimsHW{3,3});
  res_581->setStride(DimsHW{2,2});
  res_581->setPadding(DimsHW{1,1});
  assert(res_581 && "failed to build Node_1082 (type:maxpool2d)");
  res_581->getOutput(0)->setName("Node_1082:0");
  auto res_582=network->addConvolution(*res_581->getOutput(0),64,DimsHW{1,1},mWeightsMap["weight_582"],mWeightsMap["bias_582"]);
  assert(res_582 && "failed to build Node_1094 (type:conv2d)");
  res_582->getOutput(0)->setName("Node_1094:0");
  auto res_583=network->addActivation(*res_582->getOutput(0),ActivationType::kRELU);
  assert(res_583 && "failed to build Node_1104 (type:relu)");
  res_583->getOutput(0)->setName("Node_1104:0");
  auto res_584=network->addConvolution(*res_583->getOutput(0),64,DimsHW{3,3},mWeightsMap["weight_584"],mWeightsMap["bias_584"]);
  res_584->setPadding(DimsHW{1,1});
  assert(res_584 && "failed to build Node_1115 (type:conv2d)");
  res_584->getOutput(0)->setName("Node_1115:0");
  auto res_585=network->addActivation(*res_584->getOutput(0),ActivationType::kRELU);
  assert(res_585 && "failed to build Node_1125 (type:relu)");
  res_585->getOutput(0)->setName("Node_1125:0");
  auto res_586=network->addConvolution(*res_585->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_586"],mWeightsMap["bias_586"]);
  assert(res_586 && "failed to build Node_1136 (type:conv2d)");
  res_586->getOutput(0)->setName("Node_1136:0");
  auto res_587=network->addConvolution(*res_581->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_587"],mWeightsMap["bias_587"]);
  assert(res_587 && "failed to build Node_1156 (type:conv2d)");
  res_587->getOutput(0)->setName("Node_1156:0");
  auto res_588=network->addElementWise(*res_586->getOutput(0),*res_587->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_588 && "failed to build Node_1166 (type:add)");
  res_588->getOutput(0)->setName("Node_1166:0");
  auto res_589=network->addActivation(*res_588->getOutput(0),ActivationType::kRELU);
  assert(res_589 && "failed to build Node_1167 (type:relu)");
  res_589->getOutput(0)->setName("Node_1167:0");
  auto res_590=network->addConvolution(*res_589->getOutput(0),64,DimsHW{1,1},mWeightsMap["weight_590"],mWeightsMap["bias_590"]);
  assert(res_590 && "failed to build Node_1179 (type:conv2d)");
  res_590->getOutput(0)->setName("Node_1179:0");
  auto res_591=network->addActivation(*res_590->getOutput(0),ActivationType::kRELU);
  assert(res_591 && "failed to build Node_1189 (type:relu)");
  res_591->getOutput(0)->setName("Node_1189:0");
  auto res_592=network->addConvolution(*res_591->getOutput(0),64,DimsHW{3,3},mWeightsMap["weight_592"],mWeightsMap["bias_592"]);
  res_592->setPadding(DimsHW{1,1});
  assert(res_592 && "failed to build Node_1200 (type:conv2d)");
  res_592->getOutput(0)->setName("Node_1200:0");
  auto res_593=network->addActivation(*res_592->getOutput(0),ActivationType::kRELU);
  assert(res_593 && "failed to build Node_1210 (type:relu)");
  res_593->getOutput(0)->setName("Node_1210:0");
  auto res_594=network->addConvolution(*res_593->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_594"],mWeightsMap["bias_594"]);
  assert(res_594 && "failed to build Node_1221 (type:conv2d)");
  res_594->getOutput(0)->setName("Node_1221:0");
  auto res_595=network->addElementWise(*res_594->getOutput(0),*res_589->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_595 && "failed to build Node_1231 (type:add)");
  res_595->getOutput(0)->setName("Node_1231:0");
  auto res_596=network->addActivation(*res_595->getOutput(0),ActivationType::kRELU);
  assert(res_596 && "failed to build Node_1232 (type:relu)");
  res_596->getOutput(0)->setName("Node_1232:0");
  auto res_597=network->addConvolution(*res_596->getOutput(0),64,DimsHW{1,1},mWeightsMap["weight_597"],mWeightsMap["bias_597"]);
  assert(res_597 && "failed to build Node_1244 (type:conv2d)");
  res_597->getOutput(0)->setName("Node_1244:0");
  auto res_598=network->addActivation(*res_597->getOutput(0),ActivationType::kRELU);
  assert(res_598 && "failed to build Node_1254 (type:relu)");
  res_598->getOutput(0)->setName("Node_1254:0");
  auto res_599=network->addConvolution(*res_598->getOutput(0),64,DimsHW{3,3},mWeightsMap["weight_599"],mWeightsMap["bias_599"]);
  res_599->setPadding(DimsHW{1,1});
  assert(res_599 && "failed to build Node_1265 (type:conv2d)");
  res_599->getOutput(0)->setName("Node_1265:0");
  auto res_600=network->addActivation(*res_599->getOutput(0),ActivationType::kRELU);
  assert(res_600 && "failed to build Node_1275 (type:relu)");
  res_600->getOutput(0)->setName("Node_1275:0");
  auto res_601=network->addConvolution(*res_600->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_601"],mWeightsMap["bias_601"]);
  assert(res_601 && "failed to build Node_1286 (type:conv2d)");
  res_601->getOutput(0)->setName("Node_1286:0");
  auto res_602=network->addElementWise(*res_601->getOutput(0),*res_596->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_602 && "failed to build Node_1296 (type:add)");
  res_602->getOutput(0)->setName("Node_1296:0");
  auto res_603=network->addActivation(*res_602->getOutput(0),ActivationType::kRELU);
  assert(res_603 && "failed to build Node_1297 (type:relu)");
  res_603->getOutput(0)->setName("Node_1297:0");
  auto res_604=network->addConvolution(*res_603->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_604"],mWeightsMap["bias_604"]);
  assert(res_604 && "failed to build Node_1309 (type:conv2d)");
  res_604->getOutput(0)->setName("Node_1309:0");
  auto res_605=network->addActivation(*res_604->getOutput(0),ActivationType::kRELU);
  assert(res_605 && "failed to build Node_1319 (type:relu)");
  res_605->getOutput(0)->setName("Node_1319:0");
  auto res_606=network->addConvolution(*res_605->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_606"],mWeightsMap["bias_606"]);
  res_606->setStride(DimsHW{2,2});
  res_606->setPadding(DimsHW{1,1});
  assert(res_606 && "failed to build Node_1331 (type:conv2d)");
  res_606->getOutput(0)->setName("Node_1331:0");
  auto res_607=network->addActivation(*res_606->getOutput(0),ActivationType::kRELU);
  assert(res_607 && "failed to build Node_1341 (type:relu)");
  res_607->getOutput(0)->setName("Node_1341:0");
  auto res_608=network->addConvolution(*res_607->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_608"],mWeightsMap["bias_608"]);
  assert(res_608 && "failed to build Node_1352 (type:conv2d)");
  res_608->getOutput(0)->setName("Node_1352:0");
  auto res_609=network->addConvolution(*res_603->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_609"],mWeightsMap["bias_609"]);
  res_609->setStride(DimsHW{2,2});
  assert(res_609 && "failed to build Node_1373 (type:conv2d)");
  res_609->getOutput(0)->setName("Node_1373:0");
  auto res_610=network->addElementWise(*res_608->getOutput(0),*res_609->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_610 && "failed to build Node_1383 (type:add)");
  res_610->getOutput(0)->setName("Node_1383:0");
  auto res_611=network->addActivation(*res_610->getOutput(0),ActivationType::kRELU);
  assert(res_611 && "failed to build Node_1384 (type:relu)");
  res_611->getOutput(0)->setName("Node_1384:0");
  auto res_612=network->addConvolution(*res_611->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_612"],mWeightsMap["bias_612"]);
  assert(res_612 && "failed to build Node_1396 (type:conv2d)");
  res_612->getOutput(0)->setName("Node_1396:0");
  auto res_613=network->addActivation(*res_612->getOutput(0),ActivationType::kRELU);
  assert(res_613 && "failed to build Node_1406 (type:relu)");
  res_613->getOutput(0)->setName("Node_1406:0");
  auto res_614=network->addConvolution(*res_613->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_614"],mWeightsMap["bias_614"]);
  res_614->setPadding(DimsHW{1,1});
  assert(res_614 && "failed to build Node_1417 (type:conv2d)");
  res_614->getOutput(0)->setName("Node_1417:0");
  auto res_615=network->addActivation(*res_614->getOutput(0),ActivationType::kRELU);
  assert(res_615 && "failed to build Node_1427 (type:relu)");
  res_615->getOutput(0)->setName("Node_1427:0");
  auto res_616=network->addConvolution(*res_615->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_616"],mWeightsMap["bias_616"]);
  assert(res_616 && "failed to build Node_1438 (type:conv2d)");
  res_616->getOutput(0)->setName("Node_1438:0");
  auto res_617=network->addElementWise(*res_616->getOutput(0),*res_611->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_617 && "failed to build Node_1448 (type:add)");
  res_617->getOutput(0)->setName("Node_1448:0");
  auto res_618=network->addActivation(*res_617->getOutput(0),ActivationType::kRELU);
  assert(res_618 && "failed to build Node_1449 (type:relu)");
  res_618->getOutput(0)->setName("Node_1449:0");
  auto res_619=network->addConvolution(*res_618->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_619"],mWeightsMap["bias_619"]);
  assert(res_619 && "failed to build Node_1461 (type:conv2d)");
  res_619->getOutput(0)->setName("Node_1461:0");
  auto res_620=network->addActivation(*res_619->getOutput(0),ActivationType::kRELU);
  assert(res_620 && "failed to build Node_1471 (type:relu)");
  res_620->getOutput(0)->setName("Node_1471:0");
  auto res_621=network->addConvolution(*res_620->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_621"],mWeightsMap["bias_621"]);
  res_621->setPadding(DimsHW{1,1});
  assert(res_621 && "failed to build Node_1482 (type:conv2d)");
  res_621->getOutput(0)->setName("Node_1482:0");
  auto res_622=network->addActivation(*res_621->getOutput(0),ActivationType::kRELU);
  assert(res_622 && "failed to build Node_1492 (type:relu)");
  res_622->getOutput(0)->setName("Node_1492:0");
  auto res_623=network->addConvolution(*res_622->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_623"],mWeightsMap["bias_623"]);
  assert(res_623 && "failed to build Node_1503 (type:conv2d)");
  res_623->getOutput(0)->setName("Node_1503:0");
  auto res_624=network->addElementWise(*res_623->getOutput(0),*res_618->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_624 && "failed to build Node_1513 (type:add)");
  res_624->getOutput(0)->setName("Node_1513:0");
  auto res_625=network->addActivation(*res_624->getOutput(0),ActivationType::kRELU);
  assert(res_625 && "failed to build Node_1514 (type:relu)");
  res_625->getOutput(0)->setName("Node_1514:0");
  auto res_626=network->addConvolution(*res_625->getOutput(0),128,DimsHW{1,1},mWeightsMap["weight_626"],mWeightsMap["bias_626"]);
  assert(res_626 && "failed to build Node_1526 (type:conv2d)");
  res_626->getOutput(0)->setName("Node_1526:0");
  auto res_627=network->addActivation(*res_626->getOutput(0),ActivationType::kRELU);
  assert(res_627 && "failed to build Node_1536 (type:relu)");
  res_627->getOutput(0)->setName("Node_1536:0");
  auto res_628=network->addConvolution(*res_627->getOutput(0),128,DimsHW{3,3},mWeightsMap["weight_628"],mWeightsMap["bias_628"]);
  res_628->setPadding(DimsHW{1,1});
  assert(res_628 && "failed to build Node_1547 (type:conv2d)");
  res_628->getOutput(0)->setName("Node_1547:0");
  auto res_629=network->addActivation(*res_628->getOutput(0),ActivationType::kRELU);
  assert(res_629 && "failed to build Node_1557 (type:relu)");
  res_629->getOutput(0)->setName("Node_1557:0");
  auto res_630=network->addConvolution(*res_629->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_630"],mWeightsMap["bias_630"]);
  assert(res_630 && "failed to build Node_1568 (type:conv2d)");
  res_630->getOutput(0)->setName("Node_1568:0");
  auto res_631=network->addElementWise(*res_630->getOutput(0),*res_625->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_631 && "failed to build Node_1578 (type:add)");
  res_631->getOutput(0)->setName("Node_1578:0");
  auto res_632=network->addActivation(*res_631->getOutput(0),ActivationType::kRELU);
  assert(res_632 && "failed to build Node_1579 (type:relu)");
  res_632->getOutput(0)->setName("Node_1579:0");
  auto res_633=network->addConvolution(*res_632->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_633"],mWeightsMap["bias_633"]);
  assert(res_633 && "failed to build Node_1591 (type:conv2d)");
  res_633->getOutput(0)->setName("Node_1591:0");
  auto res_634=network->addActivation(*res_633->getOutput(0),ActivationType::kRELU);
  assert(res_634 && "failed to build Node_1601 (type:relu)");
  res_634->getOutput(0)->setName("Node_1601:0");
  auto res_635=network->addConvolution(*res_634->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_635"],mWeightsMap["bias_635"]);
  res_635->setStride(DimsHW{2,2});
  res_635->setPadding(DimsHW{1,1});
  assert(res_635 && "failed to build Node_1613 (type:conv2d)");
  res_635->getOutput(0)->setName("Node_1613:0");
  auto res_636=network->addActivation(*res_635->getOutput(0),ActivationType::kRELU);
  assert(res_636 && "failed to build Node_1623 (type:relu)");
  res_636->getOutput(0)->setName("Node_1623:0");
  auto res_637=network->addConvolution(*res_636->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_637"],mWeightsMap["bias_637"]);
  assert(res_637 && "failed to build Node_1634 (type:conv2d)");
  res_637->getOutput(0)->setName("Node_1634:0");
  auto res_638=network->addConvolution(*res_632->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_638"],mWeightsMap["bias_638"]);
  res_638->setStride(DimsHW{2,2});
  assert(res_638 && "failed to build Node_1655 (type:conv2d)");
  res_638->getOutput(0)->setName("Node_1655:0");
  auto res_639=network->addElementWise(*res_637->getOutput(0),*res_638->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_639 && "failed to build Node_1665 (type:add)");
  res_639->getOutput(0)->setName("Node_1665:0");
  auto res_640=network->addActivation(*res_639->getOutput(0),ActivationType::kRELU);
  assert(res_640 && "failed to build Node_1666 (type:relu)");
  res_640->getOutput(0)->setName("Node_1666:0");
  auto res_641=network->addConvolution(*res_640->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_641"],mWeightsMap["bias_641"]);
  assert(res_641 && "failed to build Node_1678 (type:conv2d)");
  res_641->getOutput(0)->setName("Node_1678:0");
  auto res_642=network->addActivation(*res_641->getOutput(0),ActivationType::kRELU);
  assert(res_642 && "failed to build Node_1688 (type:relu)");
  res_642->getOutput(0)->setName("Node_1688:0");
  auto res_643=network->addConvolution(*res_642->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_643"],mWeightsMap["bias_643"]);
  res_643->setPadding(DimsHW{1,1});
  assert(res_643 && "failed to build Node_1699 (type:conv2d)");
  res_643->getOutput(0)->setName("Node_1699:0");
  auto res_644=network->addActivation(*res_643->getOutput(0),ActivationType::kRELU);
  assert(res_644 && "failed to build Node_1709 (type:relu)");
  res_644->getOutput(0)->setName("Node_1709:0");
  auto res_645=network->addConvolution(*res_644->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_645"],mWeightsMap["bias_645"]);
  assert(res_645 && "failed to build Node_1720 (type:conv2d)");
  res_645->getOutput(0)->setName("Node_1720:0");
  auto res_646=network->addElementWise(*res_645->getOutput(0),*res_640->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_646 && "failed to build Node_1730 (type:add)");
  res_646->getOutput(0)->setName("Node_1730:0");
  auto res_647=network->addActivation(*res_646->getOutput(0),ActivationType::kRELU);
  assert(res_647 && "failed to build Node_1731 (type:relu)");
  res_647->getOutput(0)->setName("Node_1731:0");
  auto res_648=network->addConvolution(*res_647->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_648"],mWeightsMap["bias_648"]);
  assert(res_648 && "failed to build Node_1743 (type:conv2d)");
  res_648->getOutput(0)->setName("Node_1743:0");
  auto res_649=network->addActivation(*res_648->getOutput(0),ActivationType::kRELU);
  assert(res_649 && "failed to build Node_1753 (type:relu)");
  res_649->getOutput(0)->setName("Node_1753:0");
  auto res_650=network->addConvolution(*res_649->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_650"],mWeightsMap["bias_650"]);
  res_650->setPadding(DimsHW{1,1});
  assert(res_650 && "failed to build Node_1764 (type:conv2d)");
  res_650->getOutput(0)->setName("Node_1764:0");
  auto res_651=network->addActivation(*res_650->getOutput(0),ActivationType::kRELU);
  assert(res_651 && "failed to build Node_1774 (type:relu)");
  res_651->getOutput(0)->setName("Node_1774:0");
  auto res_652=network->addConvolution(*res_651->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_652"],mWeightsMap["bias_652"]);
  assert(res_652 && "failed to build Node_1785 (type:conv2d)");
  res_652->getOutput(0)->setName("Node_1785:0");
  auto res_653=network->addElementWise(*res_652->getOutput(0),*res_647->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_653 && "failed to build Node_1795 (type:add)");
  res_653->getOutput(0)->setName("Node_1795:0");
  auto res_654=network->addActivation(*res_653->getOutput(0),ActivationType::kRELU);
  assert(res_654 && "failed to build Node_1796 (type:relu)");
  res_654->getOutput(0)->setName("Node_1796:0");
  auto res_655=network->addConvolution(*res_654->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_655"],mWeightsMap["bias_655"]);
  assert(res_655 && "failed to build Node_1808 (type:conv2d)");
  res_655->getOutput(0)->setName("Node_1808:0");
  auto res_656=network->addActivation(*res_655->getOutput(0),ActivationType::kRELU);
  assert(res_656 && "failed to build Node_1818 (type:relu)");
  res_656->getOutput(0)->setName("Node_1818:0");
  auto res_657=network->addConvolution(*res_656->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_657"],mWeightsMap["bias_657"]);
  res_657->setPadding(DimsHW{1,1});
  assert(res_657 && "failed to build Node_1829 (type:conv2d)");
  res_657->getOutput(0)->setName("Node_1829:0");
  auto res_658=network->addActivation(*res_657->getOutput(0),ActivationType::kRELU);
  assert(res_658 && "failed to build Node_1839 (type:relu)");
  res_658->getOutput(0)->setName("Node_1839:0");
  auto res_659=network->addConvolution(*res_658->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_659"],mWeightsMap["bias_659"]);
  assert(res_659 && "failed to build Node_1850 (type:conv2d)");
  res_659->getOutput(0)->setName("Node_1850:0");
  auto res_660=network->addElementWise(*res_659->getOutput(0),*res_654->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_660 && "failed to build Node_1860 (type:add)");
  res_660->getOutput(0)->setName("Node_1860:0");
  auto res_661=network->addActivation(*res_660->getOutput(0),ActivationType::kRELU);
  assert(res_661 && "failed to build Node_1861 (type:relu)");
  res_661->getOutput(0)->setName("Node_1861:0");
  auto res_662=network->addConvolution(*res_661->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_662"],mWeightsMap["bias_662"]);
  assert(res_662 && "failed to build Node_1873 (type:conv2d)");
  res_662->getOutput(0)->setName("Node_1873:0");
  auto res_663=network->addActivation(*res_662->getOutput(0),ActivationType::kRELU);
  assert(res_663 && "failed to build Node_1883 (type:relu)");
  res_663->getOutput(0)->setName("Node_1883:0");
  auto res_664=network->addConvolution(*res_663->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_664"],mWeightsMap["bias_664"]);
  res_664->setPadding(DimsHW{1,1});
  assert(res_664 && "failed to build Node_1894 (type:conv2d)");
  res_664->getOutput(0)->setName("Node_1894:0");
  auto res_665=network->addActivation(*res_664->getOutput(0),ActivationType::kRELU);
  assert(res_665 && "failed to build Node_1904 (type:relu)");
  res_665->getOutput(0)->setName("Node_1904:0");
  auto res_666=network->addConvolution(*res_665->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_666"],mWeightsMap["bias_666"]);
  assert(res_666 && "failed to build Node_1915 (type:conv2d)");
  res_666->getOutput(0)->setName("Node_1915:0");
  auto res_667=network->addElementWise(*res_666->getOutput(0),*res_661->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_667 && "failed to build Node_1925 (type:add)");
  res_667->getOutput(0)->setName("Node_1925:0");
  auto res_668=network->addActivation(*res_667->getOutput(0),ActivationType::kRELU);
  assert(res_668 && "failed to build Node_1926 (type:relu)");
  res_668->getOutput(0)->setName("Node_1926:0");
  auto res_669=network->addConvolution(*res_668->getOutput(0),256,DimsHW{1,1},mWeightsMap["weight_669"],mWeightsMap["bias_669"]);
  assert(res_669 && "failed to build Node_1938 (type:conv2d)");
  res_669->getOutput(0)->setName("Node_1938:0");
  auto res_670=network->addActivation(*res_669->getOutput(0),ActivationType::kRELU);
  assert(res_670 && "failed to build Node_1948 (type:relu)");
  res_670->getOutput(0)->setName("Node_1948:0");
  auto res_671=network->addConvolution(*res_670->getOutput(0),256,DimsHW{3,3},mWeightsMap["weight_671"],mWeightsMap["bias_671"]);
  res_671->setPadding(DimsHW{1,1});
  assert(res_671 && "failed to build Node_1959 (type:conv2d)");
  res_671->getOutput(0)->setName("Node_1959:0");
  auto res_672=network->addActivation(*res_671->getOutput(0),ActivationType::kRELU);
  assert(res_672 && "failed to build Node_1969 (type:relu)");
  res_672->getOutput(0)->setName("Node_1969:0");
  auto res_673=network->addConvolution(*res_672->getOutput(0),1024,DimsHW{1,1},mWeightsMap["weight_673"],mWeightsMap["bias_673"]);
  assert(res_673 && "failed to build Node_1980 (type:conv2d)");
  res_673->getOutput(0)->setName("Node_1980:0");
  auto res_674=network->addElementWise(*res_673->getOutput(0),*res_668->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_674 && "failed to build Node_1990 (type:add)");
  res_674->getOutput(0)->setName("Node_1990:0");
  auto res_675=network->addActivation(*res_674->getOutput(0),ActivationType::kRELU);
  assert(res_675 && "failed to build Node_1991 (type:relu)");
  res_675->getOutput(0)->setName("Node_1991:0");
  auto res_676=network->addConvolution(*res_675->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_676"],mWeightsMap["bias_676"]);
  assert(res_676 && "failed to build Node_2003 (type:conv2d)");
  res_676->getOutput(0)->setName("Node_2003:0");
  auto res_677=network->addActivation(*res_676->getOutput(0),ActivationType::kRELU);
  assert(res_677 && "failed to build Node_2013 (type:relu)");
  res_677->getOutput(0)->setName("Node_2013:0");
  auto res_678=network->addConvolution(*res_677->getOutput(0),512,DimsHW{3,3},mWeightsMap["weight_678"],mWeightsMap["bias_678"]);
  res_678->setStride(DimsHW{2,2});
  res_678->setPadding(DimsHW{1,1});
  assert(res_678 && "failed to build Node_2025 (type:conv2d)");
  res_678->getOutput(0)->setName("Node_2025:0");
  auto res_679=network->addActivation(*res_678->getOutput(0),ActivationType::kRELU);
  assert(res_679 && "failed to build Node_2035 (type:relu)");
  res_679->getOutput(0)->setName("Node_2035:0");
  auto res_680=network->addConvolution(*res_679->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_680"],mWeightsMap["bias_680"]);
  assert(res_680 && "failed to build Node_2046 (type:conv2d)");
  res_680->getOutput(0)->setName("Node_2046:0");
  auto res_681=network->addConvolution(*res_675->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_681"],mWeightsMap["bias_681"]);
  res_681->setStride(DimsHW{2,2});
  assert(res_681 && "failed to build Node_2067 (type:conv2d)");
  res_681->getOutput(0)->setName("Node_2067:0");
  auto res_682=network->addElementWise(*res_680->getOutput(0),*res_681->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_682 && "failed to build Node_2077 (type:add)");
  res_682->getOutput(0)->setName("Node_2077:0");
  auto res_683=network->addActivation(*res_682->getOutput(0),ActivationType::kRELU);
  assert(res_683 && "failed to build Node_2078 (type:relu)");
  res_683->getOutput(0)->setName("Node_2078:0");
  auto res_684=network->addConvolution(*res_683->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_684"],mWeightsMap["bias_684"]);
  assert(res_684 && "failed to build Node_2090 (type:conv2d)");
  res_684->getOutput(0)->setName("Node_2090:0");
  auto res_685=network->addActivation(*res_684->getOutput(0),ActivationType::kRELU);
  assert(res_685 && "failed to build Node_2100 (type:relu)");
  res_685->getOutput(0)->setName("Node_2100:0");
  auto res_686=network->addConvolution(*res_685->getOutput(0),512,DimsHW{3,3},mWeightsMap["weight_686"],mWeightsMap["bias_686"]);
  res_686->setPadding(DimsHW{1,1});
  assert(res_686 && "failed to build Node_2111 (type:conv2d)");
  res_686->getOutput(0)->setName("Node_2111:0");
  auto res_687=network->addActivation(*res_686->getOutput(0),ActivationType::kRELU);
  assert(res_687 && "failed to build Node_2121 (type:relu)");
  res_687->getOutput(0)->setName("Node_2121:0");
  auto res_688=network->addConvolution(*res_687->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_688"],mWeightsMap["bias_688"]);
  assert(res_688 && "failed to build Node_2132 (type:conv2d)");
  res_688->getOutput(0)->setName("Node_2132:0");
  auto res_689=network->addElementWise(*res_688->getOutput(0),*res_683->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_689 && "failed to build Node_2142 (type:add)");
  res_689->getOutput(0)->setName("Node_2142:0");
  auto res_690=network->addActivation(*res_689->getOutput(0),ActivationType::kRELU);
  assert(res_690 && "failed to build Node_2143 (type:relu)");
  res_690->getOutput(0)->setName("Node_2143:0");
  auto res_691=network->addConvolution(*res_690->getOutput(0),512,DimsHW{1,1},mWeightsMap["weight_691"],mWeightsMap["bias_691"]);
  assert(res_691 && "failed to build Node_2155 (type:conv2d)");
  res_691->getOutput(0)->setName("Node_2155:0");
  auto res_692=network->addActivation(*res_691->getOutput(0),ActivationType::kRELU);
  assert(res_692 && "failed to build Node_2165 (type:relu)");
  res_692->getOutput(0)->setName("Node_2165:0");
  auto res_693=network->addConvolution(*res_692->getOutput(0),512,DimsHW{3,3},mWeightsMap["weight_693"],mWeightsMap["bias_693"]);
  res_693->setPadding(DimsHW{1,1});
  assert(res_693 && "failed to build Node_2176 (type:conv2d)");
  res_693->getOutput(0)->setName("Node_2176:0");
  auto res_694=network->addActivation(*res_693->getOutput(0),ActivationType::kRELU);
  assert(res_694 && "failed to build Node_2186 (type:relu)");
  res_694->getOutput(0)->setName("Node_2186:0");
  auto res_695=network->addConvolution(*res_694->getOutput(0),2048,DimsHW{1,1},mWeightsMap["weight_695"],mWeightsMap["bias_695"]);
  assert(res_695 && "failed to build Node_2197 (type:conv2d)");
  res_695->getOutput(0)->setName("Node_2197:0");
  auto res_696=network->addElementWise(*res_695->getOutput(0),*res_690->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_696 && "failed to build Node_2207 (type:add)");
  res_696->getOutput(0)->setName("Node_2207:0");
  auto res_697=network->addActivation(*res_696->getOutput(0),ActivationType::kRELU);
  assert(res_697 && "failed to build Node_2208 (type:relu)");
  res_697->getOutput(0)->setName("Node_2208:0");
  auto res_698=network->addPooling(*res_697->getOutput(0),PoolingType::kAVERAGE,DimsHW{7,7});
  res_698->setStride(DimsHW{7,7});
  assert(res_698 && "failed to build Node_2211 (type:avgpool2d)");
  res_698->getOutput(0)->setName("Node_2211:0");
  auto res_699=network->addShuffle(*res_698->getOutput(0));
  res_699->setReshapeDimensions(Dims{1,{2048},{DimensionType::kCHANNEL}});
  assert(res_699 && "failed to build Node_2212 (type:reshape)");
  res_699->getOutput(0)->setName("Node_2212:0");
  ITensor* inputTensors_700[1] = {res_699->getOutput(0)};
  auto res_700=network->addConcatenation(inputTensors_700,1);
  res_700->setAxis(0);
  assert(res_700 && "failed to build Node_2214 (type:concat)");
  res_700->getOutput(0)->setName("Node_2214:0");
  auto res_701=network->addElementWise(*res_700->getOutput(0),*res_182->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_701 && "failed to build Node_2220 (type:power)");
  res_701->getOutput(0)->setName("Node_2220:0");
  auto res_702=network->addReduce(*res_701->getOutput(0),ReduceOperation::kSUM,1,true);
  assert(res_702 && "failed to build Node_2222 (type:dlr_sum)");
  res_702->getOutput(0)->setName("Node_2222:0");
  auto res_703=network->addUnary(*res_702->getOutput(0),UnaryOperation::kSQRT);
  assert(res_703 && "failed to build Node_2223 (type:power)");
  res_703->getOutput(0)->setName("Node_2223:0");
  auto res_704=network->addElementWise(*res_700->getOutput(0),*res_703->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_704 && "failed to build Node_2224 (type:divide)");
  res_704->getOutput(0)->setName("Node_2224:0");
  auto res_705=network->addShuffle(*res_704->getOutput(0));
  res_705->setReshapeDimensions(Dims3{2048,1,1});
  assert(res_705 && "failed to build Node_2224_reshape (type:reshape)");
  res_705->getOutput(0)->setName("Node_2224_reshape:0");
  auto res_706=network->addFullyConnected(*res_705->getOutput(0),512,mWeightsMap["weight_706"],mWeightsMap["bias_706"]);
  assert(res_706 && "failed to build Node_2229 (type:dense)");
  res_706->getOutput(0)->setName("Node_2229:0");
  auto res_707=network->addShuffle(*res_706->getOutput(0));
  res_707->setReshapeDimensions(Dims{1,{512},{DimensionType::kCHANNEL}});
  assert(res_707 && "failed to build Node_2229_reshape (type:reshape)");
  res_707->getOutput(0)->setName("Node_2229_reshape:0");
  ITensor* inputTensors_708[2] = {res_578->getOutput(0),res_707->getOutput(0)};
  auto res_708=network->addConcatenation(inputTensors_708,2);
  res_708->setAxis(0);
  assert(res_708 && "failed to build Node_2236 (type:concat)");
  res_708->getOutput(0)->setName("Node_2236:0");
  auto res_709=network->addShuffle(*res_708->getOutput(0));
  res_709->setReshapeDimensions(Dims3{1024,1,1});
  assert(res_709 && "failed to build Node_2236_reshape (type:reshape)");
  res_709->getOutput(0)->setName("Node_2236_reshape:0");
  auto res_710=network->addFullyConnected(*res_709->getOutput(0),2,mWeightsMap["weight_710"],mWeightsMap["bias_710"]);
  assert(res_710 && "failed to build Node_2241 (type:dense)");
  res_710->getOutput(0)->setName("Node_2241:0");
  auto res_711=network->addShuffle(*res_710->getOutput(0));
  res_711->setReshapeDimensions(Dims{1,{2},{DimensionType::kCHANNEL}});
  assert(res_711 && "failed to build Node_2241_reshape (type:reshape)");
  res_711->getOutput(0)->setName("Node_2241_reshape:0");
  auto res_712=network->addSoftMax(*res_711->getOutput(0));
  res_712->setAxes(1);
  assert(res_712 && "failed to build Node_2242 (type:softmax)");
  res_712->getOutput(0)->setName("predscore");
  outputs[0]=res_712->getOutput(0);
  // Set configs
  builder->setMaxBatchSize(batch_size);
  config->setMaxWorkspaceSize(199 << 20);
  return true;
}

bool test_1::clean_up(){
  return clean_weights(mWeightsMap);
}

