#include "ssl_login_get_emb_1.h"
#include "tensorrt/gelu.h"
#include "tensorrt/mask.h"
using namespace nvinfer1;
using namespace std;

bool ssl_login_get_emb_1::build(TRTUniquePtr<IBuilder>& builder,TRTUniquePtr<INetworkDefinition>& network,TRTUniquePtr<IBuilderConfig>& config,
  ITensor** inputs,ITensor** outputs,int batch_size,DLRLogger& dlr_logger)
{
  // Add Layers
  mWeightsMap = load_weigths("/usr/local/quake/datas/weights/ssl_login_get_emb_1.wts");
  // passby useragent_origintoken.input_id_int32(dlr_input), defined by useragent_origintoken.input_id_int32;
  // passby useragent_origintoken.input_mask_float32(dlr_input), defined by useragent_origintoken.input_mask_float32;
  // passby useragent_typetoken_int32(dlr_input), defined by useragent_typetoken_int32;
  // passby useragent_relativepositiontoken_int32(dlr_input), defined by useragent_relativepositiontoken_int32;
  // passby collina_origintoken.input_id_int32(dlr_input), defined by collina_origintoken.input_id_int32;
  // passby collina_origintoken.input_mask_float32(dlr_input), defined by collina_origintoken.input_mask_float32;
  // passby collina_typetoken_int32(dlr_input), defined by collina_typetoken_int32;
  // passby collina_relativepositiontoken_int32(dlr_input), defined by collina_relativepositiontoken_int32;
  // passby regsrc_origintoken.input_id_int32(dlr_input), defined by regsrc_origintoken.input_id_int32;
  // passby regsrc_origintoken.input_mask_float32(dlr_input), defined by regsrc_origintoken.input_mask_float32;
  // passby regsrc_typetoken_int32(dlr_input), defined by regsrc_typetoken_int32;
  // passby regsrc_relativepositiontoken_int32(dlr_input), defined by regsrc_relativepositiontoken_int32;
  // passby regip_origintoken.input_mask_float32(dlr_input), defined by regip_origintoken.input_mask_float32;
  // passby Node_2592(dlr_input), defined by Node_2592;
  // passby Node_2607(dlr_input), defined by Node_2592;
  // passby Node_2622(dlr_input), defined by Node_2592;
  // passby loginip_origintoken.input_mask_float32(dlr_input), defined by loginip_origintoken.input_mask_float32;
  // passby Node_3436(dlr_input), defined by Node_2592;
  // passby Node_3451(dlr_input), defined by Node_2592;
  // passby Node_3466(dlr_input), defined by Node_2592;
  // passby mobile_origintoken_float32(dlr_input), defined by mobile_origintoken_float32;
  // passby Node_4187(dlr_input), defined by Node_4187;
  // passby Node_4203(dlr_input), defined by Node_4187;
  // passby Node_4219(dlr_input), defined by Node_4187;
  // passby umid_origintoken.input_id_int32(dlr_input), defined by umid_origintoken.input_id_int32;
  // passby umid_origintoken.input_mask_float32(dlr_input), defined by umid_origintoken.input_mask_float32;
  // passby umid_typetoken_int32(dlr_input), defined by umid_typetoken_int32;
  // passby umid_relativepositiontoken_int32(dlr_input), defined by umid_relativepositiontoken_int32;
  // passby email_origintoken.input_id_int32(dlr_input), defined by email_origintoken.input_id_int32;
  // passby email_origintoken.input_mask_float32(dlr_input), defined by email_origintoken.input_mask_float32;
  // passby email_typetoken_int32(dlr_input), defined by email_typetoken_int32;
  // passby email_relativepositiontoken_int32(dlr_input), defined by email_relativepositiontoken_int32;
  // passby event_origintoken.input_id_int32(dlr_input), defined by event_origintoken.input_id_int32;
  // passby event_origintoken.input_mask_float32(dlr_input), defined by event_origintoken.input_mask_float32;
  // passby event_typetoken_int32(dlr_input), defined by event_typetoken_int32;
  // passby event_relativepositiontoken_int32(dlr_input), defined by event_relativepositiontoken_int32;
  auto res_36=network->addConstant(Dims2{128,192},mWeightsMap["const_36"]);
  assert(res_36 && "failed to build Node_116 (type:const)");
  res_36->getOutput(0)->setName("Node_116:0");
  auto res_37=network->addConstant(Dims2{128,192},mWeightsMap["const_37"]);
  assert(res_37 && "failed to build Node_132 (type:const)");
  res_37->getOutput(0)->setName("Node_132:0");
  auto res_38=network->addConstant(Dims2{128,192},mWeightsMap["const_38"]);
  assert(res_38 && "failed to build Node_148 (type:const)");
  res_38->getOutput(0)->setName("Node_148:0");
  auto res_39=network->addConstant(Dims2{59,192},mWeightsMap["const_39"]);
  assert(res_39 && "failed to build Node_942 (type:const)");
  res_39->getOutput(0)->setName("Node_942:0");
  auto res_40=network->addConstant(Dims2{59,192},mWeightsMap["const_40"]);
  assert(res_40 && "failed to build Node_958 (type:const)");
  res_40->getOutput(0)->setName("Node_958:0");
  auto res_41=network->addConstant(Dims2{59,192},mWeightsMap["const_41"]);
  assert(res_41 && "failed to build Node_974 (type:const)");
  res_41->getOutput(0)->setName("Node_974:0");
  auto res_42=network->addConstant(Dims2{75,192},mWeightsMap["const_42"]);
  assert(res_42 && "failed to build Node_1768 (type:const)");
  res_42->getOutput(0)->setName("Node_1768:0");
  auto res_43=network->addConstant(Dims2{75,192},mWeightsMap["const_43"]);
  assert(res_43 && "failed to build Node_1784 (type:const)");
  res_43->getOutput(0)->setName("Node_1784:0");
  auto res_44=network->addConstant(Dims2{75,192},mWeightsMap["const_44"]);
  assert(res_44 && "failed to build Node_1800 (type:const)");
  res_44->getOutput(0)->setName("Node_1800:0");
  auto res_45=network->addConstant(Dims2{33,192},mWeightsMap["const_45"]);
  assert(res_45 && "failed to build Node_2594 (type:const)");
  res_45->getOutput(0)->setName("Node_2594:0");
  auto res_46=network->addConstant(Dims2{33,192},mWeightsMap["const_46"]);
  assert(res_46 && "failed to build Node_2609 (type:const)");
  res_46->getOutput(0)->setName("Node_2609:0");
  auto res_47=network->addConstant(Dims2{33,192},mWeightsMap["const_47"]);
  assert(res_47 && "failed to build Node_2624 (type:const)");
  res_47->getOutput(0)->setName("Node_2624:0");
  auto res_48=network->addConstant(Dims2{33,192},mWeightsMap["const_48"]);
  assert(res_48 && "failed to build Node_3438 (type:const)");
  res_48->getOutput(0)->setName("Node_3438:0");
  auto res_49=network->addConstant(Dims2{33,192},mWeightsMap["const_49"]);
  assert(res_49 && "failed to build Node_3453 (type:const)");
  res_49->getOutput(0)->setName("Node_3453:0");
  auto res_50=network->addConstant(Dims2{33,192},mWeightsMap["const_50"]);
  assert(res_50 && "failed to build Node_3468 (type:const)");
  res_50->getOutput(0)->setName("Node_3468:0");
  auto res_51=network->addConstant(Dims2{12,192},mWeightsMap["const_51"]);
  assert(res_51 && "failed to build Node_4189 (type:const)");
  res_51->getOutput(0)->setName("Node_4189:0");
  auto res_52=network->addConstant(Dims2{12,192},mWeightsMap["const_52"]);
  assert(res_52 && "failed to build Node_4205 (type:const)");
  res_52->getOutput(0)->setName("Node_4205:0");
  auto res_53=network->addConstant(Dims2{12,192},mWeightsMap["const_53"]);
  assert(res_53 && "failed to build Node_4221 (type:const)");
  res_53->getOutput(0)->setName("Node_4221:0");
  auto res_54=network->addConstant(Dims2{133,192},mWeightsMap["const_54"]);
  assert(res_54 && "failed to build Node_5036 (type:const)");
  res_54->getOutput(0)->setName("Node_5036:0");
  auto res_55=network->addConstant(Dims2{133,192},mWeightsMap["const_55"]);
  assert(res_55 && "failed to build Node_5052 (type:const)");
  res_55->getOutput(0)->setName("Node_5052:0");
  auto res_56=network->addConstant(Dims2{133,192},mWeightsMap["const_56"]);
  assert(res_56 && "failed to build Node_5068 (type:const)");
  res_56->getOutput(0)->setName("Node_5068:0");
  auto res_57=network->addConstant(Dims2{16,192},mWeightsMap["const_57"]);
  assert(res_57 && "failed to build Node_5614 (type:const)");
  res_57->getOutput(0)->setName("Node_5614:0");
  auto res_58=network->addConstant(Dims2{16,192},mWeightsMap["const_58"]);
  assert(res_58 && "failed to build Node_5630 (type:const)");
  res_58->getOutput(0)->setName("Node_5630:0");
  auto res_59=network->addConstant(Dims2{16,192},mWeightsMap["const_59"]);
  assert(res_59 && "failed to build Node_5646 (type:const)");
  res_59->getOutput(0)->setName("Node_5646:0");
  auto res_60=network->addConstant(Dims2{35,192},mWeightsMap["const_60"]);
  assert(res_60 && "failed to build Node_6461 (type:const)");
  res_60->getOutput(0)->setName("Node_6461:0");
  auto res_61=network->addConstant(Dims2{35,192},mWeightsMap["const_61"]);
  assert(res_61 && "failed to build Node_6477 (type:const)");
  res_61->getOutput(0)->setName("Node_6477:0");
  auto res_62=network->addConstant(Dims2{35,192},mWeightsMap["const_62"]);
  assert(res_62 && "failed to build Node_6493 (type:const)");
  res_62->getOutput(0)->setName("Node_6493:0");
  auto res_63=network->addConstant(Dims2{1,1},mWeightsMap["const_63"]);
  assert(res_63 && "failed to build Node_7322 (type:const)");
  res_63->getOutput(0)->setName("Node_7322:0");
  auto res_64=network->addConstant(Dims2{33,192},mWeightsMap["const_64"]);
  assert(res_64 && "failed to build Node_2768 (type:const)");
  res_64->getOutput(0)->setName("Node_2768:0");
  auto res_65=network->addConstant(Dims2{33,192},mWeightsMap["const_65"]);
  assert(res_65 && "failed to build Node_3511 (type:const)");
  res_65->getOutput(0)->setName("Node_3511:0");
  auto res_66=network->addConstant(Dims2{12,192},mWeightsMap["const_66"]);
  assert(res_66 && "failed to build Node_4265 (type:const)");
  res_66->getOutput(0)->setName("Node_4265:0");
  auto res_67=network->addConstant(Dims2{16,192},mWeightsMap["const_67"]);
  assert(res_67 && "failed to build Node_5690 (type:const)");
  res_67->getOutput(0)->setName("Node_5690:0");
  auto res_68=network->addConstant(Dims2{10,192},mWeightsMap["const_68"]);
  assert(res_68 && "failed to build Node_7356 (type:const)");
  res_68->getOutput(0)->setName("Node_7356:0");
  auto res_69=network->addConstant(Dims2{1,192},mWeightsMap["const_69"]);
  assert(res_69 && "failed to build Node_7317 (type:const)");
  res_69->getOutput(0)->setName("Node_7317:0");
  auto res_70=network->addConstant(Dims2{1,192},mWeightsMap["const_70"]);
  assert(res_70 && "failed to build useragent_model.embeddingSequence.model.embeddings.LayerNorm.weight (type:const)");
  res_70->getOutput(0)->setName("useragent_model.embeddingSequence.model.embeddings.LayerNorm.weight:0");
  auto res_71=network->addConstant(Dims2{1,192},mWeightsMap["const_71"]);
  assert(res_71 && "failed to build useragent_model.embeddingSequence.model.embeddings.LayerNorm.bias (type:const)");
  res_71->getOutput(0)->setName("useragent_model.embeddingSequence.model.embeddings.LayerNorm.bias:0");
  auto res_72=network->addConstant(Dims2{1,192},mWeightsMap["const_72"]);
  assert(res_72 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight (type:const)");
  res_72->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight:0");
  auto res_73=network->addConstant(Dims2{1,192},mWeightsMap["const_73"]);
  assert(res_73 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias (type:const)");
  res_73->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias:0");
  auto res_74=network->addConstant(Dims2{1,192},mWeightsMap["const_74"]);
  assert(res_74 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight (type:const)");
  res_74->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight:0");
  auto res_75=network->addConstant(Dims2{1,192},mWeightsMap["const_75"]);
  assert(res_75 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias (type:const)");
  res_75->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias:0");
  auto res_76=network->addConstant(Dims2{1,192},mWeightsMap["const_76"]);
  assert(res_76 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight (type:const)");
  res_76->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight:0");
  auto res_77=network->addConstant(Dims2{1,192},mWeightsMap["const_77"]);
  assert(res_77 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias (type:const)");
  res_77->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias:0");
  auto res_78=network->addConstant(Dims2{1,192},mWeightsMap["const_78"]);
  assert(res_78 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight (type:const)");
  res_78->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight:0");
  auto res_79=network->addConstant(Dims2{1,192},mWeightsMap["const_79"]);
  assert(res_79 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias (type:const)");
  res_79->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias:0");
  auto res_80=network->addConstant(Dims2{1,192},mWeightsMap["const_80"]);
  assert(res_80 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight (type:const)");
  res_80->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight:0");
  auto res_81=network->addConstant(Dims2{1,192},mWeightsMap["const_81"]);
  assert(res_81 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias (type:const)");
  res_81->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias:0");
  auto res_82=network->addConstant(Dims2{1,192},mWeightsMap["const_82"]);
  assert(res_82 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight (type:const)");
  res_82->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight:0");
  auto res_83=network->addConstant(Dims2{1,192},mWeightsMap["const_83"]);
  assert(res_83 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias (type:const)");
  res_83->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias:0");
  auto res_84=network->addConstant(Dims2{1,192},mWeightsMap["const_84"]);
  assert(res_84 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight (type:const)");
  res_84->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight:0");
  auto res_85=network->addConstant(Dims2{1,192},mWeightsMap["const_85"]);
  assert(res_85 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias (type:const)");
  res_85->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias:0");
  auto res_86=network->addConstant(Dims2{1,192},mWeightsMap["const_86"]);
  assert(res_86 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight (type:const)");
  res_86->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight:0");
  auto res_87=network->addConstant(Dims2{1,192},mWeightsMap["const_87"]);
  assert(res_87 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias (type:const)");
  res_87->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias:0");
  auto res_88=network->addConstant(Dims2{1,192},mWeightsMap["const_88"]);
  assert(res_88 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight (type:const)");
  res_88->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight:0");
  auto res_89=network->addConstant(Dims2{1,192},mWeightsMap["const_89"]);
  assert(res_89 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias (type:const)");
  res_89->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias:0");
  auto res_90=network->addConstant(Dims2{1,192},mWeightsMap["const_90"]);
  assert(res_90 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight (type:const)");
  res_90->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight:0");
  auto res_91=network->addConstant(Dims2{1,192},mWeightsMap["const_91"]);
  assert(res_91 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias (type:const)");
  res_91->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias:0");
  auto res_92=network->addConstant(Dims2{1,192},mWeightsMap["const_92"]);
  assert(res_92 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight (type:const)");
  res_92->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight:0");
  auto res_93=network->addConstant(Dims2{1,192},mWeightsMap["const_93"]);
  assert(res_93 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias (type:const)");
  res_93->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias:0");
  auto res_94=network->addConstant(Dims2{1,192},mWeightsMap["const_94"]);
  assert(res_94 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight (type:const)");
  res_94->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight:0");
  auto res_95=network->addConstant(Dims2{1,192},mWeightsMap["const_95"]);
  assert(res_95 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias (type:const)");
  res_95->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias:0");
  auto res_96=network->addConstant(Dims2{1,192},mWeightsMap["const_96"]);
  assert(res_96 && "failed to build collina_model.embeddingSequence.model.embeddings.LayerNorm.weight (type:const)");
  res_96->getOutput(0)->setName("collina_model.embeddingSequence.model.embeddings.LayerNorm.weight:0");
  auto res_97=network->addConstant(Dims2{1,192},mWeightsMap["const_97"]);
  assert(res_97 && "failed to build collina_model.embeddingSequence.model.embeddings.LayerNorm.bias (type:const)");
  res_97->getOutput(0)->setName("collina_model.embeddingSequence.model.embeddings.LayerNorm.bias:0");
  auto res_98=network->addConstant(Dims2{1,192},mWeightsMap["const_98"]);
  assert(res_98 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight (type:const)");
  res_98->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight:0");
  auto res_99=network->addConstant(Dims2{1,192},mWeightsMap["const_99"]);
  assert(res_99 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias (type:const)");
  res_99->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias:0");
  auto res_100=network->addConstant(Dims2{1,192},mWeightsMap["const_100"]);
  assert(res_100 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight (type:const)");
  res_100->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight:0");
  auto res_101=network->addConstant(Dims2{1,192},mWeightsMap["const_101"]);
  assert(res_101 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias (type:const)");
  res_101->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias:0");
  auto res_102=network->addConstant(Dims2{1,192},mWeightsMap["const_102"]);
  assert(res_102 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight (type:const)");
  res_102->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight:0");
  auto res_103=network->addConstant(Dims2{1,192},mWeightsMap["const_103"]);
  assert(res_103 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias (type:const)");
  res_103->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias:0");
  auto res_104=network->addConstant(Dims2{1,192},mWeightsMap["const_104"]);
  assert(res_104 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight (type:const)");
  res_104->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight:0");
  auto res_105=network->addConstant(Dims2{1,192},mWeightsMap["const_105"]);
  assert(res_105 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias (type:const)");
  res_105->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias:0");
  auto res_106=network->addConstant(Dims2{1,192},mWeightsMap["const_106"]);
  assert(res_106 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight (type:const)");
  res_106->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight:0");
  auto res_107=network->addConstant(Dims2{1,192},mWeightsMap["const_107"]);
  assert(res_107 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias (type:const)");
  res_107->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias:0");
  auto res_108=network->addConstant(Dims2{1,192},mWeightsMap["const_108"]);
  assert(res_108 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight (type:const)");
  res_108->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight:0");
  auto res_109=network->addConstant(Dims2{1,192},mWeightsMap["const_109"]);
  assert(res_109 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias (type:const)");
  res_109->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias:0");
  auto res_110=network->addConstant(Dims2{1,192},mWeightsMap["const_110"]);
  assert(res_110 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight (type:const)");
  res_110->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight:0");
  auto res_111=network->addConstant(Dims2{1,192},mWeightsMap["const_111"]);
  assert(res_111 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias (type:const)");
  res_111->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias:0");
  auto res_112=network->addConstant(Dims2{1,192},mWeightsMap["const_112"]);
  assert(res_112 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight (type:const)");
  res_112->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight:0");
  auto res_113=network->addConstant(Dims2{1,192},mWeightsMap["const_113"]);
  assert(res_113 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias (type:const)");
  res_113->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias:0");
  auto res_114=network->addConstant(Dims2{1,192},mWeightsMap["const_114"]);
  assert(res_114 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight (type:const)");
  res_114->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight:0");
  auto res_115=network->addConstant(Dims2{1,192},mWeightsMap["const_115"]);
  assert(res_115 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias (type:const)");
  res_115->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias:0");
  auto res_116=network->addConstant(Dims2{1,192},mWeightsMap["const_116"]);
  assert(res_116 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight (type:const)");
  res_116->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight:0");
  auto res_117=network->addConstant(Dims2{1,192},mWeightsMap["const_117"]);
  assert(res_117 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias (type:const)");
  res_117->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias:0");
  auto res_118=network->addConstant(Dims2{1,192},mWeightsMap["const_118"]);
  assert(res_118 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight (type:const)");
  res_118->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight:0");
  auto res_119=network->addConstant(Dims2{1,192},mWeightsMap["const_119"]);
  assert(res_119 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias (type:const)");
  res_119->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias:0");
  auto res_120=network->addConstant(Dims2{1,192},mWeightsMap["const_120"]);
  assert(res_120 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight (type:const)");
  res_120->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight:0");
  auto res_121=network->addConstant(Dims2{1,192},mWeightsMap["const_121"]);
  assert(res_121 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias (type:const)");
  res_121->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias:0");
  auto res_122=network->addConstant(Dims2{1,192},mWeightsMap["const_122"]);
  assert(res_122 && "failed to build regsrc_model.embeddingSequence.model.embeddings.LayerNorm.weight (type:const)");
  res_122->getOutput(0)->setName("regsrc_model.embeddingSequence.model.embeddings.LayerNorm.weight:0");
  auto res_123=network->addConstant(Dims2{1,192},mWeightsMap["const_123"]);
  assert(res_123 && "failed to build regsrc_model.embeddingSequence.model.embeddings.LayerNorm.bias (type:const)");
  res_123->getOutput(0)->setName("regsrc_model.embeddingSequence.model.embeddings.LayerNorm.bias:0");
  auto res_124=network->addConstant(Dims2{1,192},mWeightsMap["const_124"]);
  assert(res_124 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight (type:const)");
  res_124->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight:0");
  auto res_125=network->addConstant(Dims2{1,192},mWeightsMap["const_125"]);
  assert(res_125 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias (type:const)");
  res_125->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias:0");
  auto res_126=network->addConstant(Dims2{1,192},mWeightsMap["const_126"]);
  assert(res_126 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight (type:const)");
  res_126->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight:0");
  auto res_127=network->addConstant(Dims2{1,192},mWeightsMap["const_127"]);
  assert(res_127 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias (type:const)");
  res_127->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias:0");
  auto res_128=network->addConstant(Dims2{1,192},mWeightsMap["const_128"]);
  assert(res_128 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight (type:const)");
  res_128->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight:0");
  auto res_129=network->addConstant(Dims2{1,192},mWeightsMap["const_129"]);
  assert(res_129 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias (type:const)");
  res_129->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias:0");
  auto res_130=network->addConstant(Dims2{1,192},mWeightsMap["const_130"]);
  assert(res_130 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight (type:const)");
  res_130->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight:0");
  auto res_131=network->addConstant(Dims2{1,192},mWeightsMap["const_131"]);
  assert(res_131 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias (type:const)");
  res_131->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias:0");
  auto res_132=network->addConstant(Dims2{1,192},mWeightsMap["const_132"]);
  assert(res_132 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight (type:const)");
  res_132->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight:0");
  auto res_133=network->addConstant(Dims2{1,192},mWeightsMap["const_133"]);
  assert(res_133 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias (type:const)");
  res_133->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias:0");
  auto res_134=network->addConstant(Dims2{1,192},mWeightsMap["const_134"]);
  assert(res_134 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight (type:const)");
  res_134->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight:0");
  auto res_135=network->addConstant(Dims2{1,192},mWeightsMap["const_135"]);
  assert(res_135 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias (type:const)");
  res_135->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias:0");
  auto res_136=network->addConstant(Dims2{1,192},mWeightsMap["const_136"]);
  assert(res_136 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight (type:const)");
  res_136->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight:0");
  auto res_137=network->addConstant(Dims2{1,192},mWeightsMap["const_137"]);
  assert(res_137 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias (type:const)");
  res_137->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias:0");
  auto res_138=network->addConstant(Dims2{1,192},mWeightsMap["const_138"]);
  assert(res_138 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight (type:const)");
  res_138->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight:0");
  auto res_139=network->addConstant(Dims2{1,192},mWeightsMap["const_139"]);
  assert(res_139 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias (type:const)");
  res_139->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias:0");
  auto res_140=network->addConstant(Dims2{1,192},mWeightsMap["const_140"]);
  assert(res_140 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight (type:const)");
  res_140->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight:0");
  auto res_141=network->addConstant(Dims2{1,192},mWeightsMap["const_141"]);
  assert(res_141 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias (type:const)");
  res_141->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias:0");
  auto res_142=network->addConstant(Dims2{1,192},mWeightsMap["const_142"]);
  assert(res_142 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight (type:const)");
  res_142->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight:0");
  auto res_143=network->addConstant(Dims2{1,192},mWeightsMap["const_143"]);
  assert(res_143 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias (type:const)");
  res_143->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias:0");
  auto res_144=network->addConstant(Dims2{1,192},mWeightsMap["const_144"]);
  assert(res_144 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight (type:const)");
  res_144->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight:0");
  auto res_145=network->addConstant(Dims2{1,192},mWeightsMap["const_145"]);
  assert(res_145 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias (type:const)");
  res_145->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias:0");
  auto res_146=network->addConstant(Dims2{1,192},mWeightsMap["const_146"]);
  assert(res_146 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight (type:const)");
  res_146->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight:0");
  auto res_147=network->addConstant(Dims2{1,192},mWeightsMap["const_147"]);
  assert(res_147 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias (type:const)");
  res_147->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias:0");
  auto res_148=network->addConstant(Dims2{1,192},mWeightsMap["const_148"]);
  assert(res_148 && "failed to build regip_model.embeddingSequence.model.embeddings.LayerNorm.weight (type:const)");
  res_148->getOutput(0)->setName("regip_model.embeddingSequence.model.embeddings.LayerNorm.weight:0");
  auto res_149=network->addConstant(Dims2{1,192},mWeightsMap["const_149"]);
  assert(res_149 && "failed to build regip_model.embeddingSequence.model.embeddings.LayerNorm.bias (type:const)");
  res_149->getOutput(0)->setName("regip_model.embeddingSequence.model.embeddings.LayerNorm.bias:0");
  auto res_150=network->addConstant(Dims2{1,192},mWeightsMap["const_150"]);
  assert(res_150 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight (type:const)");
  res_150->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight:0");
  auto res_151=network->addConstant(Dims2{1,192},mWeightsMap["const_151"]);
  assert(res_151 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias (type:const)");
  res_151->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias:0");
  auto res_152=network->addConstant(Dims2{1,192},mWeightsMap["const_152"]);
  assert(res_152 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight (type:const)");
  res_152->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight:0");
  auto res_153=network->addConstant(Dims2{1,192},mWeightsMap["const_153"]);
  assert(res_153 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias (type:const)");
  res_153->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias:0");
  auto res_154=network->addConstant(Dims2{1,192},mWeightsMap["const_154"]);
  assert(res_154 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight (type:const)");
  res_154->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight:0");
  auto res_155=network->addConstant(Dims2{1,192},mWeightsMap["const_155"]);
  assert(res_155 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias (type:const)");
  res_155->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias:0");
  auto res_156=network->addConstant(Dims2{1,192},mWeightsMap["const_156"]);
  assert(res_156 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight (type:const)");
  res_156->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight:0");
  auto res_157=network->addConstant(Dims2{1,192},mWeightsMap["const_157"]);
  assert(res_157 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias (type:const)");
  res_157->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias:0");
  auto res_158=network->addConstant(Dims2{1,192},mWeightsMap["const_158"]);
  assert(res_158 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight (type:const)");
  res_158->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight:0");
  auto res_159=network->addConstant(Dims2{1,192},mWeightsMap["const_159"]);
  assert(res_159 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias (type:const)");
  res_159->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias:0");
  auto res_160=network->addConstant(Dims2{1,192},mWeightsMap["const_160"]);
  assert(res_160 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight (type:const)");
  res_160->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight:0");
  auto res_161=network->addConstant(Dims2{1,192},mWeightsMap["const_161"]);
  assert(res_161 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias (type:const)");
  res_161->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias:0");
  auto res_162=network->addConstant(Dims2{1,192},mWeightsMap["const_162"]);
  assert(res_162 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight (type:const)");
  res_162->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight:0");
  auto res_163=network->addConstant(Dims2{1,192},mWeightsMap["const_163"]);
  assert(res_163 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias (type:const)");
  res_163->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias:0");
  auto res_164=network->addConstant(Dims2{1,192},mWeightsMap["const_164"]);
  assert(res_164 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight (type:const)");
  res_164->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight:0");
  auto res_165=network->addConstant(Dims2{1,192},mWeightsMap["const_165"]);
  assert(res_165 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias (type:const)");
  res_165->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias:0");
  auto res_166=network->addConstant(Dims2{1,192},mWeightsMap["const_166"]);
  assert(res_166 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight (type:const)");
  res_166->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight:0");
  auto res_167=network->addConstant(Dims2{1,192},mWeightsMap["const_167"]);
  assert(res_167 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias (type:const)");
  res_167->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias:0");
  auto res_168=network->addConstant(Dims2{1,192},mWeightsMap["const_168"]);
  assert(res_168 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight (type:const)");
  res_168->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight:0");
  auto res_169=network->addConstant(Dims2{1,192},mWeightsMap["const_169"]);
  assert(res_169 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias (type:const)");
  res_169->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias:0");
  auto res_170=network->addConstant(Dims2{1,192},mWeightsMap["const_170"]);
  assert(res_170 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight (type:const)");
  res_170->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight:0");
  auto res_171=network->addConstant(Dims2{1,192},mWeightsMap["const_171"]);
  assert(res_171 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias (type:const)");
  res_171->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias:0");
  auto res_172=network->addConstant(Dims2{1,192},mWeightsMap["const_172"]);
  assert(res_172 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight (type:const)");
  res_172->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight:0");
  auto res_173=network->addConstant(Dims2{1,192},mWeightsMap["const_173"]);
  assert(res_173 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias (type:const)");
  res_173->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias:0");
  auto res_174=network->addConstant(Dims2{1,192},mWeightsMap["const_174"]);
  assert(res_174 && "failed to build mobile_model.embeddingSequence.model.embeddings.LayerNorm.weight (type:const)");
  res_174->getOutput(0)->setName("mobile_model.embeddingSequence.model.embeddings.LayerNorm.weight:0");
  auto res_175=network->addConstant(Dims2{1,192},mWeightsMap["const_175"]);
  assert(res_175 && "failed to build mobile_model.embeddingSequence.model.embeddings.LayerNorm.bias (type:const)");
  res_175->getOutput(0)->setName("mobile_model.embeddingSequence.model.embeddings.LayerNorm.bias:0");
  auto res_176=network->addConstant(Dims2{1,192},mWeightsMap["const_176"]);
  assert(res_176 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight (type:const)");
  res_176->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight:0");
  auto res_177=network->addConstant(Dims2{1,192},mWeightsMap["const_177"]);
  assert(res_177 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias (type:const)");
  res_177->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias:0");
  auto res_178=network->addConstant(Dims2{1,192},mWeightsMap["const_178"]);
  assert(res_178 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight (type:const)");
  res_178->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight:0");
  auto res_179=network->addConstant(Dims2{1,192},mWeightsMap["const_179"]);
  assert(res_179 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias (type:const)");
  res_179->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias:0");
  auto res_180=network->addConstant(Dims2{1,192},mWeightsMap["const_180"]);
  assert(res_180 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight (type:const)");
  res_180->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight:0");
  auto res_181=network->addConstant(Dims2{1,192},mWeightsMap["const_181"]);
  assert(res_181 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias (type:const)");
  res_181->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias:0");
  auto res_182=network->addConstant(Dims2{1,192},mWeightsMap["const_182"]);
  assert(res_182 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight (type:const)");
  res_182->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight:0");
  auto res_183=network->addConstant(Dims2{1,192},mWeightsMap["const_183"]);
  assert(res_183 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias (type:const)");
  res_183->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias:0");
  auto res_184=network->addConstant(Dims2{1,192},mWeightsMap["const_184"]);
  assert(res_184 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight (type:const)");
  res_184->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight:0");
  auto res_185=network->addConstant(Dims2{1,192},mWeightsMap["const_185"]);
  assert(res_185 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias (type:const)");
  res_185->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias:0");
  auto res_186=network->addConstant(Dims2{1,192},mWeightsMap["const_186"]);
  assert(res_186 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight (type:const)");
  res_186->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight:0");
  auto res_187=network->addConstant(Dims2{1,192},mWeightsMap["const_187"]);
  assert(res_187 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias (type:const)");
  res_187->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias:0");
  auto res_188=network->addConstant(Dims2{1,192},mWeightsMap["const_188"]);
  assert(res_188 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight (type:const)");
  res_188->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight:0");
  auto res_189=network->addConstant(Dims2{1,192},mWeightsMap["const_189"]);
  assert(res_189 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias (type:const)");
  res_189->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias:0");
  auto res_190=network->addConstant(Dims2{1,192},mWeightsMap["const_190"]);
  assert(res_190 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight (type:const)");
  res_190->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight:0");
  auto res_191=network->addConstant(Dims2{1,192},mWeightsMap["const_191"]);
  assert(res_191 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias (type:const)");
  res_191->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias:0");
  auto res_192=network->addConstant(Dims2{1,192},mWeightsMap["const_192"]);
  assert(res_192 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight (type:const)");
  res_192->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight:0");
  auto res_193=network->addConstant(Dims2{1,192},mWeightsMap["const_193"]);
  assert(res_193 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias (type:const)");
  res_193->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias:0");
  auto res_194=network->addConstant(Dims2{1,192},mWeightsMap["const_194"]);
  assert(res_194 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight (type:const)");
  res_194->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight:0");
  auto res_195=network->addConstant(Dims2{1,192},mWeightsMap["const_195"]);
  assert(res_195 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias (type:const)");
  res_195->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias:0");
  auto res_196=network->addConstant(Dims2{1,192},mWeightsMap["const_196"]);
  assert(res_196 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight (type:const)");
  res_196->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight:0");
  auto res_197=network->addConstant(Dims2{1,192},mWeightsMap["const_197"]);
  assert(res_197 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias (type:const)");
  res_197->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias:0");
  auto res_198=network->addConstant(Dims2{1,192},mWeightsMap["const_198"]);
  assert(res_198 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight (type:const)");
  res_198->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight:0");
  auto res_199=network->addConstant(Dims2{1,192},mWeightsMap["const_199"]);
  assert(res_199 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias (type:const)");
  res_199->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias:0");
  auto res_200=network->addConstant(Dims2{1,192},mWeightsMap["const_200"]);
  assert(res_200 && "failed to build umid_model.embeddingSequence.model.embeddings.LayerNorm.weight (type:const)");
  res_200->getOutput(0)->setName("umid_model.embeddingSequence.model.embeddings.LayerNorm.weight:0");
  auto res_201=network->addConstant(Dims2{1,192},mWeightsMap["const_201"]);
  assert(res_201 && "failed to build umid_model.embeddingSequence.model.embeddings.LayerNorm.bias (type:const)");
  res_201->getOutput(0)->setName("umid_model.embeddingSequence.model.embeddings.LayerNorm.bias:0");
  auto res_202=network->addConstant(Dims2{1,192},mWeightsMap["const_202"]);
  assert(res_202 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight (type:const)");
  res_202->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight:0");
  auto res_203=network->addConstant(Dims2{1,192},mWeightsMap["const_203"]);
  assert(res_203 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias (type:const)");
  res_203->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias:0");
  auto res_204=network->addConstant(Dims2{1,192},mWeightsMap["const_204"]);
  assert(res_204 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight (type:const)");
  res_204->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight:0");
  auto res_205=network->addConstant(Dims2{1,192},mWeightsMap["const_205"]);
  assert(res_205 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias (type:const)");
  res_205->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias:0");
  auto res_206=network->addConstant(Dims2{1,192},mWeightsMap["const_206"]);
  assert(res_206 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight (type:const)");
  res_206->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight:0");
  auto res_207=network->addConstant(Dims2{1,192},mWeightsMap["const_207"]);
  assert(res_207 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias (type:const)");
  res_207->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias:0");
  auto res_208=network->addConstant(Dims2{1,192},mWeightsMap["const_208"]);
  assert(res_208 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight (type:const)");
  res_208->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight:0");
  auto res_209=network->addConstant(Dims2{1,192},mWeightsMap["const_209"]);
  assert(res_209 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias (type:const)");
  res_209->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias:0");
  auto res_210=network->addConstant(Dims2{1,192},mWeightsMap["const_210"]);
  assert(res_210 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight (type:const)");
  res_210->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight:0");
  auto res_211=network->addConstant(Dims2{1,192},mWeightsMap["const_211"]);
  assert(res_211 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias (type:const)");
  res_211->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias:0");
  auto res_212=network->addConstant(Dims2{1,192},mWeightsMap["const_212"]);
  assert(res_212 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight (type:const)");
  res_212->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight:0");
  auto res_213=network->addConstant(Dims2{1,192},mWeightsMap["const_213"]);
  assert(res_213 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias (type:const)");
  res_213->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias:0");
  auto res_214=network->addConstant(Dims2{1,192},mWeightsMap["const_214"]);
  assert(res_214 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight (type:const)");
  res_214->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight:0");
  auto res_215=network->addConstant(Dims2{1,192},mWeightsMap["const_215"]);
  assert(res_215 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias (type:const)");
  res_215->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias:0");
  auto res_216=network->addConstant(Dims2{1,192},mWeightsMap["const_216"]);
  assert(res_216 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight (type:const)");
  res_216->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight:0");
  auto res_217=network->addConstant(Dims2{1,192},mWeightsMap["const_217"]);
  assert(res_217 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias (type:const)");
  res_217->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias:0");
  auto res_218=network->addConstant(Dims2{1,192},mWeightsMap["const_218"]);
  assert(res_218 && "failed to build email_model.embeddingSequence.model.embeddings.LayerNorm.weight (type:const)");
  res_218->getOutput(0)->setName("email_model.embeddingSequence.model.embeddings.LayerNorm.weight:0");
  auto res_219=network->addConstant(Dims2{1,192},mWeightsMap["const_219"]);
  assert(res_219 && "failed to build email_model.embeddingSequence.model.embeddings.LayerNorm.bias (type:const)");
  res_219->getOutput(0)->setName("email_model.embeddingSequence.model.embeddings.LayerNorm.bias:0");
  auto res_220=network->addConstant(Dims2{1,192},mWeightsMap["const_220"]);
  assert(res_220 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight (type:const)");
  res_220->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight:0");
  auto res_221=network->addConstant(Dims2{1,192},mWeightsMap["const_221"]);
  assert(res_221 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias (type:const)");
  res_221->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias:0");
  auto res_222=network->addConstant(Dims2{1,192},mWeightsMap["const_222"]);
  assert(res_222 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight (type:const)");
  res_222->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight:0");
  auto res_223=network->addConstant(Dims2{1,192},mWeightsMap["const_223"]);
  assert(res_223 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias (type:const)");
  res_223->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias:0");
  auto res_224=network->addConstant(Dims2{1,192},mWeightsMap["const_224"]);
  assert(res_224 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight (type:const)");
  res_224->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight:0");
  auto res_225=network->addConstant(Dims2{1,192},mWeightsMap["const_225"]);
  assert(res_225 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias (type:const)");
  res_225->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias:0");
  auto res_226=network->addConstant(Dims2{1,192},mWeightsMap["const_226"]);
  assert(res_226 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight (type:const)");
  res_226->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight:0");
  auto res_227=network->addConstant(Dims2{1,192},mWeightsMap["const_227"]);
  assert(res_227 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias (type:const)");
  res_227->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias:0");
  auto res_228=network->addConstant(Dims2{1,192},mWeightsMap["const_228"]);
  assert(res_228 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight (type:const)");
  res_228->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight:0");
  auto res_229=network->addConstant(Dims2{1,192},mWeightsMap["const_229"]);
  assert(res_229 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias (type:const)");
  res_229->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias:0");
  auto res_230=network->addConstant(Dims2{1,192},mWeightsMap["const_230"]);
  assert(res_230 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight (type:const)");
  res_230->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight:0");
  auto res_231=network->addConstant(Dims2{1,192},mWeightsMap["const_231"]);
  assert(res_231 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias (type:const)");
  res_231->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias:0");
  auto res_232=network->addConstant(Dims2{1,192},mWeightsMap["const_232"]);
  assert(res_232 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight (type:const)");
  res_232->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight:0");
  auto res_233=network->addConstant(Dims2{1,192},mWeightsMap["const_233"]);
  assert(res_233 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias (type:const)");
  res_233->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias:0");
  auto res_234=network->addConstant(Dims2{1,192},mWeightsMap["const_234"]);
  assert(res_234 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight (type:const)");
  res_234->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight:0");
  auto res_235=network->addConstant(Dims2{1,192},mWeightsMap["const_235"]);
  assert(res_235 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias (type:const)");
  res_235->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias:0");
  auto res_236=network->addConstant(Dims2{1,192},mWeightsMap["const_236"]);
  assert(res_236 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight (type:const)");
  res_236->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight:0");
  auto res_237=network->addConstant(Dims2{1,192},mWeightsMap["const_237"]);
  assert(res_237 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias (type:const)");
  res_237->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias:0");
  auto res_238=network->addConstant(Dims2{1,192},mWeightsMap["const_238"]);
  assert(res_238 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight (type:const)");
  res_238->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight:0");
  auto res_239=network->addConstant(Dims2{1,192},mWeightsMap["const_239"]);
  assert(res_239 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias (type:const)");
  res_239->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias:0");
  auto res_240=network->addConstant(Dims2{1,192},mWeightsMap["const_240"]);
  assert(res_240 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight (type:const)");
  res_240->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight:0");
  auto res_241=network->addConstant(Dims2{1,192},mWeightsMap["const_241"]);
  assert(res_241 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias (type:const)");
  res_241->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias:0");
  auto res_242=network->addConstant(Dims2{1,192},mWeightsMap["const_242"]);
  assert(res_242 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight (type:const)");
  res_242->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight:0");
  auto res_243=network->addConstant(Dims2{1,192},mWeightsMap["const_243"]);
  assert(res_243 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias (type:const)");
  res_243->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias:0");
  auto res_244=network->addConstant(Dims2{1,192},mWeightsMap["const_244"]);
  assert(res_244 && "failed to build event_model.embeddingSequence.model.embeddings.LayerNorm.weight (type:const)");
  res_244->getOutput(0)->setName("event_model.embeddingSequence.model.embeddings.LayerNorm.weight:0");
  auto res_245=network->addConstant(Dims2{1,192},mWeightsMap["const_245"]);
  assert(res_245 && "failed to build event_model.embeddingSequence.model.embeddings.LayerNorm.bias (type:const)");
  res_245->getOutput(0)->setName("event_model.embeddingSequence.model.embeddings.LayerNorm.bias:0");
  auto res_246=network->addConstant(Dims2{1,192},mWeightsMap["const_246"]);
  assert(res_246 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight (type:const)");
  res_246->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.weight:0");
  auto res_247=network->addConstant(Dims2{1,192},mWeightsMap["const_247"]);
  assert(res_247 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias (type:const)");
  res_247->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.attention.output.LayerNorm.bias:0");
  auto res_248=network->addConstant(Dims2{1,192},mWeightsMap["const_248"]);
  assert(res_248 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight (type:const)");
  res_248->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.weight:0");
  auto res_249=network->addConstant(Dims2{1,192},mWeightsMap["const_249"]);
  assert(res_249 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias (type:const)");
  res_249->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.output.LayerNorm.bias:0");
  auto res_250=network->addConstant(Dims2{1,192},mWeightsMap["const_250"]);
  assert(res_250 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight (type:const)");
  res_250->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.weight:0");
  auto res_251=network->addConstant(Dims2{1,192},mWeightsMap["const_251"]);
  assert(res_251 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias (type:const)");
  res_251->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.attention.output.LayerNorm.bias:0");
  auto res_252=network->addConstant(Dims2{1,192},mWeightsMap["const_252"]);
  assert(res_252 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight (type:const)");
  res_252->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.weight:0");
  auto res_253=network->addConstant(Dims2{1,192},mWeightsMap["const_253"]);
  assert(res_253 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias (type:const)");
  res_253->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.output.LayerNorm.bias:0");
  auto res_254=network->addConstant(Dims2{1,192},mWeightsMap["const_254"]);
  assert(res_254 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight (type:const)");
  res_254->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.weight:0");
  auto res_255=network->addConstant(Dims2{1,192},mWeightsMap["const_255"]);
  assert(res_255 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias (type:const)");
  res_255->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.attention.output.LayerNorm.bias:0");
  auto res_256=network->addConstant(Dims2{1,192},mWeightsMap["const_256"]);
  assert(res_256 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight (type:const)");
  res_256->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.weight:0");
  auto res_257=network->addConstant(Dims2{1,192},mWeightsMap["const_257"]);
  assert(res_257 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias (type:const)");
  res_257->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.output.LayerNorm.bias:0");
  auto res_258=network->addConstant(Dims2{1,192},mWeightsMap["const_258"]);
  assert(res_258 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight (type:const)");
  res_258->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.weight:0");
  auto res_259=network->addConstant(Dims2{1,192},mWeightsMap["const_259"]);
  assert(res_259 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias (type:const)");
  res_259->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.attention.output.LayerNorm.bias:0");
  auto res_260=network->addConstant(Dims2{1,192},mWeightsMap["const_260"]);
  assert(res_260 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight (type:const)");
  res_260->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.weight:0");
  auto res_261=network->addConstant(Dims2{1,192},mWeightsMap["const_261"]);
  assert(res_261 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias (type:const)");
  res_261->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.output.LayerNorm.bias:0");
  auto res_262=network->addConstant(Dims2{1,192},mWeightsMap["const_262"]);
  assert(res_262 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight (type:const)");
  res_262->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.weight:0");
  auto res_263=network->addConstant(Dims2{1,192},mWeightsMap["const_263"]);
  assert(res_263 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias (type:const)");
  res_263->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.attention.output.LayerNorm.bias:0");
  auto res_264=network->addConstant(Dims2{1,192},mWeightsMap["const_264"]);
  assert(res_264 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight (type:const)");
  res_264->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.weight:0");
  auto res_265=network->addConstant(Dims2{1,192},mWeightsMap["const_265"]);
  assert(res_265 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias (type:const)");
  res_265->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.output.LayerNorm.bias:0");
  auto res_266=network->addConstant(Dims2{1,192},mWeightsMap["const_266"]);
  assert(res_266 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight (type:const)");
  res_266->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.weight:0");
  auto res_267=network->addConstant(Dims2{1,192},mWeightsMap["const_267"]);
  assert(res_267 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias (type:const)");
  res_267->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.attention.output.LayerNorm.bias:0");
  auto res_268=network->addConstant(Dims2{1,192},mWeightsMap["const_268"]);
  assert(res_268 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight (type:const)");
  res_268->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.weight:0");
  auto res_269=network->addConstant(Dims2{1,192},mWeightsMap["const_269"]);
  assert(res_269 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias (type:const)");
  res_269->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.output.LayerNorm.bias:0");
  auto res_270=network->addConstant(Dims2{1,192},mWeightsMap["const_270"]);
  assert(res_270 && "failed to build fusion_model.model.embeddings.LayerNorm.weight (type:const)");
  res_270->getOutput(0)->setName("fusion_model.model.embeddings.LayerNorm.weight:0");
  auto res_271=network->addConstant(Dims2{1,192},mWeightsMap["const_271"]);
  assert(res_271 && "failed to build fusion_model.model.embeddings.LayerNorm.bias (type:const)");
  res_271->getOutput(0)->setName("fusion_model.model.embeddings.LayerNorm.bias:0");
  auto res_272=network->addConstant(Dims2{1,192},mWeightsMap["const_272"]);
  assert(res_272 && "failed to build fusion_model.model.encoder.layer.0.attention.output.LayerNorm.weight (type:const)");
  res_272->getOutput(0)->setName("fusion_model.model.encoder.layer.0.attention.output.LayerNorm.weight:0");
  auto res_273=network->addConstant(Dims2{1,192},mWeightsMap["const_273"]);
  assert(res_273 && "failed to build fusion_model.model.encoder.layer.0.attention.output.LayerNorm.bias (type:const)");
  res_273->getOutput(0)->setName("fusion_model.model.encoder.layer.0.attention.output.LayerNorm.bias:0");
  auto res_274=network->addConstant(Dims2{1,192},mWeightsMap["const_274"]);
  assert(res_274 && "failed to build fusion_model.model.encoder.layer.0.output.LayerNorm.weight (type:const)");
  res_274->getOutput(0)->setName("fusion_model.model.encoder.layer.0.output.LayerNorm.weight:0");
  auto res_275=network->addConstant(Dims2{1,192},mWeightsMap["const_275"]);
  assert(res_275 && "failed to build fusion_model.model.encoder.layer.0.output.LayerNorm.bias (type:const)");
  res_275->getOutput(0)->setName("fusion_model.model.encoder.layer.0.output.LayerNorm.bias:0");
  auto res_276=network->addConstant(Dims2{1,192},mWeightsMap["const_276"]);
  assert(res_276 && "failed to build fusion_model.model.encoder.layer.1.attention.output.LayerNorm.weight (type:const)");
  res_276->getOutput(0)->setName("fusion_model.model.encoder.layer.1.attention.output.LayerNorm.weight:0");
  auto res_277=network->addConstant(Dims2{1,192},mWeightsMap["const_277"]);
  assert(res_277 && "failed to build fusion_model.model.encoder.layer.1.attention.output.LayerNorm.bias (type:const)");
  res_277->getOutput(0)->setName("fusion_model.model.encoder.layer.1.attention.output.LayerNorm.bias:0");
  auto res_278=network->addConstant(Dims2{1,192},mWeightsMap["const_278"]);
  assert(res_278 && "failed to build fusion_model.model.encoder.layer.1.output.LayerNorm.weight (type:const)");
  res_278->getOutput(0)->setName("fusion_model.model.encoder.layer.1.output.LayerNorm.weight:0");
  auto res_279=network->addConstant(Dims2{1,192},mWeightsMap["const_279"]);
  assert(res_279 && "failed to build fusion_model.model.encoder.layer.1.output.LayerNorm.bias (type:const)");
  res_279->getOutput(0)->setName("fusion_model.model.encoder.layer.1.output.LayerNorm.bias:0");
  auto res_280=network->addConstant(Dims2{1,192},mWeightsMap["const_280"]);
  assert(res_280 && "failed to build fusion_model.model.encoder.layer.2.attention.output.LayerNorm.weight (type:const)");
  res_280->getOutput(0)->setName("fusion_model.model.encoder.layer.2.attention.output.LayerNorm.weight:0");
  auto res_281=network->addConstant(Dims2{1,192},mWeightsMap["const_281"]);
  assert(res_281 && "failed to build fusion_model.model.encoder.layer.2.attention.output.LayerNorm.bias (type:const)");
  res_281->getOutput(0)->setName("fusion_model.model.encoder.layer.2.attention.output.LayerNorm.bias:0");
  auto res_282=network->addConstant(Dims2{1,192},mWeightsMap["const_282"]);
  assert(res_282 && "failed to build fusion_model.model.encoder.layer.2.output.LayerNorm.weight (type:const)");
  res_282->getOutput(0)->setName("fusion_model.model.encoder.layer.2.output.LayerNorm.weight:0");
  auto res_283=network->addConstant(Dims2{1,192},mWeightsMap["const_283"]);
  assert(res_283 && "failed to build fusion_model.model.encoder.layer.2.output.LayerNorm.bias (type:const)");
  res_283->getOutput(0)->setName("fusion_model.model.encoder.layer.2.output.LayerNorm.bias:0");
  auto res_284=network->addConstant(Dims2{1,192},mWeightsMap["const_284"]);
  assert(res_284 && "failed to build fusion_model.model.encoder.layer.3.attention.output.LayerNorm.weight (type:const)");
  res_284->getOutput(0)->setName("fusion_model.model.encoder.layer.3.attention.output.LayerNorm.weight:0");
  auto res_285=network->addConstant(Dims2{1,192},mWeightsMap["const_285"]);
  assert(res_285 && "failed to build fusion_model.model.encoder.layer.3.attention.output.LayerNorm.bias (type:const)");
  res_285->getOutput(0)->setName("fusion_model.model.encoder.layer.3.attention.output.LayerNorm.bias:0");
  auto res_286=network->addConstant(Dims2{1,192},mWeightsMap["const_286"]);
  assert(res_286 && "failed to build fusion_model.model.encoder.layer.3.output.LayerNorm.weight (type:const)");
  res_286->getOutput(0)->setName("fusion_model.model.encoder.layer.3.output.LayerNorm.weight:0");
  auto res_287=network->addConstant(Dims2{1,192},mWeightsMap["const_287"]);
  assert(res_287 && "failed to build fusion_model.model.encoder.layer.3.output.LayerNorm.bias (type:const)");
  res_287->getOutput(0)->setName("fusion_model.model.encoder.layer.3.output.LayerNorm.bias:0");
  auto res_288=network->addConstant(Dims2{1,192},mWeightsMap["const_288"]);
  assert(res_288 && "failed to build fusion_model.model.encoder.layer.4.attention.output.LayerNorm.weight (type:const)");
  res_288->getOutput(0)->setName("fusion_model.model.encoder.layer.4.attention.output.LayerNorm.weight:0");
  auto res_289=network->addConstant(Dims2{1,192},mWeightsMap["const_289"]);
  assert(res_289 && "failed to build fusion_model.model.encoder.layer.4.attention.output.LayerNorm.bias (type:const)");
  res_289->getOutput(0)->setName("fusion_model.model.encoder.layer.4.attention.output.LayerNorm.bias:0");
  auto res_290=network->addConstant(Dims2{1,192},mWeightsMap["const_290"]);
  assert(res_290 && "failed to build fusion_model.model.encoder.layer.4.output.LayerNorm.weight (type:const)");
  res_290->getOutput(0)->setName("fusion_model.model.encoder.layer.4.output.LayerNorm.weight:0");
  auto res_291=network->addConstant(Dims2{1,192},mWeightsMap["const_291"]);
  assert(res_291 && "failed to build fusion_model.model.encoder.layer.4.output.LayerNorm.bias (type:const)");
  res_291->getOutput(0)->setName("fusion_model.model.encoder.layer.4.output.LayerNorm.bias:0");
  auto res_292=network->addConstant(Dims2{1,192},mWeightsMap["const_292"]);
  assert(res_292 && "failed to build fusion_model.model.encoder.layer.5.attention.output.LayerNorm.weight (type:const)");
  res_292->getOutput(0)->setName("fusion_model.model.encoder.layer.5.attention.output.LayerNorm.weight:0");
  auto res_293=network->addConstant(Dims2{1,192},mWeightsMap["const_293"]);
  assert(res_293 && "failed to build fusion_model.model.encoder.layer.5.attention.output.LayerNorm.bias (type:const)");
  res_293->getOutput(0)->setName("fusion_model.model.encoder.layer.5.attention.output.LayerNorm.bias:0");
  auto res_294=network->addConstant(Dims2{1,192},mWeightsMap["const_294"]);
  assert(res_294 && "failed to build fusion_model.model.encoder.layer.5.output.LayerNorm.weight (type:const)");
  res_294->getOutput(0)->setName("fusion_model.model.encoder.layer.5.output.LayerNorm.weight:0");
  auto res_295=network->addConstant(Dims2{1,192},mWeightsMap["const_295"]);
  assert(res_295 && "failed to build fusion_model.model.encoder.layer.5.output.LayerNorm.bias (type:const)");
  res_295->getOutput(0)->setName("fusion_model.model.encoder.layer.5.output.LayerNorm.bias:0");
  auto res_296=network->addConstant(Dims2{192,192},mWeightsMap["const_296"]);
  assert(res_296 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight (type:const)");
  res_296->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight:0");
  auto res_297=network->addConstant(Dims2{1,192},mWeightsMap["const_297"]);
  assert(res_297 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias (type:const)");
  res_297->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias:0");
  auto res_298=network->addConstant(Dims2{192,192},mWeightsMap["const_298"]);
  assert(res_298 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight (type:const)");
  res_298->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight:0");
  auto res_299=network->addConstant(Dims2{1,192},mWeightsMap["const_299"]);
  assert(res_299 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias (type:const)");
  res_299->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias:0");
  auto res_300=network->addConstant(Dims2{192,192},mWeightsMap["const_300"]);
  assert(res_300 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight (type:const)");
  res_300->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight:0");
  auto res_301=network->addConstant(Dims2{1,192},mWeightsMap["const_301"]);
  assert(res_301 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias (type:const)");
  res_301->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias:0");
  auto res_302=network->addConstant(Dims2{192,192},mWeightsMap["const_302"]);
  assert(res_302 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight (type:const)");
  res_302->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight:0");
  auto res_303=network->addConstant(Dims2{1,192},mWeightsMap["const_303"]);
  assert(res_303 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias (type:const)");
  res_303->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias:0");
  auto res_304=network->addConstant(Dims2{192,768},mWeightsMap["const_304"]);
  assert(res_304 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight (type:const)");
  res_304->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight:0");
  auto res_305=network->addConstant(Dims2{1,768},mWeightsMap["const_305"]);
  assert(res_305 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias (type:const)");
  res_305->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias:0");
  auto res_306=network->addConstant(Dims2{768,192},mWeightsMap["const_306"]);
  assert(res_306 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.output.dense.weight (type:const)");
  res_306->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.output.dense.weight:0");
  auto res_307=network->addConstant(Dims2{1,192},mWeightsMap["const_307"]);
  assert(res_307 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.0.output.dense.bias (type:const)");
  res_307->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.0.output.dense.bias:0");
  auto res_308=network->addConstant(Dims2{192,192},mWeightsMap["const_308"]);
  assert(res_308 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight (type:const)");
  res_308->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight:0");
  auto res_309=network->addConstant(Dims2{1,192},mWeightsMap["const_309"]);
  assert(res_309 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias (type:const)");
  res_309->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias:0");
  auto res_310=network->addConstant(Dims2{192,192},mWeightsMap["const_310"]);
  assert(res_310 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight (type:const)");
  res_310->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight:0");
  auto res_311=network->addConstant(Dims2{1,192},mWeightsMap["const_311"]);
  assert(res_311 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias (type:const)");
  res_311->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias:0");
  auto res_312=network->addConstant(Dims2{192,192},mWeightsMap["const_312"]);
  assert(res_312 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight (type:const)");
  res_312->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight:0");
  auto res_313=network->addConstant(Dims2{1,192},mWeightsMap["const_313"]);
  assert(res_313 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias (type:const)");
  res_313->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias:0");
  auto res_314=network->addConstant(Dims2{192,192},mWeightsMap["const_314"]);
  assert(res_314 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight (type:const)");
  res_314->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight:0");
  auto res_315=network->addConstant(Dims2{1,192},mWeightsMap["const_315"]);
  assert(res_315 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias (type:const)");
  res_315->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias:0");
  auto res_316=network->addConstant(Dims2{192,768},mWeightsMap["const_316"]);
  assert(res_316 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight (type:const)");
  res_316->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight:0");
  auto res_317=network->addConstant(Dims2{1,768},mWeightsMap["const_317"]);
  assert(res_317 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias (type:const)");
  res_317->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias:0");
  auto res_318=network->addConstant(Dims2{768,192},mWeightsMap["const_318"]);
  assert(res_318 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.output.dense.weight (type:const)");
  res_318->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.output.dense.weight:0");
  auto res_319=network->addConstant(Dims2{1,192},mWeightsMap["const_319"]);
  assert(res_319 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.1.output.dense.bias (type:const)");
  res_319->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.1.output.dense.bias:0");
  auto res_320=network->addConstant(Dims2{192,192},mWeightsMap["const_320"]);
  assert(res_320 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight (type:const)");
  res_320->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight:0");
  auto res_321=network->addConstant(Dims2{1,192},mWeightsMap["const_321"]);
  assert(res_321 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias (type:const)");
  res_321->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias:0");
  auto res_322=network->addConstant(Dims2{192,192},mWeightsMap["const_322"]);
  assert(res_322 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight (type:const)");
  res_322->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight:0");
  auto res_323=network->addConstant(Dims2{1,192},mWeightsMap["const_323"]);
  assert(res_323 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias (type:const)");
  res_323->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias:0");
  auto res_324=network->addConstant(Dims2{192,192},mWeightsMap["const_324"]);
  assert(res_324 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight (type:const)");
  res_324->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight:0");
  auto res_325=network->addConstant(Dims2{1,192},mWeightsMap["const_325"]);
  assert(res_325 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias (type:const)");
  res_325->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias:0");
  auto res_326=network->addConstant(Dims2{192,192},mWeightsMap["const_326"]);
  assert(res_326 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight (type:const)");
  res_326->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight:0");
  auto res_327=network->addConstant(Dims2{1,192},mWeightsMap["const_327"]);
  assert(res_327 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias (type:const)");
  res_327->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias:0");
  auto res_328=network->addConstant(Dims2{192,768},mWeightsMap["const_328"]);
  assert(res_328 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight (type:const)");
  res_328->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight:0");
  auto res_329=network->addConstant(Dims2{1,768},mWeightsMap["const_329"]);
  assert(res_329 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias (type:const)");
  res_329->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias:0");
  auto res_330=network->addConstant(Dims2{768,192},mWeightsMap["const_330"]);
  assert(res_330 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.output.dense.weight (type:const)");
  res_330->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.output.dense.weight:0");
  auto res_331=network->addConstant(Dims2{1,192},mWeightsMap["const_331"]);
  assert(res_331 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.2.output.dense.bias (type:const)");
  res_331->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.2.output.dense.bias:0");
  auto res_332=network->addConstant(Dims2{192,192},mWeightsMap["const_332"]);
  assert(res_332 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight (type:const)");
  res_332->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight:0");
  auto res_333=network->addConstant(Dims2{1,192},mWeightsMap["const_333"]);
  assert(res_333 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias (type:const)");
  res_333->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias:0");
  auto res_334=network->addConstant(Dims2{192,192},mWeightsMap["const_334"]);
  assert(res_334 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight (type:const)");
  res_334->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight:0");
  auto res_335=network->addConstant(Dims2{1,192},mWeightsMap["const_335"]);
  assert(res_335 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias (type:const)");
  res_335->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias:0");
  auto res_336=network->addConstant(Dims2{192,192},mWeightsMap["const_336"]);
  assert(res_336 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight (type:const)");
  res_336->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight:0");
  auto res_337=network->addConstant(Dims2{1,192},mWeightsMap["const_337"]);
  assert(res_337 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias (type:const)");
  res_337->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias:0");
  auto res_338=network->addConstant(Dims2{192,192},mWeightsMap["const_338"]);
  assert(res_338 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight (type:const)");
  res_338->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight:0");
  auto res_339=network->addConstant(Dims2{1,192},mWeightsMap["const_339"]);
  assert(res_339 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias (type:const)");
  res_339->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias:0");
  auto res_340=network->addConstant(Dims2{192,768},mWeightsMap["const_340"]);
  assert(res_340 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight (type:const)");
  res_340->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight:0");
  auto res_341=network->addConstant(Dims2{1,768},mWeightsMap["const_341"]);
  assert(res_341 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias (type:const)");
  res_341->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias:0");
  auto res_342=network->addConstant(Dims2{768,192},mWeightsMap["const_342"]);
  assert(res_342 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.output.dense.weight (type:const)");
  res_342->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.output.dense.weight:0");
  auto res_343=network->addConstant(Dims2{1,192},mWeightsMap["const_343"]);
  assert(res_343 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.3.output.dense.bias (type:const)");
  res_343->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.3.output.dense.bias:0");
  auto res_344=network->addConstant(Dims2{192,192},mWeightsMap["const_344"]);
  assert(res_344 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight (type:const)");
  res_344->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight:0");
  auto res_345=network->addConstant(Dims2{1,192},mWeightsMap["const_345"]);
  assert(res_345 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias (type:const)");
  res_345->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias:0");
  auto res_346=network->addConstant(Dims2{192,192},mWeightsMap["const_346"]);
  assert(res_346 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight (type:const)");
  res_346->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight:0");
  auto res_347=network->addConstant(Dims2{1,192},mWeightsMap["const_347"]);
  assert(res_347 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias (type:const)");
  res_347->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias:0");
  auto res_348=network->addConstant(Dims2{192,192},mWeightsMap["const_348"]);
  assert(res_348 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight (type:const)");
  res_348->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight:0");
  auto res_349=network->addConstant(Dims2{1,192},mWeightsMap["const_349"]);
  assert(res_349 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias (type:const)");
  res_349->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias:0");
  auto res_350=network->addConstant(Dims2{192,192},mWeightsMap["const_350"]);
  assert(res_350 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight (type:const)");
  res_350->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight:0");
  auto res_351=network->addConstant(Dims2{1,192},mWeightsMap["const_351"]);
  assert(res_351 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias (type:const)");
  res_351->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias:0");
  auto res_352=network->addConstant(Dims2{192,768},mWeightsMap["const_352"]);
  assert(res_352 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight (type:const)");
  res_352->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight:0");
  auto res_353=network->addConstant(Dims2{1,768},mWeightsMap["const_353"]);
  assert(res_353 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias (type:const)");
  res_353->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias:0");
  auto res_354=network->addConstant(Dims2{768,192},mWeightsMap["const_354"]);
  assert(res_354 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.output.dense.weight (type:const)");
  res_354->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.output.dense.weight:0");
  auto res_355=network->addConstant(Dims2{1,192},mWeightsMap["const_355"]);
  assert(res_355 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.4.output.dense.bias (type:const)");
  res_355->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.4.output.dense.bias:0");
  auto res_356=network->addConstant(Dims2{192,192},mWeightsMap["const_356"]);
  assert(res_356 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight (type:const)");
  res_356->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight:0");
  auto res_357=network->addConstant(Dims2{1,192},mWeightsMap["const_357"]);
  assert(res_357 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias (type:const)");
  res_357->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias:0");
  auto res_358=network->addConstant(Dims2{192,192},mWeightsMap["const_358"]);
  assert(res_358 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight (type:const)");
  res_358->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight:0");
  auto res_359=network->addConstant(Dims2{1,192},mWeightsMap["const_359"]);
  assert(res_359 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias (type:const)");
  res_359->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias:0");
  auto res_360=network->addConstant(Dims2{192,192},mWeightsMap["const_360"]);
  assert(res_360 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight (type:const)");
  res_360->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight:0");
  auto res_361=network->addConstant(Dims2{1,192},mWeightsMap["const_361"]);
  assert(res_361 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias (type:const)");
  res_361->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias:0");
  auto res_362=network->addConstant(Dims2{192,192},mWeightsMap["const_362"]);
  assert(res_362 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight (type:const)");
  res_362->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight:0");
  auto res_363=network->addConstant(Dims2{1,192},mWeightsMap["const_363"]);
  assert(res_363 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias (type:const)");
  res_363->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias:0");
  auto res_364=network->addConstant(Dims2{192,768},mWeightsMap["const_364"]);
  assert(res_364 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight (type:const)");
  res_364->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight:0");
  auto res_365=network->addConstant(Dims2{1,768},mWeightsMap["const_365"]);
  assert(res_365 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias (type:const)");
  res_365->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias:0");
  auto res_366=network->addConstant(Dims2{768,192},mWeightsMap["const_366"]);
  assert(res_366 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.output.dense.weight (type:const)");
  res_366->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.output.dense.weight:0");
  auto res_367=network->addConstant(Dims2{1,192},mWeightsMap["const_367"]);
  assert(res_367 && "failed to build useragent_model.embeddingSequence.model.encoder.layer.5.output.dense.bias (type:const)");
  res_367->getOutput(0)->setName("useragent_model.embeddingSequence.model.encoder.layer.5.output.dense.bias:0");
  auto res_368=network->addConstant(Dims2{192,192},mWeightsMap["const_368"]);
  assert(res_368 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight (type:const)");
  res_368->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight:0");
  auto res_369=network->addConstant(Dims2{1,192},mWeightsMap["const_369"]);
  assert(res_369 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias (type:const)");
  res_369->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias:0");
  auto res_370=network->addConstant(Dims2{192,192},mWeightsMap["const_370"]);
  assert(res_370 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight (type:const)");
  res_370->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight:0");
  auto res_371=network->addConstant(Dims2{1,192},mWeightsMap["const_371"]);
  assert(res_371 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias (type:const)");
  res_371->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias:0");
  auto res_372=network->addConstant(Dims2{192,192},mWeightsMap["const_372"]);
  assert(res_372 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight (type:const)");
  res_372->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight:0");
  auto res_373=network->addConstant(Dims2{1,192},mWeightsMap["const_373"]);
  assert(res_373 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias (type:const)");
  res_373->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias:0");
  auto res_374=network->addConstant(Dims2{192,192},mWeightsMap["const_374"]);
  assert(res_374 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight (type:const)");
  res_374->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight:0");
  auto res_375=network->addConstant(Dims2{1,192},mWeightsMap["const_375"]);
  assert(res_375 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias (type:const)");
  res_375->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias:0");
  auto res_376=network->addConstant(Dims2{192,768},mWeightsMap["const_376"]);
  assert(res_376 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight (type:const)");
  res_376->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight:0");
  auto res_377=network->addConstant(Dims2{1,768},mWeightsMap["const_377"]);
  assert(res_377 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias (type:const)");
  res_377->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias:0");
  auto res_378=network->addConstant(Dims2{768,192},mWeightsMap["const_378"]);
  assert(res_378 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.output.dense.weight (type:const)");
  res_378->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.output.dense.weight:0");
  auto res_379=network->addConstant(Dims2{1,192},mWeightsMap["const_379"]);
  assert(res_379 && "failed to build collina_model.embeddingSequence.model.encoder.layer.0.output.dense.bias (type:const)");
  res_379->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.0.output.dense.bias:0");
  auto res_380=network->addConstant(Dims2{192,192},mWeightsMap["const_380"]);
  assert(res_380 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight (type:const)");
  res_380->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight:0");
  auto res_381=network->addConstant(Dims2{1,192},mWeightsMap["const_381"]);
  assert(res_381 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias (type:const)");
  res_381->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias:0");
  auto res_382=network->addConstant(Dims2{192,192},mWeightsMap["const_382"]);
  assert(res_382 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight (type:const)");
  res_382->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight:0");
  auto res_383=network->addConstant(Dims2{1,192},mWeightsMap["const_383"]);
  assert(res_383 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias (type:const)");
  res_383->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias:0");
  auto res_384=network->addConstant(Dims2{192,192},mWeightsMap["const_384"]);
  assert(res_384 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight (type:const)");
  res_384->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight:0");
  auto res_385=network->addConstant(Dims2{1,192},mWeightsMap["const_385"]);
  assert(res_385 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias (type:const)");
  res_385->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias:0");
  auto res_386=network->addConstant(Dims2{192,192},mWeightsMap["const_386"]);
  assert(res_386 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight (type:const)");
  res_386->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight:0");
  auto res_387=network->addConstant(Dims2{1,192},mWeightsMap["const_387"]);
  assert(res_387 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias (type:const)");
  res_387->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias:0");
  auto res_388=network->addConstant(Dims2{192,768},mWeightsMap["const_388"]);
  assert(res_388 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight (type:const)");
  res_388->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight:0");
  auto res_389=network->addConstant(Dims2{1,768},mWeightsMap["const_389"]);
  assert(res_389 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias (type:const)");
  res_389->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias:0");
  auto res_390=network->addConstant(Dims2{768,192},mWeightsMap["const_390"]);
  assert(res_390 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.output.dense.weight (type:const)");
  res_390->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.output.dense.weight:0");
  auto res_391=network->addConstant(Dims2{1,192},mWeightsMap["const_391"]);
  assert(res_391 && "failed to build collina_model.embeddingSequence.model.encoder.layer.1.output.dense.bias (type:const)");
  res_391->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.1.output.dense.bias:0");
  auto res_392=network->addConstant(Dims2{192,192},mWeightsMap["const_392"]);
  assert(res_392 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight (type:const)");
  res_392->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight:0");
  auto res_393=network->addConstant(Dims2{1,192},mWeightsMap["const_393"]);
  assert(res_393 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias (type:const)");
  res_393->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias:0");
  auto res_394=network->addConstant(Dims2{192,192},mWeightsMap["const_394"]);
  assert(res_394 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight (type:const)");
  res_394->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight:0");
  auto res_395=network->addConstant(Dims2{1,192},mWeightsMap["const_395"]);
  assert(res_395 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias (type:const)");
  res_395->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias:0");
  auto res_396=network->addConstant(Dims2{192,192},mWeightsMap["const_396"]);
  assert(res_396 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight (type:const)");
  res_396->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight:0");
  auto res_397=network->addConstant(Dims2{1,192},mWeightsMap["const_397"]);
  assert(res_397 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias (type:const)");
  res_397->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias:0");
  auto res_398=network->addConstant(Dims2{192,192},mWeightsMap["const_398"]);
  assert(res_398 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight (type:const)");
  res_398->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight:0");
  auto res_399=network->addConstant(Dims2{1,192},mWeightsMap["const_399"]);
  assert(res_399 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias (type:const)");
  res_399->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias:0");
  auto res_400=network->addConstant(Dims2{192,768},mWeightsMap["const_400"]);
  assert(res_400 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight (type:const)");
  res_400->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight:0");
  auto res_401=network->addConstant(Dims2{1,768},mWeightsMap["const_401"]);
  assert(res_401 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias (type:const)");
  res_401->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias:0");
  auto res_402=network->addConstant(Dims2{768,192},mWeightsMap["const_402"]);
  assert(res_402 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.output.dense.weight (type:const)");
  res_402->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.output.dense.weight:0");
  auto res_403=network->addConstant(Dims2{1,192},mWeightsMap["const_403"]);
  assert(res_403 && "failed to build collina_model.embeddingSequence.model.encoder.layer.2.output.dense.bias (type:const)");
  res_403->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.2.output.dense.bias:0");
  auto res_404=network->addConstant(Dims2{192,192},mWeightsMap["const_404"]);
  assert(res_404 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight (type:const)");
  res_404->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight:0");
  auto res_405=network->addConstant(Dims2{1,192},mWeightsMap["const_405"]);
  assert(res_405 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias (type:const)");
  res_405->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias:0");
  auto res_406=network->addConstant(Dims2{192,192},mWeightsMap["const_406"]);
  assert(res_406 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight (type:const)");
  res_406->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight:0");
  auto res_407=network->addConstant(Dims2{1,192},mWeightsMap["const_407"]);
  assert(res_407 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias (type:const)");
  res_407->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias:0");
  auto res_408=network->addConstant(Dims2{192,192},mWeightsMap["const_408"]);
  assert(res_408 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight (type:const)");
  res_408->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight:0");
  auto res_409=network->addConstant(Dims2{1,192},mWeightsMap["const_409"]);
  assert(res_409 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias (type:const)");
  res_409->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias:0");
  auto res_410=network->addConstant(Dims2{192,192},mWeightsMap["const_410"]);
  assert(res_410 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight (type:const)");
  res_410->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight:0");
  auto res_411=network->addConstant(Dims2{1,192},mWeightsMap["const_411"]);
  assert(res_411 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias (type:const)");
  res_411->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias:0");
  auto res_412=network->addConstant(Dims2{192,768},mWeightsMap["const_412"]);
  assert(res_412 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight (type:const)");
  res_412->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight:0");
  auto res_413=network->addConstant(Dims2{1,768},mWeightsMap["const_413"]);
  assert(res_413 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias (type:const)");
  res_413->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias:0");
  auto res_414=network->addConstant(Dims2{768,192},mWeightsMap["const_414"]);
  assert(res_414 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.output.dense.weight (type:const)");
  res_414->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.output.dense.weight:0");
  auto res_415=network->addConstant(Dims2{1,192},mWeightsMap["const_415"]);
  assert(res_415 && "failed to build collina_model.embeddingSequence.model.encoder.layer.3.output.dense.bias (type:const)");
  res_415->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.3.output.dense.bias:0");
  auto res_416=network->addConstant(Dims2{192,192},mWeightsMap["const_416"]);
  assert(res_416 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight (type:const)");
  res_416->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight:0");
  auto res_417=network->addConstant(Dims2{1,192},mWeightsMap["const_417"]);
  assert(res_417 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias (type:const)");
  res_417->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias:0");
  auto res_418=network->addConstant(Dims2{192,192},mWeightsMap["const_418"]);
  assert(res_418 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight (type:const)");
  res_418->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight:0");
  auto res_419=network->addConstant(Dims2{1,192},mWeightsMap["const_419"]);
  assert(res_419 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias (type:const)");
  res_419->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias:0");
  auto res_420=network->addConstant(Dims2{192,192},mWeightsMap["const_420"]);
  assert(res_420 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight (type:const)");
  res_420->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight:0");
  auto res_421=network->addConstant(Dims2{1,192},mWeightsMap["const_421"]);
  assert(res_421 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias (type:const)");
  res_421->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias:0");
  auto res_422=network->addConstant(Dims2{192,192},mWeightsMap["const_422"]);
  assert(res_422 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight (type:const)");
  res_422->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight:0");
  auto res_423=network->addConstant(Dims2{1,192},mWeightsMap["const_423"]);
  assert(res_423 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias (type:const)");
  res_423->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias:0");
  auto res_424=network->addConstant(Dims2{192,768},mWeightsMap["const_424"]);
  assert(res_424 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight (type:const)");
  res_424->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight:0");
  auto res_425=network->addConstant(Dims2{1,768},mWeightsMap["const_425"]);
  assert(res_425 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias (type:const)");
  res_425->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias:0");
  auto res_426=network->addConstant(Dims2{768,192},mWeightsMap["const_426"]);
  assert(res_426 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.output.dense.weight (type:const)");
  res_426->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.output.dense.weight:0");
  auto res_427=network->addConstant(Dims2{1,192},mWeightsMap["const_427"]);
  assert(res_427 && "failed to build collina_model.embeddingSequence.model.encoder.layer.4.output.dense.bias (type:const)");
  res_427->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.4.output.dense.bias:0");
  auto res_428=network->addConstant(Dims2{192,192},mWeightsMap["const_428"]);
  assert(res_428 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight (type:const)");
  res_428->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight:0");
  auto res_429=network->addConstant(Dims2{1,192},mWeightsMap["const_429"]);
  assert(res_429 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias (type:const)");
  res_429->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias:0");
  auto res_430=network->addConstant(Dims2{192,192},mWeightsMap["const_430"]);
  assert(res_430 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight (type:const)");
  res_430->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight:0");
  auto res_431=network->addConstant(Dims2{1,192},mWeightsMap["const_431"]);
  assert(res_431 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias (type:const)");
  res_431->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias:0");
  auto res_432=network->addConstant(Dims2{192,192},mWeightsMap["const_432"]);
  assert(res_432 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight (type:const)");
  res_432->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight:0");
  auto res_433=network->addConstant(Dims2{1,192},mWeightsMap["const_433"]);
  assert(res_433 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias (type:const)");
  res_433->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias:0");
  auto res_434=network->addConstant(Dims2{192,192},mWeightsMap["const_434"]);
  assert(res_434 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight (type:const)");
  res_434->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight:0");
  auto res_435=network->addConstant(Dims2{1,192},mWeightsMap["const_435"]);
  assert(res_435 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias (type:const)");
  res_435->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias:0");
  auto res_436=network->addConstant(Dims2{192,768},mWeightsMap["const_436"]);
  assert(res_436 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight (type:const)");
  res_436->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight:0");
  auto res_437=network->addConstant(Dims2{1,768},mWeightsMap["const_437"]);
  assert(res_437 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias (type:const)");
  res_437->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias:0");
  auto res_438=network->addConstant(Dims2{768,192},mWeightsMap["const_438"]);
  assert(res_438 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.output.dense.weight (type:const)");
  res_438->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.output.dense.weight:0");
  auto res_439=network->addConstant(Dims2{1,192},mWeightsMap["const_439"]);
  assert(res_439 && "failed to build collina_model.embeddingSequence.model.encoder.layer.5.output.dense.bias (type:const)");
  res_439->getOutput(0)->setName("collina_model.embeddingSequence.model.encoder.layer.5.output.dense.bias:0");
  auto res_440=network->addConstant(Dims2{192,192},mWeightsMap["const_440"]);
  assert(res_440 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight (type:const)");
  res_440->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight:0");
  auto res_441=network->addConstant(Dims2{1,192},mWeightsMap["const_441"]);
  assert(res_441 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias (type:const)");
  res_441->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias:0");
  auto res_442=network->addConstant(Dims2{192,192},mWeightsMap["const_442"]);
  assert(res_442 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight (type:const)");
  res_442->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight:0");
  auto res_443=network->addConstant(Dims2{1,192},mWeightsMap["const_443"]);
  assert(res_443 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias (type:const)");
  res_443->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias:0");
  auto res_444=network->addConstant(Dims2{192,192},mWeightsMap["const_444"]);
  assert(res_444 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight (type:const)");
  res_444->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight:0");
  auto res_445=network->addConstant(Dims2{1,192},mWeightsMap["const_445"]);
  assert(res_445 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias (type:const)");
  res_445->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias:0");
  auto res_446=network->addConstant(Dims2{192,192},mWeightsMap["const_446"]);
  assert(res_446 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight (type:const)");
  res_446->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight:0");
  auto res_447=network->addConstant(Dims2{1,192},mWeightsMap["const_447"]);
  assert(res_447 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias (type:const)");
  res_447->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias:0");
  auto res_448=network->addConstant(Dims2{192,768},mWeightsMap["const_448"]);
  assert(res_448 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight (type:const)");
  res_448->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight:0");
  auto res_449=network->addConstant(Dims2{1,768},mWeightsMap["const_449"]);
  assert(res_449 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias (type:const)");
  res_449->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias:0");
  auto res_450=network->addConstant(Dims2{768,192},mWeightsMap["const_450"]);
  assert(res_450 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.output.dense.weight (type:const)");
  res_450->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.output.dense.weight:0");
  auto res_451=network->addConstant(Dims2{1,192},mWeightsMap["const_451"]);
  assert(res_451 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.0.output.dense.bias (type:const)");
  res_451->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.0.output.dense.bias:0");
  auto res_452=network->addConstant(Dims2{192,192},mWeightsMap["const_452"]);
  assert(res_452 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight (type:const)");
  res_452->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight:0");
  auto res_453=network->addConstant(Dims2{1,192},mWeightsMap["const_453"]);
  assert(res_453 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias (type:const)");
  res_453->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias:0");
  auto res_454=network->addConstant(Dims2{192,192},mWeightsMap["const_454"]);
  assert(res_454 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight (type:const)");
  res_454->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight:0");
  auto res_455=network->addConstant(Dims2{1,192},mWeightsMap["const_455"]);
  assert(res_455 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias (type:const)");
  res_455->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias:0");
  auto res_456=network->addConstant(Dims2{192,192},mWeightsMap["const_456"]);
  assert(res_456 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight (type:const)");
  res_456->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight:0");
  auto res_457=network->addConstant(Dims2{1,192},mWeightsMap["const_457"]);
  assert(res_457 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias (type:const)");
  res_457->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias:0");
  auto res_458=network->addConstant(Dims2{192,192},mWeightsMap["const_458"]);
  assert(res_458 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight (type:const)");
  res_458->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight:0");
  auto res_459=network->addConstant(Dims2{1,192},mWeightsMap["const_459"]);
  assert(res_459 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias (type:const)");
  res_459->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias:0");
  auto res_460=network->addConstant(Dims2{192,768},mWeightsMap["const_460"]);
  assert(res_460 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight (type:const)");
  res_460->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight:0");
  auto res_461=network->addConstant(Dims2{1,768},mWeightsMap["const_461"]);
  assert(res_461 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias (type:const)");
  res_461->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias:0");
  auto res_462=network->addConstant(Dims2{768,192},mWeightsMap["const_462"]);
  assert(res_462 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.output.dense.weight (type:const)");
  res_462->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.output.dense.weight:0");
  auto res_463=network->addConstant(Dims2{1,192},mWeightsMap["const_463"]);
  assert(res_463 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.1.output.dense.bias (type:const)");
  res_463->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.1.output.dense.bias:0");
  auto res_464=network->addConstant(Dims2{192,192},mWeightsMap["const_464"]);
  assert(res_464 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight (type:const)");
  res_464->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight:0");
  auto res_465=network->addConstant(Dims2{1,192},mWeightsMap["const_465"]);
  assert(res_465 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias (type:const)");
  res_465->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias:0");
  auto res_466=network->addConstant(Dims2{192,192},mWeightsMap["const_466"]);
  assert(res_466 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight (type:const)");
  res_466->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight:0");
  auto res_467=network->addConstant(Dims2{1,192},mWeightsMap["const_467"]);
  assert(res_467 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias (type:const)");
  res_467->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias:0");
  auto res_468=network->addConstant(Dims2{192,192},mWeightsMap["const_468"]);
  assert(res_468 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight (type:const)");
  res_468->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight:0");
  auto res_469=network->addConstant(Dims2{1,192},mWeightsMap["const_469"]);
  assert(res_469 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias (type:const)");
  res_469->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias:0");
  auto res_470=network->addConstant(Dims2{192,192},mWeightsMap["const_470"]);
  assert(res_470 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight (type:const)");
  res_470->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight:0");
  auto res_471=network->addConstant(Dims2{1,192},mWeightsMap["const_471"]);
  assert(res_471 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias (type:const)");
  res_471->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias:0");
  auto res_472=network->addConstant(Dims2{192,768},mWeightsMap["const_472"]);
  assert(res_472 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight (type:const)");
  res_472->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight:0");
  auto res_473=network->addConstant(Dims2{1,768},mWeightsMap["const_473"]);
  assert(res_473 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias (type:const)");
  res_473->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias:0");
  auto res_474=network->addConstant(Dims2{768,192},mWeightsMap["const_474"]);
  assert(res_474 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.output.dense.weight (type:const)");
  res_474->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.output.dense.weight:0");
  auto res_475=network->addConstant(Dims2{1,192},mWeightsMap["const_475"]);
  assert(res_475 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.2.output.dense.bias (type:const)");
  res_475->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.2.output.dense.bias:0");
  auto res_476=network->addConstant(Dims2{192,192},mWeightsMap["const_476"]);
  assert(res_476 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight (type:const)");
  res_476->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight:0");
  auto res_477=network->addConstant(Dims2{1,192},mWeightsMap["const_477"]);
  assert(res_477 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias (type:const)");
  res_477->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias:0");
  auto res_478=network->addConstant(Dims2{192,192},mWeightsMap["const_478"]);
  assert(res_478 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight (type:const)");
  res_478->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight:0");
  auto res_479=network->addConstant(Dims2{1,192},mWeightsMap["const_479"]);
  assert(res_479 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias (type:const)");
  res_479->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias:0");
  auto res_480=network->addConstant(Dims2{192,192},mWeightsMap["const_480"]);
  assert(res_480 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight (type:const)");
  res_480->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight:0");
  auto res_481=network->addConstant(Dims2{1,192},mWeightsMap["const_481"]);
  assert(res_481 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias (type:const)");
  res_481->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias:0");
  auto res_482=network->addConstant(Dims2{192,192},mWeightsMap["const_482"]);
  assert(res_482 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight (type:const)");
  res_482->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight:0");
  auto res_483=network->addConstant(Dims2{1,192},mWeightsMap["const_483"]);
  assert(res_483 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias (type:const)");
  res_483->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias:0");
  auto res_484=network->addConstant(Dims2{192,768},mWeightsMap["const_484"]);
  assert(res_484 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight (type:const)");
  res_484->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight:0");
  auto res_485=network->addConstant(Dims2{1,768},mWeightsMap["const_485"]);
  assert(res_485 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias (type:const)");
  res_485->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias:0");
  auto res_486=network->addConstant(Dims2{768,192},mWeightsMap["const_486"]);
  assert(res_486 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.output.dense.weight (type:const)");
  res_486->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.output.dense.weight:0");
  auto res_487=network->addConstant(Dims2{1,192},mWeightsMap["const_487"]);
  assert(res_487 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.3.output.dense.bias (type:const)");
  res_487->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.3.output.dense.bias:0");
  auto res_488=network->addConstant(Dims2{192,192},mWeightsMap["const_488"]);
  assert(res_488 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight (type:const)");
  res_488->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight:0");
  auto res_489=network->addConstant(Dims2{1,192},mWeightsMap["const_489"]);
  assert(res_489 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias (type:const)");
  res_489->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias:0");
  auto res_490=network->addConstant(Dims2{192,192},mWeightsMap["const_490"]);
  assert(res_490 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight (type:const)");
  res_490->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight:0");
  auto res_491=network->addConstant(Dims2{1,192},mWeightsMap["const_491"]);
  assert(res_491 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias (type:const)");
  res_491->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias:0");
  auto res_492=network->addConstant(Dims2{192,192},mWeightsMap["const_492"]);
  assert(res_492 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight (type:const)");
  res_492->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight:0");
  auto res_493=network->addConstant(Dims2{1,192},mWeightsMap["const_493"]);
  assert(res_493 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias (type:const)");
  res_493->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias:0");
  auto res_494=network->addConstant(Dims2{192,192},mWeightsMap["const_494"]);
  assert(res_494 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight (type:const)");
  res_494->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight:0");
  auto res_495=network->addConstant(Dims2{1,192},mWeightsMap["const_495"]);
  assert(res_495 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias (type:const)");
  res_495->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias:0");
  auto res_496=network->addConstant(Dims2{192,768},mWeightsMap["const_496"]);
  assert(res_496 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight (type:const)");
  res_496->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight:0");
  auto res_497=network->addConstant(Dims2{1,768},mWeightsMap["const_497"]);
  assert(res_497 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias (type:const)");
  res_497->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias:0");
  auto res_498=network->addConstant(Dims2{768,192},mWeightsMap["const_498"]);
  assert(res_498 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.output.dense.weight (type:const)");
  res_498->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.output.dense.weight:0");
  auto res_499=network->addConstant(Dims2{1,192},mWeightsMap["const_499"]);
  assert(res_499 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.4.output.dense.bias (type:const)");
  res_499->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.4.output.dense.bias:0");
  auto res_500=network->addConstant(Dims2{192,192},mWeightsMap["const_500"]);
  assert(res_500 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight (type:const)");
  res_500->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight:0");
  auto res_501=network->addConstant(Dims2{1,192},mWeightsMap["const_501"]);
  assert(res_501 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias (type:const)");
  res_501->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias:0");
  auto res_502=network->addConstant(Dims2{192,192},mWeightsMap["const_502"]);
  assert(res_502 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight (type:const)");
  res_502->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight:0");
  auto res_503=network->addConstant(Dims2{1,192},mWeightsMap["const_503"]);
  assert(res_503 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias (type:const)");
  res_503->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias:0");
  auto res_504=network->addConstant(Dims2{192,192},mWeightsMap["const_504"]);
  assert(res_504 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight (type:const)");
  res_504->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight:0");
  auto res_505=network->addConstant(Dims2{1,192},mWeightsMap["const_505"]);
  assert(res_505 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias (type:const)");
  res_505->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias:0");
  auto res_506=network->addConstant(Dims2{192,192},mWeightsMap["const_506"]);
  assert(res_506 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight (type:const)");
  res_506->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight:0");
  auto res_507=network->addConstant(Dims2{1,192},mWeightsMap["const_507"]);
  assert(res_507 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias (type:const)");
  res_507->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias:0");
  auto res_508=network->addConstant(Dims2{192,768},mWeightsMap["const_508"]);
  assert(res_508 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight (type:const)");
  res_508->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight:0");
  auto res_509=network->addConstant(Dims2{1,768},mWeightsMap["const_509"]);
  assert(res_509 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias (type:const)");
  res_509->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias:0");
  auto res_510=network->addConstant(Dims2{768,192},mWeightsMap["const_510"]);
  assert(res_510 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.output.dense.weight (type:const)");
  res_510->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.output.dense.weight:0");
  auto res_511=network->addConstant(Dims2{1,192},mWeightsMap["const_511"]);
  assert(res_511 && "failed to build regsrc_model.embeddingSequence.model.encoder.layer.5.output.dense.bias (type:const)");
  res_511->getOutput(0)->setName("regsrc_model.embeddingSequence.model.encoder.layer.5.output.dense.bias:0");
  auto res_512=network->addConstant(Dims2{192,192},mWeightsMap["const_512"]);
  assert(res_512 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight (type:const)");
  res_512->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight:0");
  auto res_513=network->addConstant(Dims2{1,192},mWeightsMap["const_513"]);
  assert(res_513 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias (type:const)");
  res_513->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias:0");
  auto res_514=network->addConstant(Dims2{192,192},mWeightsMap["const_514"]);
  assert(res_514 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight (type:const)");
  res_514->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight:0");
  auto res_515=network->addConstant(Dims2{1,192},mWeightsMap["const_515"]);
  assert(res_515 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias (type:const)");
  res_515->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias:0");
  auto res_516=network->addConstant(Dims2{192,192},mWeightsMap["const_516"]);
  assert(res_516 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight (type:const)");
  res_516->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight:0");
  auto res_517=network->addConstant(Dims2{1,192},mWeightsMap["const_517"]);
  assert(res_517 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias (type:const)");
  res_517->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias:0");
  auto res_518=network->addConstant(Dims2{192,192},mWeightsMap["const_518"]);
  assert(res_518 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight (type:const)");
  res_518->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight:0");
  auto res_519=network->addConstant(Dims2{1,192},mWeightsMap["const_519"]);
  assert(res_519 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias (type:const)");
  res_519->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias:0");
  auto res_520=network->addConstant(Dims2{192,768},mWeightsMap["const_520"]);
  assert(res_520 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight (type:const)");
  res_520->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight:0");
  auto res_521=network->addConstant(Dims2{1,768},mWeightsMap["const_521"]);
  assert(res_521 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias (type:const)");
  res_521->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias:0");
  auto res_522=network->addConstant(Dims2{768,192},mWeightsMap["const_522"]);
  assert(res_522 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.output.dense.weight (type:const)");
  res_522->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.output.dense.weight:0");
  auto res_523=network->addConstant(Dims2{1,192},mWeightsMap["const_523"]);
  assert(res_523 && "failed to build regip_model.embeddingSequence.model.encoder.layer.0.output.dense.bias (type:const)");
  res_523->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.0.output.dense.bias:0");
  auto res_524=network->addConstant(Dims2{192,192},mWeightsMap["const_524"]);
  assert(res_524 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight (type:const)");
  res_524->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight:0");
  auto res_525=network->addConstant(Dims2{1,192},mWeightsMap["const_525"]);
  assert(res_525 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias (type:const)");
  res_525->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias:0");
  auto res_526=network->addConstant(Dims2{192,192},mWeightsMap["const_526"]);
  assert(res_526 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight (type:const)");
  res_526->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight:0");
  auto res_527=network->addConstant(Dims2{1,192},mWeightsMap["const_527"]);
  assert(res_527 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias (type:const)");
  res_527->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias:0");
  auto res_528=network->addConstant(Dims2{192,192},mWeightsMap["const_528"]);
  assert(res_528 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight (type:const)");
  res_528->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight:0");
  auto res_529=network->addConstant(Dims2{1,192},mWeightsMap["const_529"]);
  assert(res_529 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias (type:const)");
  res_529->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias:0");
  auto res_530=network->addConstant(Dims2{192,192},mWeightsMap["const_530"]);
  assert(res_530 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight (type:const)");
  res_530->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight:0");
  auto res_531=network->addConstant(Dims2{1,192},mWeightsMap["const_531"]);
  assert(res_531 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias (type:const)");
  res_531->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias:0");
  auto res_532=network->addConstant(Dims2{192,768},mWeightsMap["const_532"]);
  assert(res_532 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight (type:const)");
  res_532->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight:0");
  auto res_533=network->addConstant(Dims2{1,768},mWeightsMap["const_533"]);
  assert(res_533 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias (type:const)");
  res_533->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias:0");
  auto res_534=network->addConstant(Dims2{768,192},mWeightsMap["const_534"]);
  assert(res_534 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.output.dense.weight (type:const)");
  res_534->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.output.dense.weight:0");
  auto res_535=network->addConstant(Dims2{1,192},mWeightsMap["const_535"]);
  assert(res_535 && "failed to build regip_model.embeddingSequence.model.encoder.layer.1.output.dense.bias (type:const)");
  res_535->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.1.output.dense.bias:0");
  auto res_536=network->addConstant(Dims2{192,192},mWeightsMap["const_536"]);
  assert(res_536 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight (type:const)");
  res_536->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight:0");
  auto res_537=network->addConstant(Dims2{1,192},mWeightsMap["const_537"]);
  assert(res_537 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias (type:const)");
  res_537->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias:0");
  auto res_538=network->addConstant(Dims2{192,192},mWeightsMap["const_538"]);
  assert(res_538 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight (type:const)");
  res_538->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight:0");
  auto res_539=network->addConstant(Dims2{1,192},mWeightsMap["const_539"]);
  assert(res_539 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias (type:const)");
  res_539->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias:0");
  auto res_540=network->addConstant(Dims2{192,192},mWeightsMap["const_540"]);
  assert(res_540 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight (type:const)");
  res_540->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight:0");
  auto res_541=network->addConstant(Dims2{1,192},mWeightsMap["const_541"]);
  assert(res_541 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias (type:const)");
  res_541->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias:0");
  auto res_542=network->addConstant(Dims2{192,192},mWeightsMap["const_542"]);
  assert(res_542 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight (type:const)");
  res_542->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight:0");
  auto res_543=network->addConstant(Dims2{1,192},mWeightsMap["const_543"]);
  assert(res_543 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias (type:const)");
  res_543->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias:0");
  auto res_544=network->addConstant(Dims2{192,768},mWeightsMap["const_544"]);
  assert(res_544 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight (type:const)");
  res_544->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight:0");
  auto res_545=network->addConstant(Dims2{1,768},mWeightsMap["const_545"]);
  assert(res_545 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias (type:const)");
  res_545->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias:0");
  auto res_546=network->addConstant(Dims2{768,192},mWeightsMap["const_546"]);
  assert(res_546 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.output.dense.weight (type:const)");
  res_546->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.output.dense.weight:0");
  auto res_547=network->addConstant(Dims2{1,192},mWeightsMap["const_547"]);
  assert(res_547 && "failed to build regip_model.embeddingSequence.model.encoder.layer.2.output.dense.bias (type:const)");
  res_547->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.2.output.dense.bias:0");
  auto res_548=network->addConstant(Dims2{192,192},mWeightsMap["const_548"]);
  assert(res_548 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight (type:const)");
  res_548->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight:0");
  auto res_549=network->addConstant(Dims2{1,192},mWeightsMap["const_549"]);
  assert(res_549 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias (type:const)");
  res_549->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias:0");
  auto res_550=network->addConstant(Dims2{192,192},mWeightsMap["const_550"]);
  assert(res_550 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight (type:const)");
  res_550->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight:0");
  auto res_551=network->addConstant(Dims2{1,192},mWeightsMap["const_551"]);
  assert(res_551 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias (type:const)");
  res_551->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias:0");
  auto res_552=network->addConstant(Dims2{192,192},mWeightsMap["const_552"]);
  assert(res_552 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight (type:const)");
  res_552->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight:0");
  auto res_553=network->addConstant(Dims2{1,192},mWeightsMap["const_553"]);
  assert(res_553 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias (type:const)");
  res_553->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias:0");
  auto res_554=network->addConstant(Dims2{192,192},mWeightsMap["const_554"]);
  assert(res_554 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight (type:const)");
  res_554->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight:0");
  auto res_555=network->addConstant(Dims2{1,192},mWeightsMap["const_555"]);
  assert(res_555 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias (type:const)");
  res_555->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias:0");
  auto res_556=network->addConstant(Dims2{192,768},mWeightsMap["const_556"]);
  assert(res_556 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight (type:const)");
  res_556->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight:0");
  auto res_557=network->addConstant(Dims2{1,768},mWeightsMap["const_557"]);
  assert(res_557 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias (type:const)");
  res_557->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias:0");
  auto res_558=network->addConstant(Dims2{768,192},mWeightsMap["const_558"]);
  assert(res_558 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.output.dense.weight (type:const)");
  res_558->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.output.dense.weight:0");
  auto res_559=network->addConstant(Dims2{1,192},mWeightsMap["const_559"]);
  assert(res_559 && "failed to build regip_model.embeddingSequence.model.encoder.layer.3.output.dense.bias (type:const)");
  res_559->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.3.output.dense.bias:0");
  auto res_560=network->addConstant(Dims2{192,192},mWeightsMap["const_560"]);
  assert(res_560 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight (type:const)");
  res_560->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight:0");
  auto res_561=network->addConstant(Dims2{1,192},mWeightsMap["const_561"]);
  assert(res_561 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias (type:const)");
  res_561->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias:0");
  auto res_562=network->addConstant(Dims2{192,192},mWeightsMap["const_562"]);
  assert(res_562 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight (type:const)");
  res_562->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight:0");
  auto res_563=network->addConstant(Dims2{1,192},mWeightsMap["const_563"]);
  assert(res_563 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias (type:const)");
  res_563->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias:0");
  auto res_564=network->addConstant(Dims2{192,192},mWeightsMap["const_564"]);
  assert(res_564 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight (type:const)");
  res_564->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight:0");
  auto res_565=network->addConstant(Dims2{1,192},mWeightsMap["const_565"]);
  assert(res_565 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias (type:const)");
  res_565->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias:0");
  auto res_566=network->addConstant(Dims2{192,192},mWeightsMap["const_566"]);
  assert(res_566 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight (type:const)");
  res_566->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight:0");
  auto res_567=network->addConstant(Dims2{1,192},mWeightsMap["const_567"]);
  assert(res_567 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias (type:const)");
  res_567->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias:0");
  auto res_568=network->addConstant(Dims2{192,768},mWeightsMap["const_568"]);
  assert(res_568 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight (type:const)");
  res_568->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight:0");
  auto res_569=network->addConstant(Dims2{1,768},mWeightsMap["const_569"]);
  assert(res_569 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias (type:const)");
  res_569->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias:0");
  auto res_570=network->addConstant(Dims2{768,192},mWeightsMap["const_570"]);
  assert(res_570 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.output.dense.weight (type:const)");
  res_570->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.output.dense.weight:0");
  auto res_571=network->addConstant(Dims2{1,192},mWeightsMap["const_571"]);
  assert(res_571 && "failed to build regip_model.embeddingSequence.model.encoder.layer.4.output.dense.bias (type:const)");
  res_571->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.4.output.dense.bias:0");
  auto res_572=network->addConstant(Dims2{192,192},mWeightsMap["const_572"]);
  assert(res_572 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight (type:const)");
  res_572->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight:0");
  auto res_573=network->addConstant(Dims2{1,192},mWeightsMap["const_573"]);
  assert(res_573 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias (type:const)");
  res_573->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias:0");
  auto res_574=network->addConstant(Dims2{192,192},mWeightsMap["const_574"]);
  assert(res_574 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight (type:const)");
  res_574->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight:0");
  auto res_575=network->addConstant(Dims2{1,192},mWeightsMap["const_575"]);
  assert(res_575 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias (type:const)");
  res_575->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias:0");
  auto res_576=network->addConstant(Dims2{192,192},mWeightsMap["const_576"]);
  assert(res_576 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight (type:const)");
  res_576->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight:0");
  auto res_577=network->addConstant(Dims2{1,192},mWeightsMap["const_577"]);
  assert(res_577 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias (type:const)");
  res_577->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias:0");
  auto res_578=network->addConstant(Dims2{192,192},mWeightsMap["const_578"]);
  assert(res_578 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight (type:const)");
  res_578->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight:0");
  auto res_579=network->addConstant(Dims2{1,192},mWeightsMap["const_579"]);
  assert(res_579 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias (type:const)");
  res_579->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias:0");
  auto res_580=network->addConstant(Dims2{192,768},mWeightsMap["const_580"]);
  assert(res_580 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight (type:const)");
  res_580->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight:0");
  auto res_581=network->addConstant(Dims2{1,768},mWeightsMap["const_581"]);
  assert(res_581 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias (type:const)");
  res_581->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias:0");
  auto res_582=network->addConstant(Dims2{768,192},mWeightsMap["const_582"]);
  assert(res_582 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.output.dense.weight (type:const)");
  res_582->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.output.dense.weight:0");
  auto res_583=network->addConstant(Dims2{1,192},mWeightsMap["const_583"]);
  assert(res_583 && "failed to build regip_model.embeddingSequence.model.encoder.layer.5.output.dense.bias (type:const)");
  res_583->getOutput(0)->setName("regip_model.embeddingSequence.model.encoder.layer.5.output.dense.bias:0");
  auto res_584=network->addConstant(Dims2{192,192},mWeightsMap["const_584"]);
  assert(res_584 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight (type:const)");
  res_584->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight:0");
  auto res_585=network->addConstant(Dims2{1,192},mWeightsMap["const_585"]);
  assert(res_585 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias (type:const)");
  res_585->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias:0");
  auto res_586=network->addConstant(Dims2{192,192},mWeightsMap["const_586"]);
  assert(res_586 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight (type:const)");
  res_586->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight:0");
  auto res_587=network->addConstant(Dims2{1,192},mWeightsMap["const_587"]);
  assert(res_587 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias (type:const)");
  res_587->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias:0");
  auto res_588=network->addConstant(Dims2{192,192},mWeightsMap["const_588"]);
  assert(res_588 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight (type:const)");
  res_588->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight:0");
  auto res_589=network->addConstant(Dims2{1,192},mWeightsMap["const_589"]);
  assert(res_589 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias (type:const)");
  res_589->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias:0");
  auto res_590=network->addConstant(Dims2{192,192},mWeightsMap["const_590"]);
  assert(res_590 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight (type:const)");
  res_590->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight:0");
  auto res_591=network->addConstant(Dims2{1,192},mWeightsMap["const_591"]);
  assert(res_591 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias (type:const)");
  res_591->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias:0");
  auto res_592=network->addConstant(Dims2{192,768},mWeightsMap["const_592"]);
  assert(res_592 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight (type:const)");
  res_592->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight:0");
  auto res_593=network->addConstant(Dims2{1,768},mWeightsMap["const_593"]);
  assert(res_593 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias (type:const)");
  res_593->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias:0");
  auto res_594=network->addConstant(Dims2{768,192},mWeightsMap["const_594"]);
  assert(res_594 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.output.dense.weight (type:const)");
  res_594->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.output.dense.weight:0");
  auto res_595=network->addConstant(Dims2{1,192},mWeightsMap["const_595"]);
  assert(res_595 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.0.output.dense.bias (type:const)");
  res_595->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.0.output.dense.bias:0");
  auto res_596=network->addConstant(Dims2{192,192},mWeightsMap["const_596"]);
  assert(res_596 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight (type:const)");
  res_596->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight:0");
  auto res_597=network->addConstant(Dims2{1,192},mWeightsMap["const_597"]);
  assert(res_597 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias (type:const)");
  res_597->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias:0");
  auto res_598=network->addConstant(Dims2{192,192},mWeightsMap["const_598"]);
  assert(res_598 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight (type:const)");
  res_598->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight:0");
  auto res_599=network->addConstant(Dims2{1,192},mWeightsMap["const_599"]);
  assert(res_599 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias (type:const)");
  res_599->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias:0");
  auto res_600=network->addConstant(Dims2{192,192},mWeightsMap["const_600"]);
  assert(res_600 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight (type:const)");
  res_600->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight:0");
  auto res_601=network->addConstant(Dims2{1,192},mWeightsMap["const_601"]);
  assert(res_601 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias (type:const)");
  res_601->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias:0");
  auto res_602=network->addConstant(Dims2{192,192},mWeightsMap["const_602"]);
  assert(res_602 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight (type:const)");
  res_602->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight:0");
  auto res_603=network->addConstant(Dims2{1,192},mWeightsMap["const_603"]);
  assert(res_603 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias (type:const)");
  res_603->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias:0");
  auto res_604=network->addConstant(Dims2{192,768},mWeightsMap["const_604"]);
  assert(res_604 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight (type:const)");
  res_604->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight:0");
  auto res_605=network->addConstant(Dims2{1,768},mWeightsMap["const_605"]);
  assert(res_605 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias (type:const)");
  res_605->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias:0");
  auto res_606=network->addConstant(Dims2{768,192},mWeightsMap["const_606"]);
  assert(res_606 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.output.dense.weight (type:const)");
  res_606->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.output.dense.weight:0");
  auto res_607=network->addConstant(Dims2{1,192},mWeightsMap["const_607"]);
  assert(res_607 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.1.output.dense.bias (type:const)");
  res_607->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.1.output.dense.bias:0");
  auto res_608=network->addConstant(Dims2{192,192},mWeightsMap["const_608"]);
  assert(res_608 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight (type:const)");
  res_608->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight:0");
  auto res_609=network->addConstant(Dims2{1,192},mWeightsMap["const_609"]);
  assert(res_609 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias (type:const)");
  res_609->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias:0");
  auto res_610=network->addConstant(Dims2{192,192},mWeightsMap["const_610"]);
  assert(res_610 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight (type:const)");
  res_610->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight:0");
  auto res_611=network->addConstant(Dims2{1,192},mWeightsMap["const_611"]);
  assert(res_611 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias (type:const)");
  res_611->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias:0");
  auto res_612=network->addConstant(Dims2{192,192},mWeightsMap["const_612"]);
  assert(res_612 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight (type:const)");
  res_612->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight:0");
  auto res_613=network->addConstant(Dims2{1,192},mWeightsMap["const_613"]);
  assert(res_613 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias (type:const)");
  res_613->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias:0");
  auto res_614=network->addConstant(Dims2{192,192},mWeightsMap["const_614"]);
  assert(res_614 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight (type:const)");
  res_614->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight:0");
  auto res_615=network->addConstant(Dims2{1,192},mWeightsMap["const_615"]);
  assert(res_615 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias (type:const)");
  res_615->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias:0");
  auto res_616=network->addConstant(Dims2{192,768},mWeightsMap["const_616"]);
  assert(res_616 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight (type:const)");
  res_616->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight:0");
  auto res_617=network->addConstant(Dims2{1,768},mWeightsMap["const_617"]);
  assert(res_617 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias (type:const)");
  res_617->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias:0");
  auto res_618=network->addConstant(Dims2{768,192},mWeightsMap["const_618"]);
  assert(res_618 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.output.dense.weight (type:const)");
  res_618->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.output.dense.weight:0");
  auto res_619=network->addConstant(Dims2{1,192},mWeightsMap["const_619"]);
  assert(res_619 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.2.output.dense.bias (type:const)");
  res_619->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.2.output.dense.bias:0");
  auto res_620=network->addConstant(Dims2{192,192},mWeightsMap["const_620"]);
  assert(res_620 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight (type:const)");
  res_620->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight:0");
  auto res_621=network->addConstant(Dims2{1,192},mWeightsMap["const_621"]);
  assert(res_621 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias (type:const)");
  res_621->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias:0");
  auto res_622=network->addConstant(Dims2{192,192},mWeightsMap["const_622"]);
  assert(res_622 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight (type:const)");
  res_622->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight:0");
  auto res_623=network->addConstant(Dims2{1,192},mWeightsMap["const_623"]);
  assert(res_623 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias (type:const)");
  res_623->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias:0");
  auto res_624=network->addConstant(Dims2{192,192},mWeightsMap["const_624"]);
  assert(res_624 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight (type:const)");
  res_624->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight:0");
  auto res_625=network->addConstant(Dims2{1,192},mWeightsMap["const_625"]);
  assert(res_625 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias (type:const)");
  res_625->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias:0");
  auto res_626=network->addConstant(Dims2{192,192},mWeightsMap["const_626"]);
  assert(res_626 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight (type:const)");
  res_626->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight:0");
  auto res_627=network->addConstant(Dims2{1,192},mWeightsMap["const_627"]);
  assert(res_627 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias (type:const)");
  res_627->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias:0");
  auto res_628=network->addConstant(Dims2{192,768},mWeightsMap["const_628"]);
  assert(res_628 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight (type:const)");
  res_628->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight:0");
  auto res_629=network->addConstant(Dims2{1,768},mWeightsMap["const_629"]);
  assert(res_629 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias (type:const)");
  res_629->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias:0");
  auto res_630=network->addConstant(Dims2{768,192},mWeightsMap["const_630"]);
  assert(res_630 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.output.dense.weight (type:const)");
  res_630->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.output.dense.weight:0");
  auto res_631=network->addConstant(Dims2{1,192},mWeightsMap["const_631"]);
  assert(res_631 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.3.output.dense.bias (type:const)");
  res_631->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.3.output.dense.bias:0");
  auto res_632=network->addConstant(Dims2{192,192},mWeightsMap["const_632"]);
  assert(res_632 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight (type:const)");
  res_632->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight:0");
  auto res_633=network->addConstant(Dims2{1,192},mWeightsMap["const_633"]);
  assert(res_633 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias (type:const)");
  res_633->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias:0");
  auto res_634=network->addConstant(Dims2{192,192},mWeightsMap["const_634"]);
  assert(res_634 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight (type:const)");
  res_634->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight:0");
  auto res_635=network->addConstant(Dims2{1,192},mWeightsMap["const_635"]);
  assert(res_635 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias (type:const)");
  res_635->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias:0");
  auto res_636=network->addConstant(Dims2{192,192},mWeightsMap["const_636"]);
  assert(res_636 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight (type:const)");
  res_636->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight:0");
  auto res_637=network->addConstant(Dims2{1,192},mWeightsMap["const_637"]);
  assert(res_637 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias (type:const)");
  res_637->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias:0");
  auto res_638=network->addConstant(Dims2{192,192},mWeightsMap["const_638"]);
  assert(res_638 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight (type:const)");
  res_638->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight:0");
  auto res_639=network->addConstant(Dims2{1,192},mWeightsMap["const_639"]);
  assert(res_639 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias (type:const)");
  res_639->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias:0");
  auto res_640=network->addConstant(Dims2{192,768},mWeightsMap["const_640"]);
  assert(res_640 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight (type:const)");
  res_640->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight:0");
  auto res_641=network->addConstant(Dims2{1,768},mWeightsMap["const_641"]);
  assert(res_641 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias (type:const)");
  res_641->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias:0");
  auto res_642=network->addConstant(Dims2{768,192},mWeightsMap["const_642"]);
  assert(res_642 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.output.dense.weight (type:const)");
  res_642->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.output.dense.weight:0");
  auto res_643=network->addConstant(Dims2{1,192},mWeightsMap["const_643"]);
  assert(res_643 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.4.output.dense.bias (type:const)");
  res_643->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.4.output.dense.bias:0");
  auto res_644=network->addConstant(Dims2{192,192},mWeightsMap["const_644"]);
  assert(res_644 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight (type:const)");
  res_644->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight:0");
  auto res_645=network->addConstant(Dims2{1,192},mWeightsMap["const_645"]);
  assert(res_645 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias (type:const)");
  res_645->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias:0");
  auto res_646=network->addConstant(Dims2{192,192},mWeightsMap["const_646"]);
  assert(res_646 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight (type:const)");
  res_646->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight:0");
  auto res_647=network->addConstant(Dims2{1,192},mWeightsMap["const_647"]);
  assert(res_647 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias (type:const)");
  res_647->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias:0");
  auto res_648=network->addConstant(Dims2{192,192},mWeightsMap["const_648"]);
  assert(res_648 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight (type:const)");
  res_648->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight:0");
  auto res_649=network->addConstant(Dims2{1,192},mWeightsMap["const_649"]);
  assert(res_649 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias (type:const)");
  res_649->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias:0");
  auto res_650=network->addConstant(Dims2{192,192},mWeightsMap["const_650"]);
  assert(res_650 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight (type:const)");
  res_650->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight:0");
  auto res_651=network->addConstant(Dims2{1,192},mWeightsMap["const_651"]);
  assert(res_651 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias (type:const)");
  res_651->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias:0");
  auto res_652=network->addConstant(Dims2{192,768},mWeightsMap["const_652"]);
  assert(res_652 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight (type:const)");
  res_652->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight:0");
  auto res_653=network->addConstant(Dims2{1,768},mWeightsMap["const_653"]);
  assert(res_653 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias (type:const)");
  res_653->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias:0");
  auto res_654=network->addConstant(Dims2{768,192},mWeightsMap["const_654"]);
  assert(res_654 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.output.dense.weight (type:const)");
  res_654->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.output.dense.weight:0");
  auto res_655=network->addConstant(Dims2{1,192},mWeightsMap["const_655"]);
  assert(res_655 && "failed to build mobile_model.embeddingSequence.model.encoder.layer.5.output.dense.bias (type:const)");
  res_655->getOutput(0)->setName("mobile_model.embeddingSequence.model.encoder.layer.5.output.dense.bias:0");
  auto res_656=network->addConstant(Dims2{192,192},mWeightsMap["const_656"]);
  assert(res_656 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight (type:const)");
  res_656->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight:0");
  auto res_657=network->addConstant(Dims2{1,192},mWeightsMap["const_657"]);
  assert(res_657 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias (type:const)");
  res_657->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias:0");
  auto res_658=network->addConstant(Dims2{192,192},mWeightsMap["const_658"]);
  assert(res_658 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight (type:const)");
  res_658->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight:0");
  auto res_659=network->addConstant(Dims2{1,192},mWeightsMap["const_659"]);
  assert(res_659 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias (type:const)");
  res_659->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias:0");
  auto res_660=network->addConstant(Dims2{192,192},mWeightsMap["const_660"]);
  assert(res_660 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight (type:const)");
  res_660->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight:0");
  auto res_661=network->addConstant(Dims2{1,192},mWeightsMap["const_661"]);
  assert(res_661 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias (type:const)");
  res_661->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias:0");
  auto res_662=network->addConstant(Dims2{192,192},mWeightsMap["const_662"]);
  assert(res_662 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight (type:const)");
  res_662->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight:0");
  auto res_663=network->addConstant(Dims2{1,192},mWeightsMap["const_663"]);
  assert(res_663 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias (type:const)");
  res_663->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias:0");
  auto res_664=network->addConstant(Dims2{192,768},mWeightsMap["const_664"]);
  assert(res_664 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight (type:const)");
  res_664->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight:0");
  auto res_665=network->addConstant(Dims2{1,768},mWeightsMap["const_665"]);
  assert(res_665 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias (type:const)");
  res_665->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias:0");
  auto res_666=network->addConstant(Dims2{768,192},mWeightsMap["const_666"]);
  assert(res_666 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.output.dense.weight (type:const)");
  res_666->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.output.dense.weight:0");
  auto res_667=network->addConstant(Dims2{1,192},mWeightsMap["const_667"]);
  assert(res_667 && "failed to build umid_model.embeddingSequence.model.encoder.layer.0.output.dense.bias (type:const)");
  res_667->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.0.output.dense.bias:0");
  auto res_668=network->addConstant(Dims2{192,192},mWeightsMap["const_668"]);
  assert(res_668 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight (type:const)");
  res_668->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight:0");
  auto res_669=network->addConstant(Dims2{1,192},mWeightsMap["const_669"]);
  assert(res_669 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias (type:const)");
  res_669->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias:0");
  auto res_670=network->addConstant(Dims2{192,192},mWeightsMap["const_670"]);
  assert(res_670 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight (type:const)");
  res_670->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight:0");
  auto res_671=network->addConstant(Dims2{1,192},mWeightsMap["const_671"]);
  assert(res_671 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias (type:const)");
  res_671->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias:0");
  auto res_672=network->addConstant(Dims2{192,192},mWeightsMap["const_672"]);
  assert(res_672 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight (type:const)");
  res_672->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight:0");
  auto res_673=network->addConstant(Dims2{1,192},mWeightsMap["const_673"]);
  assert(res_673 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias (type:const)");
  res_673->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias:0");
  auto res_674=network->addConstant(Dims2{192,192},mWeightsMap["const_674"]);
  assert(res_674 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight (type:const)");
  res_674->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight:0");
  auto res_675=network->addConstant(Dims2{1,192},mWeightsMap["const_675"]);
  assert(res_675 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias (type:const)");
  res_675->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias:0");
  auto res_676=network->addConstant(Dims2{192,768},mWeightsMap["const_676"]);
  assert(res_676 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight (type:const)");
  res_676->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight:0");
  auto res_677=network->addConstant(Dims2{1,768},mWeightsMap["const_677"]);
  assert(res_677 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias (type:const)");
  res_677->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias:0");
  auto res_678=network->addConstant(Dims2{768,192},mWeightsMap["const_678"]);
  assert(res_678 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.output.dense.weight (type:const)");
  res_678->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.output.dense.weight:0");
  auto res_679=network->addConstant(Dims2{1,192},mWeightsMap["const_679"]);
  assert(res_679 && "failed to build umid_model.embeddingSequence.model.encoder.layer.1.output.dense.bias (type:const)");
  res_679->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.1.output.dense.bias:0");
  auto res_680=network->addConstant(Dims2{192,192},mWeightsMap["const_680"]);
  assert(res_680 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight (type:const)");
  res_680->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight:0");
  auto res_681=network->addConstant(Dims2{1,192},mWeightsMap["const_681"]);
  assert(res_681 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias (type:const)");
  res_681->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias:0");
  auto res_682=network->addConstant(Dims2{192,192},mWeightsMap["const_682"]);
  assert(res_682 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight (type:const)");
  res_682->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight:0");
  auto res_683=network->addConstant(Dims2{1,192},mWeightsMap["const_683"]);
  assert(res_683 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias (type:const)");
  res_683->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias:0");
  auto res_684=network->addConstant(Dims2{192,192},mWeightsMap["const_684"]);
  assert(res_684 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight (type:const)");
  res_684->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight:0");
  auto res_685=network->addConstant(Dims2{1,192},mWeightsMap["const_685"]);
  assert(res_685 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias (type:const)");
  res_685->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias:0");
  auto res_686=network->addConstant(Dims2{192,192},mWeightsMap["const_686"]);
  assert(res_686 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight (type:const)");
  res_686->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight:0");
  auto res_687=network->addConstant(Dims2{1,192},mWeightsMap["const_687"]);
  assert(res_687 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias (type:const)");
  res_687->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias:0");
  auto res_688=network->addConstant(Dims2{192,768},mWeightsMap["const_688"]);
  assert(res_688 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight (type:const)");
  res_688->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight:0");
  auto res_689=network->addConstant(Dims2{1,768},mWeightsMap["const_689"]);
  assert(res_689 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias (type:const)");
  res_689->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias:0");
  auto res_690=network->addConstant(Dims2{768,192},mWeightsMap["const_690"]);
  assert(res_690 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.output.dense.weight (type:const)");
  res_690->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.output.dense.weight:0");
  auto res_691=network->addConstant(Dims2{1,192},mWeightsMap["const_691"]);
  assert(res_691 && "failed to build umid_model.embeddingSequence.model.encoder.layer.2.output.dense.bias (type:const)");
  res_691->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.2.output.dense.bias:0");
  auto res_692=network->addConstant(Dims2{192,192},mWeightsMap["const_692"]);
  assert(res_692 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight (type:const)");
  res_692->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight:0");
  auto res_693=network->addConstant(Dims2{1,192},mWeightsMap["const_693"]);
  assert(res_693 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias (type:const)");
  res_693->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias:0");
  auto res_694=network->addConstant(Dims2{192,192},mWeightsMap["const_694"]);
  assert(res_694 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight (type:const)");
  res_694->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight:0");
  auto res_695=network->addConstant(Dims2{1,192},mWeightsMap["const_695"]);
  assert(res_695 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias (type:const)");
  res_695->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias:0");
  auto res_696=network->addConstant(Dims2{192,192},mWeightsMap["const_696"]);
  assert(res_696 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight (type:const)");
  res_696->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight:0");
  auto res_697=network->addConstant(Dims2{1,192},mWeightsMap["const_697"]);
  assert(res_697 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias (type:const)");
  res_697->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias:0");
  auto res_698=network->addConstant(Dims2{192,192},mWeightsMap["const_698"]);
  assert(res_698 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight (type:const)");
  res_698->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight:0");
  auto res_699=network->addConstant(Dims2{1,192},mWeightsMap["const_699"]);
  assert(res_699 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias (type:const)");
  res_699->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias:0");
  auto res_700=network->addConstant(Dims2{192,768},mWeightsMap["const_700"]);
  assert(res_700 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight (type:const)");
  res_700->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight:0");
  auto res_701=network->addConstant(Dims2{1,768},mWeightsMap["const_701"]);
  assert(res_701 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias (type:const)");
  res_701->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias:0");
  auto res_702=network->addConstant(Dims2{768,192},mWeightsMap["const_702"]);
  assert(res_702 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.output.dense.weight (type:const)");
  res_702->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.output.dense.weight:0");
  auto res_703=network->addConstant(Dims2{1,192},mWeightsMap["const_703"]);
  assert(res_703 && "failed to build umid_model.embeddingSequence.model.encoder.layer.3.output.dense.bias (type:const)");
  res_703->getOutput(0)->setName("umid_model.embeddingSequence.model.encoder.layer.3.output.dense.bias:0");
  auto res_704=network->addConstant(Dims2{192,192},mWeightsMap["const_704"]);
  assert(res_704 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight (type:const)");
  res_704->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight:0");
  auto res_705=network->addConstant(Dims2{1,192},mWeightsMap["const_705"]);
  assert(res_705 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias (type:const)");
  res_705->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias:0");
  auto res_706=network->addConstant(Dims2{192,192},mWeightsMap["const_706"]);
  assert(res_706 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight (type:const)");
  res_706->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight:0");
  auto res_707=network->addConstant(Dims2{1,192},mWeightsMap["const_707"]);
  assert(res_707 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias (type:const)");
  res_707->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias:0");
  auto res_708=network->addConstant(Dims2{192,192},mWeightsMap["const_708"]);
  assert(res_708 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight (type:const)");
  res_708->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight:0");
  auto res_709=network->addConstant(Dims2{1,192},mWeightsMap["const_709"]);
  assert(res_709 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias (type:const)");
  res_709->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias:0");
  auto res_710=network->addConstant(Dims2{192,192},mWeightsMap["const_710"]);
  assert(res_710 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight (type:const)");
  res_710->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight:0");
  auto res_711=network->addConstant(Dims2{1,192},mWeightsMap["const_711"]);
  assert(res_711 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias (type:const)");
  res_711->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias:0");
  auto res_712=network->addConstant(Dims2{192,768},mWeightsMap["const_712"]);
  assert(res_712 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight (type:const)");
  res_712->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight:0");
  auto res_713=network->addConstant(Dims2{1,768},mWeightsMap["const_713"]);
  assert(res_713 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias (type:const)");
  res_713->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias:0");
  auto res_714=network->addConstant(Dims2{768,192},mWeightsMap["const_714"]);
  assert(res_714 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.output.dense.weight (type:const)");
  res_714->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.output.dense.weight:0");
  auto res_715=network->addConstant(Dims2{1,192},mWeightsMap["const_715"]);
  assert(res_715 && "failed to build email_model.embeddingSequence.model.encoder.layer.0.output.dense.bias (type:const)");
  res_715->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.0.output.dense.bias:0");
  auto res_716=network->addConstant(Dims2{192,192},mWeightsMap["const_716"]);
  assert(res_716 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight (type:const)");
  res_716->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight:0");
  auto res_717=network->addConstant(Dims2{1,192},mWeightsMap["const_717"]);
  assert(res_717 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias (type:const)");
  res_717->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias:0");
  auto res_718=network->addConstant(Dims2{192,192},mWeightsMap["const_718"]);
  assert(res_718 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight (type:const)");
  res_718->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight:0");
  auto res_719=network->addConstant(Dims2{1,192},mWeightsMap["const_719"]);
  assert(res_719 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias (type:const)");
  res_719->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias:0");
  auto res_720=network->addConstant(Dims2{192,192},mWeightsMap["const_720"]);
  assert(res_720 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight (type:const)");
  res_720->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight:0");
  auto res_721=network->addConstant(Dims2{1,192},mWeightsMap["const_721"]);
  assert(res_721 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias (type:const)");
  res_721->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias:0");
  auto res_722=network->addConstant(Dims2{192,192},mWeightsMap["const_722"]);
  assert(res_722 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight (type:const)");
  res_722->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight:0");
  auto res_723=network->addConstant(Dims2{1,192},mWeightsMap["const_723"]);
  assert(res_723 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias (type:const)");
  res_723->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias:0");
  auto res_724=network->addConstant(Dims2{192,768},mWeightsMap["const_724"]);
  assert(res_724 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight (type:const)");
  res_724->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight:0");
  auto res_725=network->addConstant(Dims2{1,768},mWeightsMap["const_725"]);
  assert(res_725 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias (type:const)");
  res_725->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias:0");
  auto res_726=network->addConstant(Dims2{768,192},mWeightsMap["const_726"]);
  assert(res_726 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.output.dense.weight (type:const)");
  res_726->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.output.dense.weight:0");
  auto res_727=network->addConstant(Dims2{1,192},mWeightsMap["const_727"]);
  assert(res_727 && "failed to build email_model.embeddingSequence.model.encoder.layer.1.output.dense.bias (type:const)");
  res_727->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.1.output.dense.bias:0");
  auto res_728=network->addConstant(Dims2{192,192},mWeightsMap["const_728"]);
  assert(res_728 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight (type:const)");
  res_728->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight:0");
  auto res_729=network->addConstant(Dims2{1,192},mWeightsMap["const_729"]);
  assert(res_729 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias (type:const)");
  res_729->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias:0");
  auto res_730=network->addConstant(Dims2{192,192},mWeightsMap["const_730"]);
  assert(res_730 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight (type:const)");
  res_730->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight:0");
  auto res_731=network->addConstant(Dims2{1,192},mWeightsMap["const_731"]);
  assert(res_731 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias (type:const)");
  res_731->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias:0");
  auto res_732=network->addConstant(Dims2{192,192},mWeightsMap["const_732"]);
  assert(res_732 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight (type:const)");
  res_732->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight:0");
  auto res_733=network->addConstant(Dims2{1,192},mWeightsMap["const_733"]);
  assert(res_733 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias (type:const)");
  res_733->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias:0");
  auto res_734=network->addConstant(Dims2{192,192},mWeightsMap["const_734"]);
  assert(res_734 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight (type:const)");
  res_734->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight:0");
  auto res_735=network->addConstant(Dims2{1,192},mWeightsMap["const_735"]);
  assert(res_735 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias (type:const)");
  res_735->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias:0");
  auto res_736=network->addConstant(Dims2{192,768},mWeightsMap["const_736"]);
  assert(res_736 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight (type:const)");
  res_736->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight:0");
  auto res_737=network->addConstant(Dims2{1,768},mWeightsMap["const_737"]);
  assert(res_737 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias (type:const)");
  res_737->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias:0");
  auto res_738=network->addConstant(Dims2{768,192},mWeightsMap["const_738"]);
  assert(res_738 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.output.dense.weight (type:const)");
  res_738->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.output.dense.weight:0");
  auto res_739=network->addConstant(Dims2{1,192},mWeightsMap["const_739"]);
  assert(res_739 && "failed to build email_model.embeddingSequence.model.encoder.layer.2.output.dense.bias (type:const)");
  res_739->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.2.output.dense.bias:0");
  auto res_740=network->addConstant(Dims2{192,192},mWeightsMap["const_740"]);
  assert(res_740 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight (type:const)");
  res_740->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight:0");
  auto res_741=network->addConstant(Dims2{1,192},mWeightsMap["const_741"]);
  assert(res_741 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias (type:const)");
  res_741->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias:0");
  auto res_742=network->addConstant(Dims2{192,192},mWeightsMap["const_742"]);
  assert(res_742 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight (type:const)");
  res_742->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight:0");
  auto res_743=network->addConstant(Dims2{1,192},mWeightsMap["const_743"]);
  assert(res_743 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias (type:const)");
  res_743->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias:0");
  auto res_744=network->addConstant(Dims2{192,192},mWeightsMap["const_744"]);
  assert(res_744 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight (type:const)");
  res_744->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight:0");
  auto res_745=network->addConstant(Dims2{1,192},mWeightsMap["const_745"]);
  assert(res_745 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias (type:const)");
  res_745->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias:0");
  auto res_746=network->addConstant(Dims2{192,192},mWeightsMap["const_746"]);
  assert(res_746 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight (type:const)");
  res_746->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight:0");
  auto res_747=network->addConstant(Dims2{1,192},mWeightsMap["const_747"]);
  assert(res_747 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias (type:const)");
  res_747->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias:0");
  auto res_748=network->addConstant(Dims2{192,768},mWeightsMap["const_748"]);
  assert(res_748 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight (type:const)");
  res_748->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight:0");
  auto res_749=network->addConstant(Dims2{1,768},mWeightsMap["const_749"]);
  assert(res_749 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias (type:const)");
  res_749->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias:0");
  auto res_750=network->addConstant(Dims2{768,192},mWeightsMap["const_750"]);
  assert(res_750 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.output.dense.weight (type:const)");
  res_750->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.output.dense.weight:0");
  auto res_751=network->addConstant(Dims2{1,192},mWeightsMap["const_751"]);
  assert(res_751 && "failed to build email_model.embeddingSequence.model.encoder.layer.3.output.dense.bias (type:const)");
  res_751->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.3.output.dense.bias:0");
  auto res_752=network->addConstant(Dims2{192,192},mWeightsMap["const_752"]);
  assert(res_752 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight (type:const)");
  res_752->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight:0");
  auto res_753=network->addConstant(Dims2{1,192},mWeightsMap["const_753"]);
  assert(res_753 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias (type:const)");
  res_753->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias:0");
  auto res_754=network->addConstant(Dims2{192,192},mWeightsMap["const_754"]);
  assert(res_754 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight (type:const)");
  res_754->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight:0");
  auto res_755=network->addConstant(Dims2{1,192},mWeightsMap["const_755"]);
  assert(res_755 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias (type:const)");
  res_755->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias:0");
  auto res_756=network->addConstant(Dims2{192,192},mWeightsMap["const_756"]);
  assert(res_756 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight (type:const)");
  res_756->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight:0");
  auto res_757=network->addConstant(Dims2{1,192},mWeightsMap["const_757"]);
  assert(res_757 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias (type:const)");
  res_757->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias:0");
  auto res_758=network->addConstant(Dims2{192,192},mWeightsMap["const_758"]);
  assert(res_758 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight (type:const)");
  res_758->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight:0");
  auto res_759=network->addConstant(Dims2{1,192},mWeightsMap["const_759"]);
  assert(res_759 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias (type:const)");
  res_759->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias:0");
  auto res_760=network->addConstant(Dims2{192,768},mWeightsMap["const_760"]);
  assert(res_760 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight (type:const)");
  res_760->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight:0");
  auto res_761=network->addConstant(Dims2{1,768},mWeightsMap["const_761"]);
  assert(res_761 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias (type:const)");
  res_761->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias:0");
  auto res_762=network->addConstant(Dims2{768,192},mWeightsMap["const_762"]);
  assert(res_762 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.output.dense.weight (type:const)");
  res_762->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.output.dense.weight:0");
  auto res_763=network->addConstant(Dims2{1,192},mWeightsMap["const_763"]);
  assert(res_763 && "failed to build email_model.embeddingSequence.model.encoder.layer.4.output.dense.bias (type:const)");
  res_763->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.4.output.dense.bias:0");
  auto res_764=network->addConstant(Dims2{192,192},mWeightsMap["const_764"]);
  assert(res_764 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight (type:const)");
  res_764->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight:0");
  auto res_765=network->addConstant(Dims2{1,192},mWeightsMap["const_765"]);
  assert(res_765 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias (type:const)");
  res_765->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias:0");
  auto res_766=network->addConstant(Dims2{192,192},mWeightsMap["const_766"]);
  assert(res_766 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight (type:const)");
  res_766->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight:0");
  auto res_767=network->addConstant(Dims2{1,192},mWeightsMap["const_767"]);
  assert(res_767 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias (type:const)");
  res_767->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias:0");
  auto res_768=network->addConstant(Dims2{192,192},mWeightsMap["const_768"]);
  assert(res_768 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight (type:const)");
  res_768->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight:0");
  auto res_769=network->addConstant(Dims2{1,192},mWeightsMap["const_769"]);
  assert(res_769 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias (type:const)");
  res_769->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias:0");
  auto res_770=network->addConstant(Dims2{192,192},mWeightsMap["const_770"]);
  assert(res_770 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight (type:const)");
  res_770->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight:0");
  auto res_771=network->addConstant(Dims2{1,192},mWeightsMap["const_771"]);
  assert(res_771 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias (type:const)");
  res_771->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias:0");
  auto res_772=network->addConstant(Dims2{192,768},mWeightsMap["const_772"]);
  assert(res_772 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight (type:const)");
  res_772->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight:0");
  auto res_773=network->addConstant(Dims2{1,768},mWeightsMap["const_773"]);
  assert(res_773 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias (type:const)");
  res_773->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias:0");
  auto res_774=network->addConstant(Dims2{768,192},mWeightsMap["const_774"]);
  assert(res_774 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.output.dense.weight (type:const)");
  res_774->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.output.dense.weight:0");
  auto res_775=network->addConstant(Dims2{1,192},mWeightsMap["const_775"]);
  assert(res_775 && "failed to build email_model.embeddingSequence.model.encoder.layer.5.output.dense.bias (type:const)");
  res_775->getOutput(0)->setName("email_model.embeddingSequence.model.encoder.layer.5.output.dense.bias:0");
  auto res_776=network->addConstant(Dims2{192,192},mWeightsMap["const_776"]);
  assert(res_776 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight (type:const)");
  res_776->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.attention.self.query.weight:0");
  auto res_777=network->addConstant(Dims2{1,192},mWeightsMap["const_777"]);
  assert(res_777 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias (type:const)");
  res_777->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.attention.self.query.bias:0");
  auto res_778=network->addConstant(Dims2{192,192},mWeightsMap["const_778"]);
  assert(res_778 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight (type:const)");
  res_778->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.attention.self.key.weight:0");
  auto res_779=network->addConstant(Dims2{1,192},mWeightsMap["const_779"]);
  assert(res_779 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias (type:const)");
  res_779->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.attention.self.key.bias:0");
  auto res_780=network->addConstant(Dims2{192,192},mWeightsMap["const_780"]);
  assert(res_780 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight (type:const)");
  res_780->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.attention.self.value.weight:0");
  auto res_781=network->addConstant(Dims2{1,192},mWeightsMap["const_781"]);
  assert(res_781 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias (type:const)");
  res_781->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.attention.self.value.bias:0");
  auto res_782=network->addConstant(Dims2{192,192},mWeightsMap["const_782"]);
  assert(res_782 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight (type:const)");
  res_782->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.weight:0");
  auto res_783=network->addConstant(Dims2{1,192},mWeightsMap["const_783"]);
  assert(res_783 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias (type:const)");
  res_783->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.attention.output.dense.bias:0");
  auto res_784=network->addConstant(Dims2{192,768},mWeightsMap["const_784"]);
  assert(res_784 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight (type:const)");
  res_784->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.weight:0");
  auto res_785=network->addConstant(Dims2{1,768},mWeightsMap["const_785"]);
  assert(res_785 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias (type:const)");
  res_785->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.intermediate.dense.bias:0");
  auto res_786=network->addConstant(Dims2{768,192},mWeightsMap["const_786"]);
  assert(res_786 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.output.dense.weight (type:const)");
  res_786->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.output.dense.weight:0");
  auto res_787=network->addConstant(Dims2{1,192},mWeightsMap["const_787"]);
  assert(res_787 && "failed to build event_model.embeddingSequence.model.encoder.layer.0.output.dense.bias (type:const)");
  res_787->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.0.output.dense.bias:0");
  auto res_788=network->addConstant(Dims2{192,192},mWeightsMap["const_788"]);
  assert(res_788 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight (type:const)");
  res_788->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.attention.self.query.weight:0");
  auto res_789=network->addConstant(Dims2{1,192},mWeightsMap["const_789"]);
  assert(res_789 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias (type:const)");
  res_789->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.attention.self.query.bias:0");
  auto res_790=network->addConstant(Dims2{192,192},mWeightsMap["const_790"]);
  assert(res_790 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight (type:const)");
  res_790->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.attention.self.key.weight:0");
  auto res_791=network->addConstant(Dims2{1,192},mWeightsMap["const_791"]);
  assert(res_791 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias (type:const)");
  res_791->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.attention.self.key.bias:0");
  auto res_792=network->addConstant(Dims2{192,192},mWeightsMap["const_792"]);
  assert(res_792 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight (type:const)");
  res_792->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.attention.self.value.weight:0");
  auto res_793=network->addConstant(Dims2{1,192},mWeightsMap["const_793"]);
  assert(res_793 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias (type:const)");
  res_793->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.attention.self.value.bias:0");
  auto res_794=network->addConstant(Dims2{192,192},mWeightsMap["const_794"]);
  assert(res_794 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight (type:const)");
  res_794->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.weight:0");
  auto res_795=network->addConstant(Dims2{1,192},mWeightsMap["const_795"]);
  assert(res_795 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias (type:const)");
  res_795->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.attention.output.dense.bias:0");
  auto res_796=network->addConstant(Dims2{192,768},mWeightsMap["const_796"]);
  assert(res_796 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight (type:const)");
  res_796->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.weight:0");
  auto res_797=network->addConstant(Dims2{1,768},mWeightsMap["const_797"]);
  assert(res_797 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias (type:const)");
  res_797->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.intermediate.dense.bias:0");
  auto res_798=network->addConstant(Dims2{768,192},mWeightsMap["const_798"]);
  assert(res_798 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.output.dense.weight (type:const)");
  res_798->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.output.dense.weight:0");
  auto res_799=network->addConstant(Dims2{1,192},mWeightsMap["const_799"]);
  assert(res_799 && "failed to build event_model.embeddingSequence.model.encoder.layer.1.output.dense.bias (type:const)");
  res_799->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.1.output.dense.bias:0");
  auto res_800=network->addConstant(Dims2{192,192},mWeightsMap["const_800"]);
  assert(res_800 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight (type:const)");
  res_800->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.attention.self.query.weight:0");
  auto res_801=network->addConstant(Dims2{1,192},mWeightsMap["const_801"]);
  assert(res_801 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias (type:const)");
  res_801->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.attention.self.query.bias:0");
  auto res_802=network->addConstant(Dims2{192,192},mWeightsMap["const_802"]);
  assert(res_802 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight (type:const)");
  res_802->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.attention.self.key.weight:0");
  auto res_803=network->addConstant(Dims2{1,192},mWeightsMap["const_803"]);
  assert(res_803 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias (type:const)");
  res_803->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.attention.self.key.bias:0");
  auto res_804=network->addConstant(Dims2{192,192},mWeightsMap["const_804"]);
  assert(res_804 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight (type:const)");
  res_804->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.attention.self.value.weight:0");
  auto res_805=network->addConstant(Dims2{1,192},mWeightsMap["const_805"]);
  assert(res_805 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias (type:const)");
  res_805->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.attention.self.value.bias:0");
  auto res_806=network->addConstant(Dims2{192,192},mWeightsMap["const_806"]);
  assert(res_806 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight (type:const)");
  res_806->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.weight:0");
  auto res_807=network->addConstant(Dims2{1,192},mWeightsMap["const_807"]);
  assert(res_807 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias (type:const)");
  res_807->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.attention.output.dense.bias:0");
  auto res_808=network->addConstant(Dims2{192,768},mWeightsMap["const_808"]);
  assert(res_808 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight (type:const)");
  res_808->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.weight:0");
  auto res_809=network->addConstant(Dims2{1,768},mWeightsMap["const_809"]);
  assert(res_809 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias (type:const)");
  res_809->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.intermediate.dense.bias:0");
  auto res_810=network->addConstant(Dims2{768,192},mWeightsMap["const_810"]);
  assert(res_810 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.output.dense.weight (type:const)");
  res_810->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.output.dense.weight:0");
  auto res_811=network->addConstant(Dims2{1,192},mWeightsMap["const_811"]);
  assert(res_811 && "failed to build event_model.embeddingSequence.model.encoder.layer.2.output.dense.bias (type:const)");
  res_811->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.2.output.dense.bias:0");
  auto res_812=network->addConstant(Dims2{192,192},mWeightsMap["const_812"]);
  assert(res_812 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight (type:const)");
  res_812->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.attention.self.query.weight:0");
  auto res_813=network->addConstant(Dims2{1,192},mWeightsMap["const_813"]);
  assert(res_813 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias (type:const)");
  res_813->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.attention.self.query.bias:0");
  auto res_814=network->addConstant(Dims2{192,192},mWeightsMap["const_814"]);
  assert(res_814 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight (type:const)");
  res_814->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.attention.self.key.weight:0");
  auto res_815=network->addConstant(Dims2{1,192},mWeightsMap["const_815"]);
  assert(res_815 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias (type:const)");
  res_815->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.attention.self.key.bias:0");
  auto res_816=network->addConstant(Dims2{192,192},mWeightsMap["const_816"]);
  assert(res_816 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight (type:const)");
  res_816->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.attention.self.value.weight:0");
  auto res_817=network->addConstant(Dims2{1,192},mWeightsMap["const_817"]);
  assert(res_817 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias (type:const)");
  res_817->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.attention.self.value.bias:0");
  auto res_818=network->addConstant(Dims2{192,192},mWeightsMap["const_818"]);
  assert(res_818 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight (type:const)");
  res_818->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.weight:0");
  auto res_819=network->addConstant(Dims2{1,192},mWeightsMap["const_819"]);
  assert(res_819 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias (type:const)");
  res_819->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.attention.output.dense.bias:0");
  auto res_820=network->addConstant(Dims2{192,768},mWeightsMap["const_820"]);
  assert(res_820 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight (type:const)");
  res_820->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.weight:0");
  auto res_821=network->addConstant(Dims2{1,768},mWeightsMap["const_821"]);
  assert(res_821 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias (type:const)");
  res_821->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.intermediate.dense.bias:0");
  auto res_822=network->addConstant(Dims2{768,192},mWeightsMap["const_822"]);
  assert(res_822 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.output.dense.weight (type:const)");
  res_822->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.output.dense.weight:0");
  auto res_823=network->addConstant(Dims2{1,192},mWeightsMap["const_823"]);
  assert(res_823 && "failed to build event_model.embeddingSequence.model.encoder.layer.3.output.dense.bias (type:const)");
  res_823->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.3.output.dense.bias:0");
  auto res_824=network->addConstant(Dims2{192,192},mWeightsMap["const_824"]);
  assert(res_824 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight (type:const)");
  res_824->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.attention.self.query.weight:0");
  auto res_825=network->addConstant(Dims2{1,192},mWeightsMap["const_825"]);
  assert(res_825 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias (type:const)");
  res_825->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.attention.self.query.bias:0");
  auto res_826=network->addConstant(Dims2{192,192},mWeightsMap["const_826"]);
  assert(res_826 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight (type:const)");
  res_826->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.attention.self.key.weight:0");
  auto res_827=network->addConstant(Dims2{1,192},mWeightsMap["const_827"]);
  assert(res_827 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias (type:const)");
  res_827->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.attention.self.key.bias:0");
  auto res_828=network->addConstant(Dims2{192,192},mWeightsMap["const_828"]);
  assert(res_828 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight (type:const)");
  res_828->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.attention.self.value.weight:0");
  auto res_829=network->addConstant(Dims2{1,192},mWeightsMap["const_829"]);
  assert(res_829 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias (type:const)");
  res_829->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.attention.self.value.bias:0");
  auto res_830=network->addConstant(Dims2{192,192},mWeightsMap["const_830"]);
  assert(res_830 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight (type:const)");
  res_830->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.weight:0");
  auto res_831=network->addConstant(Dims2{1,192},mWeightsMap["const_831"]);
  assert(res_831 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias (type:const)");
  res_831->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.attention.output.dense.bias:0");
  auto res_832=network->addConstant(Dims2{192,768},mWeightsMap["const_832"]);
  assert(res_832 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight (type:const)");
  res_832->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.weight:0");
  auto res_833=network->addConstant(Dims2{1,768},mWeightsMap["const_833"]);
  assert(res_833 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias (type:const)");
  res_833->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.intermediate.dense.bias:0");
  auto res_834=network->addConstant(Dims2{768,192},mWeightsMap["const_834"]);
  assert(res_834 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.output.dense.weight (type:const)");
  res_834->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.output.dense.weight:0");
  auto res_835=network->addConstant(Dims2{1,192},mWeightsMap["const_835"]);
  assert(res_835 && "failed to build event_model.embeddingSequence.model.encoder.layer.4.output.dense.bias (type:const)");
  res_835->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.4.output.dense.bias:0");
  auto res_836=network->addConstant(Dims2{192,192},mWeightsMap["const_836"]);
  assert(res_836 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight (type:const)");
  res_836->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.attention.self.query.weight:0");
  auto res_837=network->addConstant(Dims2{1,192},mWeightsMap["const_837"]);
  assert(res_837 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias (type:const)");
  res_837->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.attention.self.query.bias:0");
  auto res_838=network->addConstant(Dims2{192,192},mWeightsMap["const_838"]);
  assert(res_838 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight (type:const)");
  res_838->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.attention.self.key.weight:0");
  auto res_839=network->addConstant(Dims2{1,192},mWeightsMap["const_839"]);
  assert(res_839 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias (type:const)");
  res_839->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.attention.self.key.bias:0");
  auto res_840=network->addConstant(Dims2{192,192},mWeightsMap["const_840"]);
  assert(res_840 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight (type:const)");
  res_840->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.attention.self.value.weight:0");
  auto res_841=network->addConstant(Dims2{1,192},mWeightsMap["const_841"]);
  assert(res_841 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias (type:const)");
  res_841->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.attention.self.value.bias:0");
  auto res_842=network->addConstant(Dims2{192,192},mWeightsMap["const_842"]);
  assert(res_842 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight (type:const)");
  res_842->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.weight:0");
  auto res_843=network->addConstant(Dims2{1,192},mWeightsMap["const_843"]);
  assert(res_843 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias (type:const)");
  res_843->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.attention.output.dense.bias:0");
  auto res_844=network->addConstant(Dims2{192,768},mWeightsMap["const_844"]);
  assert(res_844 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight (type:const)");
  res_844->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.weight:0");
  auto res_845=network->addConstant(Dims2{1,768},mWeightsMap["const_845"]);
  assert(res_845 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias (type:const)");
  res_845->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.intermediate.dense.bias:0");
  auto res_846=network->addConstant(Dims2{768,192},mWeightsMap["const_846"]);
  assert(res_846 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.output.dense.weight (type:const)");
  res_846->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.output.dense.weight:0");
  auto res_847=network->addConstant(Dims2{1,192},mWeightsMap["const_847"]);
  assert(res_847 && "failed to build event_model.embeddingSequence.model.encoder.layer.5.output.dense.bias (type:const)");
  res_847->getOutput(0)->setName("event_model.embeddingSequence.model.encoder.layer.5.output.dense.bias:0");
  auto res_848=network->addConstant(Dims2{192,192},mWeightsMap["const_848"]);
  assert(res_848 && "failed to build fusion_model.model.encoder.layer.0.attention.self.query.weight (type:const)");
  res_848->getOutput(0)->setName("fusion_model.model.encoder.layer.0.attention.self.query.weight:0");
  auto res_849=network->addConstant(Dims2{1,192},mWeightsMap["const_849"]);
  assert(res_849 && "failed to build fusion_model.model.encoder.layer.0.attention.self.query.bias (type:const)");
  res_849->getOutput(0)->setName("fusion_model.model.encoder.layer.0.attention.self.query.bias:0");
  auto res_850=network->addConstant(Dims2{192,192},mWeightsMap["const_850"]);
  assert(res_850 && "failed to build fusion_model.model.encoder.layer.0.attention.self.key.weight (type:const)");
  res_850->getOutput(0)->setName("fusion_model.model.encoder.layer.0.attention.self.key.weight:0");
  auto res_851=network->addConstant(Dims2{1,192},mWeightsMap["const_851"]);
  assert(res_851 && "failed to build fusion_model.model.encoder.layer.0.attention.self.key.bias (type:const)");
  res_851->getOutput(0)->setName("fusion_model.model.encoder.layer.0.attention.self.key.bias:0");
  auto res_852=network->addConstant(Dims2{192,192},mWeightsMap["const_852"]);
  assert(res_852 && "failed to build fusion_model.model.encoder.layer.0.attention.self.value.weight (type:const)");
  res_852->getOutput(0)->setName("fusion_model.model.encoder.layer.0.attention.self.value.weight:0");
  auto res_853=network->addConstant(Dims2{1,192},mWeightsMap["const_853"]);
  assert(res_853 && "failed to build fusion_model.model.encoder.layer.0.attention.self.value.bias (type:const)");
  res_853->getOutput(0)->setName("fusion_model.model.encoder.layer.0.attention.self.value.bias:0");
  auto res_854=network->addConstant(Dims2{192,192},mWeightsMap["const_854"]);
  assert(res_854 && "failed to build fusion_model.model.encoder.layer.0.attention.output.dense.weight (type:const)");
  res_854->getOutput(0)->setName("fusion_model.model.encoder.layer.0.attention.output.dense.weight:0");
  auto res_855=network->addConstant(Dims2{1,192},mWeightsMap["const_855"]);
  assert(res_855 && "failed to build fusion_model.model.encoder.layer.0.attention.output.dense.bias (type:const)");
  res_855->getOutput(0)->setName("fusion_model.model.encoder.layer.0.attention.output.dense.bias:0");
  auto res_856=network->addConstant(Dims2{192,768},mWeightsMap["const_856"]);
  assert(res_856 && "failed to build fusion_model.model.encoder.layer.0.intermediate.dense.weight (type:const)");
  res_856->getOutput(0)->setName("fusion_model.model.encoder.layer.0.intermediate.dense.weight:0");
  auto res_857=network->addConstant(Dims2{1,768},mWeightsMap["const_857"]);
  assert(res_857 && "failed to build fusion_model.model.encoder.layer.0.intermediate.dense.bias (type:const)");
  res_857->getOutput(0)->setName("fusion_model.model.encoder.layer.0.intermediate.dense.bias:0");
  auto res_858=network->addConstant(Dims2{768,192},mWeightsMap["const_858"]);
  assert(res_858 && "failed to build fusion_model.model.encoder.layer.0.output.dense.weight (type:const)");
  res_858->getOutput(0)->setName("fusion_model.model.encoder.layer.0.output.dense.weight:0");
  auto res_859=network->addConstant(Dims2{1,192},mWeightsMap["const_859"]);
  assert(res_859 && "failed to build fusion_model.model.encoder.layer.0.output.dense.bias (type:const)");
  res_859->getOutput(0)->setName("fusion_model.model.encoder.layer.0.output.dense.bias:0");
  auto res_860=network->addConstant(Dims2{192,192},mWeightsMap["const_860"]);
  assert(res_860 && "failed to build fusion_model.model.encoder.layer.1.attention.self.query.weight (type:const)");
  res_860->getOutput(0)->setName("fusion_model.model.encoder.layer.1.attention.self.query.weight:0");
  auto res_861=network->addConstant(Dims2{1,192},mWeightsMap["const_861"]);
  assert(res_861 && "failed to build fusion_model.model.encoder.layer.1.attention.self.query.bias (type:const)");
  res_861->getOutput(0)->setName("fusion_model.model.encoder.layer.1.attention.self.query.bias:0");
  auto res_862=network->addConstant(Dims2{192,192},mWeightsMap["const_862"]);
  assert(res_862 && "failed to build fusion_model.model.encoder.layer.1.attention.self.key.weight (type:const)");
  res_862->getOutput(0)->setName("fusion_model.model.encoder.layer.1.attention.self.key.weight:0");
  auto res_863=network->addConstant(Dims2{1,192},mWeightsMap["const_863"]);
  assert(res_863 && "failed to build fusion_model.model.encoder.layer.1.attention.self.key.bias (type:const)");
  res_863->getOutput(0)->setName("fusion_model.model.encoder.layer.1.attention.self.key.bias:0");
  auto res_864=network->addConstant(Dims2{192,192},mWeightsMap["const_864"]);
  assert(res_864 && "failed to build fusion_model.model.encoder.layer.1.attention.self.value.weight (type:const)");
  res_864->getOutput(0)->setName("fusion_model.model.encoder.layer.1.attention.self.value.weight:0");
  auto res_865=network->addConstant(Dims2{1,192},mWeightsMap["const_865"]);
  assert(res_865 && "failed to build fusion_model.model.encoder.layer.1.attention.self.value.bias (type:const)");
  res_865->getOutput(0)->setName("fusion_model.model.encoder.layer.1.attention.self.value.bias:0");
  auto res_866=network->addConstant(Dims2{192,192},mWeightsMap["const_866"]);
  assert(res_866 && "failed to build fusion_model.model.encoder.layer.1.attention.output.dense.weight (type:const)");
  res_866->getOutput(0)->setName("fusion_model.model.encoder.layer.1.attention.output.dense.weight:0");
  auto res_867=network->addConstant(Dims2{1,192},mWeightsMap["const_867"]);
  assert(res_867 && "failed to build fusion_model.model.encoder.layer.1.attention.output.dense.bias (type:const)");
  res_867->getOutput(0)->setName("fusion_model.model.encoder.layer.1.attention.output.dense.bias:0");
  auto res_868=network->addConstant(Dims2{192,768},mWeightsMap["const_868"]);
  assert(res_868 && "failed to build fusion_model.model.encoder.layer.1.intermediate.dense.weight (type:const)");
  res_868->getOutput(0)->setName("fusion_model.model.encoder.layer.1.intermediate.dense.weight:0");
  auto res_869=network->addConstant(Dims2{1,768},mWeightsMap["const_869"]);
  assert(res_869 && "failed to build fusion_model.model.encoder.layer.1.intermediate.dense.bias (type:const)");
  res_869->getOutput(0)->setName("fusion_model.model.encoder.layer.1.intermediate.dense.bias:0");
  auto res_870=network->addConstant(Dims2{768,192},mWeightsMap["const_870"]);
  assert(res_870 && "failed to build fusion_model.model.encoder.layer.1.output.dense.weight (type:const)");
  res_870->getOutput(0)->setName("fusion_model.model.encoder.layer.1.output.dense.weight:0");
  auto res_871=network->addConstant(Dims2{1,192},mWeightsMap["const_871"]);
  assert(res_871 && "failed to build fusion_model.model.encoder.layer.1.output.dense.bias (type:const)");
  res_871->getOutput(0)->setName("fusion_model.model.encoder.layer.1.output.dense.bias:0");
  auto res_872=network->addConstant(Dims2{192,192},mWeightsMap["const_872"]);
  assert(res_872 && "failed to build fusion_model.model.encoder.layer.2.attention.self.query.weight (type:const)");
  res_872->getOutput(0)->setName("fusion_model.model.encoder.layer.2.attention.self.query.weight:0");
  auto res_873=network->addConstant(Dims2{1,192},mWeightsMap["const_873"]);
  assert(res_873 && "failed to build fusion_model.model.encoder.layer.2.attention.self.query.bias (type:const)");
  res_873->getOutput(0)->setName("fusion_model.model.encoder.layer.2.attention.self.query.bias:0");
  auto res_874=network->addConstant(Dims2{192,192},mWeightsMap["const_874"]);
  assert(res_874 && "failed to build fusion_model.model.encoder.layer.2.attention.self.key.weight (type:const)");
  res_874->getOutput(0)->setName("fusion_model.model.encoder.layer.2.attention.self.key.weight:0");
  auto res_875=network->addConstant(Dims2{1,192},mWeightsMap["const_875"]);
  assert(res_875 && "failed to build fusion_model.model.encoder.layer.2.attention.self.key.bias (type:const)");
  res_875->getOutput(0)->setName("fusion_model.model.encoder.layer.2.attention.self.key.bias:0");
  auto res_876=network->addConstant(Dims2{192,192},mWeightsMap["const_876"]);
  assert(res_876 && "failed to build fusion_model.model.encoder.layer.2.attention.self.value.weight (type:const)");
  res_876->getOutput(0)->setName("fusion_model.model.encoder.layer.2.attention.self.value.weight:0");
  auto res_877=network->addConstant(Dims2{1,192},mWeightsMap["const_877"]);
  assert(res_877 && "failed to build fusion_model.model.encoder.layer.2.attention.self.value.bias (type:const)");
  res_877->getOutput(0)->setName("fusion_model.model.encoder.layer.2.attention.self.value.bias:0");
  auto res_878=network->addConstant(Dims2{192,192},mWeightsMap["const_878"]);
  assert(res_878 && "failed to build fusion_model.model.encoder.layer.2.attention.output.dense.weight (type:const)");
  res_878->getOutput(0)->setName("fusion_model.model.encoder.layer.2.attention.output.dense.weight:0");
  auto res_879=network->addConstant(Dims2{1,192},mWeightsMap["const_879"]);
  assert(res_879 && "failed to build fusion_model.model.encoder.layer.2.attention.output.dense.bias (type:const)");
  res_879->getOutput(0)->setName("fusion_model.model.encoder.layer.2.attention.output.dense.bias:0");
  auto res_880=network->addConstant(Dims2{192,768},mWeightsMap["const_880"]);
  assert(res_880 && "failed to build fusion_model.model.encoder.layer.2.intermediate.dense.weight (type:const)");
  res_880->getOutput(0)->setName("fusion_model.model.encoder.layer.2.intermediate.dense.weight:0");
  auto res_881=network->addConstant(Dims2{1,768},mWeightsMap["const_881"]);
  assert(res_881 && "failed to build fusion_model.model.encoder.layer.2.intermediate.dense.bias (type:const)");
  res_881->getOutput(0)->setName("fusion_model.model.encoder.layer.2.intermediate.dense.bias:0");
  auto res_882=network->addConstant(Dims2{768,192},mWeightsMap["const_882"]);
  assert(res_882 && "failed to build fusion_model.model.encoder.layer.2.output.dense.weight (type:const)");
  res_882->getOutput(0)->setName("fusion_model.model.encoder.layer.2.output.dense.weight:0");
  auto res_883=network->addConstant(Dims2{1,192},mWeightsMap["const_883"]);
  assert(res_883 && "failed to build fusion_model.model.encoder.layer.2.output.dense.bias (type:const)");
  res_883->getOutput(0)->setName("fusion_model.model.encoder.layer.2.output.dense.bias:0");
  auto res_884=network->addConstant(Dims2{192,192},mWeightsMap["const_884"]);
  assert(res_884 && "failed to build fusion_model.model.encoder.layer.3.attention.self.query.weight (type:const)");
  res_884->getOutput(0)->setName("fusion_model.model.encoder.layer.3.attention.self.query.weight:0");
  auto res_885=network->addConstant(Dims2{1,192},mWeightsMap["const_885"]);
  assert(res_885 && "failed to build fusion_model.model.encoder.layer.3.attention.self.query.bias (type:const)");
  res_885->getOutput(0)->setName("fusion_model.model.encoder.layer.3.attention.self.query.bias:0");
  auto res_886=network->addConstant(Dims2{192,192},mWeightsMap["const_886"]);
  assert(res_886 && "failed to build fusion_model.model.encoder.layer.3.attention.self.key.weight (type:const)");
  res_886->getOutput(0)->setName("fusion_model.model.encoder.layer.3.attention.self.key.weight:0");
  auto res_887=network->addConstant(Dims2{1,192},mWeightsMap["const_887"]);
  assert(res_887 && "failed to build fusion_model.model.encoder.layer.3.attention.self.key.bias (type:const)");
  res_887->getOutput(0)->setName("fusion_model.model.encoder.layer.3.attention.self.key.bias:0");
  auto res_888=network->addConstant(Dims2{192,192},mWeightsMap["const_888"]);
  assert(res_888 && "failed to build fusion_model.model.encoder.layer.3.attention.self.value.weight (type:const)");
  res_888->getOutput(0)->setName("fusion_model.model.encoder.layer.3.attention.self.value.weight:0");
  auto res_889=network->addConstant(Dims2{1,192},mWeightsMap["const_889"]);
  assert(res_889 && "failed to build fusion_model.model.encoder.layer.3.attention.self.value.bias (type:const)");
  res_889->getOutput(0)->setName("fusion_model.model.encoder.layer.3.attention.self.value.bias:0");
  auto res_890=network->addConstant(Dims2{192,192},mWeightsMap["const_890"]);
  assert(res_890 && "failed to build fusion_model.model.encoder.layer.3.attention.output.dense.weight (type:const)");
  res_890->getOutput(0)->setName("fusion_model.model.encoder.layer.3.attention.output.dense.weight:0");
  auto res_891=network->addConstant(Dims2{1,192},mWeightsMap["const_891"]);
  assert(res_891 && "failed to build fusion_model.model.encoder.layer.3.attention.output.dense.bias (type:const)");
  res_891->getOutput(0)->setName("fusion_model.model.encoder.layer.3.attention.output.dense.bias:0");
  auto res_892=network->addConstant(Dims2{192,768},mWeightsMap["const_892"]);
  assert(res_892 && "failed to build fusion_model.model.encoder.layer.3.intermediate.dense.weight (type:const)");
  res_892->getOutput(0)->setName("fusion_model.model.encoder.layer.3.intermediate.dense.weight:0");
  auto res_893=network->addConstant(Dims2{1,768},mWeightsMap["const_893"]);
  assert(res_893 && "failed to build fusion_model.model.encoder.layer.3.intermediate.dense.bias (type:const)");
  res_893->getOutput(0)->setName("fusion_model.model.encoder.layer.3.intermediate.dense.bias:0");
  auto res_894=network->addConstant(Dims2{768,192},mWeightsMap["const_894"]);
  assert(res_894 && "failed to build fusion_model.model.encoder.layer.3.output.dense.weight (type:const)");
  res_894->getOutput(0)->setName("fusion_model.model.encoder.layer.3.output.dense.weight:0");
  auto res_895=network->addConstant(Dims2{1,192},mWeightsMap["const_895"]);
  assert(res_895 && "failed to build fusion_model.model.encoder.layer.3.output.dense.bias (type:const)");
  res_895->getOutput(0)->setName("fusion_model.model.encoder.layer.3.output.dense.bias:0");
  auto res_896=network->addConstant(Dims2{192,192},mWeightsMap["const_896"]);
  assert(res_896 && "failed to build fusion_model.model.encoder.layer.4.attention.self.query.weight (type:const)");
  res_896->getOutput(0)->setName("fusion_model.model.encoder.layer.4.attention.self.query.weight:0");
  auto res_897=network->addConstant(Dims2{1,192},mWeightsMap["const_897"]);
  assert(res_897 && "failed to build fusion_model.model.encoder.layer.4.attention.self.query.bias (type:const)");
  res_897->getOutput(0)->setName("fusion_model.model.encoder.layer.4.attention.self.query.bias:0");
  auto res_898=network->addConstant(Dims2{192,192},mWeightsMap["const_898"]);
  assert(res_898 && "failed to build fusion_model.model.encoder.layer.4.attention.self.key.weight (type:const)");
  res_898->getOutput(0)->setName("fusion_model.model.encoder.layer.4.attention.self.key.weight:0");
  auto res_899=network->addConstant(Dims2{1,192},mWeightsMap["const_899"]);
  assert(res_899 && "failed to build fusion_model.model.encoder.layer.4.attention.self.key.bias (type:const)");
  res_899->getOutput(0)->setName("fusion_model.model.encoder.layer.4.attention.self.key.bias:0");
  auto res_900=network->addConstant(Dims2{192,192},mWeightsMap["const_900"]);
  assert(res_900 && "failed to build fusion_model.model.encoder.layer.4.attention.self.value.weight (type:const)");
  res_900->getOutput(0)->setName("fusion_model.model.encoder.layer.4.attention.self.value.weight:0");
  auto res_901=network->addConstant(Dims2{1,192},mWeightsMap["const_901"]);
  assert(res_901 && "failed to build fusion_model.model.encoder.layer.4.attention.self.value.bias (type:const)");
  res_901->getOutput(0)->setName("fusion_model.model.encoder.layer.4.attention.self.value.bias:0");
  auto res_902=network->addConstant(Dims2{192,192},mWeightsMap["const_902"]);
  assert(res_902 && "failed to build fusion_model.model.encoder.layer.4.attention.output.dense.weight (type:const)");
  res_902->getOutput(0)->setName("fusion_model.model.encoder.layer.4.attention.output.dense.weight:0");
  auto res_903=network->addConstant(Dims2{1,192},mWeightsMap["const_903"]);
  assert(res_903 && "failed to build fusion_model.model.encoder.layer.4.attention.output.dense.bias (type:const)");
  res_903->getOutput(0)->setName("fusion_model.model.encoder.layer.4.attention.output.dense.bias:0");
  auto res_904=network->addConstant(Dims2{192,768},mWeightsMap["const_904"]);
  assert(res_904 && "failed to build fusion_model.model.encoder.layer.4.intermediate.dense.weight (type:const)");
  res_904->getOutput(0)->setName("fusion_model.model.encoder.layer.4.intermediate.dense.weight:0");
  auto res_905=network->addConstant(Dims2{1,768},mWeightsMap["const_905"]);
  assert(res_905 && "failed to build fusion_model.model.encoder.layer.4.intermediate.dense.bias (type:const)");
  res_905->getOutput(0)->setName("fusion_model.model.encoder.layer.4.intermediate.dense.bias:0");
  auto res_906=network->addConstant(Dims2{768,192},mWeightsMap["const_906"]);
  assert(res_906 && "failed to build fusion_model.model.encoder.layer.4.output.dense.weight (type:const)");
  res_906->getOutput(0)->setName("fusion_model.model.encoder.layer.4.output.dense.weight:0");
  auto res_907=network->addConstant(Dims2{1,192},mWeightsMap["const_907"]);
  assert(res_907 && "failed to build fusion_model.model.encoder.layer.4.output.dense.bias (type:const)");
  res_907->getOutput(0)->setName("fusion_model.model.encoder.layer.4.output.dense.bias:0");
  auto res_908=network->addConstant(Dims2{192,192},mWeightsMap["const_908"]);
  assert(res_908 && "failed to build fusion_model.model.encoder.layer.5.attention.self.query.weight (type:const)");
  res_908->getOutput(0)->setName("fusion_model.model.encoder.layer.5.attention.self.query.weight:0");
  auto res_909=network->addConstant(Dims2{1,192},mWeightsMap["const_909"]);
  assert(res_909 && "failed to build fusion_model.model.encoder.layer.5.attention.self.query.bias (type:const)");
  res_909->getOutput(0)->setName("fusion_model.model.encoder.layer.5.attention.self.query.bias:0");
  auto res_910=network->addConstant(Dims2{192,192},mWeightsMap["const_910"]);
  assert(res_910 && "failed to build fusion_model.model.encoder.layer.5.attention.self.key.weight (type:const)");
  res_910->getOutput(0)->setName("fusion_model.model.encoder.layer.5.attention.self.key.weight:0");
  auto res_911=network->addConstant(Dims2{1,192},mWeightsMap["const_911"]);
  assert(res_911 && "failed to build fusion_model.model.encoder.layer.5.attention.self.key.bias (type:const)");
  res_911->getOutput(0)->setName("fusion_model.model.encoder.layer.5.attention.self.key.bias:0");
  auto res_912=network->addConstant(Dims2{192,192},mWeightsMap["const_912"]);
  assert(res_912 && "failed to build fusion_model.model.encoder.layer.5.attention.self.value.weight (type:const)");
  res_912->getOutput(0)->setName("fusion_model.model.encoder.layer.5.attention.self.value.weight:0");
  auto res_913=network->addConstant(Dims2{1,192},mWeightsMap["const_913"]);
  assert(res_913 && "failed to build fusion_model.model.encoder.layer.5.attention.self.value.bias (type:const)");
  res_913->getOutput(0)->setName("fusion_model.model.encoder.layer.5.attention.self.value.bias:0");
  auto res_914=network->addConstant(Dims2{192,192},mWeightsMap["const_914"]);
  assert(res_914 && "failed to build fusion_model.model.encoder.layer.5.attention.output.dense.weight (type:const)");
  res_914->getOutput(0)->setName("fusion_model.model.encoder.layer.5.attention.output.dense.weight:0");
  auto res_915=network->addConstant(Dims2{1,192},mWeightsMap["const_915"]);
  assert(res_915 && "failed to build fusion_model.model.encoder.layer.5.attention.output.dense.bias (type:const)");
  res_915->getOutput(0)->setName("fusion_model.model.encoder.layer.5.attention.output.dense.bias:0");
  auto res_916=network->addConstant(Dims2{192,768},mWeightsMap["const_916"]);
  assert(res_916 && "failed to build fusion_model.model.encoder.layer.5.intermediate.dense.weight (type:const)");
  res_916->getOutput(0)->setName("fusion_model.model.encoder.layer.5.intermediate.dense.weight:0");
  auto res_917=network->addConstant(Dims2{1,768},mWeightsMap["const_917"]);
  assert(res_917 && "failed to build fusion_model.model.encoder.layer.5.intermediate.dense.bias (type:const)");
  res_917->getOutput(0)->setName("fusion_model.model.encoder.layer.5.intermediate.dense.bias:0");
  auto res_918=network->addConstant(Dims2{768,192},mWeightsMap["const_918"]);
  assert(res_918 && "failed to build fusion_model.model.encoder.layer.5.output.dense.weight (type:const)");
  res_918->getOutput(0)->setName("fusion_model.model.encoder.layer.5.output.dense.weight:0");
  auto res_919=network->addConstant(Dims2{1,192},mWeightsMap["const_919"]);
  assert(res_919 && "failed to build fusion_model.model.encoder.layer.5.output.dense.bias (type:const)");
  res_919->getOutput(0)->setName("fusion_model.model.encoder.layer.5.output.dense.bias:0");
  auto res_920=network->addConstant(Dims2{11187,192},mWeightsMap["const_920"]);
  assert(res_920 && "failed to build useragent_model.embedding_model.word_embeddings.weight (type:const)");
  res_920->getOutput(0)->setName("useragent_model.embedding_model.word_embeddings.weight:0");
  auto res_921=network->addConstant(Dims2{4202,192},mWeightsMap["const_921"]);
  assert(res_921 && "failed to build collina_model.embedding_model.word_embeddings.weight (type:const)");
  res_921->getOutput(0)->setName("collina_model.embedding_model.word_embeddings.weight:0");
  auto res_922=network->addConstant(Dims2{1442,192},mWeightsMap["const_922"]);
  assert(res_922 && "failed to build regsrc_model.embedding_model.word_embeddings.weight (type:const)");
  res_922->getOutput(0)->setName("regsrc_model.embedding_model.word_embeddings.weight:0");
  auto res_923=network->addConstant(Dims2{5590,192},mWeightsMap["const_923"]);
  assert(res_923 && "failed to build umid_model.embedding_model.word_embeddings.weight (type:const)");
  res_923->getOutput(0)->setName("umid_model.embedding_model.word_embeddings.weight:0");
  auto res_924=network->addConstant(Dims2{35149,192},mWeightsMap["const_924"]);
  assert(res_924 && "failed to build email_model.embedding_model.word_embeddings.weight (type:const)");
  res_924->getOutput(0)->setName("email_model.embedding_model.word_embeddings.weight:0");
  auto res_925=network->addConstant(Dims2{1116,192},mWeightsMap["const_925"]);
  assert(res_925 && "failed to build event_model.embedding_model.word_embeddings.weight (type:const)");
  res_925->getOutput(0)->setName("event_model.embedding_model.word_embeddings.weight:0");
  auto res_926=network->addConstant(Dims3{1,1,1},mWeightsMap["const_926"]);
  assert(res_926 && "failed to build Node_171.x (type:const)");
  res_926->getOutput(0)->setName("Node_171.x:0");
  auto res_927=network->addConstant(Dims3{1,1,1},mWeightsMap["const_927"]);
  assert(res_927 && "failed to build Node_172.y (type:const)");
  res_927->getOutput(0)->setName("Node_172.y:0");
  auto res_928=network->addConstant(Dims3{1,1,1},mWeightsMap["const_928"]);
  assert(res_928 && "failed to build Node_244.y (type:const)");
  res_928->getOutput(0)->setName("Node_244.y:0");
  auto res_929=network->addConstant(Dims3{1,1,1},mWeightsMap["const_929"]);
  assert(res_929 && "failed to build Node_366.y (type:const)");
  res_929->getOutput(0)->setName("Node_366.y:0");
  auto res_930=network->addConstant(Dims3{1,1,1},mWeightsMap["const_930"]);
  assert(res_930 && "failed to build Node_488.y (type:const)");
  res_930->getOutput(0)->setName("Node_488.y:0");
  auto res_931=network->addConstant(Dims3{1,1,1},mWeightsMap["const_931"]);
  assert(res_931 && "failed to build Node_610.y (type:const)");
  res_931->getOutput(0)->setName("Node_610.y:0");
  auto res_932=network->addConstant(Dims3{1,1,1},mWeightsMap["const_932"]);
  assert(res_932 && "failed to build Node_732.y (type:const)");
  res_932->getOutput(0)->setName("Node_732.y:0");
  auto res_933=network->addConstant(Dims3{1,1,1},mWeightsMap["const_933"]);
  assert(res_933 && "failed to build Node_854.y (type:const)");
  res_933->getOutput(0)->setName("Node_854.y:0");
  auto res_934=network->addConstant(Dims3{1,1,1},mWeightsMap["const_934"]);
  assert(res_934 && "failed to build Node_997.x (type:const)");
  res_934->getOutput(0)->setName("Node_997.x:0");
  auto res_935=network->addConstant(Dims3{1,1,1},mWeightsMap["const_935"]);
  assert(res_935 && "failed to build Node_998.y (type:const)");
  res_935->getOutput(0)->setName("Node_998.y:0");
  auto res_936=network->addConstant(Dims3{1,1,1},mWeightsMap["const_936"]);
  assert(res_936 && "failed to build Node_1070.y (type:const)");
  res_936->getOutput(0)->setName("Node_1070.y:0");
  auto res_937=network->addConstant(Dims3{1,1,1},mWeightsMap["const_937"]);
  assert(res_937 && "failed to build Node_1192.y (type:const)");
  res_937->getOutput(0)->setName("Node_1192.y:0");
  auto res_938=network->addConstant(Dims3{1,1,1},mWeightsMap["const_938"]);
  assert(res_938 && "failed to build Node_1314.y (type:const)");
  res_938->getOutput(0)->setName("Node_1314.y:0");
  auto res_939=network->addConstant(Dims3{1,1,1},mWeightsMap["const_939"]);
  assert(res_939 && "failed to build Node_1436.y (type:const)");
  res_939->getOutput(0)->setName("Node_1436.y:0");
  auto res_940=network->addConstant(Dims3{1,1,1},mWeightsMap["const_940"]);
  assert(res_940 && "failed to build Node_1558.y (type:const)");
  res_940->getOutput(0)->setName("Node_1558.y:0");
  auto res_941=network->addConstant(Dims3{1,1,1},mWeightsMap["const_941"]);
  assert(res_941 && "failed to build Node_1680.y (type:const)");
  res_941->getOutput(0)->setName("Node_1680.y:0");
  auto res_942=network->addConstant(Dims3{1,1,1},mWeightsMap["const_942"]);
  assert(res_942 && "failed to build Node_1823.x (type:const)");
  res_942->getOutput(0)->setName("Node_1823.x:0");
  auto res_943=network->addConstant(Dims3{1,1,1},mWeightsMap["const_943"]);
  assert(res_943 && "failed to build Node_1824.y (type:const)");
  res_943->getOutput(0)->setName("Node_1824.y:0");
  auto res_944=network->addConstant(Dims3{1,1,1},mWeightsMap["const_944"]);
  assert(res_944 && "failed to build Node_1896.y (type:const)");
  res_944->getOutput(0)->setName("Node_1896.y:0");
  auto res_945=network->addConstant(Dims3{1,1,1},mWeightsMap["const_945"]);
  assert(res_945 && "failed to build Node_2018.y (type:const)");
  res_945->getOutput(0)->setName("Node_2018.y:0");
  auto res_946=network->addConstant(Dims3{1,1,1},mWeightsMap["const_946"]);
  assert(res_946 && "failed to build Node_2140.y (type:const)");
  res_946->getOutput(0)->setName("Node_2140.y:0");
  auto res_947=network->addConstant(Dims3{1,1,1},mWeightsMap["const_947"]);
  assert(res_947 && "failed to build Node_2262.y (type:const)");
  res_947->getOutput(0)->setName("Node_2262.y:0");
  auto res_948=network->addConstant(Dims3{1,1,1},mWeightsMap["const_948"]);
  assert(res_948 && "failed to build Node_2384.y (type:const)");
  res_948->getOutput(0)->setName("Node_2384.y:0");
  auto res_949=network->addConstant(Dims3{1,1,1},mWeightsMap["const_949"]);
  assert(res_949 && "failed to build Node_2506.y (type:const)");
  res_949->getOutput(0)->setName("Node_2506.y:0");
  auto res_950=network->addConstant(Dims3{1,1,1},mWeightsMap["const_950"]);
  assert(res_950 && "failed to build Node_2748.x (type:const)");
  res_950->getOutput(0)->setName("Node_2748.x:0");
  auto res_951=network->addConstant(Dims3{1,1,1},mWeightsMap["const_951"]);
  assert(res_951 && "failed to build Node_2749.y (type:const)");
  res_951->getOutput(0)->setName("Node_2749.y:0");
  auto res_952=network->addConstant(Dims3{1,1,1},mWeightsMap["const_952"]);
  assert(res_952 && "failed to build Node_2833.y (type:const)");
  res_952->getOutput(0)->setName("Node_2833.y:0");
  auto res_953=network->addConstant(Dims3{1,1,1},mWeightsMap["const_953"]);
  assert(res_953 && "failed to build Node_2939.y (type:const)");
  res_953->getOutput(0)->setName("Node_2939.y:0");
  auto res_954=network->addConstant(Dims3{1,1,1},mWeightsMap["const_954"]);
  assert(res_954 && "failed to build Node_3045.y (type:const)");
  res_954->getOutput(0)->setName("Node_3045.y:0");
  auto res_955=network->addConstant(Dims3{1,1,1},mWeightsMap["const_955"]);
  assert(res_955 && "failed to build Node_3151.y (type:const)");
  res_955->getOutput(0)->setName("Node_3151.y:0");
  auto res_956=network->addConstant(Dims3{1,1,1},mWeightsMap["const_956"]);
  assert(res_956 && "failed to build Node_3257.y (type:const)");
  res_956->getOutput(0)->setName("Node_3257.y:0");
  auto res_957=network->addConstant(Dims3{1,1,1},mWeightsMap["const_957"]);
  assert(res_957 && "failed to build Node_3363.y (type:const)");
  res_957->getOutput(0)->setName("Node_3363.y:0");
  auto res_958=network->addConstant(Dims3{1,1,1},mWeightsMap["const_958"]);
  assert(res_958 && "failed to build Node_3491.x (type:const)");
  res_958->getOutput(0)->setName("Node_3491.x:0");
  auto res_959=network->addConstant(Dims3{1,1,1},mWeightsMap["const_959"]);
  assert(res_959 && "failed to build Node_3492.y (type:const)");
  res_959->getOutput(0)->setName("Node_3492.y:0");
  auto res_960=network->addConstant(Dims3{1,1,1},mWeightsMap["const_960"]);
  assert(res_960 && "failed to build Node_3576.y (type:const)");
  res_960->getOutput(0)->setName("Node_3576.y:0");
  auto res_961=network->addConstant(Dims3{1,1,1},mWeightsMap["const_961"]);
  assert(res_961 && "failed to build Node_3682.y (type:const)");
  res_961->getOutput(0)->setName("Node_3682.y:0");
  auto res_962=network->addConstant(Dims3{1,1,1},mWeightsMap["const_962"]);
  assert(res_962 && "failed to build Node_3788.y (type:const)");
  res_962->getOutput(0)->setName("Node_3788.y:0");
  auto res_963=network->addConstant(Dims3{1,1,1},mWeightsMap["const_963"]);
  assert(res_963 && "failed to build Node_3894.y (type:const)");
  res_963->getOutput(0)->setName("Node_3894.y:0");
  auto res_964=network->addConstant(Dims3{1,1,1},mWeightsMap["const_964"]);
  assert(res_964 && "failed to build Node_4000.y (type:const)");
  res_964->getOutput(0)->setName("Node_4000.y:0");
  auto res_965=network->addConstant(Dims3{1,1,1},mWeightsMap["const_965"]);
  assert(res_965 && "failed to build Node_4106.y (type:const)");
  res_965->getOutput(0)->setName("Node_4106.y:0");
  auto res_966=network->addConstant(Dims3{1,1,1},mWeightsMap["const_966"]);
  assert(res_966 && "failed to build Node_4244.x (type:const)");
  res_966->getOutput(0)->setName("Node_4244.x:0");
  auto res_967=network->addConstant(Dims3{1,1,1},mWeightsMap["const_967"]);
  assert(res_967 && "failed to build Node_4245.y (type:const)");
  res_967->getOutput(0)->setName("Node_4245.y:0");
  auto res_968=network->addConstant(Dims3{1,1,1},mWeightsMap["const_968"]);
  assert(res_968 && "failed to build Node_4338.y (type:const)");
  res_968->getOutput(0)->setName("Node_4338.y:0");
  auto res_969=network->addConstant(Dims3{1,1,1},mWeightsMap["const_969"]);
  assert(res_969 && "failed to build Node_4460.y (type:const)");
  res_969->getOutput(0)->setName("Node_4460.y:0");
  auto res_970=network->addConstant(Dims3{1,1,1},mWeightsMap["const_970"]);
  assert(res_970 && "failed to build Node_4582.y (type:const)");
  res_970->getOutput(0)->setName("Node_4582.y:0");
  auto res_971=network->addConstant(Dims3{1,1,1},mWeightsMap["const_971"]);
  assert(res_971 && "failed to build Node_4704.y (type:const)");
  res_971->getOutput(0)->setName("Node_4704.y:0");
  auto res_972=network->addConstant(Dims3{1,1,1},mWeightsMap["const_972"]);
  assert(res_972 && "failed to build Node_4826.y (type:const)");
  res_972->getOutput(0)->setName("Node_4826.y:0");
  auto res_973=network->addConstant(Dims3{1,1,1},mWeightsMap["const_973"]);
  assert(res_973 && "failed to build Node_4948.y (type:const)");
  res_973->getOutput(0)->setName("Node_4948.y:0");
  auto res_974=network->addConstant(Dims3{1,1,1},mWeightsMap["const_974"]);
  assert(res_974 && "failed to build Node_5091.x (type:const)");
  res_974->getOutput(0)->setName("Node_5091.x:0");
  auto res_975=network->addConstant(Dims3{1,1,1},mWeightsMap["const_975"]);
  assert(res_975 && "failed to build Node_5092.y (type:const)");
  res_975->getOutput(0)->setName("Node_5092.y:0");
  auto res_976=network->addConstant(Dims3{1,1,1},mWeightsMap["const_976"]);
  assert(res_976 && "failed to build Node_5163.y (type:const)");
  res_976->getOutput(0)->setName("Node_5163.y:0");
  auto res_977=network->addConstant(Dims3{1,1,1},mWeightsMap["const_977"]);
  assert(res_977 && "failed to build Node_5284.y (type:const)");
  res_977->getOutput(0)->setName("Node_5284.y:0");
  auto res_978=network->addConstant(Dims3{1,1,1},mWeightsMap["const_978"]);
  assert(res_978 && "failed to build Node_5405.y (type:const)");
  res_978->getOutput(0)->setName("Node_5405.y:0");
  auto res_979=network->addConstant(Dims3{1,1,1},mWeightsMap["const_979"]);
  assert(res_979 && "failed to build Node_5526.y (type:const)");
  res_979->getOutput(0)->setName("Node_5526.y:0");
  auto res_980=network->addConstant(Dims3{1,1,1},mWeightsMap["const_980"]);
  assert(res_980 && "failed to build Node_6516.x (type:const)");
  res_980->getOutput(0)->setName("Node_6516.x:0");
  auto res_981=network->addConstant(Dims3{1,1,1},mWeightsMap["const_981"]);
  assert(res_981 && "failed to build Node_6517.y (type:const)");
  res_981->getOutput(0)->setName("Node_6517.y:0");
  auto res_982=network->addConstant(Dims3{1,1,1},mWeightsMap["const_982"]);
  assert(res_982 && "failed to build Node_6589.y (type:const)");
  res_982->getOutput(0)->setName("Node_6589.y:0");
  auto res_983=network->addConstant(Dims3{1,1,1},mWeightsMap["const_983"]);
  assert(res_983 && "failed to build Node_6711.y (type:const)");
  res_983->getOutput(0)->setName("Node_6711.y:0");
  auto res_984=network->addConstant(Dims3{1,1,1},mWeightsMap["const_984"]);
  assert(res_984 && "failed to build Node_6833.y (type:const)");
  res_984->getOutput(0)->setName("Node_6833.y:0");
  auto res_985=network->addConstant(Dims3{1,1,1},mWeightsMap["const_985"]);
  assert(res_985 && "failed to build Node_6955.y (type:const)");
  res_985->getOutput(0)->setName("Node_6955.y:0");
  auto res_986=network->addConstant(Dims3{1,1,1},mWeightsMap["const_986"]);
  assert(res_986 && "failed to build Node_7077.y (type:const)");
  res_986->getOutput(0)->setName("Node_7077.y:0");
  auto res_987=network->addConstant(Dims3{1,1,1},mWeightsMap["const_987"]);
  assert(res_987 && "failed to build Node_7199.y (type:const)");
  res_987->getOutput(0)->setName("Node_7199.y:0");
  auto res_988=network->addConstant(Dims3{1,1,1},mWeightsMap["const_988"]);
  assert(res_988 && "failed to build Node_5669.x (type:const)");
  res_988->getOutput(0)->setName("Node_5669.x:0");
  auto res_989=network->addConstant(Dims3{1,1,1},mWeightsMap["const_989"]);
  assert(res_989 && "failed to build Node_5670.y (type:const)");
  res_989->getOutput(0)->setName("Node_5670.y:0");
  auto res_990=network->addConstant(Dims3{1,1,1},mWeightsMap["const_990"]);
  assert(res_990 && "failed to build Node_5763.y (type:const)");
  res_990->getOutput(0)->setName("Node_5763.y:0");
  auto res_991=network->addConstant(Dims3{1,1,1},mWeightsMap["const_991"]);
  assert(res_991 && "failed to build Node_5885.y (type:const)");
  res_991->getOutput(0)->setName("Node_5885.y:0");
  auto res_992=network->addConstant(Dims3{1,1,1},mWeightsMap["const_992"]);
  assert(res_992 && "failed to build Node_6007.y (type:const)");
  res_992->getOutput(0)->setName("Node_6007.y:0");
  auto res_993=network->addConstant(Dims3{1,1,1},mWeightsMap["const_993"]);
  assert(res_993 && "failed to build Node_6129.y (type:const)");
  res_993->getOutput(0)->setName("Node_6129.y:0");
  auto res_994=network->addConstant(Dims3{1,1,1},mWeightsMap["const_994"]);
  assert(res_994 && "failed to build Node_6251.y (type:const)");
  res_994->getOutput(0)->setName("Node_6251.y:0");
  auto res_995=network->addConstant(Dims3{1,1,1},mWeightsMap["const_995"]);
  assert(res_995 && "failed to build Node_6373.y (type:const)");
  res_995->getOutput(0)->setName("Node_6373.y:0");
  auto res_996=network->addConstant(Dims3{1,1,1},mWeightsMap["const_996"]);
  assert(res_996 && "failed to build Node_7335.x (type:const)");
  res_996->getOutput(0)->setName("Node_7335.x:0");
  auto res_997=network->addConstant(Dims3{1,1,1},mWeightsMap["const_997"]);
  assert(res_997 && "failed to build Node_7336.y (type:const)");
  res_997->getOutput(0)->setName("Node_7336.y:0");
  auto res_998=network->addConstant(Dims3{1,1,1},mWeightsMap["const_998"]);
  assert(res_998 && "failed to build Node_7429.y (type:const)");
  res_998->getOutput(0)->setName("Node_7429.y:0");
  auto res_999=network->addConstant(Dims3{1,1,1},mWeightsMap["const_999"]);
  assert(res_999 && "failed to build Node_7551.y (type:const)");
  res_999->getOutput(0)->setName("Node_7551.y:0");
  auto res_1000=network->addConstant(Dims3{1,1,1},mWeightsMap["const_1000"]);
  assert(res_1000 && "failed to build Node_7673.y (type:const)");
  res_1000->getOutput(0)->setName("Node_7673.y:0");
  auto res_1001=network->addConstant(Dims3{1,1,1},mWeightsMap["const_1001"]);
  assert(res_1001 && "failed to build Node_7795.y (type:const)");
  res_1001->getOutput(0)->setName("Node_7795.y:0");
  auto res_1002=network->addConstant(Dims3{1,1,1},mWeightsMap["const_1002"]);
  assert(res_1002 && "failed to build Node_7917.y (type:const)");
  res_1002->getOutput(0)->setName("Node_7917.y:0");
  auto res_1003=network->addConstant(Dims3{1,1,1},mWeightsMap["const_1003"]);
  assert(res_1003 && "failed to build Node_8039.y (type:const)");
  res_1003->getOutput(0)->setName("Node_8039.y:0");
  auto res_1004=network->addConstant(Dims2{1,1},mWeightsMap["const_1004"]);
  assert(res_1004 && "failed to build Node_179_modify.y (type:const)");
  res_1004->getOutput(0)->setName("Node_179_modify.y:0");
  auto res_1005=network->addConstant(Dims2{1,1},mWeightsMap["const_1005"]);
  assert(res_1005 && "failed to build Node_279_modify.y (type:const)");
  res_1005->getOutput(0)->setName("Node_279_modify.y:0");
  auto res_1006=network->addConstant(Dims2{1,1},mWeightsMap["const_1006"]);
  assert(res_1006 && "failed to build Node_304_modify.y (type:const)");
  res_1006->getOutput(0)->setName("Node_304_modify.y:0");
  auto res_1007=network->addConstant(Dims2{1,1},mWeightsMap["const_1007"]);
  assert(res_1007 && "failed to build Node_401_modify.y (type:const)");
  res_1007->getOutput(0)->setName("Node_401_modify.y:0");
  auto res_1008=network->addConstant(Dims2{1,1},mWeightsMap["const_1008"]);
  assert(res_1008 && "failed to build Node_426_modify.y (type:const)");
  res_1008->getOutput(0)->setName("Node_426_modify.y:0");
  auto res_1009=network->addConstant(Dims2{1,1},mWeightsMap["const_1009"]);
  assert(res_1009 && "failed to build Node_523_modify.y (type:const)");
  res_1009->getOutput(0)->setName("Node_523_modify.y:0");
  auto res_1010=network->addConstant(Dims2{1,1},mWeightsMap["const_1010"]);
  assert(res_1010 && "failed to build Node_548_modify.y (type:const)");
  res_1010->getOutput(0)->setName("Node_548_modify.y:0");
  auto res_1011=network->addConstant(Dims2{1,1},mWeightsMap["const_1011"]);
  assert(res_1011 && "failed to build Node_645_modify.y (type:const)");
  res_1011->getOutput(0)->setName("Node_645_modify.y:0");
  auto res_1012=network->addConstant(Dims2{1,1},mWeightsMap["const_1012"]);
  assert(res_1012 && "failed to build Node_670_modify.y (type:const)");
  res_1012->getOutput(0)->setName("Node_670_modify.y:0");
  auto res_1013=network->addConstant(Dims2{1,1},mWeightsMap["const_1013"]);
  assert(res_1013 && "failed to build Node_767_modify.y (type:const)");
  res_1013->getOutput(0)->setName("Node_767_modify.y:0");
  auto res_1014=network->addConstant(Dims2{1,1},mWeightsMap["const_1014"]);
  assert(res_1014 && "failed to build Node_792_modify.y (type:const)");
  res_1014->getOutput(0)->setName("Node_792_modify.y:0");
  auto res_1015=network->addConstant(Dims2{1,1},mWeightsMap["const_1015"]);
  assert(res_1015 && "failed to build Node_889_modify.y (type:const)");
  res_1015->getOutput(0)->setName("Node_889_modify.y:0");
  auto res_1016=network->addConstant(Dims2{1,1},mWeightsMap["const_1016"]);
  assert(res_1016 && "failed to build Node_914_modify.y (type:const)");
  res_1016->getOutput(0)->setName("Node_914_modify.y:0");
  auto res_1017=network->addConstant(Dims2{1,1},mWeightsMap["const_1017"]);
  assert(res_1017 && "failed to build Node_1005_modify.y (type:const)");
  res_1017->getOutput(0)->setName("Node_1005_modify.y:0");
  auto res_1018=network->addConstant(Dims2{1,1},mWeightsMap["const_1018"]);
  assert(res_1018 && "failed to build Node_1105_modify.y (type:const)");
  res_1018->getOutput(0)->setName("Node_1105_modify.y:0");
  auto res_1019=network->addConstant(Dims2{1,1},mWeightsMap["const_1019"]);
  assert(res_1019 && "failed to build Node_1130_modify.y (type:const)");
  res_1019->getOutput(0)->setName("Node_1130_modify.y:0");
  auto res_1020=network->addConstant(Dims2{1,1},mWeightsMap["const_1020"]);
  assert(res_1020 && "failed to build Node_1227_modify.y (type:const)");
  res_1020->getOutput(0)->setName("Node_1227_modify.y:0");
  auto res_1021=network->addConstant(Dims2{1,1},mWeightsMap["const_1021"]);
  assert(res_1021 && "failed to build Node_1252_modify.y (type:const)");
  res_1021->getOutput(0)->setName("Node_1252_modify.y:0");
  auto res_1022=network->addConstant(Dims2{1,1},mWeightsMap["const_1022"]);
  assert(res_1022 && "failed to build Node_1349_modify.y (type:const)");
  res_1022->getOutput(0)->setName("Node_1349_modify.y:0");
  auto res_1023=network->addConstant(Dims2{1,1},mWeightsMap["const_1023"]);
  assert(res_1023 && "failed to build Node_1374_modify.y (type:const)");
  res_1023->getOutput(0)->setName("Node_1374_modify.y:0");
  auto res_1024=network->addConstant(Dims2{1,1},mWeightsMap["const_1024"]);
  assert(res_1024 && "failed to build Node_1471_modify.y (type:const)");
  res_1024->getOutput(0)->setName("Node_1471_modify.y:0");
  auto res_1025=network->addConstant(Dims2{1,1},mWeightsMap["const_1025"]);
  assert(res_1025 && "failed to build Node_1496_modify.y (type:const)");
  res_1025->getOutput(0)->setName("Node_1496_modify.y:0");
  auto res_1026=network->addConstant(Dims2{1,1},mWeightsMap["const_1026"]);
  assert(res_1026 && "failed to build Node_1593_modify.y (type:const)");
  res_1026->getOutput(0)->setName("Node_1593_modify.y:0");
  auto res_1027=network->addConstant(Dims2{1,1},mWeightsMap["const_1027"]);
  assert(res_1027 && "failed to build Node_1618_modify.y (type:const)");
  res_1027->getOutput(0)->setName("Node_1618_modify.y:0");
  auto res_1028=network->addConstant(Dims2{1,1},mWeightsMap["const_1028"]);
  assert(res_1028 && "failed to build Node_1715_modify.y (type:const)");
  res_1028->getOutput(0)->setName("Node_1715_modify.y:0");
  auto res_1029=network->addConstant(Dims2{1,1},mWeightsMap["const_1029"]);
  assert(res_1029 && "failed to build Node_1740_modify.y (type:const)");
  res_1029->getOutput(0)->setName("Node_1740_modify.y:0");
  auto res_1030=network->addConstant(Dims2{1,1},mWeightsMap["const_1030"]);
  assert(res_1030 && "failed to build Node_1831_modify.y (type:const)");
  res_1030->getOutput(0)->setName("Node_1831_modify.y:0");
  auto res_1031=network->addConstant(Dims2{1,1},mWeightsMap["const_1031"]);
  assert(res_1031 && "failed to build Node_1931_modify.y (type:const)");
  res_1031->getOutput(0)->setName("Node_1931_modify.y:0");
  auto res_1032=network->addConstant(Dims2{1,1},mWeightsMap["const_1032"]);
  assert(res_1032 && "failed to build Node_1956_modify.y (type:const)");
  res_1032->getOutput(0)->setName("Node_1956_modify.y:0");
  auto res_1033=network->addConstant(Dims2{1,1},mWeightsMap["const_1033"]);
  assert(res_1033 && "failed to build Node_2053_modify.y (type:const)");
  res_1033->getOutput(0)->setName("Node_2053_modify.y:0");
  auto res_1034=network->addConstant(Dims2{1,1},mWeightsMap["const_1034"]);
  assert(res_1034 && "failed to build Node_2078_modify.y (type:const)");
  res_1034->getOutput(0)->setName("Node_2078_modify.y:0");
  auto res_1035=network->addConstant(Dims2{1,1},mWeightsMap["const_1035"]);
  assert(res_1035 && "failed to build Node_2175_modify.y (type:const)");
  res_1035->getOutput(0)->setName("Node_2175_modify.y:0");
  auto res_1036=network->addConstant(Dims2{1,1},mWeightsMap["const_1036"]);
  assert(res_1036 && "failed to build Node_2200_modify.y (type:const)");
  res_1036->getOutput(0)->setName("Node_2200_modify.y:0");
  auto res_1037=network->addConstant(Dims2{1,1},mWeightsMap["const_1037"]);
  assert(res_1037 && "failed to build Node_2297_modify.y (type:const)");
  res_1037->getOutput(0)->setName("Node_2297_modify.y:0");
  auto res_1038=network->addConstant(Dims2{1,1},mWeightsMap["const_1038"]);
  assert(res_1038 && "failed to build Node_2322_modify.y (type:const)");
  res_1038->getOutput(0)->setName("Node_2322_modify.y:0");
  auto res_1039=network->addConstant(Dims2{1,1},mWeightsMap["const_1039"]);
  assert(res_1039 && "failed to build Node_2419_modify.y (type:const)");
  res_1039->getOutput(0)->setName("Node_2419_modify.y:0");
  auto res_1040=network->addConstant(Dims2{1,1},mWeightsMap["const_1040"]);
  assert(res_1040 && "failed to build Node_2444_modify.y (type:const)");
  res_1040->getOutput(0)->setName("Node_2444_modify.y:0");
  auto res_1041=network->addConstant(Dims2{1,1},mWeightsMap["const_1041"]);
  assert(res_1041 && "failed to build Node_2541_modify.y (type:const)");
  res_1041->getOutput(0)->setName("Node_2541_modify.y:0");
  auto res_1042=network->addConstant(Dims2{1,1},mWeightsMap["const_1042"]);
  assert(res_1042 && "failed to build Node_2566_modify.y (type:const)");
  res_1042->getOutput(0)->setName("Node_2566_modify.y:0");
  auto res_1043=network->addConstant(Dims2{1,1},mWeightsMap["const_1043"]);
  assert(res_1043 && "failed to build Node_2774_modify.y (type:const)");
  res_1043->getOutput(0)->setName("Node_2774_modify.y:0");
  auto res_1044=network->addConstant(Dims2{1,1},mWeightsMap["const_1044"]);
  assert(res_1044 && "failed to build Node_2864_modify.y (type:const)");
  res_1044->getOutput(0)->setName("Node_2864_modify.y:0");
  auto res_1045=network->addConstant(Dims2{1,1},mWeightsMap["const_1045"]);
  assert(res_1045 && "failed to build Node_2883_modify.y (type:const)");
  res_1045->getOutput(0)->setName("Node_2883_modify.y:0");
  auto res_1046=network->addConstant(Dims2{1,1},mWeightsMap["const_1046"]);
  assert(res_1046 && "failed to build Node_2970_modify.y (type:const)");
  res_1046->getOutput(0)->setName("Node_2970_modify.y:0");
  auto res_1047=network->addConstant(Dims2{1,1},mWeightsMap["const_1047"]);
  assert(res_1047 && "failed to build Node_2989_modify.y (type:const)");
  res_1047->getOutput(0)->setName("Node_2989_modify.y:0");
  auto res_1048=network->addConstant(Dims2{1,1},mWeightsMap["const_1048"]);
  assert(res_1048 && "failed to build Node_3076_modify.y (type:const)");
  res_1048->getOutput(0)->setName("Node_3076_modify.y:0");
  auto res_1049=network->addConstant(Dims2{1,1},mWeightsMap["const_1049"]);
  assert(res_1049 && "failed to build Node_3095_modify.y (type:const)");
  res_1049->getOutput(0)->setName("Node_3095_modify.y:0");
  auto res_1050=network->addConstant(Dims2{1,1},mWeightsMap["const_1050"]);
  assert(res_1050 && "failed to build Node_3182_modify.y (type:const)");
  res_1050->getOutput(0)->setName("Node_3182_modify.y:0");
  auto res_1051=network->addConstant(Dims2{1,1},mWeightsMap["const_1051"]);
  assert(res_1051 && "failed to build Node_3201_modify.y (type:const)");
  res_1051->getOutput(0)->setName("Node_3201_modify.y:0");
  auto res_1052=network->addConstant(Dims2{1,1},mWeightsMap["const_1052"]);
  assert(res_1052 && "failed to build Node_3288_modify.y (type:const)");
  res_1052->getOutput(0)->setName("Node_3288_modify.y:0");
  auto res_1053=network->addConstant(Dims2{1,1},mWeightsMap["const_1053"]);
  assert(res_1053 && "failed to build Node_3307_modify.y (type:const)");
  res_1053->getOutput(0)->setName("Node_3307_modify.y:0");
  auto res_1054=network->addConstant(Dims2{1,1},mWeightsMap["const_1054"]);
  assert(res_1054 && "failed to build Node_3394_modify.y (type:const)");
  res_1054->getOutput(0)->setName("Node_3394_modify.y:0");
  auto res_1055=network->addConstant(Dims2{1,1},mWeightsMap["const_1055"]);
  assert(res_1055 && "failed to build Node_3413_modify.y (type:const)");
  res_1055->getOutput(0)->setName("Node_3413_modify.y:0");
  auto res_1056=network->addConstant(Dims2{1,1},mWeightsMap["const_1056"]);
  assert(res_1056 && "failed to build Node_3517_modify.y (type:const)");
  res_1056->getOutput(0)->setName("Node_3517_modify.y:0");
  auto res_1057=network->addConstant(Dims2{1,1},mWeightsMap["const_1057"]);
  assert(res_1057 && "failed to build Node_3607_modify.y (type:const)");
  res_1057->getOutput(0)->setName("Node_3607_modify.y:0");
  auto res_1058=network->addConstant(Dims2{1,1},mWeightsMap["const_1058"]);
  assert(res_1058 && "failed to build Node_3626_modify.y (type:const)");
  res_1058->getOutput(0)->setName("Node_3626_modify.y:0");
  auto res_1059=network->addConstant(Dims2{1,1},mWeightsMap["const_1059"]);
  assert(res_1059 && "failed to build Node_3713_modify.y (type:const)");
  res_1059->getOutput(0)->setName("Node_3713_modify.y:0");
  auto res_1060=network->addConstant(Dims2{1,1},mWeightsMap["const_1060"]);
  assert(res_1060 && "failed to build Node_3732_modify.y (type:const)");
  res_1060->getOutput(0)->setName("Node_3732_modify.y:0");
  auto res_1061=network->addConstant(Dims2{1,1},mWeightsMap["const_1061"]);
  assert(res_1061 && "failed to build Node_3819_modify.y (type:const)");
  res_1061->getOutput(0)->setName("Node_3819_modify.y:0");
  auto res_1062=network->addConstant(Dims2{1,1},mWeightsMap["const_1062"]);
  assert(res_1062 && "failed to build Node_3838_modify.y (type:const)");
  res_1062->getOutput(0)->setName("Node_3838_modify.y:0");
  auto res_1063=network->addConstant(Dims2{1,1},mWeightsMap["const_1063"]);
  assert(res_1063 && "failed to build Node_3925_modify.y (type:const)");
  res_1063->getOutput(0)->setName("Node_3925_modify.y:0");
  auto res_1064=network->addConstant(Dims2{1,1},mWeightsMap["const_1064"]);
  assert(res_1064 && "failed to build Node_3944_modify.y (type:const)");
  res_1064->getOutput(0)->setName("Node_3944_modify.y:0");
  auto res_1065=network->addConstant(Dims2{1,1},mWeightsMap["const_1065"]);
  assert(res_1065 && "failed to build Node_4031_modify.y (type:const)");
  res_1065->getOutput(0)->setName("Node_4031_modify.y:0");
  auto res_1066=network->addConstant(Dims2{1,1},mWeightsMap["const_1066"]);
  assert(res_1066 && "failed to build Node_4050_modify.y (type:const)");
  res_1066->getOutput(0)->setName("Node_4050_modify.y:0");
  auto res_1067=network->addConstant(Dims2{1,1},mWeightsMap["const_1067"]);
  assert(res_1067 && "failed to build Node_4137_modify.y (type:const)");
  res_1067->getOutput(0)->setName("Node_4137_modify.y:0");
  auto res_1068=network->addConstant(Dims2{1,1},mWeightsMap["const_1068"]);
  assert(res_1068 && "failed to build Node_4156_modify.y (type:const)");
  res_1068->getOutput(0)->setName("Node_4156_modify.y:0");
  auto res_1069=network->addConstant(Dims2{1,1},mWeightsMap["const_1069"]);
  assert(res_1069 && "failed to build Node_4273_modify.y (type:const)");
  res_1069->getOutput(0)->setName("Node_4273_modify.y:0");
  auto res_1070=network->addConstant(Dims2{1,1},mWeightsMap["const_1070"]);
  assert(res_1070 && "failed to build Node_4373_modify.y (type:const)");
  res_1070->getOutput(0)->setName("Node_4373_modify.y:0");
  auto res_1071=network->addConstant(Dims2{1,1},mWeightsMap["const_1071"]);
  assert(res_1071 && "failed to build Node_4398_modify.y (type:const)");
  res_1071->getOutput(0)->setName("Node_4398_modify.y:0");
  auto res_1072=network->addConstant(Dims2{1,1},mWeightsMap["const_1072"]);
  assert(res_1072 && "failed to build Node_4495_modify.y (type:const)");
  res_1072->getOutput(0)->setName("Node_4495_modify.y:0");
  auto res_1073=network->addConstant(Dims2{1,1},mWeightsMap["const_1073"]);
  assert(res_1073 && "failed to build Node_4520_modify.y (type:const)");
  res_1073->getOutput(0)->setName("Node_4520_modify.y:0");
  auto res_1074=network->addConstant(Dims2{1,1},mWeightsMap["const_1074"]);
  assert(res_1074 && "failed to build Node_4617_modify.y (type:const)");
  res_1074->getOutput(0)->setName("Node_4617_modify.y:0");
  auto res_1075=network->addConstant(Dims2{1,1},mWeightsMap["const_1075"]);
  assert(res_1075 && "failed to build Node_4642_modify.y (type:const)");
  res_1075->getOutput(0)->setName("Node_4642_modify.y:0");
  auto res_1076=network->addConstant(Dims2{1,1},mWeightsMap["const_1076"]);
  assert(res_1076 && "failed to build Node_4739_modify.y (type:const)");
  res_1076->getOutput(0)->setName("Node_4739_modify.y:0");
  auto res_1077=network->addConstant(Dims2{1,1},mWeightsMap["const_1077"]);
  assert(res_1077 && "failed to build Node_4764_modify.y (type:const)");
  res_1077->getOutput(0)->setName("Node_4764_modify.y:0");
  auto res_1078=network->addConstant(Dims2{1,1},mWeightsMap["const_1078"]);
  assert(res_1078 && "failed to build Node_4861_modify.y (type:const)");
  res_1078->getOutput(0)->setName("Node_4861_modify.y:0");
  auto res_1079=network->addConstant(Dims2{1,1},mWeightsMap["const_1079"]);
  assert(res_1079 && "failed to build Node_4886_modify.y (type:const)");
  res_1079->getOutput(0)->setName("Node_4886_modify.y:0");
  auto res_1080=network->addConstant(Dims2{1,1},mWeightsMap["const_1080"]);
  assert(res_1080 && "failed to build Node_4983_modify.y (type:const)");
  res_1080->getOutput(0)->setName("Node_4983_modify.y:0");
  auto res_1081=network->addConstant(Dims2{1,1},mWeightsMap["const_1081"]);
  assert(res_1081 && "failed to build Node_5008_modify.y (type:const)");
  res_1081->getOutput(0)->setName("Node_5008_modify.y:0");
  auto res_1082=network->addConstant(Dims2{1,1},mWeightsMap["const_1082"]);
  assert(res_1082 && "failed to build Node_5099_modify.y (type:const)");
  res_1082->getOutput(0)->setName("Node_5099_modify.y:0");
  auto res_1083=network->addConstant(Dims2{1,1},mWeightsMap["const_1083"]);
  assert(res_1083 && "failed to build Node_5198_modify.y (type:const)");
  res_1083->getOutput(0)->setName("Node_5198_modify.y:0");
  auto res_1084=network->addConstant(Dims2{1,1},mWeightsMap["const_1084"]);
  assert(res_1084 && "failed to build Node_5223_modify.y (type:const)");
  res_1084->getOutput(0)->setName("Node_5223_modify.y:0");
  auto res_1085=network->addConstant(Dims2{1,1},mWeightsMap["const_1085"]);
  assert(res_1085 && "failed to build Node_5319_modify.y (type:const)");
  res_1085->getOutput(0)->setName("Node_5319_modify.y:0");
  auto res_1086=network->addConstant(Dims2{1,1},mWeightsMap["const_1086"]);
  assert(res_1086 && "failed to build Node_5344_modify.y (type:const)");
  res_1086->getOutput(0)->setName("Node_5344_modify.y:0");
  auto res_1087=network->addConstant(Dims2{1,1},mWeightsMap["const_1087"]);
  assert(res_1087 && "failed to build Node_5440_modify.y (type:const)");
  res_1087->getOutput(0)->setName("Node_5440_modify.y:0");
  auto res_1088=network->addConstant(Dims2{1,1},mWeightsMap["const_1088"]);
  assert(res_1088 && "failed to build Node_5465_modify.y (type:const)");
  res_1088->getOutput(0)->setName("Node_5465_modify.y:0");
  auto res_1089=network->addConstant(Dims2{1,1},mWeightsMap["const_1089"]);
  assert(res_1089 && "failed to build Node_5561_modify.y (type:const)");
  res_1089->getOutput(0)->setName("Node_5561_modify.y:0");
  auto res_1090=network->addConstant(Dims2{1,1},mWeightsMap["const_1090"]);
  assert(res_1090 && "failed to build Node_5586_modify.y (type:const)");
  res_1090->getOutput(0)->setName("Node_5586_modify.y:0");
  auto res_1091=network->addConstant(Dims2{1,1},mWeightsMap["const_1091"]);
  assert(res_1091 && "failed to build Node_6524_modify.y (type:const)");
  res_1091->getOutput(0)->setName("Node_6524_modify.y:0");
  auto res_1092=network->addConstant(Dims2{1,1},mWeightsMap["const_1092"]);
  assert(res_1092 && "failed to build Node_6624_modify.y (type:const)");
  res_1092->getOutput(0)->setName("Node_6624_modify.y:0");
  auto res_1093=network->addConstant(Dims2{1,1},mWeightsMap["const_1093"]);
  assert(res_1093 && "failed to build Node_6649_modify.y (type:const)");
  res_1093->getOutput(0)->setName("Node_6649_modify.y:0");
  auto res_1094=network->addConstant(Dims2{1,1},mWeightsMap["const_1094"]);
  assert(res_1094 && "failed to build Node_6746_modify.y (type:const)");
  res_1094->getOutput(0)->setName("Node_6746_modify.y:0");
  auto res_1095=network->addConstant(Dims2{1,1},mWeightsMap["const_1095"]);
  assert(res_1095 && "failed to build Node_6771_modify.y (type:const)");
  res_1095->getOutput(0)->setName("Node_6771_modify.y:0");
  auto res_1096=network->addConstant(Dims2{1,1},mWeightsMap["const_1096"]);
  assert(res_1096 && "failed to build Node_6868_modify.y (type:const)");
  res_1096->getOutput(0)->setName("Node_6868_modify.y:0");
  auto res_1097=network->addConstant(Dims2{1,1},mWeightsMap["const_1097"]);
  assert(res_1097 && "failed to build Node_6893_modify.y (type:const)");
  res_1097->getOutput(0)->setName("Node_6893_modify.y:0");
  auto res_1098=network->addConstant(Dims2{1,1},mWeightsMap["const_1098"]);
  assert(res_1098 && "failed to build Node_6990_modify.y (type:const)");
  res_1098->getOutput(0)->setName("Node_6990_modify.y:0");
  auto res_1099=network->addConstant(Dims2{1,1},mWeightsMap["const_1099"]);
  assert(res_1099 && "failed to build Node_7015_modify.y (type:const)");
  res_1099->getOutput(0)->setName("Node_7015_modify.y:0");
  auto res_1100=network->addConstant(Dims2{1,1},mWeightsMap["const_1100"]);
  assert(res_1100 && "failed to build Node_7112_modify.y (type:const)");
  res_1100->getOutput(0)->setName("Node_7112_modify.y:0");
  auto res_1101=network->addConstant(Dims2{1,1},mWeightsMap["const_1101"]);
  assert(res_1101 && "failed to build Node_7137_modify.y (type:const)");
  res_1101->getOutput(0)->setName("Node_7137_modify.y:0");
  auto res_1102=network->addConstant(Dims2{1,1},mWeightsMap["const_1102"]);
  assert(res_1102 && "failed to build Node_7234_modify.y (type:const)");
  res_1102->getOutput(0)->setName("Node_7234_modify.y:0");
  auto res_1103=network->addConstant(Dims2{1,1},mWeightsMap["const_1103"]);
  assert(res_1103 && "failed to build Node_7259_modify.y (type:const)");
  res_1103->getOutput(0)->setName("Node_7259_modify.y:0");
  auto res_1104=network->addConstant(Dims2{1,1},mWeightsMap["const_1104"]);
  assert(res_1104 && "failed to build Node_5698_modify.y (type:const)");
  res_1104->getOutput(0)->setName("Node_5698_modify.y:0");
  auto res_1105=network->addConstant(Dims2{1,1},mWeightsMap["const_1105"]);
  assert(res_1105 && "failed to build Node_5798_modify.y (type:const)");
  res_1105->getOutput(0)->setName("Node_5798_modify.y:0");
  auto res_1106=network->addConstant(Dims2{1,1},mWeightsMap["const_1106"]);
  assert(res_1106 && "failed to build Node_5823_modify.y (type:const)");
  res_1106->getOutput(0)->setName("Node_5823_modify.y:0");
  auto res_1107=network->addConstant(Dims2{1,1},mWeightsMap["const_1107"]);
  assert(res_1107 && "failed to build Node_5920_modify.y (type:const)");
  res_1107->getOutput(0)->setName("Node_5920_modify.y:0");
  auto res_1108=network->addConstant(Dims2{1,1},mWeightsMap["const_1108"]);
  assert(res_1108 && "failed to build Node_5945_modify.y (type:const)");
  res_1108->getOutput(0)->setName("Node_5945_modify.y:0");
  auto res_1109=network->addConstant(Dims2{1,1},mWeightsMap["const_1109"]);
  assert(res_1109 && "failed to build Node_6042_modify.y (type:const)");
  res_1109->getOutput(0)->setName("Node_6042_modify.y:0");
  auto res_1110=network->addConstant(Dims2{1,1},mWeightsMap["const_1110"]);
  assert(res_1110 && "failed to build Node_6067_modify.y (type:const)");
  res_1110->getOutput(0)->setName("Node_6067_modify.y:0");
  auto res_1111=network->addConstant(Dims2{1,1},mWeightsMap["const_1111"]);
  assert(res_1111 && "failed to build Node_6164_modify.y (type:const)");
  res_1111->getOutput(0)->setName("Node_6164_modify.y:0");
  auto res_1112=network->addConstant(Dims2{1,1},mWeightsMap["const_1112"]);
  assert(res_1112 && "failed to build Node_6189_modify.y (type:const)");
  res_1112->getOutput(0)->setName("Node_6189_modify.y:0");
  auto res_1113=network->addConstant(Dims2{1,1},mWeightsMap["const_1113"]);
  assert(res_1113 && "failed to build Node_6286_modify.y (type:const)");
  res_1113->getOutput(0)->setName("Node_6286_modify.y:0");
  auto res_1114=network->addConstant(Dims2{1,1},mWeightsMap["const_1114"]);
  assert(res_1114 && "failed to build Node_6311_modify.y (type:const)");
  res_1114->getOutput(0)->setName("Node_6311_modify.y:0");
  auto res_1115=network->addConstant(Dims2{1,1},mWeightsMap["const_1115"]);
  assert(res_1115 && "failed to build Node_6408_modify.y (type:const)");
  res_1115->getOutput(0)->setName("Node_6408_modify.y:0");
  auto res_1116=network->addConstant(Dims2{1,1},mWeightsMap["const_1116"]);
  assert(res_1116 && "failed to build Node_6433_modify.y (type:const)");
  res_1116->getOutput(0)->setName("Node_6433_modify.y:0");
  auto res_1117=network->addConstant(Dims2{1,1},mWeightsMap["const_1117"]);
  assert(res_1117 && "failed to build Node_7364_modify.y (type:const)");
  res_1117->getOutput(0)->setName("Node_7364_modify.y:0");
  auto res_1118=network->addConstant(Dims2{1,1},mWeightsMap["const_1118"]);
  assert(res_1118 && "failed to build Node_7464_modify.y (type:const)");
  res_1118->getOutput(0)->setName("Node_7464_modify.y:0");
  auto res_1119=network->addConstant(Dims2{1,1},mWeightsMap["const_1119"]);
  assert(res_1119 && "failed to build Node_7489_modify.y (type:const)");
  res_1119->getOutput(0)->setName("Node_7489_modify.y:0");
  auto res_1120=network->addConstant(Dims2{1,1},mWeightsMap["const_1120"]);
  assert(res_1120 && "failed to build Node_7586_modify.y (type:const)");
  res_1120->getOutput(0)->setName("Node_7586_modify.y:0");
  auto res_1121=network->addConstant(Dims2{1,1},mWeightsMap["const_1121"]);
  assert(res_1121 && "failed to build Node_7611_modify.y (type:const)");
  res_1121->getOutput(0)->setName("Node_7611_modify.y:0");
  auto res_1122=network->addConstant(Dims2{1,1},mWeightsMap["const_1122"]);
  assert(res_1122 && "failed to build Node_7708_modify.y (type:const)");
  res_1122->getOutput(0)->setName("Node_7708_modify.y:0");
  auto res_1123=network->addConstant(Dims2{1,1},mWeightsMap["const_1123"]);
  assert(res_1123 && "failed to build Node_7733_modify.y (type:const)");
  res_1123->getOutput(0)->setName("Node_7733_modify.y:0");
  auto res_1124=network->addConstant(Dims2{1,1},mWeightsMap["const_1124"]);
  assert(res_1124 && "failed to build Node_7830_modify.y (type:const)");
  res_1124->getOutput(0)->setName("Node_7830_modify.y:0");
  auto res_1125=network->addConstant(Dims2{1,1},mWeightsMap["const_1125"]);
  assert(res_1125 && "failed to build Node_7855_modify.y (type:const)");
  res_1125->getOutput(0)->setName("Node_7855_modify.y:0");
  auto res_1126=network->addConstant(Dims2{1,1},mWeightsMap["const_1126"]);
  assert(res_1126 && "failed to build Node_7952_modify.y (type:const)");
  res_1126->getOutput(0)->setName("Node_7952_modify.y:0");
  auto res_1127=network->addConstant(Dims2{1,1},mWeightsMap["const_1127"]);
  assert(res_1127 && "failed to build Node_7977_modify.y (type:const)");
  res_1127->getOutput(0)->setName("Node_7977_modify.y:0");
  auto res_1128=network->addConstant(Dims2{1,1},mWeightsMap["const_1128"]);
  assert(res_1128 && "failed to build Node_8074_modify.y (type:const)");
  res_1128->getOutput(0)->setName("Node_8074_modify.y:0");
  auto res_1129=network->addConstant(Dims2{1,1},mWeightsMap["const_1129"]);
  assert(res_1129 && "failed to build Node_8099_modify.y (type:const)");
  res_1129->getOutput(0)->setName("Node_8099_modify.y:0");
  auto res_1130=network->addConstant(Dims2{1,1},mWeightsMap["const_1130"]);
  assert(res_1130 && "failed to build Node_179_power.power (type:const)");
  res_1130->getOutput(0)->setName("Node_179_power.power:0");
  auto res_1131=network->addConstant(Dims2{1,1},mWeightsMap["const_1131"]);
  assert(res_1131 && "failed to build Node_279_power.power (type:const)");
  res_1131->getOutput(0)->setName("Node_279_power.power:0");
  auto res_1132=network->addConstant(Dims2{1,1},mWeightsMap["const_1132"]);
  assert(res_1132 && "failed to build Node_304_power.power (type:const)");
  res_1132->getOutput(0)->setName("Node_304_power.power:0");
  auto res_1133=network->addConstant(Dims2{1,1},mWeightsMap["const_1133"]);
  assert(res_1133 && "failed to build Node_401_power.power (type:const)");
  res_1133->getOutput(0)->setName("Node_401_power.power:0");
  auto res_1134=network->addConstant(Dims2{1,1},mWeightsMap["const_1134"]);
  assert(res_1134 && "failed to build Node_426_power.power (type:const)");
  res_1134->getOutput(0)->setName("Node_426_power.power:0");
  auto res_1135=network->addConstant(Dims2{1,1},mWeightsMap["const_1135"]);
  assert(res_1135 && "failed to build Node_523_power.power (type:const)");
  res_1135->getOutput(0)->setName("Node_523_power.power:0");
  auto res_1136=network->addConstant(Dims2{1,1},mWeightsMap["const_1136"]);
  assert(res_1136 && "failed to build Node_548_power.power (type:const)");
  res_1136->getOutput(0)->setName("Node_548_power.power:0");
  auto res_1137=network->addConstant(Dims2{1,1},mWeightsMap["const_1137"]);
  assert(res_1137 && "failed to build Node_645_power.power (type:const)");
  res_1137->getOutput(0)->setName("Node_645_power.power:0");
  auto res_1138=network->addConstant(Dims2{1,1},mWeightsMap["const_1138"]);
  assert(res_1138 && "failed to build Node_670_power.power (type:const)");
  res_1138->getOutput(0)->setName("Node_670_power.power:0");
  auto res_1139=network->addConstant(Dims2{1,1},mWeightsMap["const_1139"]);
  assert(res_1139 && "failed to build Node_767_power.power (type:const)");
  res_1139->getOutput(0)->setName("Node_767_power.power:0");
  auto res_1140=network->addConstant(Dims2{1,1},mWeightsMap["const_1140"]);
  assert(res_1140 && "failed to build Node_792_power.power (type:const)");
  res_1140->getOutput(0)->setName("Node_792_power.power:0");
  auto res_1141=network->addConstant(Dims2{1,1},mWeightsMap["const_1141"]);
  assert(res_1141 && "failed to build Node_889_power.power (type:const)");
  res_1141->getOutput(0)->setName("Node_889_power.power:0");
  auto res_1142=network->addConstant(Dims2{1,1},mWeightsMap["const_1142"]);
  assert(res_1142 && "failed to build Node_914_power.power (type:const)");
  res_1142->getOutput(0)->setName("Node_914_power.power:0");
  auto res_1143=network->addConstant(Dims2{1,1},mWeightsMap["const_1143"]);
  assert(res_1143 && "failed to build Node_1005_power.power (type:const)");
  res_1143->getOutput(0)->setName("Node_1005_power.power:0");
  auto res_1144=network->addConstant(Dims2{1,1},mWeightsMap["const_1144"]);
  assert(res_1144 && "failed to build Node_1105_power.power (type:const)");
  res_1144->getOutput(0)->setName("Node_1105_power.power:0");
  auto res_1145=network->addConstant(Dims2{1,1},mWeightsMap["const_1145"]);
  assert(res_1145 && "failed to build Node_1130_power.power (type:const)");
  res_1145->getOutput(0)->setName("Node_1130_power.power:0");
  auto res_1146=network->addConstant(Dims2{1,1},mWeightsMap["const_1146"]);
  assert(res_1146 && "failed to build Node_1227_power.power (type:const)");
  res_1146->getOutput(0)->setName("Node_1227_power.power:0");
  auto res_1147=network->addConstant(Dims2{1,1},mWeightsMap["const_1147"]);
  assert(res_1147 && "failed to build Node_1252_power.power (type:const)");
  res_1147->getOutput(0)->setName("Node_1252_power.power:0");
  auto res_1148=network->addConstant(Dims2{1,1},mWeightsMap["const_1148"]);
  assert(res_1148 && "failed to build Node_1349_power.power (type:const)");
  res_1148->getOutput(0)->setName("Node_1349_power.power:0");
  auto res_1149=network->addConstant(Dims2{1,1},mWeightsMap["const_1149"]);
  assert(res_1149 && "failed to build Node_1374_power.power (type:const)");
  res_1149->getOutput(0)->setName("Node_1374_power.power:0");
  auto res_1150=network->addConstant(Dims2{1,1},mWeightsMap["const_1150"]);
  assert(res_1150 && "failed to build Node_1471_power.power (type:const)");
  res_1150->getOutput(0)->setName("Node_1471_power.power:0");
  auto res_1151=network->addConstant(Dims2{1,1},mWeightsMap["const_1151"]);
  assert(res_1151 && "failed to build Node_1496_power.power (type:const)");
  res_1151->getOutput(0)->setName("Node_1496_power.power:0");
  auto res_1152=network->addConstant(Dims2{1,1},mWeightsMap["const_1152"]);
  assert(res_1152 && "failed to build Node_1593_power.power (type:const)");
  res_1152->getOutput(0)->setName("Node_1593_power.power:0");
  auto res_1153=network->addConstant(Dims2{1,1},mWeightsMap["const_1153"]);
  assert(res_1153 && "failed to build Node_1618_power.power (type:const)");
  res_1153->getOutput(0)->setName("Node_1618_power.power:0");
  auto res_1154=network->addConstant(Dims2{1,1},mWeightsMap["const_1154"]);
  assert(res_1154 && "failed to build Node_1715_power.power (type:const)");
  res_1154->getOutput(0)->setName("Node_1715_power.power:0");
  auto res_1155=network->addConstant(Dims2{1,1},mWeightsMap["const_1155"]);
  assert(res_1155 && "failed to build Node_1740_power.power (type:const)");
  res_1155->getOutput(0)->setName("Node_1740_power.power:0");
  auto res_1156=network->addConstant(Dims2{1,1},mWeightsMap["const_1156"]);
  assert(res_1156 && "failed to build Node_1831_power.power (type:const)");
  res_1156->getOutput(0)->setName("Node_1831_power.power:0");
  auto res_1157=network->addConstant(Dims2{1,1},mWeightsMap["const_1157"]);
  assert(res_1157 && "failed to build Node_1931_power.power (type:const)");
  res_1157->getOutput(0)->setName("Node_1931_power.power:0");
  auto res_1158=network->addConstant(Dims2{1,1},mWeightsMap["const_1158"]);
  assert(res_1158 && "failed to build Node_1956_power.power (type:const)");
  res_1158->getOutput(0)->setName("Node_1956_power.power:0");
  auto res_1159=network->addConstant(Dims2{1,1},mWeightsMap["const_1159"]);
  assert(res_1159 && "failed to build Node_2053_power.power (type:const)");
  res_1159->getOutput(0)->setName("Node_2053_power.power:0");
  auto res_1160=network->addConstant(Dims2{1,1},mWeightsMap["const_1160"]);
  assert(res_1160 && "failed to build Node_2078_power.power (type:const)");
  res_1160->getOutput(0)->setName("Node_2078_power.power:0");
  auto res_1161=network->addConstant(Dims2{1,1},mWeightsMap["const_1161"]);
  assert(res_1161 && "failed to build Node_2175_power.power (type:const)");
  res_1161->getOutput(0)->setName("Node_2175_power.power:0");
  auto res_1162=network->addConstant(Dims2{1,1},mWeightsMap["const_1162"]);
  assert(res_1162 && "failed to build Node_2200_power.power (type:const)");
  res_1162->getOutput(0)->setName("Node_2200_power.power:0");
  auto res_1163=network->addConstant(Dims2{1,1},mWeightsMap["const_1163"]);
  assert(res_1163 && "failed to build Node_2297_power.power (type:const)");
  res_1163->getOutput(0)->setName("Node_2297_power.power:0");
  auto res_1164=network->addConstant(Dims2{1,1},mWeightsMap["const_1164"]);
  assert(res_1164 && "failed to build Node_2322_power.power (type:const)");
  res_1164->getOutput(0)->setName("Node_2322_power.power:0");
  auto res_1165=network->addConstant(Dims2{1,1},mWeightsMap["const_1165"]);
  assert(res_1165 && "failed to build Node_2419_power.power (type:const)");
  res_1165->getOutput(0)->setName("Node_2419_power.power:0");
  auto res_1166=network->addConstant(Dims2{1,1},mWeightsMap["const_1166"]);
  assert(res_1166 && "failed to build Node_2444_power.power (type:const)");
  res_1166->getOutput(0)->setName("Node_2444_power.power:0");
  auto res_1167=network->addConstant(Dims2{1,1},mWeightsMap["const_1167"]);
  assert(res_1167 && "failed to build Node_2541_power.power (type:const)");
  res_1167->getOutput(0)->setName("Node_2541_power.power:0");
  auto res_1168=network->addConstant(Dims2{1,1},mWeightsMap["const_1168"]);
  assert(res_1168 && "failed to build Node_2566_power.power (type:const)");
  res_1168->getOutput(0)->setName("Node_2566_power.power:0");
  auto res_1169=network->addConstant(Dims2{1,1},mWeightsMap["const_1169"]);
  assert(res_1169 && "failed to build Node_2774_power.power (type:const)");
  res_1169->getOutput(0)->setName("Node_2774_power.power:0");
  auto res_1170=network->addConstant(Dims2{1,1},mWeightsMap["const_1170"]);
  assert(res_1170 && "failed to build Node_2864_power.power (type:const)");
  res_1170->getOutput(0)->setName("Node_2864_power.power:0");
  auto res_1171=network->addConstant(Dims2{1,1},mWeightsMap["const_1171"]);
  assert(res_1171 && "failed to build Node_2883_power.power (type:const)");
  res_1171->getOutput(0)->setName("Node_2883_power.power:0");
  auto res_1172=network->addConstant(Dims2{1,1},mWeightsMap["const_1172"]);
  assert(res_1172 && "failed to build Node_2970_power.power (type:const)");
  res_1172->getOutput(0)->setName("Node_2970_power.power:0");
  auto res_1173=network->addConstant(Dims2{1,1},mWeightsMap["const_1173"]);
  assert(res_1173 && "failed to build Node_2989_power.power (type:const)");
  res_1173->getOutput(0)->setName("Node_2989_power.power:0");
  auto res_1174=network->addConstant(Dims2{1,1},mWeightsMap["const_1174"]);
  assert(res_1174 && "failed to build Node_3076_power.power (type:const)");
  res_1174->getOutput(0)->setName("Node_3076_power.power:0");
  auto res_1175=network->addConstant(Dims2{1,1},mWeightsMap["const_1175"]);
  assert(res_1175 && "failed to build Node_3095_power.power (type:const)");
  res_1175->getOutput(0)->setName("Node_3095_power.power:0");
  auto res_1176=network->addConstant(Dims2{1,1},mWeightsMap["const_1176"]);
  assert(res_1176 && "failed to build Node_3182_power.power (type:const)");
  res_1176->getOutput(0)->setName("Node_3182_power.power:0");
  auto res_1177=network->addConstant(Dims2{1,1},mWeightsMap["const_1177"]);
  assert(res_1177 && "failed to build Node_3201_power.power (type:const)");
  res_1177->getOutput(0)->setName("Node_3201_power.power:0");
  auto res_1178=network->addConstant(Dims2{1,1},mWeightsMap["const_1178"]);
  assert(res_1178 && "failed to build Node_3288_power.power (type:const)");
  res_1178->getOutput(0)->setName("Node_3288_power.power:0");
  auto res_1179=network->addConstant(Dims2{1,1},mWeightsMap["const_1179"]);
  assert(res_1179 && "failed to build Node_3307_power.power (type:const)");
  res_1179->getOutput(0)->setName("Node_3307_power.power:0");
  auto res_1180=network->addConstant(Dims2{1,1},mWeightsMap["const_1180"]);
  assert(res_1180 && "failed to build Node_3394_power.power (type:const)");
  res_1180->getOutput(0)->setName("Node_3394_power.power:0");
  auto res_1181=network->addConstant(Dims2{1,1},mWeightsMap["const_1181"]);
  assert(res_1181 && "failed to build Node_3413_power.power (type:const)");
  res_1181->getOutput(0)->setName("Node_3413_power.power:0");
  auto res_1182=network->addConstant(Dims2{1,1},mWeightsMap["const_1182"]);
  assert(res_1182 && "failed to build Node_3517_power.power (type:const)");
  res_1182->getOutput(0)->setName("Node_3517_power.power:0");
  auto res_1183=network->addConstant(Dims2{1,1},mWeightsMap["const_1183"]);
  assert(res_1183 && "failed to build Node_3607_power.power (type:const)");
  res_1183->getOutput(0)->setName("Node_3607_power.power:0");
  auto res_1184=network->addConstant(Dims2{1,1},mWeightsMap["const_1184"]);
  assert(res_1184 && "failed to build Node_3626_power.power (type:const)");
  res_1184->getOutput(0)->setName("Node_3626_power.power:0");
  auto res_1185=network->addConstant(Dims2{1,1},mWeightsMap["const_1185"]);
  assert(res_1185 && "failed to build Node_3713_power.power (type:const)");
  res_1185->getOutput(0)->setName("Node_3713_power.power:0");
  auto res_1186=network->addConstant(Dims2{1,1},mWeightsMap["const_1186"]);
  assert(res_1186 && "failed to build Node_3732_power.power (type:const)");
  res_1186->getOutput(0)->setName("Node_3732_power.power:0");
  auto res_1187=network->addConstant(Dims2{1,1},mWeightsMap["const_1187"]);
  assert(res_1187 && "failed to build Node_3819_power.power (type:const)");
  res_1187->getOutput(0)->setName("Node_3819_power.power:0");
  auto res_1188=network->addConstant(Dims2{1,1},mWeightsMap["const_1188"]);
  assert(res_1188 && "failed to build Node_3838_power.power (type:const)");
  res_1188->getOutput(0)->setName("Node_3838_power.power:0");
  auto res_1189=network->addConstant(Dims2{1,1},mWeightsMap["const_1189"]);
  assert(res_1189 && "failed to build Node_3925_power.power (type:const)");
  res_1189->getOutput(0)->setName("Node_3925_power.power:0");
  auto res_1190=network->addConstant(Dims2{1,1},mWeightsMap["const_1190"]);
  assert(res_1190 && "failed to build Node_3944_power.power (type:const)");
  res_1190->getOutput(0)->setName("Node_3944_power.power:0");
  auto res_1191=network->addConstant(Dims2{1,1},mWeightsMap["const_1191"]);
  assert(res_1191 && "failed to build Node_4031_power.power (type:const)");
  res_1191->getOutput(0)->setName("Node_4031_power.power:0");
  auto res_1192=network->addConstant(Dims2{1,1},mWeightsMap["const_1192"]);
  assert(res_1192 && "failed to build Node_4050_power.power (type:const)");
  res_1192->getOutput(0)->setName("Node_4050_power.power:0");
  auto res_1193=network->addConstant(Dims2{1,1},mWeightsMap["const_1193"]);
  assert(res_1193 && "failed to build Node_4137_power.power (type:const)");
  res_1193->getOutput(0)->setName("Node_4137_power.power:0");
  auto res_1194=network->addConstant(Dims2{1,1},mWeightsMap["const_1194"]);
  assert(res_1194 && "failed to build Node_4156_power.power (type:const)");
  res_1194->getOutput(0)->setName("Node_4156_power.power:0");
  auto res_1195=network->addConstant(Dims2{1,1},mWeightsMap["const_1195"]);
  assert(res_1195 && "failed to build Node_4273_power.power (type:const)");
  res_1195->getOutput(0)->setName("Node_4273_power.power:0");
  auto res_1196=network->addConstant(Dims2{1,1},mWeightsMap["const_1196"]);
  assert(res_1196 && "failed to build Node_4373_power.power (type:const)");
  res_1196->getOutput(0)->setName("Node_4373_power.power:0");
  auto res_1197=network->addConstant(Dims2{1,1},mWeightsMap["const_1197"]);
  assert(res_1197 && "failed to build Node_4398_power.power (type:const)");
  res_1197->getOutput(0)->setName("Node_4398_power.power:0");
  auto res_1198=network->addConstant(Dims2{1,1},mWeightsMap["const_1198"]);
  assert(res_1198 && "failed to build Node_4495_power.power (type:const)");
  res_1198->getOutput(0)->setName("Node_4495_power.power:0");
  auto res_1199=network->addConstant(Dims2{1,1},mWeightsMap["const_1199"]);
  assert(res_1199 && "failed to build Node_4520_power.power (type:const)");
  res_1199->getOutput(0)->setName("Node_4520_power.power:0");
  auto res_1200=network->addConstant(Dims2{1,1},mWeightsMap["const_1200"]);
  assert(res_1200 && "failed to build Node_4617_power.power (type:const)");
  res_1200->getOutput(0)->setName("Node_4617_power.power:0");
  auto res_1201=network->addConstant(Dims2{1,1},mWeightsMap["const_1201"]);
  assert(res_1201 && "failed to build Node_4642_power.power (type:const)");
  res_1201->getOutput(0)->setName("Node_4642_power.power:0");
  auto res_1202=network->addConstant(Dims2{1,1},mWeightsMap["const_1202"]);
  assert(res_1202 && "failed to build Node_4739_power.power (type:const)");
  res_1202->getOutput(0)->setName("Node_4739_power.power:0");
  auto res_1203=network->addConstant(Dims2{1,1},mWeightsMap["const_1203"]);
  assert(res_1203 && "failed to build Node_4764_power.power (type:const)");
  res_1203->getOutput(0)->setName("Node_4764_power.power:0");
  auto res_1204=network->addConstant(Dims2{1,1},mWeightsMap["const_1204"]);
  assert(res_1204 && "failed to build Node_4861_power.power (type:const)");
  res_1204->getOutput(0)->setName("Node_4861_power.power:0");
  auto res_1205=network->addConstant(Dims2{1,1},mWeightsMap["const_1205"]);
  assert(res_1205 && "failed to build Node_4886_power.power (type:const)");
  res_1205->getOutput(0)->setName("Node_4886_power.power:0");
  auto res_1206=network->addConstant(Dims2{1,1},mWeightsMap["const_1206"]);
  assert(res_1206 && "failed to build Node_4983_power.power (type:const)");
  res_1206->getOutput(0)->setName("Node_4983_power.power:0");
  auto res_1207=network->addConstant(Dims2{1,1},mWeightsMap["const_1207"]);
  assert(res_1207 && "failed to build Node_5008_power.power (type:const)");
  res_1207->getOutput(0)->setName("Node_5008_power.power:0");
  auto res_1208=network->addConstant(Dims2{1,1},mWeightsMap["const_1208"]);
  assert(res_1208 && "failed to build Node_5099_power.power (type:const)");
  res_1208->getOutput(0)->setName("Node_5099_power.power:0");
  auto res_1209=network->addConstant(Dims2{1,1},mWeightsMap["const_1209"]);
  assert(res_1209 && "failed to build Node_5198_power.power (type:const)");
  res_1209->getOutput(0)->setName("Node_5198_power.power:0");
  auto res_1210=network->addConstant(Dims2{1,1},mWeightsMap["const_1210"]);
  assert(res_1210 && "failed to build Node_5223_power.power (type:const)");
  res_1210->getOutput(0)->setName("Node_5223_power.power:0");
  auto res_1211=network->addConstant(Dims2{1,1},mWeightsMap["const_1211"]);
  assert(res_1211 && "failed to build Node_5319_power.power (type:const)");
  res_1211->getOutput(0)->setName("Node_5319_power.power:0");
  auto res_1212=network->addConstant(Dims2{1,1},mWeightsMap["const_1212"]);
  assert(res_1212 && "failed to build Node_5344_power.power (type:const)");
  res_1212->getOutput(0)->setName("Node_5344_power.power:0");
  auto res_1213=network->addConstant(Dims2{1,1},mWeightsMap["const_1213"]);
  assert(res_1213 && "failed to build Node_5440_power.power (type:const)");
  res_1213->getOutput(0)->setName("Node_5440_power.power:0");
  auto res_1214=network->addConstant(Dims2{1,1},mWeightsMap["const_1214"]);
  assert(res_1214 && "failed to build Node_5465_power.power (type:const)");
  res_1214->getOutput(0)->setName("Node_5465_power.power:0");
  auto res_1215=network->addConstant(Dims2{1,1},mWeightsMap["const_1215"]);
  assert(res_1215 && "failed to build Node_5561_power.power (type:const)");
  res_1215->getOutput(0)->setName("Node_5561_power.power:0");
  auto res_1216=network->addConstant(Dims2{1,1},mWeightsMap["const_1216"]);
  assert(res_1216 && "failed to build Node_5586_power.power (type:const)");
  res_1216->getOutput(0)->setName("Node_5586_power.power:0");
  auto res_1217=network->addConstant(Dims2{1,1},mWeightsMap["const_1217"]);
  assert(res_1217 && "failed to build Node_6524_power.power (type:const)");
  res_1217->getOutput(0)->setName("Node_6524_power.power:0");
  auto res_1218=network->addConstant(Dims2{1,1},mWeightsMap["const_1218"]);
  assert(res_1218 && "failed to build Node_6624_power.power (type:const)");
  res_1218->getOutput(0)->setName("Node_6624_power.power:0");
  auto res_1219=network->addConstant(Dims2{1,1},mWeightsMap["const_1219"]);
  assert(res_1219 && "failed to build Node_6649_power.power (type:const)");
  res_1219->getOutput(0)->setName("Node_6649_power.power:0");
  auto res_1220=network->addConstant(Dims2{1,1},mWeightsMap["const_1220"]);
  assert(res_1220 && "failed to build Node_6746_power.power (type:const)");
  res_1220->getOutput(0)->setName("Node_6746_power.power:0");
  auto res_1221=network->addConstant(Dims2{1,1},mWeightsMap["const_1221"]);
  assert(res_1221 && "failed to build Node_6771_power.power (type:const)");
  res_1221->getOutput(0)->setName("Node_6771_power.power:0");
  auto res_1222=network->addConstant(Dims2{1,1},mWeightsMap["const_1222"]);
  assert(res_1222 && "failed to build Node_6868_power.power (type:const)");
  res_1222->getOutput(0)->setName("Node_6868_power.power:0");
  auto res_1223=network->addConstant(Dims2{1,1},mWeightsMap["const_1223"]);
  assert(res_1223 && "failed to build Node_6893_power.power (type:const)");
  res_1223->getOutput(0)->setName("Node_6893_power.power:0");
  auto res_1224=network->addConstant(Dims2{1,1},mWeightsMap["const_1224"]);
  assert(res_1224 && "failed to build Node_6990_power.power (type:const)");
  res_1224->getOutput(0)->setName("Node_6990_power.power:0");
  auto res_1225=network->addConstant(Dims2{1,1},mWeightsMap["const_1225"]);
  assert(res_1225 && "failed to build Node_7015_power.power (type:const)");
  res_1225->getOutput(0)->setName("Node_7015_power.power:0");
  auto res_1226=network->addConstant(Dims2{1,1},mWeightsMap["const_1226"]);
  assert(res_1226 && "failed to build Node_7112_power.power (type:const)");
  res_1226->getOutput(0)->setName("Node_7112_power.power:0");
  auto res_1227=network->addConstant(Dims2{1,1},mWeightsMap["const_1227"]);
  assert(res_1227 && "failed to build Node_7137_power.power (type:const)");
  res_1227->getOutput(0)->setName("Node_7137_power.power:0");
  auto res_1228=network->addConstant(Dims2{1,1},mWeightsMap["const_1228"]);
  assert(res_1228 && "failed to build Node_7234_power.power (type:const)");
  res_1228->getOutput(0)->setName("Node_7234_power.power:0");
  auto res_1229=network->addConstant(Dims2{1,1},mWeightsMap["const_1229"]);
  assert(res_1229 && "failed to build Node_7259_power.power (type:const)");
  res_1229->getOutput(0)->setName("Node_7259_power.power:0");
  auto res_1230=network->addConstant(Dims2{1,1},mWeightsMap["const_1230"]);
  assert(res_1230 && "failed to build Node_5698_power.power (type:const)");
  res_1230->getOutput(0)->setName("Node_5698_power.power:0");
  auto res_1231=network->addConstant(Dims2{1,1},mWeightsMap["const_1231"]);
  assert(res_1231 && "failed to build Node_5798_power.power (type:const)");
  res_1231->getOutput(0)->setName("Node_5798_power.power:0");
  auto res_1232=network->addConstant(Dims2{1,1},mWeightsMap["const_1232"]);
  assert(res_1232 && "failed to build Node_5823_power.power (type:const)");
  res_1232->getOutput(0)->setName("Node_5823_power.power:0");
  auto res_1233=network->addConstant(Dims2{1,1},mWeightsMap["const_1233"]);
  assert(res_1233 && "failed to build Node_5920_power.power (type:const)");
  res_1233->getOutput(0)->setName("Node_5920_power.power:0");
  auto res_1234=network->addConstant(Dims2{1,1},mWeightsMap["const_1234"]);
  assert(res_1234 && "failed to build Node_5945_power.power (type:const)");
  res_1234->getOutput(0)->setName("Node_5945_power.power:0");
  auto res_1235=network->addConstant(Dims2{1,1},mWeightsMap["const_1235"]);
  assert(res_1235 && "failed to build Node_6042_power.power (type:const)");
  res_1235->getOutput(0)->setName("Node_6042_power.power:0");
  auto res_1236=network->addConstant(Dims2{1,1},mWeightsMap["const_1236"]);
  assert(res_1236 && "failed to build Node_6067_power.power (type:const)");
  res_1236->getOutput(0)->setName("Node_6067_power.power:0");
  auto res_1237=network->addConstant(Dims2{1,1},mWeightsMap["const_1237"]);
  assert(res_1237 && "failed to build Node_6164_power.power (type:const)");
  res_1237->getOutput(0)->setName("Node_6164_power.power:0");
  auto res_1238=network->addConstant(Dims2{1,1},mWeightsMap["const_1238"]);
  assert(res_1238 && "failed to build Node_6189_power.power (type:const)");
  res_1238->getOutput(0)->setName("Node_6189_power.power:0");
  auto res_1239=network->addConstant(Dims2{1,1},mWeightsMap["const_1239"]);
  assert(res_1239 && "failed to build Node_6286_power.power (type:const)");
  res_1239->getOutput(0)->setName("Node_6286_power.power:0");
  auto res_1240=network->addConstant(Dims2{1,1},mWeightsMap["const_1240"]);
  assert(res_1240 && "failed to build Node_6311_power.power (type:const)");
  res_1240->getOutput(0)->setName("Node_6311_power.power:0");
  auto res_1241=network->addConstant(Dims2{1,1},mWeightsMap["const_1241"]);
  assert(res_1241 && "failed to build Node_6408_power.power (type:const)");
  res_1241->getOutput(0)->setName("Node_6408_power.power:0");
  auto res_1242=network->addConstant(Dims2{1,1},mWeightsMap["const_1242"]);
  assert(res_1242 && "failed to build Node_6433_power.power (type:const)");
  res_1242->getOutput(0)->setName("Node_6433_power.power:0");
  auto res_1243=network->addConstant(Dims2{1,1},mWeightsMap["const_1243"]);
  assert(res_1243 && "failed to build Node_7364_power.power (type:const)");
  res_1243->getOutput(0)->setName("Node_7364_power.power:0");
  auto res_1244=network->addConstant(Dims2{1,1},mWeightsMap["const_1244"]);
  assert(res_1244 && "failed to build Node_7464_power.power (type:const)");
  res_1244->getOutput(0)->setName("Node_7464_power.power:0");
  auto res_1245=network->addConstant(Dims2{1,1},mWeightsMap["const_1245"]);
  assert(res_1245 && "failed to build Node_7489_power.power (type:const)");
  res_1245->getOutput(0)->setName("Node_7489_power.power:0");
  auto res_1246=network->addConstant(Dims2{1,1},mWeightsMap["const_1246"]);
  assert(res_1246 && "failed to build Node_7586_power.power (type:const)");
  res_1246->getOutput(0)->setName("Node_7586_power.power:0");
  auto res_1247=network->addConstant(Dims2{1,1},mWeightsMap["const_1247"]);
  assert(res_1247 && "failed to build Node_7611_power.power (type:const)");
  res_1247->getOutput(0)->setName("Node_7611_power.power:0");
  auto res_1248=network->addConstant(Dims2{1,1},mWeightsMap["const_1248"]);
  assert(res_1248 && "failed to build Node_7708_power.power (type:const)");
  res_1248->getOutput(0)->setName("Node_7708_power.power:0");
  auto res_1249=network->addConstant(Dims2{1,1},mWeightsMap["const_1249"]);
  assert(res_1249 && "failed to build Node_7733_power.power (type:const)");
  res_1249->getOutput(0)->setName("Node_7733_power.power:0");
  auto res_1250=network->addConstant(Dims2{1,1},mWeightsMap["const_1250"]);
  assert(res_1250 && "failed to build Node_7830_power.power (type:const)");
  res_1250->getOutput(0)->setName("Node_7830_power.power:0");
  auto res_1251=network->addConstant(Dims2{1,1},mWeightsMap["const_1251"]);
  assert(res_1251 && "failed to build Node_7855_power.power (type:const)");
  res_1251->getOutput(0)->setName("Node_7855_power.power:0");
  auto res_1252=network->addConstant(Dims2{1,1},mWeightsMap["const_1252"]);
  assert(res_1252 && "failed to build Node_7952_power.power (type:const)");
  res_1252->getOutput(0)->setName("Node_7952_power.power:0");
  auto res_1253=network->addConstant(Dims2{1,1},mWeightsMap["const_1253"]);
  assert(res_1253 && "failed to build Node_7977_power.power (type:const)");
  res_1253->getOutput(0)->setName("Node_7977_power.power:0");
  auto res_1254=network->addConstant(Dims2{1,1},mWeightsMap["const_1254"]);
  assert(res_1254 && "failed to build Node_8074_power.power (type:const)");
  res_1254->getOutput(0)->setName("Node_8074_power.power:0");
  auto res_1255=network->addConstant(Dims2{1,1},mWeightsMap["const_1255"]);
  assert(res_1255 && "failed to build Node_8099_power.power (type:const)");
  res_1255->getOutput(0)->setName("Node_8099_power.power:0");
  auto res_1256=network->addShuffle(*res_63->getOutput(0));
  res_1256->setReshapeDimensions(Dims{1,{1},{DimensionType::kCHANNEL}});
  assert(res_1256 && "failed to build Node_7322_reshape (type:reshape)");
  res_1256->getOutput(0)->setName("Node_7322_reshape:0");
  auto res_1257=network->addGather(*res_920->getOutput(0),*inputs[0],0);
  assert(res_1257 && "failed to build Node_114 (type:gather)");
  res_1257->getOutput(0)->setName("Node_114:0");
  auto res_1258=network->addShuffle(*inputs[1]);
  res_1258->setReshapeDimensions(Dims{2,{128,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1258 && "failed to build Node_117 (type:reshape)");
  res_1258->getOutput(0)->setName("Node_117:0");
  auto res_1259=network->addElementWise(*res_36->getOutput(0),*res_1258->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1259 && "failed to build Node_119 (type:add)");
  res_1259->getOutput(0)->setName("Node_119:0");
  auto res_1260=network->addElementWise(*res_1257->getOutput(0),*res_1259->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1260 && "failed to build Node_120 (type:multiply)");
  res_1260->getOutput(0)->setName("Node_120:0");
  auto res_1261=network->addShuffle(*inputs[1]);
  res_1261->setReshapeDimensions(Dims{2,{128,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1261 && "failed to build Node_133 (type:reshape)");
  res_1261->getOutput(0)->setName("Node_133:0");
  auto res_1262=network->addElementWise(*res_37->getOutput(0),*res_1261->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1262 && "failed to build Node_135 (type:add)");
  res_1262->getOutput(0)->setName("Node_135:0");
  auto res_1263=network->addShuffle(*inputs[1]);
  res_1263->setReshapeDimensions(Dims{2,{128,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1263 && "failed to build Node_149 (type:reshape)");
  res_1263->getOutput(0)->setName("Node_149:0");
  auto res_1264=network->addElementWise(*res_38->getOutput(0),*res_1263->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1264 && "failed to build Node_151 (type:add)");
  res_1264->getOutput(0)->setName("Node_151:0");
  auto res_1265=network->addShuffle(*inputs[1]);
  res_1265->setReshapeDimensions(Dims3{1,1,128});
  assert(res_1265 && "failed to build Node_169 (type:reshape)");
  res_1265->getOutput(0)->setName("Node_169:0");
  auto res_1266=network->addElementWise(*res_926->getOutput(0),*res_1265->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1266 && "failed to build Node_171 (type:sub)");
  res_1266->getOutput(0)->setName("Node_171:0");
  auto res_1267=network->addElementWise(*res_1266->getOutput(0),*res_927->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1267 && "failed to build Node_172 (type:multiply)");
  res_1267->getOutput(0)->setName("Node_172:0");
  auto res_1268=network->addGather(*res_920->getOutput(0),*inputs[2],0);
  assert(res_1268 && "failed to build Node_130 (type:gather)");
  res_1268->getOutput(0)->setName("Node_130:0");
  auto res_1269=network->addElementWise(*res_1268->getOutput(0),*res_1262->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1269 && "failed to build Node_136 (type:multiply)");
  res_1269->getOutput(0)->setName("Node_136:0");
  auto res_1270=network->addElementWise(*res_1260->getOutput(0),*res_1269->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1270 && "failed to build Node_159 (type:add)");
  res_1270->getOutput(0)->setName("Node_159:0");
  auto res_1271=network->addGather(*res_920->getOutput(0),*inputs[3],0);
  assert(res_1271 && "failed to build Node_146 (type:gather)");
  res_1271->getOutput(0)->setName("Node_146:0");
  auto res_1272=network->addElementWise(*res_1271->getOutput(0),*res_1264->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1272 && "failed to build Node_152 (type:multiply)");
  res_1272->getOutput(0)->setName("Node_152:0");
  auto res_1273=network->addElementWise(*res_1270->getOutput(0),*res_1272->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1273 && "failed to build Node_160 (type:add)");
  res_1273->getOutput(0)->setName("Node_160:0");
  auto res_1274=network->addReduce(*res_1273->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1274 && "failed to build Node_179_mean (type:mean)");
  res_1274->getOutput(0)->setName("Node_179_mean:0");
  auto res_1275=network->addElementWise(*res_1273->getOutput(0),*res_1274->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1275 && "failed to build Node_179_diff (type:sub)");
  res_1275->getOutput(0)->setName("Node_179_diff:0");
  auto res_1276=network->addElementWise(*res_1275->getOutput(0),*res_1130->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1276 && "failed to build Node_179_power (type:power)");
  res_1276->getOutput(0)->setName("Node_179_power:0");
  auto res_1277=network->addReduce(*res_1276->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1277 && "failed to build Node_179_var (type:mean)");
  res_1277->getOutput(0)->setName("Node_179_var:0");
  auto res_1278=network->addElementWise(*res_1277->getOutput(0),*res_1004->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1278 && "failed to build Node_179_modify (type:add)");
  res_1278->getOutput(0)->setName("Node_179_modify:0");
  auto res_1279=network->addUnary(*res_1278->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1279 && "failed to build Node_179_sqrt (type:power)");
  res_1279->getOutput(0)->setName("Node_179_sqrt:0");
  auto res_1280=network->addElementWise(*res_1275->getOutput(0),*res_1279->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1280 && "failed to build Node_179_rsqrt (type:divide)");
  res_1280->getOutput(0)->setName("Node_179_rsqrt:0");
  auto res_1281=network->addElementWise(*res_1280->getOutput(0),*res_70->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1281 && "failed to build Node_179_mul (type:multiply)");
  res_1281->getOutput(0)->setName("Node_179_mul:0");
  auto res_1282=network->addElementWise(*res_1281->getOutput(0),*res_71->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1282 && "failed to build Node_179 (type:add)");
  res_1282->getOutput(0)->setName("Node_179:0");
  auto res_1283=network->addMatrixMultiply(*res_1282->getOutput(0),MatrixOperation::kNONE,*res_296->getOutput(0),MatrixOperation::kNONE);
  assert(res_1283 && "failed to build Node_199 (type:matmul)");
  res_1283->getOutput(0)->setName("Node_199:0");
  auto res_1284=network->addElementWise(*res_1283->getOutput(0),*res_297->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1284 && "failed to build Node_199_add (type:add)");
  res_1284->getOutput(0)->setName("Node_199_add:0");
  auto res_1285=network->addShuffle(*res_1284->getOutput(0));
  res_1285->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1285 && "failed to build Node_219 (type:reshape)");
  res_1285->getOutput(0)->setName("Node_219:0");
  auto res_1286=network->addShuffle(*res_1285->getOutput(0));
  Permutation permute_1286;
  permute_1286.order[0]=1;
  permute_1286.order[1]=0;
  permute_1286.order[2]=2;
  res_1286->setFirstTranspose(permute_1286);
  assert(res_1286 && "failed to build Node_221 (type:transpose)");
  res_1286->getOutput(0)->setName("Node_221:0");
  auto res_1287=network->addMatrixMultiply(*res_1282->getOutput(0),MatrixOperation::kNONE,*res_298->getOutput(0),MatrixOperation::kNONE);
  assert(res_1287 && "failed to build Node_205 (type:matmul)");
  res_1287->getOutput(0)->setName("Node_205:0");
  auto res_1288=network->addElementWise(*res_1287->getOutput(0),*res_299->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1288 && "failed to build Node_205_add (type:add)");
  res_1288->getOutput(0)->setName("Node_205_add:0");
  auto res_1289=network->addShuffle(*res_1288->getOutput(0));
  res_1289->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1289 && "failed to build Node_229 (type:reshape)");
  res_1289->getOutput(0)->setName("Node_229:0");
  auto res_1290=network->addShuffle(*res_1289->getOutput(0));
  Permutation permute_1290;
  permute_1290.order[0]=1;
  permute_1290.order[1]=2;
  permute_1290.order[2]=0;
  res_1290->setFirstTranspose(permute_1290);
  assert(res_1290 && "failed to build Node_242 (type:transpose)");
  res_1290->getOutput(0)->setName("Node_242:0");
  auto res_1291=network->addMatrixMultiply(*res_1286->getOutput(0),MatrixOperation::kNONE,*res_1290->getOutput(0),MatrixOperation::kNONE);
  assert(res_1291 && "failed to build Node_243 (type:matmul)");
  res_1291->getOutput(0)->setName("Node_243:0");
  auto res_1292=network->addElementWise(*res_1291->getOutput(0),*res_928->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1292 && "failed to build Node_244 (type:divide)");
  res_1292->getOutput(0)->setName("Node_244:0");
  auto res_1293=network->addElementWise(*res_1292->getOutput(0),*res_1267->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1293 && "failed to build Node_245 (type:add)");
  res_1293->getOutput(0)->setName("Node_245:0");
  auto res_1294=network->addSoftMax(*res_1293->getOutput(0));
  res_1294->setAxes(4);
  assert(res_1294 && "failed to build Node_246 (type:softmax)");
  res_1294->getOutput(0)->setName("Node_246:0");
  auto res_1295=network->addMatrixMultiply(*res_1282->getOutput(0),MatrixOperation::kNONE,*res_300->getOutput(0),MatrixOperation::kNONE);
  assert(res_1295 && "failed to build Node_211 (type:matmul)");
  res_1295->getOutput(0)->setName("Node_211:0");
  auto res_1296=network->addElementWise(*res_1295->getOutput(0),*res_301->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1296 && "failed to build Node_211_add (type:add)");
  res_1296->getOutput(0)->setName("Node_211_add:0");
  auto res_1297=network->addShuffle(*res_1296->getOutput(0));
  res_1297->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1297 && "failed to build Node_239 (type:reshape)");
  res_1297->getOutput(0)->setName("Node_239:0");
  auto res_1298=network->addShuffle(*res_1297->getOutput(0));
  Permutation permute_1298;
  permute_1298.order[0]=1;
  permute_1298.order[1]=0;
  permute_1298.order[2]=2;
  res_1298->setFirstTranspose(permute_1298);
  assert(res_1298 && "failed to build Node_241 (type:transpose)");
  res_1298->getOutput(0)->setName("Node_241:0");
  auto res_1299=network->addMatrixMultiply(*res_1294->getOutput(0),MatrixOperation::kNONE,*res_1298->getOutput(0),MatrixOperation::kNONE);
  assert(res_1299 && "failed to build Node_250 (type:matmul)");
  res_1299->getOutput(0)->setName("Node_250:0");
  auto res_1300=network->addShuffle(*res_1299->getOutput(0));
  Permutation permute_1300;
  permute_1300.order[0]=1;
  permute_1300.order[1]=0;
  permute_1300.order[2]=2;
  res_1300->setFirstTranspose(permute_1300);
  assert(res_1300 && "failed to build Node_252 (type:transpose)");
  res_1300->getOutput(0)->setName("Node_252:0");
  auto res_1301=network->addIdentity(*res_1300->getOutput(0));
  assert(res_1301 && "failed to build Node_253 (type:contiguous)");
  res_1301->getOutput(0)->setName("Node_253:0");
  auto res_1302=network->addShuffle(*res_1301->getOutput(0));
  res_1302->setReshapeDimensions(Dims{2,{128,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1302 && "failed to build Node_261 (type:reshape)");
  res_1302->getOutput(0)->setName("Node_261:0");
  auto res_1303=network->addMatrixMultiply(*res_1302->getOutput(0),MatrixOperation::kNONE,*res_302->getOutput(0),MatrixOperation::kNONE);
  assert(res_1303 && "failed to build Node_268 (type:matmul)");
  res_1303->getOutput(0)->setName("Node_268:0");
  auto res_1304=network->addElementWise(*res_1303->getOutput(0),*res_303->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1304 && "failed to build Node_268_add (type:add)");
  res_1304->getOutput(0)->setName("Node_268_add:0");
  auto res_1305=network->addElementWise(*res_1304->getOutput(0),*res_1282->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1305 && "failed to build Node_272 (type:add)");
  res_1305->getOutput(0)->setName("Node_272:0");
  auto res_1306=network->addReduce(*res_1305->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1306 && "failed to build Node_279_mean (type:mean)");
  res_1306->getOutput(0)->setName("Node_279_mean:0");
  auto res_1307=network->addElementWise(*res_1305->getOutput(0),*res_1306->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1307 && "failed to build Node_279_diff (type:sub)");
  res_1307->getOutput(0)->setName("Node_279_diff:0");
  auto res_1308=network->addElementWise(*res_1307->getOutput(0),*res_1131->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1308 && "failed to build Node_279_power (type:power)");
  res_1308->getOutput(0)->setName("Node_279_power:0");
  auto res_1309=network->addReduce(*res_1308->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1309 && "failed to build Node_279_var (type:mean)");
  res_1309->getOutput(0)->setName("Node_279_var:0");
  auto res_1310=network->addElementWise(*res_1309->getOutput(0),*res_1005->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1310 && "failed to build Node_279_modify (type:add)");
  res_1310->getOutput(0)->setName("Node_279_modify:0");
  auto res_1311=network->addUnary(*res_1310->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1311 && "failed to build Node_279_sqrt (type:power)");
  res_1311->getOutput(0)->setName("Node_279_sqrt:0");
  auto res_1312=network->addElementWise(*res_1307->getOutput(0),*res_1311->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1312 && "failed to build Node_279_rsqrt (type:divide)");
  res_1312->getOutput(0)->setName("Node_279_rsqrt:0");
  auto res_1313=network->addElementWise(*res_1312->getOutput(0),*res_72->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1313 && "failed to build Node_279_mul (type:multiply)");
  res_1313->getOutput(0)->setName("Node_279_mul:0");
  auto res_1314=network->addElementWise(*res_1313->getOutput(0),*res_73->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1314 && "failed to build Node_279 (type:add)");
  res_1314->getOutput(0)->setName("Node_279:0");
  auto res_1315=network->addMatrixMultiply(*res_1314->getOutput(0),MatrixOperation::kNONE,*res_304->getOutput(0),MatrixOperation::kNONE);
  assert(res_1315 && "failed to build Node_285 (type:matmul)");
  res_1315->getOutput(0)->setName("Node_285:0");
  auto res_1316=network->addElementWise(*res_1315->getOutput(0),*res_305->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1316 && "failed to build Node_285_add (type:add)");
  res_1316->getOutput(0)->setName("Node_285_add:0");
  ITensor* inputTensors_1317[1] = {res_1316->getOutput(0)};
  auto plugin_1317=GELU_Plugin("gelu");
  auto res_1317=network->addPluginV2(inputTensors_1317,1,plugin_1317);
  assert(res_1317 && "failed to build Node_286 (type:gelu)");
  res_1317->getOutput(0)->setName("Node_286:0");
  auto res_1318=network->addMatrixMultiply(*res_1317->getOutput(0),MatrixOperation::kNONE,*res_306->getOutput(0),MatrixOperation::kNONE);
  assert(res_1318 && "failed to build Node_293 (type:matmul)");
  res_1318->getOutput(0)->setName("Node_293:0");
  auto res_1319=network->addElementWise(*res_1318->getOutput(0),*res_307->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1319 && "failed to build Node_293_add (type:add)");
  res_1319->getOutput(0)->setName("Node_293_add:0");
  auto res_1320=network->addElementWise(*res_1319->getOutput(0),*res_1314->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1320 && "failed to build Node_297 (type:add)");
  res_1320->getOutput(0)->setName("Node_297:0");
  auto res_1321=network->addReduce(*res_1320->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1321 && "failed to build Node_304_mean (type:mean)");
  res_1321->getOutput(0)->setName("Node_304_mean:0");
  auto res_1322=network->addElementWise(*res_1320->getOutput(0),*res_1321->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1322 && "failed to build Node_304_diff (type:sub)");
  res_1322->getOutput(0)->setName("Node_304_diff:0");
  auto res_1323=network->addElementWise(*res_1322->getOutput(0),*res_1132->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1323 && "failed to build Node_304_power (type:power)");
  res_1323->getOutput(0)->setName("Node_304_power:0");
  auto res_1324=network->addReduce(*res_1323->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1324 && "failed to build Node_304_var (type:mean)");
  res_1324->getOutput(0)->setName("Node_304_var:0");
  auto res_1325=network->addElementWise(*res_1324->getOutput(0),*res_1006->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1325 && "failed to build Node_304_modify (type:add)");
  res_1325->getOutput(0)->setName("Node_304_modify:0");
  auto res_1326=network->addUnary(*res_1325->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1326 && "failed to build Node_304_sqrt (type:power)");
  res_1326->getOutput(0)->setName("Node_304_sqrt:0");
  auto res_1327=network->addElementWise(*res_1322->getOutput(0),*res_1326->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1327 && "failed to build Node_304_rsqrt (type:divide)");
  res_1327->getOutput(0)->setName("Node_304_rsqrt:0");
  auto res_1328=network->addElementWise(*res_1327->getOutput(0),*res_74->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1328 && "failed to build Node_304_mul (type:multiply)");
  res_1328->getOutput(0)->setName("Node_304_mul:0");
  auto res_1329=network->addElementWise(*res_1328->getOutput(0),*res_75->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1329 && "failed to build Node_304 (type:add)");
  res_1329->getOutput(0)->setName("Node_304:0");
  auto res_1330=network->addMatrixMultiply(*res_1329->getOutput(0),MatrixOperation::kNONE,*res_308->getOutput(0),MatrixOperation::kNONE);
  assert(res_1330 && "failed to build Node_321 (type:matmul)");
  res_1330->getOutput(0)->setName("Node_321:0");
  auto res_1331=network->addElementWise(*res_1330->getOutput(0),*res_309->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1331 && "failed to build Node_321_add (type:add)");
  res_1331->getOutput(0)->setName("Node_321_add:0");
  auto res_1332=network->addShuffle(*res_1331->getOutput(0));
  res_1332->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1332 && "failed to build Node_341 (type:reshape)");
  res_1332->getOutput(0)->setName("Node_341:0");
  auto res_1333=network->addShuffle(*res_1332->getOutput(0));
  Permutation permute_1333;
  permute_1333.order[0]=1;
  permute_1333.order[1]=0;
  permute_1333.order[2]=2;
  res_1333->setFirstTranspose(permute_1333);
  assert(res_1333 && "failed to build Node_343 (type:transpose)");
  res_1333->getOutput(0)->setName("Node_343:0");
  auto res_1334=network->addMatrixMultiply(*res_1329->getOutput(0),MatrixOperation::kNONE,*res_310->getOutput(0),MatrixOperation::kNONE);
  assert(res_1334 && "failed to build Node_327 (type:matmul)");
  res_1334->getOutput(0)->setName("Node_327:0");
  auto res_1335=network->addElementWise(*res_1334->getOutput(0),*res_311->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1335 && "failed to build Node_327_add (type:add)");
  res_1335->getOutput(0)->setName("Node_327_add:0");
  auto res_1336=network->addShuffle(*res_1335->getOutput(0));
  res_1336->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1336 && "failed to build Node_351 (type:reshape)");
  res_1336->getOutput(0)->setName("Node_351:0");
  auto res_1337=network->addShuffle(*res_1336->getOutput(0));
  Permutation permute_1337;
  permute_1337.order[0]=1;
  permute_1337.order[1]=2;
  permute_1337.order[2]=0;
  res_1337->setFirstTranspose(permute_1337);
  assert(res_1337 && "failed to build Node_364 (type:transpose)");
  res_1337->getOutput(0)->setName("Node_364:0");
  auto res_1338=network->addMatrixMultiply(*res_1333->getOutput(0),MatrixOperation::kNONE,*res_1337->getOutput(0),MatrixOperation::kNONE);
  assert(res_1338 && "failed to build Node_365 (type:matmul)");
  res_1338->getOutput(0)->setName("Node_365:0");
  auto res_1339=network->addElementWise(*res_1338->getOutput(0),*res_929->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1339 && "failed to build Node_366 (type:divide)");
  res_1339->getOutput(0)->setName("Node_366:0");
  auto res_1340=network->addElementWise(*res_1339->getOutput(0),*res_1267->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1340 && "failed to build Node_367 (type:add)");
  res_1340->getOutput(0)->setName("Node_367:0");
  auto res_1341=network->addSoftMax(*res_1340->getOutput(0));
  res_1341->setAxes(4);
  assert(res_1341 && "failed to build Node_368 (type:softmax)");
  res_1341->getOutput(0)->setName("Node_368:0");
  auto res_1342=network->addMatrixMultiply(*res_1329->getOutput(0),MatrixOperation::kNONE,*res_312->getOutput(0),MatrixOperation::kNONE);
  assert(res_1342 && "failed to build Node_333 (type:matmul)");
  res_1342->getOutput(0)->setName("Node_333:0");
  auto res_1343=network->addElementWise(*res_1342->getOutput(0),*res_313->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1343 && "failed to build Node_333_add (type:add)");
  res_1343->getOutput(0)->setName("Node_333_add:0");
  auto res_1344=network->addShuffle(*res_1343->getOutput(0));
  res_1344->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1344 && "failed to build Node_361 (type:reshape)");
  res_1344->getOutput(0)->setName("Node_361:0");
  auto res_1345=network->addShuffle(*res_1344->getOutput(0));
  Permutation permute_1345;
  permute_1345.order[0]=1;
  permute_1345.order[1]=0;
  permute_1345.order[2]=2;
  res_1345->setFirstTranspose(permute_1345);
  assert(res_1345 && "failed to build Node_363 (type:transpose)");
  res_1345->getOutput(0)->setName("Node_363:0");
  auto res_1346=network->addMatrixMultiply(*res_1341->getOutput(0),MatrixOperation::kNONE,*res_1345->getOutput(0),MatrixOperation::kNONE);
  assert(res_1346 && "failed to build Node_372 (type:matmul)");
  res_1346->getOutput(0)->setName("Node_372:0");
  auto res_1347=network->addShuffle(*res_1346->getOutput(0));
  Permutation permute_1347;
  permute_1347.order[0]=1;
  permute_1347.order[1]=0;
  permute_1347.order[2]=2;
  res_1347->setFirstTranspose(permute_1347);
  assert(res_1347 && "failed to build Node_374 (type:transpose)");
  res_1347->getOutput(0)->setName("Node_374:0");
  auto res_1348=network->addIdentity(*res_1347->getOutput(0));
  assert(res_1348 && "failed to build Node_375 (type:contiguous)");
  res_1348->getOutput(0)->setName("Node_375:0");
  auto res_1349=network->addShuffle(*res_1348->getOutput(0));
  res_1349->setReshapeDimensions(Dims{2,{128,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1349 && "failed to build Node_383 (type:reshape)");
  res_1349->getOutput(0)->setName("Node_383:0");
  auto res_1350=network->addMatrixMultiply(*res_1349->getOutput(0),MatrixOperation::kNONE,*res_314->getOutput(0),MatrixOperation::kNONE);
  assert(res_1350 && "failed to build Node_390 (type:matmul)");
  res_1350->getOutput(0)->setName("Node_390:0");
  auto res_1351=network->addElementWise(*res_1350->getOutput(0),*res_315->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1351 && "failed to build Node_390_add (type:add)");
  res_1351->getOutput(0)->setName("Node_390_add:0");
  auto res_1352=network->addElementWise(*res_1351->getOutput(0),*res_1329->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1352 && "failed to build Node_394 (type:add)");
  res_1352->getOutput(0)->setName("Node_394:0");
  auto res_1353=network->addReduce(*res_1352->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1353 && "failed to build Node_401_mean (type:mean)");
  res_1353->getOutput(0)->setName("Node_401_mean:0");
  auto res_1354=network->addElementWise(*res_1352->getOutput(0),*res_1353->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1354 && "failed to build Node_401_diff (type:sub)");
  res_1354->getOutput(0)->setName("Node_401_diff:0");
  auto res_1355=network->addElementWise(*res_1354->getOutput(0),*res_1133->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1355 && "failed to build Node_401_power (type:power)");
  res_1355->getOutput(0)->setName("Node_401_power:0");
  auto res_1356=network->addReduce(*res_1355->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1356 && "failed to build Node_401_var (type:mean)");
  res_1356->getOutput(0)->setName("Node_401_var:0");
  auto res_1357=network->addElementWise(*res_1356->getOutput(0),*res_1007->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1357 && "failed to build Node_401_modify (type:add)");
  res_1357->getOutput(0)->setName("Node_401_modify:0");
  auto res_1358=network->addUnary(*res_1357->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1358 && "failed to build Node_401_sqrt (type:power)");
  res_1358->getOutput(0)->setName("Node_401_sqrt:0");
  auto res_1359=network->addElementWise(*res_1354->getOutput(0),*res_1358->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1359 && "failed to build Node_401_rsqrt (type:divide)");
  res_1359->getOutput(0)->setName("Node_401_rsqrt:0");
  auto res_1360=network->addElementWise(*res_1359->getOutput(0),*res_76->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1360 && "failed to build Node_401_mul (type:multiply)");
  res_1360->getOutput(0)->setName("Node_401_mul:0");
  auto res_1361=network->addElementWise(*res_1360->getOutput(0),*res_77->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1361 && "failed to build Node_401 (type:add)");
  res_1361->getOutput(0)->setName("Node_401:0");
  auto res_1362=network->addMatrixMultiply(*res_1361->getOutput(0),MatrixOperation::kNONE,*res_316->getOutput(0),MatrixOperation::kNONE);
  assert(res_1362 && "failed to build Node_407 (type:matmul)");
  res_1362->getOutput(0)->setName("Node_407:0");
  auto res_1363=network->addElementWise(*res_1362->getOutput(0),*res_317->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1363 && "failed to build Node_407_add (type:add)");
  res_1363->getOutput(0)->setName("Node_407_add:0");
  ITensor* inputTensors_1364[1] = {res_1363->getOutput(0)};
  auto plugin_1364=GELU_Plugin("gelu");
  auto res_1364=network->addPluginV2(inputTensors_1364,1,plugin_1364);
  assert(res_1364 && "failed to build Node_408 (type:gelu)");
  res_1364->getOutput(0)->setName("Node_408:0");
  auto res_1365=network->addMatrixMultiply(*res_1364->getOutput(0),MatrixOperation::kNONE,*res_318->getOutput(0),MatrixOperation::kNONE);
  assert(res_1365 && "failed to build Node_415 (type:matmul)");
  res_1365->getOutput(0)->setName("Node_415:0");
  auto res_1366=network->addElementWise(*res_1365->getOutput(0),*res_319->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1366 && "failed to build Node_415_add (type:add)");
  res_1366->getOutput(0)->setName("Node_415_add:0");
  auto res_1367=network->addElementWise(*res_1366->getOutput(0),*res_1361->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1367 && "failed to build Node_419 (type:add)");
  res_1367->getOutput(0)->setName("Node_419:0");
  auto res_1368=network->addReduce(*res_1367->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1368 && "failed to build Node_426_mean (type:mean)");
  res_1368->getOutput(0)->setName("Node_426_mean:0");
  auto res_1369=network->addElementWise(*res_1367->getOutput(0),*res_1368->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1369 && "failed to build Node_426_diff (type:sub)");
  res_1369->getOutput(0)->setName("Node_426_diff:0");
  auto res_1370=network->addElementWise(*res_1369->getOutput(0),*res_1134->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1370 && "failed to build Node_426_power (type:power)");
  res_1370->getOutput(0)->setName("Node_426_power:0");
  auto res_1371=network->addReduce(*res_1370->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1371 && "failed to build Node_426_var (type:mean)");
  res_1371->getOutput(0)->setName("Node_426_var:0");
  auto res_1372=network->addElementWise(*res_1371->getOutput(0),*res_1008->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1372 && "failed to build Node_426_modify (type:add)");
  res_1372->getOutput(0)->setName("Node_426_modify:0");
  auto res_1373=network->addUnary(*res_1372->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1373 && "failed to build Node_426_sqrt (type:power)");
  res_1373->getOutput(0)->setName("Node_426_sqrt:0");
  auto res_1374=network->addElementWise(*res_1369->getOutput(0),*res_1373->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1374 && "failed to build Node_426_rsqrt (type:divide)");
  res_1374->getOutput(0)->setName("Node_426_rsqrt:0");
  auto res_1375=network->addElementWise(*res_1374->getOutput(0),*res_78->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1375 && "failed to build Node_426_mul (type:multiply)");
  res_1375->getOutput(0)->setName("Node_426_mul:0");
  auto res_1376=network->addElementWise(*res_1375->getOutput(0),*res_79->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1376 && "failed to build Node_426 (type:add)");
  res_1376->getOutput(0)->setName("Node_426:0");
  auto res_1377=network->addMatrixMultiply(*res_1376->getOutput(0),MatrixOperation::kNONE,*res_320->getOutput(0),MatrixOperation::kNONE);
  assert(res_1377 && "failed to build Node_443 (type:matmul)");
  res_1377->getOutput(0)->setName("Node_443:0");
  auto res_1378=network->addElementWise(*res_1377->getOutput(0),*res_321->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1378 && "failed to build Node_443_add (type:add)");
  res_1378->getOutput(0)->setName("Node_443_add:0");
  auto res_1379=network->addShuffle(*res_1378->getOutput(0));
  res_1379->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1379 && "failed to build Node_463 (type:reshape)");
  res_1379->getOutput(0)->setName("Node_463:0");
  auto res_1380=network->addShuffle(*res_1379->getOutput(0));
  Permutation permute_1380;
  permute_1380.order[0]=1;
  permute_1380.order[1]=0;
  permute_1380.order[2]=2;
  res_1380->setFirstTranspose(permute_1380);
  assert(res_1380 && "failed to build Node_465 (type:transpose)");
  res_1380->getOutput(0)->setName("Node_465:0");
  auto res_1381=network->addMatrixMultiply(*res_1376->getOutput(0),MatrixOperation::kNONE,*res_322->getOutput(0),MatrixOperation::kNONE);
  assert(res_1381 && "failed to build Node_449 (type:matmul)");
  res_1381->getOutput(0)->setName("Node_449:0");
  auto res_1382=network->addElementWise(*res_1381->getOutput(0),*res_323->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1382 && "failed to build Node_449_add (type:add)");
  res_1382->getOutput(0)->setName("Node_449_add:0");
  auto res_1383=network->addShuffle(*res_1382->getOutput(0));
  res_1383->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1383 && "failed to build Node_473 (type:reshape)");
  res_1383->getOutput(0)->setName("Node_473:0");
  auto res_1384=network->addShuffle(*res_1383->getOutput(0));
  Permutation permute_1384;
  permute_1384.order[0]=1;
  permute_1384.order[1]=2;
  permute_1384.order[2]=0;
  res_1384->setFirstTranspose(permute_1384);
  assert(res_1384 && "failed to build Node_486 (type:transpose)");
  res_1384->getOutput(0)->setName("Node_486:0");
  auto res_1385=network->addMatrixMultiply(*res_1380->getOutput(0),MatrixOperation::kNONE,*res_1384->getOutput(0),MatrixOperation::kNONE);
  assert(res_1385 && "failed to build Node_487 (type:matmul)");
  res_1385->getOutput(0)->setName("Node_487:0");
  auto res_1386=network->addElementWise(*res_1385->getOutput(0),*res_930->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1386 && "failed to build Node_488 (type:divide)");
  res_1386->getOutput(0)->setName("Node_488:0");
  auto res_1387=network->addElementWise(*res_1386->getOutput(0),*res_1267->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1387 && "failed to build Node_489 (type:add)");
  res_1387->getOutput(0)->setName("Node_489:0");
  auto res_1388=network->addSoftMax(*res_1387->getOutput(0));
  res_1388->setAxes(4);
  assert(res_1388 && "failed to build Node_490 (type:softmax)");
  res_1388->getOutput(0)->setName("Node_490:0");
  auto res_1389=network->addMatrixMultiply(*res_1376->getOutput(0),MatrixOperation::kNONE,*res_324->getOutput(0),MatrixOperation::kNONE);
  assert(res_1389 && "failed to build Node_455 (type:matmul)");
  res_1389->getOutput(0)->setName("Node_455:0");
  auto res_1390=network->addElementWise(*res_1389->getOutput(0),*res_325->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1390 && "failed to build Node_455_add (type:add)");
  res_1390->getOutput(0)->setName("Node_455_add:0");
  auto res_1391=network->addShuffle(*res_1390->getOutput(0));
  res_1391->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1391 && "failed to build Node_483 (type:reshape)");
  res_1391->getOutput(0)->setName("Node_483:0");
  auto res_1392=network->addShuffle(*res_1391->getOutput(0));
  Permutation permute_1392;
  permute_1392.order[0]=1;
  permute_1392.order[1]=0;
  permute_1392.order[2]=2;
  res_1392->setFirstTranspose(permute_1392);
  assert(res_1392 && "failed to build Node_485 (type:transpose)");
  res_1392->getOutput(0)->setName("Node_485:0");
  auto res_1393=network->addMatrixMultiply(*res_1388->getOutput(0),MatrixOperation::kNONE,*res_1392->getOutput(0),MatrixOperation::kNONE);
  assert(res_1393 && "failed to build Node_494 (type:matmul)");
  res_1393->getOutput(0)->setName("Node_494:0");
  auto res_1394=network->addShuffle(*res_1393->getOutput(0));
  Permutation permute_1394;
  permute_1394.order[0]=1;
  permute_1394.order[1]=0;
  permute_1394.order[2]=2;
  res_1394->setFirstTranspose(permute_1394);
  assert(res_1394 && "failed to build Node_496 (type:transpose)");
  res_1394->getOutput(0)->setName("Node_496:0");
  auto res_1395=network->addIdentity(*res_1394->getOutput(0));
  assert(res_1395 && "failed to build Node_497 (type:contiguous)");
  res_1395->getOutput(0)->setName("Node_497:0");
  auto res_1396=network->addShuffle(*res_1395->getOutput(0));
  res_1396->setReshapeDimensions(Dims{2,{128,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1396 && "failed to build Node_505 (type:reshape)");
  res_1396->getOutput(0)->setName("Node_505:0");
  auto res_1397=network->addMatrixMultiply(*res_1396->getOutput(0),MatrixOperation::kNONE,*res_326->getOutput(0),MatrixOperation::kNONE);
  assert(res_1397 && "failed to build Node_512 (type:matmul)");
  res_1397->getOutput(0)->setName("Node_512:0");
  auto res_1398=network->addElementWise(*res_1397->getOutput(0),*res_327->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1398 && "failed to build Node_512_add (type:add)");
  res_1398->getOutput(0)->setName("Node_512_add:0");
  auto res_1399=network->addElementWise(*res_1398->getOutput(0),*res_1376->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1399 && "failed to build Node_516 (type:add)");
  res_1399->getOutput(0)->setName("Node_516:0");
  auto res_1400=network->addReduce(*res_1399->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1400 && "failed to build Node_523_mean (type:mean)");
  res_1400->getOutput(0)->setName("Node_523_mean:0");
  auto res_1401=network->addElementWise(*res_1399->getOutput(0),*res_1400->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1401 && "failed to build Node_523_diff (type:sub)");
  res_1401->getOutput(0)->setName("Node_523_diff:0");
  auto res_1402=network->addElementWise(*res_1401->getOutput(0),*res_1135->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1402 && "failed to build Node_523_power (type:power)");
  res_1402->getOutput(0)->setName("Node_523_power:0");
  auto res_1403=network->addReduce(*res_1402->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1403 && "failed to build Node_523_var (type:mean)");
  res_1403->getOutput(0)->setName("Node_523_var:0");
  auto res_1404=network->addElementWise(*res_1403->getOutput(0),*res_1009->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1404 && "failed to build Node_523_modify (type:add)");
  res_1404->getOutput(0)->setName("Node_523_modify:0");
  auto res_1405=network->addUnary(*res_1404->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1405 && "failed to build Node_523_sqrt (type:power)");
  res_1405->getOutput(0)->setName("Node_523_sqrt:0");
  auto res_1406=network->addElementWise(*res_1401->getOutput(0),*res_1405->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1406 && "failed to build Node_523_rsqrt (type:divide)");
  res_1406->getOutput(0)->setName("Node_523_rsqrt:0");
  auto res_1407=network->addElementWise(*res_1406->getOutput(0),*res_80->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1407 && "failed to build Node_523_mul (type:multiply)");
  res_1407->getOutput(0)->setName("Node_523_mul:0");
  auto res_1408=network->addElementWise(*res_1407->getOutput(0),*res_81->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1408 && "failed to build Node_523 (type:add)");
  res_1408->getOutput(0)->setName("Node_523:0");
  auto res_1409=network->addMatrixMultiply(*res_1408->getOutput(0),MatrixOperation::kNONE,*res_328->getOutput(0),MatrixOperation::kNONE);
  assert(res_1409 && "failed to build Node_529 (type:matmul)");
  res_1409->getOutput(0)->setName("Node_529:0");
  auto res_1410=network->addElementWise(*res_1409->getOutput(0),*res_329->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1410 && "failed to build Node_529_add (type:add)");
  res_1410->getOutput(0)->setName("Node_529_add:0");
  ITensor* inputTensors_1411[1] = {res_1410->getOutput(0)};
  auto plugin_1411=GELU_Plugin("gelu");
  auto res_1411=network->addPluginV2(inputTensors_1411,1,plugin_1411);
  assert(res_1411 && "failed to build Node_530 (type:gelu)");
  res_1411->getOutput(0)->setName("Node_530:0");
  auto res_1412=network->addMatrixMultiply(*res_1411->getOutput(0),MatrixOperation::kNONE,*res_330->getOutput(0),MatrixOperation::kNONE);
  assert(res_1412 && "failed to build Node_537 (type:matmul)");
  res_1412->getOutput(0)->setName("Node_537:0");
  auto res_1413=network->addElementWise(*res_1412->getOutput(0),*res_331->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1413 && "failed to build Node_537_add (type:add)");
  res_1413->getOutput(0)->setName("Node_537_add:0");
  auto res_1414=network->addElementWise(*res_1413->getOutput(0),*res_1408->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1414 && "failed to build Node_541 (type:add)");
  res_1414->getOutput(0)->setName("Node_541:0");
  auto res_1415=network->addReduce(*res_1414->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1415 && "failed to build Node_548_mean (type:mean)");
  res_1415->getOutput(0)->setName("Node_548_mean:0");
  auto res_1416=network->addElementWise(*res_1414->getOutput(0),*res_1415->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1416 && "failed to build Node_548_diff (type:sub)");
  res_1416->getOutput(0)->setName("Node_548_diff:0");
  auto res_1417=network->addElementWise(*res_1416->getOutput(0),*res_1136->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1417 && "failed to build Node_548_power (type:power)");
  res_1417->getOutput(0)->setName("Node_548_power:0");
  auto res_1418=network->addReduce(*res_1417->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1418 && "failed to build Node_548_var (type:mean)");
  res_1418->getOutput(0)->setName("Node_548_var:0");
  auto res_1419=network->addElementWise(*res_1418->getOutput(0),*res_1010->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1419 && "failed to build Node_548_modify (type:add)");
  res_1419->getOutput(0)->setName("Node_548_modify:0");
  auto res_1420=network->addUnary(*res_1419->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1420 && "failed to build Node_548_sqrt (type:power)");
  res_1420->getOutput(0)->setName("Node_548_sqrt:0");
  auto res_1421=network->addElementWise(*res_1416->getOutput(0),*res_1420->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1421 && "failed to build Node_548_rsqrt (type:divide)");
  res_1421->getOutput(0)->setName("Node_548_rsqrt:0");
  auto res_1422=network->addElementWise(*res_1421->getOutput(0),*res_82->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1422 && "failed to build Node_548_mul (type:multiply)");
  res_1422->getOutput(0)->setName("Node_548_mul:0");
  auto res_1423=network->addElementWise(*res_1422->getOutput(0),*res_83->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1423 && "failed to build Node_548 (type:add)");
  res_1423->getOutput(0)->setName("Node_548:0");
  auto res_1424=network->addMatrixMultiply(*res_1423->getOutput(0),MatrixOperation::kNONE,*res_332->getOutput(0),MatrixOperation::kNONE);
  assert(res_1424 && "failed to build Node_565 (type:matmul)");
  res_1424->getOutput(0)->setName("Node_565:0");
  auto res_1425=network->addElementWise(*res_1424->getOutput(0),*res_333->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1425 && "failed to build Node_565_add (type:add)");
  res_1425->getOutput(0)->setName("Node_565_add:0");
  auto res_1426=network->addShuffle(*res_1425->getOutput(0));
  res_1426->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1426 && "failed to build Node_585 (type:reshape)");
  res_1426->getOutput(0)->setName("Node_585:0");
  auto res_1427=network->addShuffle(*res_1426->getOutput(0));
  Permutation permute_1427;
  permute_1427.order[0]=1;
  permute_1427.order[1]=0;
  permute_1427.order[2]=2;
  res_1427->setFirstTranspose(permute_1427);
  assert(res_1427 && "failed to build Node_587 (type:transpose)");
  res_1427->getOutput(0)->setName("Node_587:0");
  auto res_1428=network->addMatrixMultiply(*res_1423->getOutput(0),MatrixOperation::kNONE,*res_334->getOutput(0),MatrixOperation::kNONE);
  assert(res_1428 && "failed to build Node_571 (type:matmul)");
  res_1428->getOutput(0)->setName("Node_571:0");
  auto res_1429=network->addElementWise(*res_1428->getOutput(0),*res_335->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1429 && "failed to build Node_571_add (type:add)");
  res_1429->getOutput(0)->setName("Node_571_add:0");
  auto res_1430=network->addShuffle(*res_1429->getOutput(0));
  res_1430->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1430 && "failed to build Node_595 (type:reshape)");
  res_1430->getOutput(0)->setName("Node_595:0");
  auto res_1431=network->addShuffle(*res_1430->getOutput(0));
  Permutation permute_1431;
  permute_1431.order[0]=1;
  permute_1431.order[1]=2;
  permute_1431.order[2]=0;
  res_1431->setFirstTranspose(permute_1431);
  assert(res_1431 && "failed to build Node_608 (type:transpose)");
  res_1431->getOutput(0)->setName("Node_608:0");
  auto res_1432=network->addMatrixMultiply(*res_1427->getOutput(0),MatrixOperation::kNONE,*res_1431->getOutput(0),MatrixOperation::kNONE);
  assert(res_1432 && "failed to build Node_609 (type:matmul)");
  res_1432->getOutput(0)->setName("Node_609:0");
  auto res_1433=network->addElementWise(*res_1432->getOutput(0),*res_931->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1433 && "failed to build Node_610 (type:divide)");
  res_1433->getOutput(0)->setName("Node_610:0");
  auto res_1434=network->addElementWise(*res_1433->getOutput(0),*res_1267->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1434 && "failed to build Node_611 (type:add)");
  res_1434->getOutput(0)->setName("Node_611:0");
  auto res_1435=network->addSoftMax(*res_1434->getOutput(0));
  res_1435->setAxes(4);
  assert(res_1435 && "failed to build Node_612 (type:softmax)");
  res_1435->getOutput(0)->setName("Node_612:0");
  auto res_1436=network->addMatrixMultiply(*res_1423->getOutput(0),MatrixOperation::kNONE,*res_336->getOutput(0),MatrixOperation::kNONE);
  assert(res_1436 && "failed to build Node_577 (type:matmul)");
  res_1436->getOutput(0)->setName("Node_577:0");
  auto res_1437=network->addElementWise(*res_1436->getOutput(0),*res_337->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1437 && "failed to build Node_577_add (type:add)");
  res_1437->getOutput(0)->setName("Node_577_add:0");
  auto res_1438=network->addShuffle(*res_1437->getOutput(0));
  res_1438->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1438 && "failed to build Node_605 (type:reshape)");
  res_1438->getOutput(0)->setName("Node_605:0");
  auto res_1439=network->addShuffle(*res_1438->getOutput(0));
  Permutation permute_1439;
  permute_1439.order[0]=1;
  permute_1439.order[1]=0;
  permute_1439.order[2]=2;
  res_1439->setFirstTranspose(permute_1439);
  assert(res_1439 && "failed to build Node_607 (type:transpose)");
  res_1439->getOutput(0)->setName("Node_607:0");
  auto res_1440=network->addMatrixMultiply(*res_1435->getOutput(0),MatrixOperation::kNONE,*res_1439->getOutput(0),MatrixOperation::kNONE);
  assert(res_1440 && "failed to build Node_616 (type:matmul)");
  res_1440->getOutput(0)->setName("Node_616:0");
  auto res_1441=network->addShuffle(*res_1440->getOutput(0));
  Permutation permute_1441;
  permute_1441.order[0]=1;
  permute_1441.order[1]=0;
  permute_1441.order[2]=2;
  res_1441->setFirstTranspose(permute_1441);
  assert(res_1441 && "failed to build Node_618 (type:transpose)");
  res_1441->getOutput(0)->setName("Node_618:0");
  auto res_1442=network->addIdentity(*res_1441->getOutput(0));
  assert(res_1442 && "failed to build Node_619 (type:contiguous)");
  res_1442->getOutput(0)->setName("Node_619:0");
  auto res_1443=network->addShuffle(*res_1442->getOutput(0));
  res_1443->setReshapeDimensions(Dims{2,{128,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1443 && "failed to build Node_627 (type:reshape)");
  res_1443->getOutput(0)->setName("Node_627:0");
  auto res_1444=network->addMatrixMultiply(*res_1443->getOutput(0),MatrixOperation::kNONE,*res_338->getOutput(0),MatrixOperation::kNONE);
  assert(res_1444 && "failed to build Node_634 (type:matmul)");
  res_1444->getOutput(0)->setName("Node_634:0");
  auto res_1445=network->addElementWise(*res_1444->getOutput(0),*res_339->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1445 && "failed to build Node_634_add (type:add)");
  res_1445->getOutput(0)->setName("Node_634_add:0");
  auto res_1446=network->addElementWise(*res_1445->getOutput(0),*res_1423->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1446 && "failed to build Node_638 (type:add)");
  res_1446->getOutput(0)->setName("Node_638:0");
  auto res_1447=network->addReduce(*res_1446->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1447 && "failed to build Node_645_mean (type:mean)");
  res_1447->getOutput(0)->setName("Node_645_mean:0");
  auto res_1448=network->addElementWise(*res_1446->getOutput(0),*res_1447->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1448 && "failed to build Node_645_diff (type:sub)");
  res_1448->getOutput(0)->setName("Node_645_diff:0");
  auto res_1449=network->addElementWise(*res_1448->getOutput(0),*res_1137->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1449 && "failed to build Node_645_power (type:power)");
  res_1449->getOutput(0)->setName("Node_645_power:0");
  auto res_1450=network->addReduce(*res_1449->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1450 && "failed to build Node_645_var (type:mean)");
  res_1450->getOutput(0)->setName("Node_645_var:0");
  auto res_1451=network->addElementWise(*res_1450->getOutput(0),*res_1011->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1451 && "failed to build Node_645_modify (type:add)");
  res_1451->getOutput(0)->setName("Node_645_modify:0");
  auto res_1452=network->addUnary(*res_1451->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1452 && "failed to build Node_645_sqrt (type:power)");
  res_1452->getOutput(0)->setName("Node_645_sqrt:0");
  auto res_1453=network->addElementWise(*res_1448->getOutput(0),*res_1452->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1453 && "failed to build Node_645_rsqrt (type:divide)");
  res_1453->getOutput(0)->setName("Node_645_rsqrt:0");
  auto res_1454=network->addElementWise(*res_1453->getOutput(0),*res_84->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1454 && "failed to build Node_645_mul (type:multiply)");
  res_1454->getOutput(0)->setName("Node_645_mul:0");
  auto res_1455=network->addElementWise(*res_1454->getOutput(0),*res_85->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1455 && "failed to build Node_645 (type:add)");
  res_1455->getOutput(0)->setName("Node_645:0");
  auto res_1456=network->addMatrixMultiply(*res_1455->getOutput(0),MatrixOperation::kNONE,*res_340->getOutput(0),MatrixOperation::kNONE);
  assert(res_1456 && "failed to build Node_651 (type:matmul)");
  res_1456->getOutput(0)->setName("Node_651:0");
  auto res_1457=network->addElementWise(*res_1456->getOutput(0),*res_341->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1457 && "failed to build Node_651_add (type:add)");
  res_1457->getOutput(0)->setName("Node_651_add:0");
  ITensor* inputTensors_1458[1] = {res_1457->getOutput(0)};
  auto plugin_1458=GELU_Plugin("gelu");
  auto res_1458=network->addPluginV2(inputTensors_1458,1,plugin_1458);
  assert(res_1458 && "failed to build Node_652 (type:gelu)");
  res_1458->getOutput(0)->setName("Node_652:0");
  auto res_1459=network->addMatrixMultiply(*res_1458->getOutput(0),MatrixOperation::kNONE,*res_342->getOutput(0),MatrixOperation::kNONE);
  assert(res_1459 && "failed to build Node_659 (type:matmul)");
  res_1459->getOutput(0)->setName("Node_659:0");
  auto res_1460=network->addElementWise(*res_1459->getOutput(0),*res_343->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1460 && "failed to build Node_659_add (type:add)");
  res_1460->getOutput(0)->setName("Node_659_add:0");
  auto res_1461=network->addElementWise(*res_1460->getOutput(0),*res_1455->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1461 && "failed to build Node_663 (type:add)");
  res_1461->getOutput(0)->setName("Node_663:0");
  auto res_1462=network->addReduce(*res_1461->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1462 && "failed to build Node_670_mean (type:mean)");
  res_1462->getOutput(0)->setName("Node_670_mean:0");
  auto res_1463=network->addElementWise(*res_1461->getOutput(0),*res_1462->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1463 && "failed to build Node_670_diff (type:sub)");
  res_1463->getOutput(0)->setName("Node_670_diff:0");
  auto res_1464=network->addElementWise(*res_1463->getOutput(0),*res_1138->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1464 && "failed to build Node_670_power (type:power)");
  res_1464->getOutput(0)->setName("Node_670_power:0");
  auto res_1465=network->addReduce(*res_1464->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1465 && "failed to build Node_670_var (type:mean)");
  res_1465->getOutput(0)->setName("Node_670_var:0");
  auto res_1466=network->addElementWise(*res_1465->getOutput(0),*res_1012->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1466 && "failed to build Node_670_modify (type:add)");
  res_1466->getOutput(0)->setName("Node_670_modify:0");
  auto res_1467=network->addUnary(*res_1466->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1467 && "failed to build Node_670_sqrt (type:power)");
  res_1467->getOutput(0)->setName("Node_670_sqrt:0");
  auto res_1468=network->addElementWise(*res_1463->getOutput(0),*res_1467->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1468 && "failed to build Node_670_rsqrt (type:divide)");
  res_1468->getOutput(0)->setName("Node_670_rsqrt:0");
  auto res_1469=network->addElementWise(*res_1468->getOutput(0),*res_86->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1469 && "failed to build Node_670_mul (type:multiply)");
  res_1469->getOutput(0)->setName("Node_670_mul:0");
  auto res_1470=network->addElementWise(*res_1469->getOutput(0),*res_87->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1470 && "failed to build Node_670 (type:add)");
  res_1470->getOutput(0)->setName("Node_670:0");
  auto res_1471=network->addMatrixMultiply(*res_1470->getOutput(0),MatrixOperation::kNONE,*res_344->getOutput(0),MatrixOperation::kNONE);
  assert(res_1471 && "failed to build Node_687 (type:matmul)");
  res_1471->getOutput(0)->setName("Node_687:0");
  auto res_1472=network->addElementWise(*res_1471->getOutput(0),*res_345->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1472 && "failed to build Node_687_add (type:add)");
  res_1472->getOutput(0)->setName("Node_687_add:0");
  auto res_1473=network->addShuffle(*res_1472->getOutput(0));
  res_1473->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1473 && "failed to build Node_707 (type:reshape)");
  res_1473->getOutput(0)->setName("Node_707:0");
  auto res_1474=network->addShuffle(*res_1473->getOutput(0));
  Permutation permute_1474;
  permute_1474.order[0]=1;
  permute_1474.order[1]=0;
  permute_1474.order[2]=2;
  res_1474->setFirstTranspose(permute_1474);
  assert(res_1474 && "failed to build Node_709 (type:transpose)");
  res_1474->getOutput(0)->setName("Node_709:0");
  auto res_1475=network->addMatrixMultiply(*res_1470->getOutput(0),MatrixOperation::kNONE,*res_346->getOutput(0),MatrixOperation::kNONE);
  assert(res_1475 && "failed to build Node_693 (type:matmul)");
  res_1475->getOutput(0)->setName("Node_693:0");
  auto res_1476=network->addElementWise(*res_1475->getOutput(0),*res_347->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1476 && "failed to build Node_693_add (type:add)");
  res_1476->getOutput(0)->setName("Node_693_add:0");
  auto res_1477=network->addShuffle(*res_1476->getOutput(0));
  res_1477->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1477 && "failed to build Node_717 (type:reshape)");
  res_1477->getOutput(0)->setName("Node_717:0");
  auto res_1478=network->addShuffle(*res_1477->getOutput(0));
  Permutation permute_1478;
  permute_1478.order[0]=1;
  permute_1478.order[1]=2;
  permute_1478.order[2]=0;
  res_1478->setFirstTranspose(permute_1478);
  assert(res_1478 && "failed to build Node_730 (type:transpose)");
  res_1478->getOutput(0)->setName("Node_730:0");
  auto res_1479=network->addMatrixMultiply(*res_1474->getOutput(0),MatrixOperation::kNONE,*res_1478->getOutput(0),MatrixOperation::kNONE);
  assert(res_1479 && "failed to build Node_731 (type:matmul)");
  res_1479->getOutput(0)->setName("Node_731:0");
  auto res_1480=network->addElementWise(*res_1479->getOutput(0),*res_932->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1480 && "failed to build Node_732 (type:divide)");
  res_1480->getOutput(0)->setName("Node_732:0");
  auto res_1481=network->addElementWise(*res_1480->getOutput(0),*res_1267->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1481 && "failed to build Node_733 (type:add)");
  res_1481->getOutput(0)->setName("Node_733:0");
  auto res_1482=network->addSoftMax(*res_1481->getOutput(0));
  res_1482->setAxes(4);
  assert(res_1482 && "failed to build Node_734 (type:softmax)");
  res_1482->getOutput(0)->setName("Node_734:0");
  auto res_1483=network->addMatrixMultiply(*res_1470->getOutput(0),MatrixOperation::kNONE,*res_348->getOutput(0),MatrixOperation::kNONE);
  assert(res_1483 && "failed to build Node_699 (type:matmul)");
  res_1483->getOutput(0)->setName("Node_699:0");
  auto res_1484=network->addElementWise(*res_1483->getOutput(0),*res_349->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1484 && "failed to build Node_699_add (type:add)");
  res_1484->getOutput(0)->setName("Node_699_add:0");
  auto res_1485=network->addShuffle(*res_1484->getOutput(0));
  res_1485->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1485 && "failed to build Node_727 (type:reshape)");
  res_1485->getOutput(0)->setName("Node_727:0");
  auto res_1486=network->addShuffle(*res_1485->getOutput(0));
  Permutation permute_1486;
  permute_1486.order[0]=1;
  permute_1486.order[1]=0;
  permute_1486.order[2]=2;
  res_1486->setFirstTranspose(permute_1486);
  assert(res_1486 && "failed to build Node_729 (type:transpose)");
  res_1486->getOutput(0)->setName("Node_729:0");
  auto res_1487=network->addMatrixMultiply(*res_1482->getOutput(0),MatrixOperation::kNONE,*res_1486->getOutput(0),MatrixOperation::kNONE);
  assert(res_1487 && "failed to build Node_738 (type:matmul)");
  res_1487->getOutput(0)->setName("Node_738:0");
  auto res_1488=network->addShuffle(*res_1487->getOutput(0));
  Permutation permute_1488;
  permute_1488.order[0]=1;
  permute_1488.order[1]=0;
  permute_1488.order[2]=2;
  res_1488->setFirstTranspose(permute_1488);
  assert(res_1488 && "failed to build Node_740 (type:transpose)");
  res_1488->getOutput(0)->setName("Node_740:0");
  auto res_1489=network->addIdentity(*res_1488->getOutput(0));
  assert(res_1489 && "failed to build Node_741 (type:contiguous)");
  res_1489->getOutput(0)->setName("Node_741:0");
  auto res_1490=network->addShuffle(*res_1489->getOutput(0));
  res_1490->setReshapeDimensions(Dims{2,{128,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1490 && "failed to build Node_749 (type:reshape)");
  res_1490->getOutput(0)->setName("Node_749:0");
  auto res_1491=network->addMatrixMultiply(*res_1490->getOutput(0),MatrixOperation::kNONE,*res_350->getOutput(0),MatrixOperation::kNONE);
  assert(res_1491 && "failed to build Node_756 (type:matmul)");
  res_1491->getOutput(0)->setName("Node_756:0");
  auto res_1492=network->addElementWise(*res_1491->getOutput(0),*res_351->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1492 && "failed to build Node_756_add (type:add)");
  res_1492->getOutput(0)->setName("Node_756_add:0");
  auto res_1493=network->addElementWise(*res_1492->getOutput(0),*res_1470->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1493 && "failed to build Node_760 (type:add)");
  res_1493->getOutput(0)->setName("Node_760:0");
  auto res_1494=network->addReduce(*res_1493->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1494 && "failed to build Node_767_mean (type:mean)");
  res_1494->getOutput(0)->setName("Node_767_mean:0");
  auto res_1495=network->addElementWise(*res_1493->getOutput(0),*res_1494->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1495 && "failed to build Node_767_diff (type:sub)");
  res_1495->getOutput(0)->setName("Node_767_diff:0");
  auto res_1496=network->addElementWise(*res_1495->getOutput(0),*res_1139->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1496 && "failed to build Node_767_power (type:power)");
  res_1496->getOutput(0)->setName("Node_767_power:0");
  auto res_1497=network->addReduce(*res_1496->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1497 && "failed to build Node_767_var (type:mean)");
  res_1497->getOutput(0)->setName("Node_767_var:0");
  auto res_1498=network->addElementWise(*res_1497->getOutput(0),*res_1013->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1498 && "failed to build Node_767_modify (type:add)");
  res_1498->getOutput(0)->setName("Node_767_modify:0");
  auto res_1499=network->addUnary(*res_1498->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1499 && "failed to build Node_767_sqrt (type:power)");
  res_1499->getOutput(0)->setName("Node_767_sqrt:0");
  auto res_1500=network->addElementWise(*res_1495->getOutput(0),*res_1499->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1500 && "failed to build Node_767_rsqrt (type:divide)");
  res_1500->getOutput(0)->setName("Node_767_rsqrt:0");
  auto res_1501=network->addElementWise(*res_1500->getOutput(0),*res_88->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1501 && "failed to build Node_767_mul (type:multiply)");
  res_1501->getOutput(0)->setName("Node_767_mul:0");
  auto res_1502=network->addElementWise(*res_1501->getOutput(0),*res_89->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1502 && "failed to build Node_767 (type:add)");
  res_1502->getOutput(0)->setName("Node_767:0");
  auto res_1503=network->addMatrixMultiply(*res_1502->getOutput(0),MatrixOperation::kNONE,*res_352->getOutput(0),MatrixOperation::kNONE);
  assert(res_1503 && "failed to build Node_773 (type:matmul)");
  res_1503->getOutput(0)->setName("Node_773:0");
  auto res_1504=network->addElementWise(*res_1503->getOutput(0),*res_353->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1504 && "failed to build Node_773_add (type:add)");
  res_1504->getOutput(0)->setName("Node_773_add:0");
  ITensor* inputTensors_1505[1] = {res_1504->getOutput(0)};
  auto plugin_1505=GELU_Plugin("gelu");
  auto res_1505=network->addPluginV2(inputTensors_1505,1,plugin_1505);
  assert(res_1505 && "failed to build Node_774 (type:gelu)");
  res_1505->getOutput(0)->setName("Node_774:0");
  auto res_1506=network->addMatrixMultiply(*res_1505->getOutput(0),MatrixOperation::kNONE,*res_354->getOutput(0),MatrixOperation::kNONE);
  assert(res_1506 && "failed to build Node_781 (type:matmul)");
  res_1506->getOutput(0)->setName("Node_781:0");
  auto res_1507=network->addElementWise(*res_1506->getOutput(0),*res_355->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1507 && "failed to build Node_781_add (type:add)");
  res_1507->getOutput(0)->setName("Node_781_add:0");
  auto res_1508=network->addElementWise(*res_1507->getOutput(0),*res_1502->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1508 && "failed to build Node_785 (type:add)");
  res_1508->getOutput(0)->setName("Node_785:0");
  auto res_1509=network->addReduce(*res_1508->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1509 && "failed to build Node_792_mean (type:mean)");
  res_1509->getOutput(0)->setName("Node_792_mean:0");
  auto res_1510=network->addElementWise(*res_1508->getOutput(0),*res_1509->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1510 && "failed to build Node_792_diff (type:sub)");
  res_1510->getOutput(0)->setName("Node_792_diff:0");
  auto res_1511=network->addElementWise(*res_1510->getOutput(0),*res_1140->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1511 && "failed to build Node_792_power (type:power)");
  res_1511->getOutput(0)->setName("Node_792_power:0");
  auto res_1512=network->addReduce(*res_1511->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1512 && "failed to build Node_792_var (type:mean)");
  res_1512->getOutput(0)->setName("Node_792_var:0");
  auto res_1513=network->addElementWise(*res_1512->getOutput(0),*res_1014->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1513 && "failed to build Node_792_modify (type:add)");
  res_1513->getOutput(0)->setName("Node_792_modify:0");
  auto res_1514=network->addUnary(*res_1513->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1514 && "failed to build Node_792_sqrt (type:power)");
  res_1514->getOutput(0)->setName("Node_792_sqrt:0");
  auto res_1515=network->addElementWise(*res_1510->getOutput(0),*res_1514->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1515 && "failed to build Node_792_rsqrt (type:divide)");
  res_1515->getOutput(0)->setName("Node_792_rsqrt:0");
  auto res_1516=network->addElementWise(*res_1515->getOutput(0),*res_90->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1516 && "failed to build Node_792_mul (type:multiply)");
  res_1516->getOutput(0)->setName("Node_792_mul:0");
  auto res_1517=network->addElementWise(*res_1516->getOutput(0),*res_91->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1517 && "failed to build Node_792 (type:add)");
  res_1517->getOutput(0)->setName("Node_792:0");
  auto res_1518=network->addMatrixMultiply(*res_1517->getOutput(0),MatrixOperation::kNONE,*res_356->getOutput(0),MatrixOperation::kNONE);
  assert(res_1518 && "failed to build Node_809 (type:matmul)");
  res_1518->getOutput(0)->setName("Node_809:0");
  auto res_1519=network->addElementWise(*res_1518->getOutput(0),*res_357->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1519 && "failed to build Node_809_add (type:add)");
  res_1519->getOutput(0)->setName("Node_809_add:0");
  auto res_1520=network->addShuffle(*res_1519->getOutput(0));
  res_1520->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1520 && "failed to build Node_829 (type:reshape)");
  res_1520->getOutput(0)->setName("Node_829:0");
  auto res_1521=network->addShuffle(*res_1520->getOutput(0));
  Permutation permute_1521;
  permute_1521.order[0]=1;
  permute_1521.order[1]=0;
  permute_1521.order[2]=2;
  res_1521->setFirstTranspose(permute_1521);
  assert(res_1521 && "failed to build Node_831 (type:transpose)");
  res_1521->getOutput(0)->setName("Node_831:0");
  auto res_1522=network->addMatrixMultiply(*res_1517->getOutput(0),MatrixOperation::kNONE,*res_358->getOutput(0),MatrixOperation::kNONE);
  assert(res_1522 && "failed to build Node_815 (type:matmul)");
  res_1522->getOutput(0)->setName("Node_815:0");
  auto res_1523=network->addElementWise(*res_1522->getOutput(0),*res_359->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1523 && "failed to build Node_815_add (type:add)");
  res_1523->getOutput(0)->setName("Node_815_add:0");
  auto res_1524=network->addShuffle(*res_1523->getOutput(0));
  res_1524->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1524 && "failed to build Node_839 (type:reshape)");
  res_1524->getOutput(0)->setName("Node_839:0");
  auto res_1525=network->addShuffle(*res_1524->getOutput(0));
  Permutation permute_1525;
  permute_1525.order[0]=1;
  permute_1525.order[1]=2;
  permute_1525.order[2]=0;
  res_1525->setFirstTranspose(permute_1525);
  assert(res_1525 && "failed to build Node_852 (type:transpose)");
  res_1525->getOutput(0)->setName("Node_852:0");
  auto res_1526=network->addMatrixMultiply(*res_1521->getOutput(0),MatrixOperation::kNONE,*res_1525->getOutput(0),MatrixOperation::kNONE);
  assert(res_1526 && "failed to build Node_853 (type:matmul)");
  res_1526->getOutput(0)->setName("Node_853:0");
  auto res_1527=network->addElementWise(*res_1526->getOutput(0),*res_933->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1527 && "failed to build Node_854 (type:divide)");
  res_1527->getOutput(0)->setName("Node_854:0");
  auto res_1528=network->addElementWise(*res_1527->getOutput(0),*res_1267->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1528 && "failed to build Node_855 (type:add)");
  res_1528->getOutput(0)->setName("Node_855:0");
  auto res_1529=network->addSoftMax(*res_1528->getOutput(0));
  res_1529->setAxes(4);
  assert(res_1529 && "failed to build Node_856 (type:softmax)");
  res_1529->getOutput(0)->setName("Node_856:0");
  auto res_1530=network->addMatrixMultiply(*res_1517->getOutput(0),MatrixOperation::kNONE,*res_360->getOutput(0),MatrixOperation::kNONE);
  assert(res_1530 && "failed to build Node_821 (type:matmul)");
  res_1530->getOutput(0)->setName("Node_821:0");
  auto res_1531=network->addElementWise(*res_1530->getOutput(0),*res_361->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1531 && "failed to build Node_821_add (type:add)");
  res_1531->getOutput(0)->setName("Node_821_add:0");
  auto res_1532=network->addShuffle(*res_1531->getOutput(0));
  res_1532->setReshapeDimensions(Dims3{128,6,32});
  assert(res_1532 && "failed to build Node_849 (type:reshape)");
  res_1532->getOutput(0)->setName("Node_849:0");
  auto res_1533=network->addShuffle(*res_1532->getOutput(0));
  Permutation permute_1533;
  permute_1533.order[0]=1;
  permute_1533.order[1]=0;
  permute_1533.order[2]=2;
  res_1533->setFirstTranspose(permute_1533);
  assert(res_1533 && "failed to build Node_851 (type:transpose)");
  res_1533->getOutput(0)->setName("Node_851:0");
  auto res_1534=network->addMatrixMultiply(*res_1529->getOutput(0),MatrixOperation::kNONE,*res_1533->getOutput(0),MatrixOperation::kNONE);
  assert(res_1534 && "failed to build Node_860 (type:matmul)");
  res_1534->getOutput(0)->setName("Node_860:0");
  auto res_1535=network->addShuffle(*res_1534->getOutput(0));
  Permutation permute_1535;
  permute_1535.order[0]=1;
  permute_1535.order[1]=0;
  permute_1535.order[2]=2;
  res_1535->setFirstTranspose(permute_1535);
  assert(res_1535 && "failed to build Node_862 (type:transpose)");
  res_1535->getOutput(0)->setName("Node_862:0");
  auto res_1536=network->addIdentity(*res_1535->getOutput(0));
  assert(res_1536 && "failed to build Node_863 (type:contiguous)");
  res_1536->getOutput(0)->setName("Node_863:0");
  auto res_1537=network->addShuffle(*res_1536->getOutput(0));
  res_1537->setReshapeDimensions(Dims{2,{128,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1537 && "failed to build Node_871 (type:reshape)");
  res_1537->getOutput(0)->setName("Node_871:0");
  auto res_1538=network->addMatrixMultiply(*res_1537->getOutput(0),MatrixOperation::kNONE,*res_362->getOutput(0),MatrixOperation::kNONE);
  assert(res_1538 && "failed to build Node_878 (type:matmul)");
  res_1538->getOutput(0)->setName("Node_878:0");
  auto res_1539=network->addElementWise(*res_1538->getOutput(0),*res_363->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1539 && "failed to build Node_878_add (type:add)");
  res_1539->getOutput(0)->setName("Node_878_add:0");
  auto res_1540=network->addElementWise(*res_1539->getOutput(0),*res_1517->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1540 && "failed to build Node_882 (type:add)");
  res_1540->getOutput(0)->setName("Node_882:0");
  auto res_1541=network->addReduce(*res_1540->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1541 && "failed to build Node_889_mean (type:mean)");
  res_1541->getOutput(0)->setName("Node_889_mean:0");
  auto res_1542=network->addElementWise(*res_1540->getOutput(0),*res_1541->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1542 && "failed to build Node_889_diff (type:sub)");
  res_1542->getOutput(0)->setName("Node_889_diff:0");
  auto res_1543=network->addElementWise(*res_1542->getOutput(0),*res_1141->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1543 && "failed to build Node_889_power (type:power)");
  res_1543->getOutput(0)->setName("Node_889_power:0");
  auto res_1544=network->addReduce(*res_1543->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1544 && "failed to build Node_889_var (type:mean)");
  res_1544->getOutput(0)->setName("Node_889_var:0");
  auto res_1545=network->addElementWise(*res_1544->getOutput(0),*res_1015->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1545 && "failed to build Node_889_modify (type:add)");
  res_1545->getOutput(0)->setName("Node_889_modify:0");
  auto res_1546=network->addUnary(*res_1545->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1546 && "failed to build Node_889_sqrt (type:power)");
  res_1546->getOutput(0)->setName("Node_889_sqrt:0");
  auto res_1547=network->addElementWise(*res_1542->getOutput(0),*res_1546->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1547 && "failed to build Node_889_rsqrt (type:divide)");
  res_1547->getOutput(0)->setName("Node_889_rsqrt:0");
  auto res_1548=network->addElementWise(*res_1547->getOutput(0),*res_92->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1548 && "failed to build Node_889_mul (type:multiply)");
  res_1548->getOutput(0)->setName("Node_889_mul:0");
  auto res_1549=network->addElementWise(*res_1548->getOutput(0),*res_93->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1549 && "failed to build Node_889 (type:add)");
  res_1549->getOutput(0)->setName("Node_889:0");
  auto res_1550=network->addMatrixMultiply(*res_1549->getOutput(0),MatrixOperation::kNONE,*res_364->getOutput(0),MatrixOperation::kNONE);
  assert(res_1550 && "failed to build Node_895 (type:matmul)");
  res_1550->getOutput(0)->setName("Node_895:0");
  auto res_1551=network->addElementWise(*res_1550->getOutput(0),*res_365->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1551 && "failed to build Node_895_add (type:add)");
  res_1551->getOutput(0)->setName("Node_895_add:0");
  ITensor* inputTensors_1552[1] = {res_1551->getOutput(0)};
  auto plugin_1552=GELU_Plugin("gelu");
  auto res_1552=network->addPluginV2(inputTensors_1552,1,plugin_1552);
  assert(res_1552 && "failed to build Node_896 (type:gelu)");
  res_1552->getOutput(0)->setName("Node_896:0");
  auto res_1553=network->addMatrixMultiply(*res_1552->getOutput(0),MatrixOperation::kNONE,*res_366->getOutput(0),MatrixOperation::kNONE);
  assert(res_1553 && "failed to build Node_903 (type:matmul)");
  res_1553->getOutput(0)->setName("Node_903:0");
  auto res_1554=network->addElementWise(*res_1553->getOutput(0),*res_367->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1554 && "failed to build Node_903_add (type:add)");
  res_1554->getOutput(0)->setName("Node_903_add:0");
  auto res_1555=network->addElementWise(*res_1554->getOutput(0),*res_1549->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1555 && "failed to build Node_907 (type:add)");
  res_1555->getOutput(0)->setName("Node_907:0");
  auto res_1556=network->addReduce(*res_1555->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1556 && "failed to build Node_914_mean (type:mean)");
  res_1556->getOutput(0)->setName("Node_914_mean:0");
  auto res_1557=network->addElementWise(*res_1555->getOutput(0),*res_1556->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1557 && "failed to build Node_914_diff (type:sub)");
  res_1557->getOutput(0)->setName("Node_914_diff:0");
  auto res_1558=network->addElementWise(*res_1557->getOutput(0),*res_1142->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1558 && "failed to build Node_914_power (type:power)");
  res_1558->getOutput(0)->setName("Node_914_power:0");
  auto res_1559=network->addReduce(*res_1558->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1559 && "failed to build Node_914_var (type:mean)");
  res_1559->getOutput(0)->setName("Node_914_var:0");
  auto res_1560=network->addElementWise(*res_1559->getOutput(0),*res_1016->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1560 && "failed to build Node_914_modify (type:add)");
  res_1560->getOutput(0)->setName("Node_914_modify:0");
  auto res_1561=network->addUnary(*res_1560->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1561 && "failed to build Node_914_sqrt (type:power)");
  res_1561->getOutput(0)->setName("Node_914_sqrt:0");
  auto res_1562=network->addElementWise(*res_1557->getOutput(0),*res_1561->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1562 && "failed to build Node_914_rsqrt (type:divide)");
  res_1562->getOutput(0)->setName("Node_914_rsqrt:0");
  auto res_1563=network->addElementWise(*res_1562->getOutput(0),*res_94->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1563 && "failed to build Node_914_mul (type:multiply)");
  res_1563->getOutput(0)->setName("Node_914_mul:0");
  auto res_1564=network->addElementWise(*res_1563->getOutput(0),*res_95->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1564 && "failed to build Node_914 (type:add)");
  res_1564->getOutput(0)->setName("Node_914:0");
  auto res_1565=network->addSlice(*res_1564->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_1565 && "failed to build Node_918 (type:dlr_slice)");
  res_1565->getOutput(0)->setName("Node_918:0");
  auto res_1566=network->addShuffle(*res_1565->getOutput(0));
  res_1566->setReshapeDimensions(Dims3{192,1,1});
  assert(res_1566 && "failed to build Node_920_reshape (type:reshape)");
  res_1566->getOutput(0)->setName("Node_920_reshape:0");
  auto res_1567=network->addFullyConnected(*res_1566->getOutput(0),192,mWeightsMap["weight_1567"],mWeightsMap["bias_1567"]);
  assert(res_1567 && "failed to build Node_925 (type:dense)");
  res_1567->getOutput(0)->setName("Node_925:0");
  auto res_1568=network->addShuffle(*res_1567->getOutput(0));
  res_1568->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_1568 && "failed to build Node_925_reshape (type:reshape)");
  res_1568->getOutput(0)->setName("Node_925_reshape:0");
  auto res_1569=network->addActivation(*res_1568->getOutput(0),ActivationType::kTANH);
  assert(res_1569 && "failed to build Node_926 (type:tanh)");
  res_1569->getOutput(0)->setName("Node_926:0");
  auto res_1570=network->addShuffle(*res_1569->getOutput(0));
  res_1570->setReshapeDimensions(Dims{2,{1,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1570 && "failed to build Node_7276 (type:reshape)");
  res_1570->getOutput(0)->setName("Node_7276:0");
  auto res_1571=network->addGather(*res_921->getOutput(0),*inputs[4],0);
  assert(res_1571 && "failed to build Node_940 (type:gather)");
  res_1571->getOutput(0)->setName("Node_940:0");
  auto res_1572=network->addShuffle(*inputs[5]);
  res_1572->setReshapeDimensions(Dims{2,{59,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1572 && "failed to build Node_943 (type:reshape)");
  res_1572->getOutput(0)->setName("Node_943:0");
  auto res_1573=network->addElementWise(*res_39->getOutput(0),*res_1572->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1573 && "failed to build Node_945 (type:add)");
  res_1573->getOutput(0)->setName("Node_945:0");
  auto res_1574=network->addElementWise(*res_1571->getOutput(0),*res_1573->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1574 && "failed to build Node_946 (type:multiply)");
  res_1574->getOutput(0)->setName("Node_946:0");
  auto res_1575=network->addShuffle(*inputs[5]);
  res_1575->setReshapeDimensions(Dims{2,{59,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1575 && "failed to build Node_959 (type:reshape)");
  res_1575->getOutput(0)->setName("Node_959:0");
  auto res_1576=network->addElementWise(*res_40->getOutput(0),*res_1575->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1576 && "failed to build Node_961 (type:add)");
  res_1576->getOutput(0)->setName("Node_961:0");
  auto res_1577=network->addShuffle(*inputs[5]);
  res_1577->setReshapeDimensions(Dims{2,{59,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1577 && "failed to build Node_975 (type:reshape)");
  res_1577->getOutput(0)->setName("Node_975:0");
  auto res_1578=network->addElementWise(*res_41->getOutput(0),*res_1577->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1578 && "failed to build Node_977 (type:add)");
  res_1578->getOutput(0)->setName("Node_977:0");
  auto res_1579=network->addShuffle(*inputs[5]);
  res_1579->setReshapeDimensions(Dims3{1,1,59});
  assert(res_1579 && "failed to build Node_995 (type:reshape)");
  res_1579->getOutput(0)->setName("Node_995:0");
  auto res_1580=network->addElementWise(*res_934->getOutput(0),*res_1579->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1580 && "failed to build Node_997 (type:sub)");
  res_1580->getOutput(0)->setName("Node_997:0");
  auto res_1581=network->addElementWise(*res_1580->getOutput(0),*res_935->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1581 && "failed to build Node_998 (type:multiply)");
  res_1581->getOutput(0)->setName("Node_998:0");
  auto res_1582=network->addGather(*res_921->getOutput(0),*inputs[6],0);
  assert(res_1582 && "failed to build Node_956 (type:gather)");
  res_1582->getOutput(0)->setName("Node_956:0");
  auto res_1583=network->addElementWise(*res_1582->getOutput(0),*res_1576->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1583 && "failed to build Node_962 (type:multiply)");
  res_1583->getOutput(0)->setName("Node_962:0");
  auto res_1584=network->addElementWise(*res_1574->getOutput(0),*res_1583->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1584 && "failed to build Node_985 (type:add)");
  res_1584->getOutput(0)->setName("Node_985:0");
  auto res_1585=network->addGather(*res_921->getOutput(0),*inputs[7],0);
  assert(res_1585 && "failed to build Node_972 (type:gather)");
  res_1585->getOutput(0)->setName("Node_972:0");
  auto res_1586=network->addElementWise(*res_1585->getOutput(0),*res_1578->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1586 && "failed to build Node_978 (type:multiply)");
  res_1586->getOutput(0)->setName("Node_978:0");
  auto res_1587=network->addElementWise(*res_1584->getOutput(0),*res_1586->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1587 && "failed to build Node_986 (type:add)");
  res_1587->getOutput(0)->setName("Node_986:0");
  auto res_1588=network->addReduce(*res_1587->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1588 && "failed to build Node_1005_mean (type:mean)");
  res_1588->getOutput(0)->setName("Node_1005_mean:0");
  auto res_1589=network->addElementWise(*res_1587->getOutput(0),*res_1588->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1589 && "failed to build Node_1005_diff (type:sub)");
  res_1589->getOutput(0)->setName("Node_1005_diff:0");
  auto res_1590=network->addElementWise(*res_1589->getOutput(0),*res_1143->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1590 && "failed to build Node_1005_power (type:power)");
  res_1590->getOutput(0)->setName("Node_1005_power:0");
  auto res_1591=network->addReduce(*res_1590->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1591 && "failed to build Node_1005_var (type:mean)");
  res_1591->getOutput(0)->setName("Node_1005_var:0");
  auto res_1592=network->addElementWise(*res_1591->getOutput(0),*res_1017->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1592 && "failed to build Node_1005_modify (type:add)");
  res_1592->getOutput(0)->setName("Node_1005_modify:0");
  auto res_1593=network->addUnary(*res_1592->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1593 && "failed to build Node_1005_sqrt (type:power)");
  res_1593->getOutput(0)->setName("Node_1005_sqrt:0");
  auto res_1594=network->addElementWise(*res_1589->getOutput(0),*res_1593->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1594 && "failed to build Node_1005_rsqrt (type:divide)");
  res_1594->getOutput(0)->setName("Node_1005_rsqrt:0");
  auto res_1595=network->addElementWise(*res_1594->getOutput(0),*res_96->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1595 && "failed to build Node_1005_mul (type:multiply)");
  res_1595->getOutput(0)->setName("Node_1005_mul:0");
  auto res_1596=network->addElementWise(*res_1595->getOutput(0),*res_97->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1596 && "failed to build Node_1005 (type:add)");
  res_1596->getOutput(0)->setName("Node_1005:0");
  auto res_1597=network->addMatrixMultiply(*res_1596->getOutput(0),MatrixOperation::kNONE,*res_368->getOutput(0),MatrixOperation::kNONE);
  assert(res_1597 && "failed to build Node_1025 (type:matmul)");
  res_1597->getOutput(0)->setName("Node_1025:0");
  auto res_1598=network->addElementWise(*res_1597->getOutput(0),*res_369->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1598 && "failed to build Node_1025_add (type:add)");
  res_1598->getOutput(0)->setName("Node_1025_add:0");
  auto res_1599=network->addShuffle(*res_1598->getOutput(0));
  res_1599->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1599 && "failed to build Node_1045 (type:reshape)");
  res_1599->getOutput(0)->setName("Node_1045:0");
  auto res_1600=network->addShuffle(*res_1599->getOutput(0));
  Permutation permute_1600;
  permute_1600.order[0]=1;
  permute_1600.order[1]=0;
  permute_1600.order[2]=2;
  res_1600->setFirstTranspose(permute_1600);
  assert(res_1600 && "failed to build Node_1047 (type:transpose)");
  res_1600->getOutput(0)->setName("Node_1047:0");
  auto res_1601=network->addMatrixMultiply(*res_1596->getOutput(0),MatrixOperation::kNONE,*res_370->getOutput(0),MatrixOperation::kNONE);
  assert(res_1601 && "failed to build Node_1031 (type:matmul)");
  res_1601->getOutput(0)->setName("Node_1031:0");
  auto res_1602=network->addElementWise(*res_1601->getOutput(0),*res_371->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1602 && "failed to build Node_1031_add (type:add)");
  res_1602->getOutput(0)->setName("Node_1031_add:0");
  auto res_1603=network->addShuffle(*res_1602->getOutput(0));
  res_1603->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1603 && "failed to build Node_1055 (type:reshape)");
  res_1603->getOutput(0)->setName("Node_1055:0");
  auto res_1604=network->addShuffle(*res_1603->getOutput(0));
  Permutation permute_1604;
  permute_1604.order[0]=1;
  permute_1604.order[1]=2;
  permute_1604.order[2]=0;
  res_1604->setFirstTranspose(permute_1604);
  assert(res_1604 && "failed to build Node_1068 (type:transpose)");
  res_1604->getOutput(0)->setName("Node_1068:0");
  auto res_1605=network->addMatrixMultiply(*res_1600->getOutput(0),MatrixOperation::kNONE,*res_1604->getOutput(0),MatrixOperation::kNONE);
  assert(res_1605 && "failed to build Node_1069 (type:matmul)");
  res_1605->getOutput(0)->setName("Node_1069:0");
  auto res_1606=network->addElementWise(*res_1605->getOutput(0),*res_936->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1606 && "failed to build Node_1070 (type:divide)");
  res_1606->getOutput(0)->setName("Node_1070:0");
  auto res_1607=network->addElementWise(*res_1606->getOutput(0),*res_1581->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1607 && "failed to build Node_1071 (type:add)");
  res_1607->getOutput(0)->setName("Node_1071:0");
  auto res_1608=network->addSoftMax(*res_1607->getOutput(0));
  res_1608->setAxes(4);
  assert(res_1608 && "failed to build Node_1072 (type:softmax)");
  res_1608->getOutput(0)->setName("Node_1072:0");
  auto res_1609=network->addMatrixMultiply(*res_1596->getOutput(0),MatrixOperation::kNONE,*res_372->getOutput(0),MatrixOperation::kNONE);
  assert(res_1609 && "failed to build Node_1037 (type:matmul)");
  res_1609->getOutput(0)->setName("Node_1037:0");
  auto res_1610=network->addElementWise(*res_1609->getOutput(0),*res_373->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1610 && "failed to build Node_1037_add (type:add)");
  res_1610->getOutput(0)->setName("Node_1037_add:0");
  auto res_1611=network->addShuffle(*res_1610->getOutput(0));
  res_1611->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1611 && "failed to build Node_1065 (type:reshape)");
  res_1611->getOutput(0)->setName("Node_1065:0");
  auto res_1612=network->addShuffle(*res_1611->getOutput(0));
  Permutation permute_1612;
  permute_1612.order[0]=1;
  permute_1612.order[1]=0;
  permute_1612.order[2]=2;
  res_1612->setFirstTranspose(permute_1612);
  assert(res_1612 && "failed to build Node_1067 (type:transpose)");
  res_1612->getOutput(0)->setName("Node_1067:0");
  auto res_1613=network->addMatrixMultiply(*res_1608->getOutput(0),MatrixOperation::kNONE,*res_1612->getOutput(0),MatrixOperation::kNONE);
  assert(res_1613 && "failed to build Node_1076 (type:matmul)");
  res_1613->getOutput(0)->setName("Node_1076:0");
  auto res_1614=network->addShuffle(*res_1613->getOutput(0));
  Permutation permute_1614;
  permute_1614.order[0]=1;
  permute_1614.order[1]=0;
  permute_1614.order[2]=2;
  res_1614->setFirstTranspose(permute_1614);
  assert(res_1614 && "failed to build Node_1078 (type:transpose)");
  res_1614->getOutput(0)->setName("Node_1078:0");
  auto res_1615=network->addIdentity(*res_1614->getOutput(0));
  assert(res_1615 && "failed to build Node_1079 (type:contiguous)");
  res_1615->getOutput(0)->setName("Node_1079:0");
  auto res_1616=network->addShuffle(*res_1615->getOutput(0));
  res_1616->setReshapeDimensions(Dims{2,{59,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1616 && "failed to build Node_1087 (type:reshape)");
  res_1616->getOutput(0)->setName("Node_1087:0");
  auto res_1617=network->addMatrixMultiply(*res_1616->getOutput(0),MatrixOperation::kNONE,*res_374->getOutput(0),MatrixOperation::kNONE);
  assert(res_1617 && "failed to build Node_1094 (type:matmul)");
  res_1617->getOutput(0)->setName("Node_1094:0");
  auto res_1618=network->addElementWise(*res_1617->getOutput(0),*res_375->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1618 && "failed to build Node_1094_add (type:add)");
  res_1618->getOutput(0)->setName("Node_1094_add:0");
  auto res_1619=network->addElementWise(*res_1618->getOutput(0),*res_1596->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1619 && "failed to build Node_1098 (type:add)");
  res_1619->getOutput(0)->setName("Node_1098:0");
  auto res_1620=network->addReduce(*res_1619->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1620 && "failed to build Node_1105_mean (type:mean)");
  res_1620->getOutput(0)->setName("Node_1105_mean:0");
  auto res_1621=network->addElementWise(*res_1619->getOutput(0),*res_1620->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1621 && "failed to build Node_1105_diff (type:sub)");
  res_1621->getOutput(0)->setName("Node_1105_diff:0");
  auto res_1622=network->addElementWise(*res_1621->getOutput(0),*res_1144->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1622 && "failed to build Node_1105_power (type:power)");
  res_1622->getOutput(0)->setName("Node_1105_power:0");
  auto res_1623=network->addReduce(*res_1622->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1623 && "failed to build Node_1105_var (type:mean)");
  res_1623->getOutput(0)->setName("Node_1105_var:0");
  auto res_1624=network->addElementWise(*res_1623->getOutput(0),*res_1018->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1624 && "failed to build Node_1105_modify (type:add)");
  res_1624->getOutput(0)->setName("Node_1105_modify:0");
  auto res_1625=network->addUnary(*res_1624->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1625 && "failed to build Node_1105_sqrt (type:power)");
  res_1625->getOutput(0)->setName("Node_1105_sqrt:0");
  auto res_1626=network->addElementWise(*res_1621->getOutput(0),*res_1625->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1626 && "failed to build Node_1105_rsqrt (type:divide)");
  res_1626->getOutput(0)->setName("Node_1105_rsqrt:0");
  auto res_1627=network->addElementWise(*res_1626->getOutput(0),*res_98->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1627 && "failed to build Node_1105_mul (type:multiply)");
  res_1627->getOutput(0)->setName("Node_1105_mul:0");
  auto res_1628=network->addElementWise(*res_1627->getOutput(0),*res_99->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1628 && "failed to build Node_1105 (type:add)");
  res_1628->getOutput(0)->setName("Node_1105:0");
  auto res_1629=network->addMatrixMultiply(*res_1628->getOutput(0),MatrixOperation::kNONE,*res_376->getOutput(0),MatrixOperation::kNONE);
  assert(res_1629 && "failed to build Node_1111 (type:matmul)");
  res_1629->getOutput(0)->setName("Node_1111:0");
  auto res_1630=network->addElementWise(*res_1629->getOutput(0),*res_377->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1630 && "failed to build Node_1111_add (type:add)");
  res_1630->getOutput(0)->setName("Node_1111_add:0");
  ITensor* inputTensors_1631[1] = {res_1630->getOutput(0)};
  auto plugin_1631=GELU_Plugin("gelu");
  auto res_1631=network->addPluginV2(inputTensors_1631,1,plugin_1631);
  assert(res_1631 && "failed to build Node_1112 (type:gelu)");
  res_1631->getOutput(0)->setName("Node_1112:0");
  auto res_1632=network->addMatrixMultiply(*res_1631->getOutput(0),MatrixOperation::kNONE,*res_378->getOutput(0),MatrixOperation::kNONE);
  assert(res_1632 && "failed to build Node_1119 (type:matmul)");
  res_1632->getOutput(0)->setName("Node_1119:0");
  auto res_1633=network->addElementWise(*res_1632->getOutput(0),*res_379->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1633 && "failed to build Node_1119_add (type:add)");
  res_1633->getOutput(0)->setName("Node_1119_add:0");
  auto res_1634=network->addElementWise(*res_1633->getOutput(0),*res_1628->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1634 && "failed to build Node_1123 (type:add)");
  res_1634->getOutput(0)->setName("Node_1123:0");
  auto res_1635=network->addReduce(*res_1634->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1635 && "failed to build Node_1130_mean (type:mean)");
  res_1635->getOutput(0)->setName("Node_1130_mean:0");
  auto res_1636=network->addElementWise(*res_1634->getOutput(0),*res_1635->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1636 && "failed to build Node_1130_diff (type:sub)");
  res_1636->getOutput(0)->setName("Node_1130_diff:0");
  auto res_1637=network->addElementWise(*res_1636->getOutput(0),*res_1145->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1637 && "failed to build Node_1130_power (type:power)");
  res_1637->getOutput(0)->setName("Node_1130_power:0");
  auto res_1638=network->addReduce(*res_1637->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1638 && "failed to build Node_1130_var (type:mean)");
  res_1638->getOutput(0)->setName("Node_1130_var:0");
  auto res_1639=network->addElementWise(*res_1638->getOutput(0),*res_1019->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1639 && "failed to build Node_1130_modify (type:add)");
  res_1639->getOutput(0)->setName("Node_1130_modify:0");
  auto res_1640=network->addUnary(*res_1639->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1640 && "failed to build Node_1130_sqrt (type:power)");
  res_1640->getOutput(0)->setName("Node_1130_sqrt:0");
  auto res_1641=network->addElementWise(*res_1636->getOutput(0),*res_1640->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1641 && "failed to build Node_1130_rsqrt (type:divide)");
  res_1641->getOutput(0)->setName("Node_1130_rsqrt:0");
  auto res_1642=network->addElementWise(*res_1641->getOutput(0),*res_100->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1642 && "failed to build Node_1130_mul (type:multiply)");
  res_1642->getOutput(0)->setName("Node_1130_mul:0");
  auto res_1643=network->addElementWise(*res_1642->getOutput(0),*res_101->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1643 && "failed to build Node_1130 (type:add)");
  res_1643->getOutput(0)->setName("Node_1130:0");
  auto res_1644=network->addMatrixMultiply(*res_1643->getOutput(0),MatrixOperation::kNONE,*res_380->getOutput(0),MatrixOperation::kNONE);
  assert(res_1644 && "failed to build Node_1147 (type:matmul)");
  res_1644->getOutput(0)->setName("Node_1147:0");
  auto res_1645=network->addElementWise(*res_1644->getOutput(0),*res_381->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1645 && "failed to build Node_1147_add (type:add)");
  res_1645->getOutput(0)->setName("Node_1147_add:0");
  auto res_1646=network->addShuffle(*res_1645->getOutput(0));
  res_1646->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1646 && "failed to build Node_1167 (type:reshape)");
  res_1646->getOutput(0)->setName("Node_1167:0");
  auto res_1647=network->addShuffle(*res_1646->getOutput(0));
  Permutation permute_1647;
  permute_1647.order[0]=1;
  permute_1647.order[1]=0;
  permute_1647.order[2]=2;
  res_1647->setFirstTranspose(permute_1647);
  assert(res_1647 && "failed to build Node_1169 (type:transpose)");
  res_1647->getOutput(0)->setName("Node_1169:0");
  auto res_1648=network->addMatrixMultiply(*res_1643->getOutput(0),MatrixOperation::kNONE,*res_382->getOutput(0),MatrixOperation::kNONE);
  assert(res_1648 && "failed to build Node_1153 (type:matmul)");
  res_1648->getOutput(0)->setName("Node_1153:0");
  auto res_1649=network->addElementWise(*res_1648->getOutput(0),*res_383->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1649 && "failed to build Node_1153_add (type:add)");
  res_1649->getOutput(0)->setName("Node_1153_add:0");
  auto res_1650=network->addShuffle(*res_1649->getOutput(0));
  res_1650->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1650 && "failed to build Node_1177 (type:reshape)");
  res_1650->getOutput(0)->setName("Node_1177:0");
  auto res_1651=network->addShuffle(*res_1650->getOutput(0));
  Permutation permute_1651;
  permute_1651.order[0]=1;
  permute_1651.order[1]=2;
  permute_1651.order[2]=0;
  res_1651->setFirstTranspose(permute_1651);
  assert(res_1651 && "failed to build Node_1190 (type:transpose)");
  res_1651->getOutput(0)->setName("Node_1190:0");
  auto res_1652=network->addMatrixMultiply(*res_1647->getOutput(0),MatrixOperation::kNONE,*res_1651->getOutput(0),MatrixOperation::kNONE);
  assert(res_1652 && "failed to build Node_1191 (type:matmul)");
  res_1652->getOutput(0)->setName("Node_1191:0");
  auto res_1653=network->addElementWise(*res_1652->getOutput(0),*res_937->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1653 && "failed to build Node_1192 (type:divide)");
  res_1653->getOutput(0)->setName("Node_1192:0");
  auto res_1654=network->addElementWise(*res_1653->getOutput(0),*res_1581->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1654 && "failed to build Node_1193 (type:add)");
  res_1654->getOutput(0)->setName("Node_1193:0");
  auto res_1655=network->addSoftMax(*res_1654->getOutput(0));
  res_1655->setAxes(4);
  assert(res_1655 && "failed to build Node_1194 (type:softmax)");
  res_1655->getOutput(0)->setName("Node_1194:0");
  auto res_1656=network->addMatrixMultiply(*res_1643->getOutput(0),MatrixOperation::kNONE,*res_384->getOutput(0),MatrixOperation::kNONE);
  assert(res_1656 && "failed to build Node_1159 (type:matmul)");
  res_1656->getOutput(0)->setName("Node_1159:0");
  auto res_1657=network->addElementWise(*res_1656->getOutput(0),*res_385->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1657 && "failed to build Node_1159_add (type:add)");
  res_1657->getOutput(0)->setName("Node_1159_add:0");
  auto res_1658=network->addShuffle(*res_1657->getOutput(0));
  res_1658->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1658 && "failed to build Node_1187 (type:reshape)");
  res_1658->getOutput(0)->setName("Node_1187:0");
  auto res_1659=network->addShuffle(*res_1658->getOutput(0));
  Permutation permute_1659;
  permute_1659.order[0]=1;
  permute_1659.order[1]=0;
  permute_1659.order[2]=2;
  res_1659->setFirstTranspose(permute_1659);
  assert(res_1659 && "failed to build Node_1189 (type:transpose)");
  res_1659->getOutput(0)->setName("Node_1189:0");
  auto res_1660=network->addMatrixMultiply(*res_1655->getOutput(0),MatrixOperation::kNONE,*res_1659->getOutput(0),MatrixOperation::kNONE);
  assert(res_1660 && "failed to build Node_1198 (type:matmul)");
  res_1660->getOutput(0)->setName("Node_1198:0");
  auto res_1661=network->addShuffle(*res_1660->getOutput(0));
  Permutation permute_1661;
  permute_1661.order[0]=1;
  permute_1661.order[1]=0;
  permute_1661.order[2]=2;
  res_1661->setFirstTranspose(permute_1661);
  assert(res_1661 && "failed to build Node_1200 (type:transpose)");
  res_1661->getOutput(0)->setName("Node_1200:0");
  auto res_1662=network->addIdentity(*res_1661->getOutput(0));
  assert(res_1662 && "failed to build Node_1201 (type:contiguous)");
  res_1662->getOutput(0)->setName("Node_1201:0");
  auto res_1663=network->addShuffle(*res_1662->getOutput(0));
  res_1663->setReshapeDimensions(Dims{2,{59,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1663 && "failed to build Node_1209 (type:reshape)");
  res_1663->getOutput(0)->setName("Node_1209:0");
  auto res_1664=network->addMatrixMultiply(*res_1663->getOutput(0),MatrixOperation::kNONE,*res_386->getOutput(0),MatrixOperation::kNONE);
  assert(res_1664 && "failed to build Node_1216 (type:matmul)");
  res_1664->getOutput(0)->setName("Node_1216:0");
  auto res_1665=network->addElementWise(*res_1664->getOutput(0),*res_387->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1665 && "failed to build Node_1216_add (type:add)");
  res_1665->getOutput(0)->setName("Node_1216_add:0");
  auto res_1666=network->addElementWise(*res_1665->getOutput(0),*res_1643->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1666 && "failed to build Node_1220 (type:add)");
  res_1666->getOutput(0)->setName("Node_1220:0");
  auto res_1667=network->addReduce(*res_1666->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1667 && "failed to build Node_1227_mean (type:mean)");
  res_1667->getOutput(0)->setName("Node_1227_mean:0");
  auto res_1668=network->addElementWise(*res_1666->getOutput(0),*res_1667->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1668 && "failed to build Node_1227_diff (type:sub)");
  res_1668->getOutput(0)->setName("Node_1227_diff:0");
  auto res_1669=network->addElementWise(*res_1668->getOutput(0),*res_1146->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1669 && "failed to build Node_1227_power (type:power)");
  res_1669->getOutput(0)->setName("Node_1227_power:0");
  auto res_1670=network->addReduce(*res_1669->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1670 && "failed to build Node_1227_var (type:mean)");
  res_1670->getOutput(0)->setName("Node_1227_var:0");
  auto res_1671=network->addElementWise(*res_1670->getOutput(0),*res_1020->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1671 && "failed to build Node_1227_modify (type:add)");
  res_1671->getOutput(0)->setName("Node_1227_modify:0");
  auto res_1672=network->addUnary(*res_1671->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1672 && "failed to build Node_1227_sqrt (type:power)");
  res_1672->getOutput(0)->setName("Node_1227_sqrt:0");
  auto res_1673=network->addElementWise(*res_1668->getOutput(0),*res_1672->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1673 && "failed to build Node_1227_rsqrt (type:divide)");
  res_1673->getOutput(0)->setName("Node_1227_rsqrt:0");
  auto res_1674=network->addElementWise(*res_1673->getOutput(0),*res_102->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1674 && "failed to build Node_1227_mul (type:multiply)");
  res_1674->getOutput(0)->setName("Node_1227_mul:0");
  auto res_1675=network->addElementWise(*res_1674->getOutput(0),*res_103->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1675 && "failed to build Node_1227 (type:add)");
  res_1675->getOutput(0)->setName("Node_1227:0");
  auto res_1676=network->addMatrixMultiply(*res_1675->getOutput(0),MatrixOperation::kNONE,*res_388->getOutput(0),MatrixOperation::kNONE);
  assert(res_1676 && "failed to build Node_1233 (type:matmul)");
  res_1676->getOutput(0)->setName("Node_1233:0");
  auto res_1677=network->addElementWise(*res_1676->getOutput(0),*res_389->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1677 && "failed to build Node_1233_add (type:add)");
  res_1677->getOutput(0)->setName("Node_1233_add:0");
  ITensor* inputTensors_1678[1] = {res_1677->getOutput(0)};
  auto plugin_1678=GELU_Plugin("gelu");
  auto res_1678=network->addPluginV2(inputTensors_1678,1,plugin_1678);
  assert(res_1678 && "failed to build Node_1234 (type:gelu)");
  res_1678->getOutput(0)->setName("Node_1234:0");
  auto res_1679=network->addMatrixMultiply(*res_1678->getOutput(0),MatrixOperation::kNONE,*res_390->getOutput(0),MatrixOperation::kNONE);
  assert(res_1679 && "failed to build Node_1241 (type:matmul)");
  res_1679->getOutput(0)->setName("Node_1241:0");
  auto res_1680=network->addElementWise(*res_1679->getOutput(0),*res_391->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1680 && "failed to build Node_1241_add (type:add)");
  res_1680->getOutput(0)->setName("Node_1241_add:0");
  auto res_1681=network->addElementWise(*res_1680->getOutput(0),*res_1675->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1681 && "failed to build Node_1245 (type:add)");
  res_1681->getOutput(0)->setName("Node_1245:0");
  auto res_1682=network->addReduce(*res_1681->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1682 && "failed to build Node_1252_mean (type:mean)");
  res_1682->getOutput(0)->setName("Node_1252_mean:0");
  auto res_1683=network->addElementWise(*res_1681->getOutput(0),*res_1682->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1683 && "failed to build Node_1252_diff (type:sub)");
  res_1683->getOutput(0)->setName("Node_1252_diff:0");
  auto res_1684=network->addElementWise(*res_1683->getOutput(0),*res_1147->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1684 && "failed to build Node_1252_power (type:power)");
  res_1684->getOutput(0)->setName("Node_1252_power:0");
  auto res_1685=network->addReduce(*res_1684->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1685 && "failed to build Node_1252_var (type:mean)");
  res_1685->getOutput(0)->setName("Node_1252_var:0");
  auto res_1686=network->addElementWise(*res_1685->getOutput(0),*res_1021->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1686 && "failed to build Node_1252_modify (type:add)");
  res_1686->getOutput(0)->setName("Node_1252_modify:0");
  auto res_1687=network->addUnary(*res_1686->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1687 && "failed to build Node_1252_sqrt (type:power)");
  res_1687->getOutput(0)->setName("Node_1252_sqrt:0");
  auto res_1688=network->addElementWise(*res_1683->getOutput(0),*res_1687->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1688 && "failed to build Node_1252_rsqrt (type:divide)");
  res_1688->getOutput(0)->setName("Node_1252_rsqrt:0");
  auto res_1689=network->addElementWise(*res_1688->getOutput(0),*res_104->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1689 && "failed to build Node_1252_mul (type:multiply)");
  res_1689->getOutput(0)->setName("Node_1252_mul:0");
  auto res_1690=network->addElementWise(*res_1689->getOutput(0),*res_105->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1690 && "failed to build Node_1252 (type:add)");
  res_1690->getOutput(0)->setName("Node_1252:0");
  auto res_1691=network->addMatrixMultiply(*res_1690->getOutput(0),MatrixOperation::kNONE,*res_392->getOutput(0),MatrixOperation::kNONE);
  assert(res_1691 && "failed to build Node_1269 (type:matmul)");
  res_1691->getOutput(0)->setName("Node_1269:0");
  auto res_1692=network->addElementWise(*res_1691->getOutput(0),*res_393->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1692 && "failed to build Node_1269_add (type:add)");
  res_1692->getOutput(0)->setName("Node_1269_add:0");
  auto res_1693=network->addShuffle(*res_1692->getOutput(0));
  res_1693->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1693 && "failed to build Node_1289 (type:reshape)");
  res_1693->getOutput(0)->setName("Node_1289:0");
  auto res_1694=network->addShuffle(*res_1693->getOutput(0));
  Permutation permute_1694;
  permute_1694.order[0]=1;
  permute_1694.order[1]=0;
  permute_1694.order[2]=2;
  res_1694->setFirstTranspose(permute_1694);
  assert(res_1694 && "failed to build Node_1291 (type:transpose)");
  res_1694->getOutput(0)->setName("Node_1291:0");
  auto res_1695=network->addMatrixMultiply(*res_1690->getOutput(0),MatrixOperation::kNONE,*res_394->getOutput(0),MatrixOperation::kNONE);
  assert(res_1695 && "failed to build Node_1275 (type:matmul)");
  res_1695->getOutput(0)->setName("Node_1275:0");
  auto res_1696=network->addElementWise(*res_1695->getOutput(0),*res_395->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1696 && "failed to build Node_1275_add (type:add)");
  res_1696->getOutput(0)->setName("Node_1275_add:0");
  auto res_1697=network->addShuffle(*res_1696->getOutput(0));
  res_1697->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1697 && "failed to build Node_1299 (type:reshape)");
  res_1697->getOutput(0)->setName("Node_1299:0");
  auto res_1698=network->addShuffle(*res_1697->getOutput(0));
  Permutation permute_1698;
  permute_1698.order[0]=1;
  permute_1698.order[1]=2;
  permute_1698.order[2]=0;
  res_1698->setFirstTranspose(permute_1698);
  assert(res_1698 && "failed to build Node_1312 (type:transpose)");
  res_1698->getOutput(0)->setName("Node_1312:0");
  auto res_1699=network->addMatrixMultiply(*res_1694->getOutput(0),MatrixOperation::kNONE,*res_1698->getOutput(0),MatrixOperation::kNONE);
  assert(res_1699 && "failed to build Node_1313 (type:matmul)");
  res_1699->getOutput(0)->setName("Node_1313:0");
  auto res_1700=network->addElementWise(*res_1699->getOutput(0),*res_938->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1700 && "failed to build Node_1314 (type:divide)");
  res_1700->getOutput(0)->setName("Node_1314:0");
  auto res_1701=network->addElementWise(*res_1700->getOutput(0),*res_1581->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1701 && "failed to build Node_1315 (type:add)");
  res_1701->getOutput(0)->setName("Node_1315:0");
  auto res_1702=network->addSoftMax(*res_1701->getOutput(0));
  res_1702->setAxes(4);
  assert(res_1702 && "failed to build Node_1316 (type:softmax)");
  res_1702->getOutput(0)->setName("Node_1316:0");
  auto res_1703=network->addMatrixMultiply(*res_1690->getOutput(0),MatrixOperation::kNONE,*res_396->getOutput(0),MatrixOperation::kNONE);
  assert(res_1703 && "failed to build Node_1281 (type:matmul)");
  res_1703->getOutput(0)->setName("Node_1281:0");
  auto res_1704=network->addElementWise(*res_1703->getOutput(0),*res_397->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1704 && "failed to build Node_1281_add (type:add)");
  res_1704->getOutput(0)->setName("Node_1281_add:0");
  auto res_1705=network->addShuffle(*res_1704->getOutput(0));
  res_1705->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1705 && "failed to build Node_1309 (type:reshape)");
  res_1705->getOutput(0)->setName("Node_1309:0");
  auto res_1706=network->addShuffle(*res_1705->getOutput(0));
  Permutation permute_1706;
  permute_1706.order[0]=1;
  permute_1706.order[1]=0;
  permute_1706.order[2]=2;
  res_1706->setFirstTranspose(permute_1706);
  assert(res_1706 && "failed to build Node_1311 (type:transpose)");
  res_1706->getOutput(0)->setName("Node_1311:0");
  auto res_1707=network->addMatrixMultiply(*res_1702->getOutput(0),MatrixOperation::kNONE,*res_1706->getOutput(0),MatrixOperation::kNONE);
  assert(res_1707 && "failed to build Node_1320 (type:matmul)");
  res_1707->getOutput(0)->setName("Node_1320:0");
  auto res_1708=network->addShuffle(*res_1707->getOutput(0));
  Permutation permute_1708;
  permute_1708.order[0]=1;
  permute_1708.order[1]=0;
  permute_1708.order[2]=2;
  res_1708->setFirstTranspose(permute_1708);
  assert(res_1708 && "failed to build Node_1322 (type:transpose)");
  res_1708->getOutput(0)->setName("Node_1322:0");
  auto res_1709=network->addIdentity(*res_1708->getOutput(0));
  assert(res_1709 && "failed to build Node_1323 (type:contiguous)");
  res_1709->getOutput(0)->setName("Node_1323:0");
  auto res_1710=network->addShuffle(*res_1709->getOutput(0));
  res_1710->setReshapeDimensions(Dims{2,{59,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1710 && "failed to build Node_1331 (type:reshape)");
  res_1710->getOutput(0)->setName("Node_1331:0");
  auto res_1711=network->addMatrixMultiply(*res_1710->getOutput(0),MatrixOperation::kNONE,*res_398->getOutput(0),MatrixOperation::kNONE);
  assert(res_1711 && "failed to build Node_1338 (type:matmul)");
  res_1711->getOutput(0)->setName("Node_1338:0");
  auto res_1712=network->addElementWise(*res_1711->getOutput(0),*res_399->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1712 && "failed to build Node_1338_add (type:add)");
  res_1712->getOutput(0)->setName("Node_1338_add:0");
  auto res_1713=network->addElementWise(*res_1712->getOutput(0),*res_1690->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1713 && "failed to build Node_1342 (type:add)");
  res_1713->getOutput(0)->setName("Node_1342:0");
  auto res_1714=network->addReduce(*res_1713->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1714 && "failed to build Node_1349_mean (type:mean)");
  res_1714->getOutput(0)->setName("Node_1349_mean:0");
  auto res_1715=network->addElementWise(*res_1713->getOutput(0),*res_1714->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1715 && "failed to build Node_1349_diff (type:sub)");
  res_1715->getOutput(0)->setName("Node_1349_diff:0");
  auto res_1716=network->addElementWise(*res_1715->getOutput(0),*res_1148->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1716 && "failed to build Node_1349_power (type:power)");
  res_1716->getOutput(0)->setName("Node_1349_power:0");
  auto res_1717=network->addReduce(*res_1716->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1717 && "failed to build Node_1349_var (type:mean)");
  res_1717->getOutput(0)->setName("Node_1349_var:0");
  auto res_1718=network->addElementWise(*res_1717->getOutput(0),*res_1022->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1718 && "failed to build Node_1349_modify (type:add)");
  res_1718->getOutput(0)->setName("Node_1349_modify:0");
  auto res_1719=network->addUnary(*res_1718->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1719 && "failed to build Node_1349_sqrt (type:power)");
  res_1719->getOutput(0)->setName("Node_1349_sqrt:0");
  auto res_1720=network->addElementWise(*res_1715->getOutput(0),*res_1719->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1720 && "failed to build Node_1349_rsqrt (type:divide)");
  res_1720->getOutput(0)->setName("Node_1349_rsqrt:0");
  auto res_1721=network->addElementWise(*res_1720->getOutput(0),*res_106->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1721 && "failed to build Node_1349_mul (type:multiply)");
  res_1721->getOutput(0)->setName("Node_1349_mul:0");
  auto res_1722=network->addElementWise(*res_1721->getOutput(0),*res_107->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1722 && "failed to build Node_1349 (type:add)");
  res_1722->getOutput(0)->setName("Node_1349:0");
  auto res_1723=network->addMatrixMultiply(*res_1722->getOutput(0),MatrixOperation::kNONE,*res_400->getOutput(0),MatrixOperation::kNONE);
  assert(res_1723 && "failed to build Node_1355 (type:matmul)");
  res_1723->getOutput(0)->setName("Node_1355:0");
  auto res_1724=network->addElementWise(*res_1723->getOutput(0),*res_401->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1724 && "failed to build Node_1355_add (type:add)");
  res_1724->getOutput(0)->setName("Node_1355_add:0");
  ITensor* inputTensors_1725[1] = {res_1724->getOutput(0)};
  auto plugin_1725=GELU_Plugin("gelu");
  auto res_1725=network->addPluginV2(inputTensors_1725,1,plugin_1725);
  assert(res_1725 && "failed to build Node_1356 (type:gelu)");
  res_1725->getOutput(0)->setName("Node_1356:0");
  auto res_1726=network->addMatrixMultiply(*res_1725->getOutput(0),MatrixOperation::kNONE,*res_402->getOutput(0),MatrixOperation::kNONE);
  assert(res_1726 && "failed to build Node_1363 (type:matmul)");
  res_1726->getOutput(0)->setName("Node_1363:0");
  auto res_1727=network->addElementWise(*res_1726->getOutput(0),*res_403->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1727 && "failed to build Node_1363_add (type:add)");
  res_1727->getOutput(0)->setName("Node_1363_add:0");
  auto res_1728=network->addElementWise(*res_1727->getOutput(0),*res_1722->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1728 && "failed to build Node_1367 (type:add)");
  res_1728->getOutput(0)->setName("Node_1367:0");
  auto res_1729=network->addReduce(*res_1728->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1729 && "failed to build Node_1374_mean (type:mean)");
  res_1729->getOutput(0)->setName("Node_1374_mean:0");
  auto res_1730=network->addElementWise(*res_1728->getOutput(0),*res_1729->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1730 && "failed to build Node_1374_diff (type:sub)");
  res_1730->getOutput(0)->setName("Node_1374_diff:0");
  auto res_1731=network->addElementWise(*res_1730->getOutput(0),*res_1149->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1731 && "failed to build Node_1374_power (type:power)");
  res_1731->getOutput(0)->setName("Node_1374_power:0");
  auto res_1732=network->addReduce(*res_1731->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1732 && "failed to build Node_1374_var (type:mean)");
  res_1732->getOutput(0)->setName("Node_1374_var:0");
  auto res_1733=network->addElementWise(*res_1732->getOutput(0),*res_1023->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1733 && "failed to build Node_1374_modify (type:add)");
  res_1733->getOutput(0)->setName("Node_1374_modify:0");
  auto res_1734=network->addUnary(*res_1733->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1734 && "failed to build Node_1374_sqrt (type:power)");
  res_1734->getOutput(0)->setName("Node_1374_sqrt:0");
  auto res_1735=network->addElementWise(*res_1730->getOutput(0),*res_1734->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1735 && "failed to build Node_1374_rsqrt (type:divide)");
  res_1735->getOutput(0)->setName("Node_1374_rsqrt:0");
  auto res_1736=network->addElementWise(*res_1735->getOutput(0),*res_108->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1736 && "failed to build Node_1374_mul (type:multiply)");
  res_1736->getOutput(0)->setName("Node_1374_mul:0");
  auto res_1737=network->addElementWise(*res_1736->getOutput(0),*res_109->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1737 && "failed to build Node_1374 (type:add)");
  res_1737->getOutput(0)->setName("Node_1374:0");
  auto res_1738=network->addMatrixMultiply(*res_1737->getOutput(0),MatrixOperation::kNONE,*res_404->getOutput(0),MatrixOperation::kNONE);
  assert(res_1738 && "failed to build Node_1391 (type:matmul)");
  res_1738->getOutput(0)->setName("Node_1391:0");
  auto res_1739=network->addElementWise(*res_1738->getOutput(0),*res_405->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1739 && "failed to build Node_1391_add (type:add)");
  res_1739->getOutput(0)->setName("Node_1391_add:0");
  auto res_1740=network->addShuffle(*res_1739->getOutput(0));
  res_1740->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1740 && "failed to build Node_1411 (type:reshape)");
  res_1740->getOutput(0)->setName("Node_1411:0");
  auto res_1741=network->addShuffle(*res_1740->getOutput(0));
  Permutation permute_1741;
  permute_1741.order[0]=1;
  permute_1741.order[1]=0;
  permute_1741.order[2]=2;
  res_1741->setFirstTranspose(permute_1741);
  assert(res_1741 && "failed to build Node_1413 (type:transpose)");
  res_1741->getOutput(0)->setName("Node_1413:0");
  auto res_1742=network->addMatrixMultiply(*res_1737->getOutput(0),MatrixOperation::kNONE,*res_406->getOutput(0),MatrixOperation::kNONE);
  assert(res_1742 && "failed to build Node_1397 (type:matmul)");
  res_1742->getOutput(0)->setName("Node_1397:0");
  auto res_1743=network->addElementWise(*res_1742->getOutput(0),*res_407->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1743 && "failed to build Node_1397_add (type:add)");
  res_1743->getOutput(0)->setName("Node_1397_add:0");
  auto res_1744=network->addShuffle(*res_1743->getOutput(0));
  res_1744->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1744 && "failed to build Node_1421 (type:reshape)");
  res_1744->getOutput(0)->setName("Node_1421:0");
  auto res_1745=network->addShuffle(*res_1744->getOutput(0));
  Permutation permute_1745;
  permute_1745.order[0]=1;
  permute_1745.order[1]=2;
  permute_1745.order[2]=0;
  res_1745->setFirstTranspose(permute_1745);
  assert(res_1745 && "failed to build Node_1434 (type:transpose)");
  res_1745->getOutput(0)->setName("Node_1434:0");
  auto res_1746=network->addMatrixMultiply(*res_1741->getOutput(0),MatrixOperation::kNONE,*res_1745->getOutput(0),MatrixOperation::kNONE);
  assert(res_1746 && "failed to build Node_1435 (type:matmul)");
  res_1746->getOutput(0)->setName("Node_1435:0");
  auto res_1747=network->addElementWise(*res_1746->getOutput(0),*res_939->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1747 && "failed to build Node_1436 (type:divide)");
  res_1747->getOutput(0)->setName("Node_1436:0");
  auto res_1748=network->addElementWise(*res_1747->getOutput(0),*res_1581->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1748 && "failed to build Node_1437 (type:add)");
  res_1748->getOutput(0)->setName("Node_1437:0");
  auto res_1749=network->addSoftMax(*res_1748->getOutput(0));
  res_1749->setAxes(4);
  assert(res_1749 && "failed to build Node_1438 (type:softmax)");
  res_1749->getOutput(0)->setName("Node_1438:0");
  auto res_1750=network->addMatrixMultiply(*res_1737->getOutput(0),MatrixOperation::kNONE,*res_408->getOutput(0),MatrixOperation::kNONE);
  assert(res_1750 && "failed to build Node_1403 (type:matmul)");
  res_1750->getOutput(0)->setName("Node_1403:0");
  auto res_1751=network->addElementWise(*res_1750->getOutput(0),*res_409->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1751 && "failed to build Node_1403_add (type:add)");
  res_1751->getOutput(0)->setName("Node_1403_add:0");
  auto res_1752=network->addShuffle(*res_1751->getOutput(0));
  res_1752->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1752 && "failed to build Node_1431 (type:reshape)");
  res_1752->getOutput(0)->setName("Node_1431:0");
  auto res_1753=network->addShuffle(*res_1752->getOutput(0));
  Permutation permute_1753;
  permute_1753.order[0]=1;
  permute_1753.order[1]=0;
  permute_1753.order[2]=2;
  res_1753->setFirstTranspose(permute_1753);
  assert(res_1753 && "failed to build Node_1433 (type:transpose)");
  res_1753->getOutput(0)->setName("Node_1433:0");
  auto res_1754=network->addMatrixMultiply(*res_1749->getOutput(0),MatrixOperation::kNONE,*res_1753->getOutput(0),MatrixOperation::kNONE);
  assert(res_1754 && "failed to build Node_1442 (type:matmul)");
  res_1754->getOutput(0)->setName("Node_1442:0");
  auto res_1755=network->addShuffle(*res_1754->getOutput(0));
  Permutation permute_1755;
  permute_1755.order[0]=1;
  permute_1755.order[1]=0;
  permute_1755.order[2]=2;
  res_1755->setFirstTranspose(permute_1755);
  assert(res_1755 && "failed to build Node_1444 (type:transpose)");
  res_1755->getOutput(0)->setName("Node_1444:0");
  auto res_1756=network->addIdentity(*res_1755->getOutput(0));
  assert(res_1756 && "failed to build Node_1445 (type:contiguous)");
  res_1756->getOutput(0)->setName("Node_1445:0");
  auto res_1757=network->addShuffle(*res_1756->getOutput(0));
  res_1757->setReshapeDimensions(Dims{2,{59,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1757 && "failed to build Node_1453 (type:reshape)");
  res_1757->getOutput(0)->setName("Node_1453:0");
  auto res_1758=network->addMatrixMultiply(*res_1757->getOutput(0),MatrixOperation::kNONE,*res_410->getOutput(0),MatrixOperation::kNONE);
  assert(res_1758 && "failed to build Node_1460 (type:matmul)");
  res_1758->getOutput(0)->setName("Node_1460:0");
  auto res_1759=network->addElementWise(*res_1758->getOutput(0),*res_411->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1759 && "failed to build Node_1460_add (type:add)");
  res_1759->getOutput(0)->setName("Node_1460_add:0");
  auto res_1760=network->addElementWise(*res_1759->getOutput(0),*res_1737->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1760 && "failed to build Node_1464 (type:add)");
  res_1760->getOutput(0)->setName("Node_1464:0");
  auto res_1761=network->addReduce(*res_1760->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1761 && "failed to build Node_1471_mean (type:mean)");
  res_1761->getOutput(0)->setName("Node_1471_mean:0");
  auto res_1762=network->addElementWise(*res_1760->getOutput(0),*res_1761->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1762 && "failed to build Node_1471_diff (type:sub)");
  res_1762->getOutput(0)->setName("Node_1471_diff:0");
  auto res_1763=network->addElementWise(*res_1762->getOutput(0),*res_1150->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1763 && "failed to build Node_1471_power (type:power)");
  res_1763->getOutput(0)->setName("Node_1471_power:0");
  auto res_1764=network->addReduce(*res_1763->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1764 && "failed to build Node_1471_var (type:mean)");
  res_1764->getOutput(0)->setName("Node_1471_var:0");
  auto res_1765=network->addElementWise(*res_1764->getOutput(0),*res_1024->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1765 && "failed to build Node_1471_modify (type:add)");
  res_1765->getOutput(0)->setName("Node_1471_modify:0");
  auto res_1766=network->addUnary(*res_1765->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1766 && "failed to build Node_1471_sqrt (type:power)");
  res_1766->getOutput(0)->setName("Node_1471_sqrt:0");
  auto res_1767=network->addElementWise(*res_1762->getOutput(0),*res_1766->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1767 && "failed to build Node_1471_rsqrt (type:divide)");
  res_1767->getOutput(0)->setName("Node_1471_rsqrt:0");
  auto res_1768=network->addElementWise(*res_1767->getOutput(0),*res_110->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1768 && "failed to build Node_1471_mul (type:multiply)");
  res_1768->getOutput(0)->setName("Node_1471_mul:0");
  auto res_1769=network->addElementWise(*res_1768->getOutput(0),*res_111->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1769 && "failed to build Node_1471 (type:add)");
  res_1769->getOutput(0)->setName("Node_1471:0");
  auto res_1770=network->addMatrixMultiply(*res_1769->getOutput(0),MatrixOperation::kNONE,*res_412->getOutput(0),MatrixOperation::kNONE);
  assert(res_1770 && "failed to build Node_1477 (type:matmul)");
  res_1770->getOutput(0)->setName("Node_1477:0");
  auto res_1771=network->addElementWise(*res_1770->getOutput(0),*res_413->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1771 && "failed to build Node_1477_add (type:add)");
  res_1771->getOutput(0)->setName("Node_1477_add:0");
  ITensor* inputTensors_1772[1] = {res_1771->getOutput(0)};
  auto plugin_1772=GELU_Plugin("gelu");
  auto res_1772=network->addPluginV2(inputTensors_1772,1,plugin_1772);
  assert(res_1772 && "failed to build Node_1478 (type:gelu)");
  res_1772->getOutput(0)->setName("Node_1478:0");
  auto res_1773=network->addMatrixMultiply(*res_1772->getOutput(0),MatrixOperation::kNONE,*res_414->getOutput(0),MatrixOperation::kNONE);
  assert(res_1773 && "failed to build Node_1485 (type:matmul)");
  res_1773->getOutput(0)->setName("Node_1485:0");
  auto res_1774=network->addElementWise(*res_1773->getOutput(0),*res_415->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1774 && "failed to build Node_1485_add (type:add)");
  res_1774->getOutput(0)->setName("Node_1485_add:0");
  auto res_1775=network->addElementWise(*res_1774->getOutput(0),*res_1769->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1775 && "failed to build Node_1489 (type:add)");
  res_1775->getOutput(0)->setName("Node_1489:0");
  auto res_1776=network->addReduce(*res_1775->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1776 && "failed to build Node_1496_mean (type:mean)");
  res_1776->getOutput(0)->setName("Node_1496_mean:0");
  auto res_1777=network->addElementWise(*res_1775->getOutput(0),*res_1776->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1777 && "failed to build Node_1496_diff (type:sub)");
  res_1777->getOutput(0)->setName("Node_1496_diff:0");
  auto res_1778=network->addElementWise(*res_1777->getOutput(0),*res_1151->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1778 && "failed to build Node_1496_power (type:power)");
  res_1778->getOutput(0)->setName("Node_1496_power:0");
  auto res_1779=network->addReduce(*res_1778->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1779 && "failed to build Node_1496_var (type:mean)");
  res_1779->getOutput(0)->setName("Node_1496_var:0");
  auto res_1780=network->addElementWise(*res_1779->getOutput(0),*res_1025->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1780 && "failed to build Node_1496_modify (type:add)");
  res_1780->getOutput(0)->setName("Node_1496_modify:0");
  auto res_1781=network->addUnary(*res_1780->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1781 && "failed to build Node_1496_sqrt (type:power)");
  res_1781->getOutput(0)->setName("Node_1496_sqrt:0");
  auto res_1782=network->addElementWise(*res_1777->getOutput(0),*res_1781->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1782 && "failed to build Node_1496_rsqrt (type:divide)");
  res_1782->getOutput(0)->setName("Node_1496_rsqrt:0");
  auto res_1783=network->addElementWise(*res_1782->getOutput(0),*res_112->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1783 && "failed to build Node_1496_mul (type:multiply)");
  res_1783->getOutput(0)->setName("Node_1496_mul:0");
  auto res_1784=network->addElementWise(*res_1783->getOutput(0),*res_113->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1784 && "failed to build Node_1496 (type:add)");
  res_1784->getOutput(0)->setName("Node_1496:0");
  auto res_1785=network->addMatrixMultiply(*res_1784->getOutput(0),MatrixOperation::kNONE,*res_416->getOutput(0),MatrixOperation::kNONE);
  assert(res_1785 && "failed to build Node_1513 (type:matmul)");
  res_1785->getOutput(0)->setName("Node_1513:0");
  auto res_1786=network->addElementWise(*res_1785->getOutput(0),*res_417->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1786 && "failed to build Node_1513_add (type:add)");
  res_1786->getOutput(0)->setName("Node_1513_add:0");
  auto res_1787=network->addShuffle(*res_1786->getOutput(0));
  res_1787->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1787 && "failed to build Node_1533 (type:reshape)");
  res_1787->getOutput(0)->setName("Node_1533:0");
  auto res_1788=network->addShuffle(*res_1787->getOutput(0));
  Permutation permute_1788;
  permute_1788.order[0]=1;
  permute_1788.order[1]=0;
  permute_1788.order[2]=2;
  res_1788->setFirstTranspose(permute_1788);
  assert(res_1788 && "failed to build Node_1535 (type:transpose)");
  res_1788->getOutput(0)->setName("Node_1535:0");
  auto res_1789=network->addMatrixMultiply(*res_1784->getOutput(0),MatrixOperation::kNONE,*res_418->getOutput(0),MatrixOperation::kNONE);
  assert(res_1789 && "failed to build Node_1519 (type:matmul)");
  res_1789->getOutput(0)->setName("Node_1519:0");
  auto res_1790=network->addElementWise(*res_1789->getOutput(0),*res_419->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1790 && "failed to build Node_1519_add (type:add)");
  res_1790->getOutput(0)->setName("Node_1519_add:0");
  auto res_1791=network->addShuffle(*res_1790->getOutput(0));
  res_1791->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1791 && "failed to build Node_1543 (type:reshape)");
  res_1791->getOutput(0)->setName("Node_1543:0");
  auto res_1792=network->addShuffle(*res_1791->getOutput(0));
  Permutation permute_1792;
  permute_1792.order[0]=1;
  permute_1792.order[1]=2;
  permute_1792.order[2]=0;
  res_1792->setFirstTranspose(permute_1792);
  assert(res_1792 && "failed to build Node_1556 (type:transpose)");
  res_1792->getOutput(0)->setName("Node_1556:0");
  auto res_1793=network->addMatrixMultiply(*res_1788->getOutput(0),MatrixOperation::kNONE,*res_1792->getOutput(0),MatrixOperation::kNONE);
  assert(res_1793 && "failed to build Node_1557 (type:matmul)");
  res_1793->getOutput(0)->setName("Node_1557:0");
  auto res_1794=network->addElementWise(*res_1793->getOutput(0),*res_940->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1794 && "failed to build Node_1558 (type:divide)");
  res_1794->getOutput(0)->setName("Node_1558:0");
  auto res_1795=network->addElementWise(*res_1794->getOutput(0),*res_1581->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1795 && "failed to build Node_1559 (type:add)");
  res_1795->getOutput(0)->setName("Node_1559:0");
  auto res_1796=network->addSoftMax(*res_1795->getOutput(0));
  res_1796->setAxes(4);
  assert(res_1796 && "failed to build Node_1560 (type:softmax)");
  res_1796->getOutput(0)->setName("Node_1560:0");
  auto res_1797=network->addMatrixMultiply(*res_1784->getOutput(0),MatrixOperation::kNONE,*res_420->getOutput(0),MatrixOperation::kNONE);
  assert(res_1797 && "failed to build Node_1525 (type:matmul)");
  res_1797->getOutput(0)->setName("Node_1525:0");
  auto res_1798=network->addElementWise(*res_1797->getOutput(0),*res_421->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1798 && "failed to build Node_1525_add (type:add)");
  res_1798->getOutput(0)->setName("Node_1525_add:0");
  auto res_1799=network->addShuffle(*res_1798->getOutput(0));
  res_1799->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1799 && "failed to build Node_1553 (type:reshape)");
  res_1799->getOutput(0)->setName("Node_1553:0");
  auto res_1800=network->addShuffle(*res_1799->getOutput(0));
  Permutation permute_1800;
  permute_1800.order[0]=1;
  permute_1800.order[1]=0;
  permute_1800.order[2]=2;
  res_1800->setFirstTranspose(permute_1800);
  assert(res_1800 && "failed to build Node_1555 (type:transpose)");
  res_1800->getOutput(0)->setName("Node_1555:0");
  auto res_1801=network->addMatrixMultiply(*res_1796->getOutput(0),MatrixOperation::kNONE,*res_1800->getOutput(0),MatrixOperation::kNONE);
  assert(res_1801 && "failed to build Node_1564 (type:matmul)");
  res_1801->getOutput(0)->setName("Node_1564:0");
  auto res_1802=network->addShuffle(*res_1801->getOutput(0));
  Permutation permute_1802;
  permute_1802.order[0]=1;
  permute_1802.order[1]=0;
  permute_1802.order[2]=2;
  res_1802->setFirstTranspose(permute_1802);
  assert(res_1802 && "failed to build Node_1566 (type:transpose)");
  res_1802->getOutput(0)->setName("Node_1566:0");
  auto res_1803=network->addIdentity(*res_1802->getOutput(0));
  assert(res_1803 && "failed to build Node_1567 (type:contiguous)");
  res_1803->getOutput(0)->setName("Node_1567:0");
  auto res_1804=network->addShuffle(*res_1803->getOutput(0));
  res_1804->setReshapeDimensions(Dims{2,{59,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1804 && "failed to build Node_1575 (type:reshape)");
  res_1804->getOutput(0)->setName("Node_1575:0");
  auto res_1805=network->addMatrixMultiply(*res_1804->getOutput(0),MatrixOperation::kNONE,*res_422->getOutput(0),MatrixOperation::kNONE);
  assert(res_1805 && "failed to build Node_1582 (type:matmul)");
  res_1805->getOutput(0)->setName("Node_1582:0");
  auto res_1806=network->addElementWise(*res_1805->getOutput(0),*res_423->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1806 && "failed to build Node_1582_add (type:add)");
  res_1806->getOutput(0)->setName("Node_1582_add:0");
  auto res_1807=network->addElementWise(*res_1806->getOutput(0),*res_1784->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1807 && "failed to build Node_1586 (type:add)");
  res_1807->getOutput(0)->setName("Node_1586:0");
  auto res_1808=network->addReduce(*res_1807->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1808 && "failed to build Node_1593_mean (type:mean)");
  res_1808->getOutput(0)->setName("Node_1593_mean:0");
  auto res_1809=network->addElementWise(*res_1807->getOutput(0),*res_1808->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1809 && "failed to build Node_1593_diff (type:sub)");
  res_1809->getOutput(0)->setName("Node_1593_diff:0");
  auto res_1810=network->addElementWise(*res_1809->getOutput(0),*res_1152->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1810 && "failed to build Node_1593_power (type:power)");
  res_1810->getOutput(0)->setName("Node_1593_power:0");
  auto res_1811=network->addReduce(*res_1810->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1811 && "failed to build Node_1593_var (type:mean)");
  res_1811->getOutput(0)->setName("Node_1593_var:0");
  auto res_1812=network->addElementWise(*res_1811->getOutput(0),*res_1026->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1812 && "failed to build Node_1593_modify (type:add)");
  res_1812->getOutput(0)->setName("Node_1593_modify:0");
  auto res_1813=network->addUnary(*res_1812->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1813 && "failed to build Node_1593_sqrt (type:power)");
  res_1813->getOutput(0)->setName("Node_1593_sqrt:0");
  auto res_1814=network->addElementWise(*res_1809->getOutput(0),*res_1813->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1814 && "failed to build Node_1593_rsqrt (type:divide)");
  res_1814->getOutput(0)->setName("Node_1593_rsqrt:0");
  auto res_1815=network->addElementWise(*res_1814->getOutput(0),*res_114->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1815 && "failed to build Node_1593_mul (type:multiply)");
  res_1815->getOutput(0)->setName("Node_1593_mul:0");
  auto res_1816=network->addElementWise(*res_1815->getOutput(0),*res_115->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1816 && "failed to build Node_1593 (type:add)");
  res_1816->getOutput(0)->setName("Node_1593:0");
  auto res_1817=network->addMatrixMultiply(*res_1816->getOutput(0),MatrixOperation::kNONE,*res_424->getOutput(0),MatrixOperation::kNONE);
  assert(res_1817 && "failed to build Node_1599 (type:matmul)");
  res_1817->getOutput(0)->setName("Node_1599:0");
  auto res_1818=network->addElementWise(*res_1817->getOutput(0),*res_425->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1818 && "failed to build Node_1599_add (type:add)");
  res_1818->getOutput(0)->setName("Node_1599_add:0");
  ITensor* inputTensors_1819[1] = {res_1818->getOutput(0)};
  auto plugin_1819=GELU_Plugin("gelu");
  auto res_1819=network->addPluginV2(inputTensors_1819,1,plugin_1819);
  assert(res_1819 && "failed to build Node_1600 (type:gelu)");
  res_1819->getOutput(0)->setName("Node_1600:0");
  auto res_1820=network->addMatrixMultiply(*res_1819->getOutput(0),MatrixOperation::kNONE,*res_426->getOutput(0),MatrixOperation::kNONE);
  assert(res_1820 && "failed to build Node_1607 (type:matmul)");
  res_1820->getOutput(0)->setName("Node_1607:0");
  auto res_1821=network->addElementWise(*res_1820->getOutput(0),*res_427->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1821 && "failed to build Node_1607_add (type:add)");
  res_1821->getOutput(0)->setName("Node_1607_add:0");
  auto res_1822=network->addElementWise(*res_1821->getOutput(0),*res_1816->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1822 && "failed to build Node_1611 (type:add)");
  res_1822->getOutput(0)->setName("Node_1611:0");
  auto res_1823=network->addReduce(*res_1822->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1823 && "failed to build Node_1618_mean (type:mean)");
  res_1823->getOutput(0)->setName("Node_1618_mean:0");
  auto res_1824=network->addElementWise(*res_1822->getOutput(0),*res_1823->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1824 && "failed to build Node_1618_diff (type:sub)");
  res_1824->getOutput(0)->setName("Node_1618_diff:0");
  auto res_1825=network->addElementWise(*res_1824->getOutput(0),*res_1153->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1825 && "failed to build Node_1618_power (type:power)");
  res_1825->getOutput(0)->setName("Node_1618_power:0");
  auto res_1826=network->addReduce(*res_1825->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1826 && "failed to build Node_1618_var (type:mean)");
  res_1826->getOutput(0)->setName("Node_1618_var:0");
  auto res_1827=network->addElementWise(*res_1826->getOutput(0),*res_1027->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1827 && "failed to build Node_1618_modify (type:add)");
  res_1827->getOutput(0)->setName("Node_1618_modify:0");
  auto res_1828=network->addUnary(*res_1827->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1828 && "failed to build Node_1618_sqrt (type:power)");
  res_1828->getOutput(0)->setName("Node_1618_sqrt:0");
  auto res_1829=network->addElementWise(*res_1824->getOutput(0),*res_1828->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1829 && "failed to build Node_1618_rsqrt (type:divide)");
  res_1829->getOutput(0)->setName("Node_1618_rsqrt:0");
  auto res_1830=network->addElementWise(*res_1829->getOutput(0),*res_116->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1830 && "failed to build Node_1618_mul (type:multiply)");
  res_1830->getOutput(0)->setName("Node_1618_mul:0");
  auto res_1831=network->addElementWise(*res_1830->getOutput(0),*res_117->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1831 && "failed to build Node_1618 (type:add)");
  res_1831->getOutput(0)->setName("Node_1618:0");
  auto res_1832=network->addMatrixMultiply(*res_1831->getOutput(0),MatrixOperation::kNONE,*res_428->getOutput(0),MatrixOperation::kNONE);
  assert(res_1832 && "failed to build Node_1635 (type:matmul)");
  res_1832->getOutput(0)->setName("Node_1635:0");
  auto res_1833=network->addElementWise(*res_1832->getOutput(0),*res_429->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1833 && "failed to build Node_1635_add (type:add)");
  res_1833->getOutput(0)->setName("Node_1635_add:0");
  auto res_1834=network->addShuffle(*res_1833->getOutput(0));
  res_1834->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1834 && "failed to build Node_1655 (type:reshape)");
  res_1834->getOutput(0)->setName("Node_1655:0");
  auto res_1835=network->addShuffle(*res_1834->getOutput(0));
  Permutation permute_1835;
  permute_1835.order[0]=1;
  permute_1835.order[1]=0;
  permute_1835.order[2]=2;
  res_1835->setFirstTranspose(permute_1835);
  assert(res_1835 && "failed to build Node_1657 (type:transpose)");
  res_1835->getOutput(0)->setName("Node_1657:0");
  auto res_1836=network->addMatrixMultiply(*res_1831->getOutput(0),MatrixOperation::kNONE,*res_430->getOutput(0),MatrixOperation::kNONE);
  assert(res_1836 && "failed to build Node_1641 (type:matmul)");
  res_1836->getOutput(0)->setName("Node_1641:0");
  auto res_1837=network->addElementWise(*res_1836->getOutput(0),*res_431->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1837 && "failed to build Node_1641_add (type:add)");
  res_1837->getOutput(0)->setName("Node_1641_add:0");
  auto res_1838=network->addShuffle(*res_1837->getOutput(0));
  res_1838->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1838 && "failed to build Node_1665 (type:reshape)");
  res_1838->getOutput(0)->setName("Node_1665:0");
  auto res_1839=network->addShuffle(*res_1838->getOutput(0));
  Permutation permute_1839;
  permute_1839.order[0]=1;
  permute_1839.order[1]=2;
  permute_1839.order[2]=0;
  res_1839->setFirstTranspose(permute_1839);
  assert(res_1839 && "failed to build Node_1678 (type:transpose)");
  res_1839->getOutput(0)->setName("Node_1678:0");
  auto res_1840=network->addMatrixMultiply(*res_1835->getOutput(0),MatrixOperation::kNONE,*res_1839->getOutput(0),MatrixOperation::kNONE);
  assert(res_1840 && "failed to build Node_1679 (type:matmul)");
  res_1840->getOutput(0)->setName("Node_1679:0");
  auto res_1841=network->addElementWise(*res_1840->getOutput(0),*res_941->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1841 && "failed to build Node_1680 (type:divide)");
  res_1841->getOutput(0)->setName("Node_1680:0");
  auto res_1842=network->addElementWise(*res_1841->getOutput(0),*res_1581->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1842 && "failed to build Node_1681 (type:add)");
  res_1842->getOutput(0)->setName("Node_1681:0");
  auto res_1843=network->addSoftMax(*res_1842->getOutput(0));
  res_1843->setAxes(4);
  assert(res_1843 && "failed to build Node_1682 (type:softmax)");
  res_1843->getOutput(0)->setName("Node_1682:0");
  auto res_1844=network->addMatrixMultiply(*res_1831->getOutput(0),MatrixOperation::kNONE,*res_432->getOutput(0),MatrixOperation::kNONE);
  assert(res_1844 && "failed to build Node_1647 (type:matmul)");
  res_1844->getOutput(0)->setName("Node_1647:0");
  auto res_1845=network->addElementWise(*res_1844->getOutput(0),*res_433->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1845 && "failed to build Node_1647_add (type:add)");
  res_1845->getOutput(0)->setName("Node_1647_add:0");
  auto res_1846=network->addShuffle(*res_1845->getOutput(0));
  res_1846->setReshapeDimensions(Dims3{59,6,32});
  assert(res_1846 && "failed to build Node_1675 (type:reshape)");
  res_1846->getOutput(0)->setName("Node_1675:0");
  auto res_1847=network->addShuffle(*res_1846->getOutput(0));
  Permutation permute_1847;
  permute_1847.order[0]=1;
  permute_1847.order[1]=0;
  permute_1847.order[2]=2;
  res_1847->setFirstTranspose(permute_1847);
  assert(res_1847 && "failed to build Node_1677 (type:transpose)");
  res_1847->getOutput(0)->setName("Node_1677:0");
  auto res_1848=network->addMatrixMultiply(*res_1843->getOutput(0),MatrixOperation::kNONE,*res_1847->getOutput(0),MatrixOperation::kNONE);
  assert(res_1848 && "failed to build Node_1686 (type:matmul)");
  res_1848->getOutput(0)->setName("Node_1686:0");
  auto res_1849=network->addShuffle(*res_1848->getOutput(0));
  Permutation permute_1849;
  permute_1849.order[0]=1;
  permute_1849.order[1]=0;
  permute_1849.order[2]=2;
  res_1849->setFirstTranspose(permute_1849);
  assert(res_1849 && "failed to build Node_1688 (type:transpose)");
  res_1849->getOutput(0)->setName("Node_1688:0");
  auto res_1850=network->addIdentity(*res_1849->getOutput(0));
  assert(res_1850 && "failed to build Node_1689 (type:contiguous)");
  res_1850->getOutput(0)->setName("Node_1689:0");
  auto res_1851=network->addShuffle(*res_1850->getOutput(0));
  res_1851->setReshapeDimensions(Dims{2,{59,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1851 && "failed to build Node_1697 (type:reshape)");
  res_1851->getOutput(0)->setName("Node_1697:0");
  auto res_1852=network->addMatrixMultiply(*res_1851->getOutput(0),MatrixOperation::kNONE,*res_434->getOutput(0),MatrixOperation::kNONE);
  assert(res_1852 && "failed to build Node_1704 (type:matmul)");
  res_1852->getOutput(0)->setName("Node_1704:0");
  auto res_1853=network->addElementWise(*res_1852->getOutput(0),*res_435->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1853 && "failed to build Node_1704_add (type:add)");
  res_1853->getOutput(0)->setName("Node_1704_add:0");
  auto res_1854=network->addElementWise(*res_1853->getOutput(0),*res_1831->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1854 && "failed to build Node_1708 (type:add)");
  res_1854->getOutput(0)->setName("Node_1708:0");
  auto res_1855=network->addReduce(*res_1854->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1855 && "failed to build Node_1715_mean (type:mean)");
  res_1855->getOutput(0)->setName("Node_1715_mean:0");
  auto res_1856=network->addElementWise(*res_1854->getOutput(0),*res_1855->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1856 && "failed to build Node_1715_diff (type:sub)");
  res_1856->getOutput(0)->setName("Node_1715_diff:0");
  auto res_1857=network->addElementWise(*res_1856->getOutput(0),*res_1154->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1857 && "failed to build Node_1715_power (type:power)");
  res_1857->getOutput(0)->setName("Node_1715_power:0");
  auto res_1858=network->addReduce(*res_1857->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1858 && "failed to build Node_1715_var (type:mean)");
  res_1858->getOutput(0)->setName("Node_1715_var:0");
  auto res_1859=network->addElementWise(*res_1858->getOutput(0),*res_1028->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1859 && "failed to build Node_1715_modify (type:add)");
  res_1859->getOutput(0)->setName("Node_1715_modify:0");
  auto res_1860=network->addUnary(*res_1859->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1860 && "failed to build Node_1715_sqrt (type:power)");
  res_1860->getOutput(0)->setName("Node_1715_sqrt:0");
  auto res_1861=network->addElementWise(*res_1856->getOutput(0),*res_1860->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1861 && "failed to build Node_1715_rsqrt (type:divide)");
  res_1861->getOutput(0)->setName("Node_1715_rsqrt:0");
  auto res_1862=network->addElementWise(*res_1861->getOutput(0),*res_118->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1862 && "failed to build Node_1715_mul (type:multiply)");
  res_1862->getOutput(0)->setName("Node_1715_mul:0");
  auto res_1863=network->addElementWise(*res_1862->getOutput(0),*res_119->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1863 && "failed to build Node_1715 (type:add)");
  res_1863->getOutput(0)->setName("Node_1715:0");
  auto res_1864=network->addMatrixMultiply(*res_1863->getOutput(0),MatrixOperation::kNONE,*res_436->getOutput(0),MatrixOperation::kNONE);
  assert(res_1864 && "failed to build Node_1721 (type:matmul)");
  res_1864->getOutput(0)->setName("Node_1721:0");
  auto res_1865=network->addElementWise(*res_1864->getOutput(0),*res_437->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1865 && "failed to build Node_1721_add (type:add)");
  res_1865->getOutput(0)->setName("Node_1721_add:0");
  ITensor* inputTensors_1866[1] = {res_1865->getOutput(0)};
  auto plugin_1866=GELU_Plugin("gelu");
  auto res_1866=network->addPluginV2(inputTensors_1866,1,plugin_1866);
  assert(res_1866 && "failed to build Node_1722 (type:gelu)");
  res_1866->getOutput(0)->setName("Node_1722:0");
  auto res_1867=network->addMatrixMultiply(*res_1866->getOutput(0),MatrixOperation::kNONE,*res_438->getOutput(0),MatrixOperation::kNONE);
  assert(res_1867 && "failed to build Node_1729 (type:matmul)");
  res_1867->getOutput(0)->setName("Node_1729:0");
  auto res_1868=network->addElementWise(*res_1867->getOutput(0),*res_439->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1868 && "failed to build Node_1729_add (type:add)");
  res_1868->getOutput(0)->setName("Node_1729_add:0");
  auto res_1869=network->addElementWise(*res_1868->getOutput(0),*res_1863->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1869 && "failed to build Node_1733 (type:add)");
  res_1869->getOutput(0)->setName("Node_1733:0");
  auto res_1870=network->addReduce(*res_1869->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1870 && "failed to build Node_1740_mean (type:mean)");
  res_1870->getOutput(0)->setName("Node_1740_mean:0");
  auto res_1871=network->addElementWise(*res_1869->getOutput(0),*res_1870->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1871 && "failed to build Node_1740_diff (type:sub)");
  res_1871->getOutput(0)->setName("Node_1740_diff:0");
  auto res_1872=network->addElementWise(*res_1871->getOutput(0),*res_1155->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1872 && "failed to build Node_1740_power (type:power)");
  res_1872->getOutput(0)->setName("Node_1740_power:0");
  auto res_1873=network->addReduce(*res_1872->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1873 && "failed to build Node_1740_var (type:mean)");
  res_1873->getOutput(0)->setName("Node_1740_var:0");
  auto res_1874=network->addElementWise(*res_1873->getOutput(0),*res_1029->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1874 && "failed to build Node_1740_modify (type:add)");
  res_1874->getOutput(0)->setName("Node_1740_modify:0");
  auto res_1875=network->addUnary(*res_1874->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1875 && "failed to build Node_1740_sqrt (type:power)");
  res_1875->getOutput(0)->setName("Node_1740_sqrt:0");
  auto res_1876=network->addElementWise(*res_1871->getOutput(0),*res_1875->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1876 && "failed to build Node_1740_rsqrt (type:divide)");
  res_1876->getOutput(0)->setName("Node_1740_rsqrt:0");
  auto res_1877=network->addElementWise(*res_1876->getOutput(0),*res_120->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1877 && "failed to build Node_1740_mul (type:multiply)");
  res_1877->getOutput(0)->setName("Node_1740_mul:0");
  auto res_1878=network->addElementWise(*res_1877->getOutput(0),*res_121->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1878 && "failed to build Node_1740 (type:add)");
  res_1878->getOutput(0)->setName("Node_1740:0");
  auto res_1879=network->addSlice(*res_1878->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_1879 && "failed to build Node_1744 (type:dlr_slice)");
  res_1879->getOutput(0)->setName("Node_1744:0");
  auto res_1880=network->addShuffle(*res_1879->getOutput(0));
  res_1880->setReshapeDimensions(Dims3{192,1,1});
  assert(res_1880 && "failed to build Node_1746_reshape (type:reshape)");
  res_1880->getOutput(0)->setName("Node_1746_reshape:0");
  auto res_1881=network->addFullyConnected(*res_1880->getOutput(0),192,mWeightsMap["weight_1881"],mWeightsMap["bias_1881"]);
  assert(res_1881 && "failed to build Node_1751 (type:dense)");
  res_1881->getOutput(0)->setName("Node_1751:0");
  auto res_1882=network->addShuffle(*res_1881->getOutput(0));
  res_1882->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_1882 && "failed to build Node_1751_reshape (type:reshape)");
  res_1882->getOutput(0)->setName("Node_1751_reshape:0");
  auto res_1883=network->addActivation(*res_1882->getOutput(0),ActivationType::kTANH);
  assert(res_1883 && "failed to build Node_1752 (type:tanh)");
  res_1883->getOutput(0)->setName("Node_1752:0");
  auto res_1884=network->addShuffle(*res_1883->getOutput(0));
  res_1884->setReshapeDimensions(Dims{2,{1,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1884 && "failed to build Node_7277 (type:reshape)");
  res_1884->getOutput(0)->setName("Node_7277:0");
  auto res_1885=network->addGather(*res_922->getOutput(0),*inputs[8],0);
  assert(res_1885 && "failed to build Node_1766 (type:gather)");
  res_1885->getOutput(0)->setName("Node_1766:0");
  auto res_1886=network->addShuffle(*inputs[9]);
  res_1886->setReshapeDimensions(Dims{2,{75,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1886 && "failed to build Node_1769 (type:reshape)");
  res_1886->getOutput(0)->setName("Node_1769:0");
  auto res_1887=network->addElementWise(*res_42->getOutput(0),*res_1886->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1887 && "failed to build Node_1771 (type:add)");
  res_1887->getOutput(0)->setName("Node_1771:0");
  auto res_1888=network->addElementWise(*res_1885->getOutput(0),*res_1887->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1888 && "failed to build Node_1772 (type:multiply)");
  res_1888->getOutput(0)->setName("Node_1772:0");
  auto res_1889=network->addShuffle(*inputs[9]);
  res_1889->setReshapeDimensions(Dims{2,{75,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1889 && "failed to build Node_1785 (type:reshape)");
  res_1889->getOutput(0)->setName("Node_1785:0");
  auto res_1890=network->addElementWise(*res_43->getOutput(0),*res_1889->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1890 && "failed to build Node_1787 (type:add)");
  res_1890->getOutput(0)->setName("Node_1787:0");
  auto res_1891=network->addShuffle(*inputs[9]);
  res_1891->setReshapeDimensions(Dims{2,{75,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1891 && "failed to build Node_1801 (type:reshape)");
  res_1891->getOutput(0)->setName("Node_1801:0");
  auto res_1892=network->addElementWise(*res_44->getOutput(0),*res_1891->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1892 && "failed to build Node_1803 (type:add)");
  res_1892->getOutput(0)->setName("Node_1803:0");
  auto res_1893=network->addShuffle(*inputs[9]);
  res_1893->setReshapeDimensions(Dims3{1,1,75});
  assert(res_1893 && "failed to build Node_1821 (type:reshape)");
  res_1893->getOutput(0)->setName("Node_1821:0");
  auto res_1894=network->addElementWise(*res_942->getOutput(0),*res_1893->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1894 && "failed to build Node_1823 (type:sub)");
  res_1894->getOutput(0)->setName("Node_1823:0");
  auto res_1895=network->addElementWise(*res_1894->getOutput(0),*res_943->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1895 && "failed to build Node_1824 (type:multiply)");
  res_1895->getOutput(0)->setName("Node_1824:0");
  auto res_1896=network->addGather(*res_922->getOutput(0),*inputs[10],0);
  assert(res_1896 && "failed to build Node_1782 (type:gather)");
  res_1896->getOutput(0)->setName("Node_1782:0");
  auto res_1897=network->addElementWise(*res_1896->getOutput(0),*res_1890->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1897 && "failed to build Node_1788 (type:multiply)");
  res_1897->getOutput(0)->setName("Node_1788:0");
  auto res_1898=network->addElementWise(*res_1888->getOutput(0),*res_1897->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1898 && "failed to build Node_1811 (type:add)");
  res_1898->getOutput(0)->setName("Node_1811:0");
  auto res_1899=network->addGather(*res_922->getOutput(0),*inputs[11],0);
  assert(res_1899 && "failed to build Node_1798 (type:gather)");
  res_1899->getOutput(0)->setName("Node_1798:0");
  auto res_1900=network->addElementWise(*res_1899->getOutput(0),*res_1892->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1900 && "failed to build Node_1804 (type:multiply)");
  res_1900->getOutput(0)->setName("Node_1804:0");
  auto res_1901=network->addElementWise(*res_1898->getOutput(0),*res_1900->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1901 && "failed to build Node_1812 (type:add)");
  res_1901->getOutput(0)->setName("Node_1812:0");
  auto res_1902=network->addReduce(*res_1901->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1902 && "failed to build Node_1831_mean (type:mean)");
  res_1902->getOutput(0)->setName("Node_1831_mean:0");
  auto res_1903=network->addElementWise(*res_1901->getOutput(0),*res_1902->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1903 && "failed to build Node_1831_diff (type:sub)");
  res_1903->getOutput(0)->setName("Node_1831_diff:0");
  auto res_1904=network->addElementWise(*res_1903->getOutput(0),*res_1156->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1904 && "failed to build Node_1831_power (type:power)");
  res_1904->getOutput(0)->setName("Node_1831_power:0");
  auto res_1905=network->addReduce(*res_1904->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1905 && "failed to build Node_1831_var (type:mean)");
  res_1905->getOutput(0)->setName("Node_1831_var:0");
  auto res_1906=network->addElementWise(*res_1905->getOutput(0),*res_1030->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1906 && "failed to build Node_1831_modify (type:add)");
  res_1906->getOutput(0)->setName("Node_1831_modify:0");
  auto res_1907=network->addUnary(*res_1906->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1907 && "failed to build Node_1831_sqrt (type:power)");
  res_1907->getOutput(0)->setName("Node_1831_sqrt:0");
  auto res_1908=network->addElementWise(*res_1903->getOutput(0),*res_1907->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1908 && "failed to build Node_1831_rsqrt (type:divide)");
  res_1908->getOutput(0)->setName("Node_1831_rsqrt:0");
  auto res_1909=network->addElementWise(*res_1908->getOutput(0),*res_122->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1909 && "failed to build Node_1831_mul (type:multiply)");
  res_1909->getOutput(0)->setName("Node_1831_mul:0");
  auto res_1910=network->addElementWise(*res_1909->getOutput(0),*res_123->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1910 && "failed to build Node_1831 (type:add)");
  res_1910->getOutput(0)->setName("Node_1831:0");
  auto res_1911=network->addMatrixMultiply(*res_1910->getOutput(0),MatrixOperation::kNONE,*res_440->getOutput(0),MatrixOperation::kNONE);
  assert(res_1911 && "failed to build Node_1851 (type:matmul)");
  res_1911->getOutput(0)->setName("Node_1851:0");
  auto res_1912=network->addElementWise(*res_1911->getOutput(0),*res_441->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1912 && "failed to build Node_1851_add (type:add)");
  res_1912->getOutput(0)->setName("Node_1851_add:0");
  auto res_1913=network->addShuffle(*res_1912->getOutput(0));
  res_1913->setReshapeDimensions(Dims3{75,6,32});
  assert(res_1913 && "failed to build Node_1871 (type:reshape)");
  res_1913->getOutput(0)->setName("Node_1871:0");
  auto res_1914=network->addShuffle(*res_1913->getOutput(0));
  Permutation permute_1914;
  permute_1914.order[0]=1;
  permute_1914.order[1]=0;
  permute_1914.order[2]=2;
  res_1914->setFirstTranspose(permute_1914);
  assert(res_1914 && "failed to build Node_1873 (type:transpose)");
  res_1914->getOutput(0)->setName("Node_1873:0");
  auto res_1915=network->addMatrixMultiply(*res_1910->getOutput(0),MatrixOperation::kNONE,*res_442->getOutput(0),MatrixOperation::kNONE);
  assert(res_1915 && "failed to build Node_1857 (type:matmul)");
  res_1915->getOutput(0)->setName("Node_1857:0");
  auto res_1916=network->addElementWise(*res_1915->getOutput(0),*res_443->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1916 && "failed to build Node_1857_add (type:add)");
  res_1916->getOutput(0)->setName("Node_1857_add:0");
  auto res_1917=network->addShuffle(*res_1916->getOutput(0));
  res_1917->setReshapeDimensions(Dims3{75,6,32});
  assert(res_1917 && "failed to build Node_1881 (type:reshape)");
  res_1917->getOutput(0)->setName("Node_1881:0");
  auto res_1918=network->addShuffle(*res_1917->getOutput(0));
  Permutation permute_1918;
  permute_1918.order[0]=1;
  permute_1918.order[1]=2;
  permute_1918.order[2]=0;
  res_1918->setFirstTranspose(permute_1918);
  assert(res_1918 && "failed to build Node_1894 (type:transpose)");
  res_1918->getOutput(0)->setName("Node_1894:0");
  auto res_1919=network->addMatrixMultiply(*res_1914->getOutput(0),MatrixOperation::kNONE,*res_1918->getOutput(0),MatrixOperation::kNONE);
  assert(res_1919 && "failed to build Node_1895 (type:matmul)");
  res_1919->getOutput(0)->setName("Node_1895:0");
  auto res_1920=network->addElementWise(*res_1919->getOutput(0),*res_944->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1920 && "failed to build Node_1896 (type:divide)");
  res_1920->getOutput(0)->setName("Node_1896:0");
  auto res_1921=network->addElementWise(*res_1920->getOutput(0),*res_1895->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1921 && "failed to build Node_1897 (type:add)");
  res_1921->getOutput(0)->setName("Node_1897:0");
  auto res_1922=network->addSoftMax(*res_1921->getOutput(0));
  res_1922->setAxes(4);
  assert(res_1922 && "failed to build Node_1898 (type:softmax)");
  res_1922->getOutput(0)->setName("Node_1898:0");
  auto res_1923=network->addMatrixMultiply(*res_1910->getOutput(0),MatrixOperation::kNONE,*res_444->getOutput(0),MatrixOperation::kNONE);
  assert(res_1923 && "failed to build Node_1863 (type:matmul)");
  res_1923->getOutput(0)->setName("Node_1863:0");
  auto res_1924=network->addElementWise(*res_1923->getOutput(0),*res_445->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1924 && "failed to build Node_1863_add (type:add)");
  res_1924->getOutput(0)->setName("Node_1863_add:0");
  auto res_1925=network->addShuffle(*res_1924->getOutput(0));
  res_1925->setReshapeDimensions(Dims3{75,6,32});
  assert(res_1925 && "failed to build Node_1891 (type:reshape)");
  res_1925->getOutput(0)->setName("Node_1891:0");
  auto res_1926=network->addShuffle(*res_1925->getOutput(0));
  Permutation permute_1926;
  permute_1926.order[0]=1;
  permute_1926.order[1]=0;
  permute_1926.order[2]=2;
  res_1926->setFirstTranspose(permute_1926);
  assert(res_1926 && "failed to build Node_1893 (type:transpose)");
  res_1926->getOutput(0)->setName("Node_1893:0");
  auto res_1927=network->addMatrixMultiply(*res_1922->getOutput(0),MatrixOperation::kNONE,*res_1926->getOutput(0),MatrixOperation::kNONE);
  assert(res_1927 && "failed to build Node_1902 (type:matmul)");
  res_1927->getOutput(0)->setName("Node_1902:0");
  auto res_1928=network->addShuffle(*res_1927->getOutput(0));
  Permutation permute_1928;
  permute_1928.order[0]=1;
  permute_1928.order[1]=0;
  permute_1928.order[2]=2;
  res_1928->setFirstTranspose(permute_1928);
  assert(res_1928 && "failed to build Node_1904 (type:transpose)");
  res_1928->getOutput(0)->setName("Node_1904:0");
  auto res_1929=network->addIdentity(*res_1928->getOutput(0));
  assert(res_1929 && "failed to build Node_1905 (type:contiguous)");
  res_1929->getOutput(0)->setName("Node_1905:0");
  auto res_1930=network->addShuffle(*res_1929->getOutput(0));
  res_1930->setReshapeDimensions(Dims{2,{75,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1930 && "failed to build Node_1913 (type:reshape)");
  res_1930->getOutput(0)->setName("Node_1913:0");
  auto res_1931=network->addMatrixMultiply(*res_1930->getOutput(0),MatrixOperation::kNONE,*res_446->getOutput(0),MatrixOperation::kNONE);
  assert(res_1931 && "failed to build Node_1920 (type:matmul)");
  res_1931->getOutput(0)->setName("Node_1920:0");
  auto res_1932=network->addElementWise(*res_1931->getOutput(0),*res_447->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1932 && "failed to build Node_1920_add (type:add)");
  res_1932->getOutput(0)->setName("Node_1920_add:0");
  auto res_1933=network->addElementWise(*res_1932->getOutput(0),*res_1910->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1933 && "failed to build Node_1924 (type:add)");
  res_1933->getOutput(0)->setName("Node_1924:0");
  auto res_1934=network->addReduce(*res_1933->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1934 && "failed to build Node_1931_mean (type:mean)");
  res_1934->getOutput(0)->setName("Node_1931_mean:0");
  auto res_1935=network->addElementWise(*res_1933->getOutput(0),*res_1934->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1935 && "failed to build Node_1931_diff (type:sub)");
  res_1935->getOutput(0)->setName("Node_1931_diff:0");
  auto res_1936=network->addElementWise(*res_1935->getOutput(0),*res_1157->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1936 && "failed to build Node_1931_power (type:power)");
  res_1936->getOutput(0)->setName("Node_1931_power:0");
  auto res_1937=network->addReduce(*res_1936->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1937 && "failed to build Node_1931_var (type:mean)");
  res_1937->getOutput(0)->setName("Node_1931_var:0");
  auto res_1938=network->addElementWise(*res_1937->getOutput(0),*res_1031->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1938 && "failed to build Node_1931_modify (type:add)");
  res_1938->getOutput(0)->setName("Node_1931_modify:0");
  auto res_1939=network->addUnary(*res_1938->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1939 && "failed to build Node_1931_sqrt (type:power)");
  res_1939->getOutput(0)->setName("Node_1931_sqrt:0");
  auto res_1940=network->addElementWise(*res_1935->getOutput(0),*res_1939->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1940 && "failed to build Node_1931_rsqrt (type:divide)");
  res_1940->getOutput(0)->setName("Node_1931_rsqrt:0");
  auto res_1941=network->addElementWise(*res_1940->getOutput(0),*res_124->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1941 && "failed to build Node_1931_mul (type:multiply)");
  res_1941->getOutput(0)->setName("Node_1931_mul:0");
  auto res_1942=network->addElementWise(*res_1941->getOutput(0),*res_125->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1942 && "failed to build Node_1931 (type:add)");
  res_1942->getOutput(0)->setName("Node_1931:0");
  auto res_1943=network->addMatrixMultiply(*res_1942->getOutput(0),MatrixOperation::kNONE,*res_448->getOutput(0),MatrixOperation::kNONE);
  assert(res_1943 && "failed to build Node_1937 (type:matmul)");
  res_1943->getOutput(0)->setName("Node_1937:0");
  auto res_1944=network->addElementWise(*res_1943->getOutput(0),*res_449->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1944 && "failed to build Node_1937_add (type:add)");
  res_1944->getOutput(0)->setName("Node_1937_add:0");
  ITensor* inputTensors_1945[1] = {res_1944->getOutput(0)};
  auto plugin_1945=GELU_Plugin("gelu");
  auto res_1945=network->addPluginV2(inputTensors_1945,1,plugin_1945);
  assert(res_1945 && "failed to build Node_1938 (type:gelu)");
  res_1945->getOutput(0)->setName("Node_1938:0");
  auto res_1946=network->addMatrixMultiply(*res_1945->getOutput(0),MatrixOperation::kNONE,*res_450->getOutput(0),MatrixOperation::kNONE);
  assert(res_1946 && "failed to build Node_1945 (type:matmul)");
  res_1946->getOutput(0)->setName("Node_1945:0");
  auto res_1947=network->addElementWise(*res_1946->getOutput(0),*res_451->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1947 && "failed to build Node_1945_add (type:add)");
  res_1947->getOutput(0)->setName("Node_1945_add:0");
  auto res_1948=network->addElementWise(*res_1947->getOutput(0),*res_1942->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1948 && "failed to build Node_1949 (type:add)");
  res_1948->getOutput(0)->setName("Node_1949:0");
  auto res_1949=network->addReduce(*res_1948->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1949 && "failed to build Node_1956_mean (type:mean)");
  res_1949->getOutput(0)->setName("Node_1956_mean:0");
  auto res_1950=network->addElementWise(*res_1948->getOutput(0),*res_1949->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1950 && "failed to build Node_1956_diff (type:sub)");
  res_1950->getOutput(0)->setName("Node_1956_diff:0");
  auto res_1951=network->addElementWise(*res_1950->getOutput(0),*res_1158->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1951 && "failed to build Node_1956_power (type:power)");
  res_1951->getOutput(0)->setName("Node_1956_power:0");
  auto res_1952=network->addReduce(*res_1951->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1952 && "failed to build Node_1956_var (type:mean)");
  res_1952->getOutput(0)->setName("Node_1956_var:0");
  auto res_1953=network->addElementWise(*res_1952->getOutput(0),*res_1032->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1953 && "failed to build Node_1956_modify (type:add)");
  res_1953->getOutput(0)->setName("Node_1956_modify:0");
  auto res_1954=network->addUnary(*res_1953->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1954 && "failed to build Node_1956_sqrt (type:power)");
  res_1954->getOutput(0)->setName("Node_1956_sqrt:0");
  auto res_1955=network->addElementWise(*res_1950->getOutput(0),*res_1954->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1955 && "failed to build Node_1956_rsqrt (type:divide)");
  res_1955->getOutput(0)->setName("Node_1956_rsqrt:0");
  auto res_1956=network->addElementWise(*res_1955->getOutput(0),*res_126->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1956 && "failed to build Node_1956_mul (type:multiply)");
  res_1956->getOutput(0)->setName("Node_1956_mul:0");
  auto res_1957=network->addElementWise(*res_1956->getOutput(0),*res_127->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1957 && "failed to build Node_1956 (type:add)");
  res_1957->getOutput(0)->setName("Node_1956:0");
  auto res_1958=network->addMatrixMultiply(*res_1957->getOutput(0),MatrixOperation::kNONE,*res_452->getOutput(0),MatrixOperation::kNONE);
  assert(res_1958 && "failed to build Node_1973 (type:matmul)");
  res_1958->getOutput(0)->setName("Node_1973:0");
  auto res_1959=network->addElementWise(*res_1958->getOutput(0),*res_453->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1959 && "failed to build Node_1973_add (type:add)");
  res_1959->getOutput(0)->setName("Node_1973_add:0");
  auto res_1960=network->addShuffle(*res_1959->getOutput(0));
  res_1960->setReshapeDimensions(Dims3{75,6,32});
  assert(res_1960 && "failed to build Node_1993 (type:reshape)");
  res_1960->getOutput(0)->setName("Node_1993:0");
  auto res_1961=network->addShuffle(*res_1960->getOutput(0));
  Permutation permute_1961;
  permute_1961.order[0]=1;
  permute_1961.order[1]=0;
  permute_1961.order[2]=2;
  res_1961->setFirstTranspose(permute_1961);
  assert(res_1961 && "failed to build Node_1995 (type:transpose)");
  res_1961->getOutput(0)->setName("Node_1995:0");
  auto res_1962=network->addMatrixMultiply(*res_1957->getOutput(0),MatrixOperation::kNONE,*res_454->getOutput(0),MatrixOperation::kNONE);
  assert(res_1962 && "failed to build Node_1979 (type:matmul)");
  res_1962->getOutput(0)->setName("Node_1979:0");
  auto res_1963=network->addElementWise(*res_1962->getOutput(0),*res_455->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1963 && "failed to build Node_1979_add (type:add)");
  res_1963->getOutput(0)->setName("Node_1979_add:0");
  auto res_1964=network->addShuffle(*res_1963->getOutput(0));
  res_1964->setReshapeDimensions(Dims3{75,6,32});
  assert(res_1964 && "failed to build Node_2003 (type:reshape)");
  res_1964->getOutput(0)->setName("Node_2003:0");
  auto res_1965=network->addShuffle(*res_1964->getOutput(0));
  Permutation permute_1965;
  permute_1965.order[0]=1;
  permute_1965.order[1]=2;
  permute_1965.order[2]=0;
  res_1965->setFirstTranspose(permute_1965);
  assert(res_1965 && "failed to build Node_2016 (type:transpose)");
  res_1965->getOutput(0)->setName("Node_2016:0");
  auto res_1966=network->addMatrixMultiply(*res_1961->getOutput(0),MatrixOperation::kNONE,*res_1965->getOutput(0),MatrixOperation::kNONE);
  assert(res_1966 && "failed to build Node_2017 (type:matmul)");
  res_1966->getOutput(0)->setName("Node_2017:0");
  auto res_1967=network->addElementWise(*res_1966->getOutput(0),*res_945->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1967 && "failed to build Node_2018 (type:divide)");
  res_1967->getOutput(0)->setName("Node_2018:0");
  auto res_1968=network->addElementWise(*res_1967->getOutput(0),*res_1895->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1968 && "failed to build Node_2019 (type:add)");
  res_1968->getOutput(0)->setName("Node_2019:0");
  auto res_1969=network->addSoftMax(*res_1968->getOutput(0));
  res_1969->setAxes(4);
  assert(res_1969 && "failed to build Node_2020 (type:softmax)");
  res_1969->getOutput(0)->setName("Node_2020:0");
  auto res_1970=network->addMatrixMultiply(*res_1957->getOutput(0),MatrixOperation::kNONE,*res_456->getOutput(0),MatrixOperation::kNONE);
  assert(res_1970 && "failed to build Node_1985 (type:matmul)");
  res_1970->getOutput(0)->setName("Node_1985:0");
  auto res_1971=network->addElementWise(*res_1970->getOutput(0),*res_457->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1971 && "failed to build Node_1985_add (type:add)");
  res_1971->getOutput(0)->setName("Node_1985_add:0");
  auto res_1972=network->addShuffle(*res_1971->getOutput(0));
  res_1972->setReshapeDimensions(Dims3{75,6,32});
  assert(res_1972 && "failed to build Node_2013 (type:reshape)");
  res_1972->getOutput(0)->setName("Node_2013:0");
  auto res_1973=network->addShuffle(*res_1972->getOutput(0));
  Permutation permute_1973;
  permute_1973.order[0]=1;
  permute_1973.order[1]=0;
  permute_1973.order[2]=2;
  res_1973->setFirstTranspose(permute_1973);
  assert(res_1973 && "failed to build Node_2015 (type:transpose)");
  res_1973->getOutput(0)->setName("Node_2015:0");
  auto res_1974=network->addMatrixMultiply(*res_1969->getOutput(0),MatrixOperation::kNONE,*res_1973->getOutput(0),MatrixOperation::kNONE);
  assert(res_1974 && "failed to build Node_2024 (type:matmul)");
  res_1974->getOutput(0)->setName("Node_2024:0");
  auto res_1975=network->addShuffle(*res_1974->getOutput(0));
  Permutation permute_1975;
  permute_1975.order[0]=1;
  permute_1975.order[1]=0;
  permute_1975.order[2]=2;
  res_1975->setFirstTranspose(permute_1975);
  assert(res_1975 && "failed to build Node_2026 (type:transpose)");
  res_1975->getOutput(0)->setName("Node_2026:0");
  auto res_1976=network->addIdentity(*res_1975->getOutput(0));
  assert(res_1976 && "failed to build Node_2027 (type:contiguous)");
  res_1976->getOutput(0)->setName("Node_2027:0");
  auto res_1977=network->addShuffle(*res_1976->getOutput(0));
  res_1977->setReshapeDimensions(Dims{2,{75,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_1977 && "failed to build Node_2035 (type:reshape)");
  res_1977->getOutput(0)->setName("Node_2035:0");
  auto res_1978=network->addMatrixMultiply(*res_1977->getOutput(0),MatrixOperation::kNONE,*res_458->getOutput(0),MatrixOperation::kNONE);
  assert(res_1978 && "failed to build Node_2042 (type:matmul)");
  res_1978->getOutput(0)->setName("Node_2042:0");
  auto res_1979=network->addElementWise(*res_1978->getOutput(0),*res_459->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1979 && "failed to build Node_2042_add (type:add)");
  res_1979->getOutput(0)->setName("Node_2042_add:0");
  auto res_1980=network->addElementWise(*res_1979->getOutput(0),*res_1957->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1980 && "failed to build Node_2046 (type:add)");
  res_1980->getOutput(0)->setName("Node_2046:0");
  auto res_1981=network->addReduce(*res_1980->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1981 && "failed to build Node_2053_mean (type:mean)");
  res_1981->getOutput(0)->setName("Node_2053_mean:0");
  auto res_1982=network->addElementWise(*res_1980->getOutput(0),*res_1981->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1982 && "failed to build Node_2053_diff (type:sub)");
  res_1982->getOutput(0)->setName("Node_2053_diff:0");
  auto res_1983=network->addElementWise(*res_1982->getOutput(0),*res_1159->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1983 && "failed to build Node_2053_power (type:power)");
  res_1983->getOutput(0)->setName("Node_2053_power:0");
  auto res_1984=network->addReduce(*res_1983->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1984 && "failed to build Node_2053_var (type:mean)");
  res_1984->getOutput(0)->setName("Node_2053_var:0");
  auto res_1985=network->addElementWise(*res_1984->getOutput(0),*res_1033->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1985 && "failed to build Node_2053_modify (type:add)");
  res_1985->getOutput(0)->setName("Node_2053_modify:0");
  auto res_1986=network->addUnary(*res_1985->getOutput(0),UnaryOperation::kSQRT);
  assert(res_1986 && "failed to build Node_2053_sqrt (type:power)");
  res_1986->getOutput(0)->setName("Node_2053_sqrt:0");
  auto res_1987=network->addElementWise(*res_1982->getOutput(0),*res_1986->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_1987 && "failed to build Node_2053_rsqrt (type:divide)");
  res_1987->getOutput(0)->setName("Node_2053_rsqrt:0");
  auto res_1988=network->addElementWise(*res_1987->getOutput(0),*res_128->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_1988 && "failed to build Node_2053_mul (type:multiply)");
  res_1988->getOutput(0)->setName("Node_2053_mul:0");
  auto res_1989=network->addElementWise(*res_1988->getOutput(0),*res_129->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1989 && "failed to build Node_2053 (type:add)");
  res_1989->getOutput(0)->setName("Node_2053:0");
  auto res_1990=network->addMatrixMultiply(*res_1989->getOutput(0),MatrixOperation::kNONE,*res_460->getOutput(0),MatrixOperation::kNONE);
  assert(res_1990 && "failed to build Node_2059 (type:matmul)");
  res_1990->getOutput(0)->setName("Node_2059:0");
  auto res_1991=network->addElementWise(*res_1990->getOutput(0),*res_461->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1991 && "failed to build Node_2059_add (type:add)");
  res_1991->getOutput(0)->setName("Node_2059_add:0");
  ITensor* inputTensors_1992[1] = {res_1991->getOutput(0)};
  auto plugin_1992=GELU_Plugin("gelu");
  auto res_1992=network->addPluginV2(inputTensors_1992,1,plugin_1992);
  assert(res_1992 && "failed to build Node_2060 (type:gelu)");
  res_1992->getOutput(0)->setName("Node_2060:0");
  auto res_1993=network->addMatrixMultiply(*res_1992->getOutput(0),MatrixOperation::kNONE,*res_462->getOutput(0),MatrixOperation::kNONE);
  assert(res_1993 && "failed to build Node_2067 (type:matmul)");
  res_1993->getOutput(0)->setName("Node_2067:0");
  auto res_1994=network->addElementWise(*res_1993->getOutput(0),*res_463->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1994 && "failed to build Node_2067_add (type:add)");
  res_1994->getOutput(0)->setName("Node_2067_add:0");
  auto res_1995=network->addElementWise(*res_1994->getOutput(0),*res_1989->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_1995 && "failed to build Node_2071 (type:add)");
  res_1995->getOutput(0)->setName("Node_2071:0");
  auto res_1996=network->addReduce(*res_1995->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1996 && "failed to build Node_2078_mean (type:mean)");
  res_1996->getOutput(0)->setName("Node_2078_mean:0");
  auto res_1997=network->addElementWise(*res_1995->getOutput(0),*res_1996->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_1997 && "failed to build Node_2078_diff (type:sub)");
  res_1997->getOutput(0)->setName("Node_2078_diff:0");
  auto res_1998=network->addElementWise(*res_1997->getOutput(0),*res_1160->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_1998 && "failed to build Node_2078_power (type:power)");
  res_1998->getOutput(0)->setName("Node_2078_power:0");
  auto res_1999=network->addReduce(*res_1998->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_1999 && "failed to build Node_2078_var (type:mean)");
  res_1999->getOutput(0)->setName("Node_2078_var:0");
  auto res_2000=network->addElementWise(*res_1999->getOutput(0),*res_1034->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2000 && "failed to build Node_2078_modify (type:add)");
  res_2000->getOutput(0)->setName("Node_2078_modify:0");
  auto res_2001=network->addUnary(*res_2000->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2001 && "failed to build Node_2078_sqrt (type:power)");
  res_2001->getOutput(0)->setName("Node_2078_sqrt:0");
  auto res_2002=network->addElementWise(*res_1997->getOutput(0),*res_2001->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2002 && "failed to build Node_2078_rsqrt (type:divide)");
  res_2002->getOutput(0)->setName("Node_2078_rsqrt:0");
  auto res_2003=network->addElementWise(*res_2002->getOutput(0),*res_130->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2003 && "failed to build Node_2078_mul (type:multiply)");
  res_2003->getOutput(0)->setName("Node_2078_mul:0");
  auto res_2004=network->addElementWise(*res_2003->getOutput(0),*res_131->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2004 && "failed to build Node_2078 (type:add)");
  res_2004->getOutput(0)->setName("Node_2078:0");
  auto res_2005=network->addMatrixMultiply(*res_2004->getOutput(0),MatrixOperation::kNONE,*res_464->getOutput(0),MatrixOperation::kNONE);
  assert(res_2005 && "failed to build Node_2095 (type:matmul)");
  res_2005->getOutput(0)->setName("Node_2095:0");
  auto res_2006=network->addElementWise(*res_2005->getOutput(0),*res_465->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2006 && "failed to build Node_2095_add (type:add)");
  res_2006->getOutput(0)->setName("Node_2095_add:0");
  auto res_2007=network->addShuffle(*res_2006->getOutput(0));
  res_2007->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2007 && "failed to build Node_2115 (type:reshape)");
  res_2007->getOutput(0)->setName("Node_2115:0");
  auto res_2008=network->addShuffle(*res_2007->getOutput(0));
  Permutation permute_2008;
  permute_2008.order[0]=1;
  permute_2008.order[1]=0;
  permute_2008.order[2]=2;
  res_2008->setFirstTranspose(permute_2008);
  assert(res_2008 && "failed to build Node_2117 (type:transpose)");
  res_2008->getOutput(0)->setName("Node_2117:0");
  auto res_2009=network->addMatrixMultiply(*res_2004->getOutput(0),MatrixOperation::kNONE,*res_466->getOutput(0),MatrixOperation::kNONE);
  assert(res_2009 && "failed to build Node_2101 (type:matmul)");
  res_2009->getOutput(0)->setName("Node_2101:0");
  auto res_2010=network->addElementWise(*res_2009->getOutput(0),*res_467->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2010 && "failed to build Node_2101_add (type:add)");
  res_2010->getOutput(0)->setName("Node_2101_add:0");
  auto res_2011=network->addShuffle(*res_2010->getOutput(0));
  res_2011->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2011 && "failed to build Node_2125 (type:reshape)");
  res_2011->getOutput(0)->setName("Node_2125:0");
  auto res_2012=network->addShuffle(*res_2011->getOutput(0));
  Permutation permute_2012;
  permute_2012.order[0]=1;
  permute_2012.order[1]=2;
  permute_2012.order[2]=0;
  res_2012->setFirstTranspose(permute_2012);
  assert(res_2012 && "failed to build Node_2138 (type:transpose)");
  res_2012->getOutput(0)->setName("Node_2138:0");
  auto res_2013=network->addMatrixMultiply(*res_2008->getOutput(0),MatrixOperation::kNONE,*res_2012->getOutput(0),MatrixOperation::kNONE);
  assert(res_2013 && "failed to build Node_2139 (type:matmul)");
  res_2013->getOutput(0)->setName("Node_2139:0");
  auto res_2014=network->addElementWise(*res_2013->getOutput(0),*res_946->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2014 && "failed to build Node_2140 (type:divide)");
  res_2014->getOutput(0)->setName("Node_2140:0");
  auto res_2015=network->addElementWise(*res_2014->getOutput(0),*res_1895->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2015 && "failed to build Node_2141 (type:add)");
  res_2015->getOutput(0)->setName("Node_2141:0");
  auto res_2016=network->addSoftMax(*res_2015->getOutput(0));
  res_2016->setAxes(4);
  assert(res_2016 && "failed to build Node_2142 (type:softmax)");
  res_2016->getOutput(0)->setName("Node_2142:0");
  auto res_2017=network->addMatrixMultiply(*res_2004->getOutput(0),MatrixOperation::kNONE,*res_468->getOutput(0),MatrixOperation::kNONE);
  assert(res_2017 && "failed to build Node_2107 (type:matmul)");
  res_2017->getOutput(0)->setName("Node_2107:0");
  auto res_2018=network->addElementWise(*res_2017->getOutput(0),*res_469->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2018 && "failed to build Node_2107_add (type:add)");
  res_2018->getOutput(0)->setName("Node_2107_add:0");
  auto res_2019=network->addShuffle(*res_2018->getOutput(0));
  res_2019->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2019 && "failed to build Node_2135 (type:reshape)");
  res_2019->getOutput(0)->setName("Node_2135:0");
  auto res_2020=network->addShuffle(*res_2019->getOutput(0));
  Permutation permute_2020;
  permute_2020.order[0]=1;
  permute_2020.order[1]=0;
  permute_2020.order[2]=2;
  res_2020->setFirstTranspose(permute_2020);
  assert(res_2020 && "failed to build Node_2137 (type:transpose)");
  res_2020->getOutput(0)->setName("Node_2137:0");
  auto res_2021=network->addMatrixMultiply(*res_2016->getOutput(0),MatrixOperation::kNONE,*res_2020->getOutput(0),MatrixOperation::kNONE);
  assert(res_2021 && "failed to build Node_2146 (type:matmul)");
  res_2021->getOutput(0)->setName("Node_2146:0");
  auto res_2022=network->addShuffle(*res_2021->getOutput(0));
  Permutation permute_2022;
  permute_2022.order[0]=1;
  permute_2022.order[1]=0;
  permute_2022.order[2]=2;
  res_2022->setFirstTranspose(permute_2022);
  assert(res_2022 && "failed to build Node_2148 (type:transpose)");
  res_2022->getOutput(0)->setName("Node_2148:0");
  auto res_2023=network->addIdentity(*res_2022->getOutput(0));
  assert(res_2023 && "failed to build Node_2149 (type:contiguous)");
  res_2023->getOutput(0)->setName("Node_2149:0");
  auto res_2024=network->addShuffle(*res_2023->getOutput(0));
  res_2024->setReshapeDimensions(Dims{2,{75,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2024 && "failed to build Node_2157 (type:reshape)");
  res_2024->getOutput(0)->setName("Node_2157:0");
  auto res_2025=network->addMatrixMultiply(*res_2024->getOutput(0),MatrixOperation::kNONE,*res_470->getOutput(0),MatrixOperation::kNONE);
  assert(res_2025 && "failed to build Node_2164 (type:matmul)");
  res_2025->getOutput(0)->setName("Node_2164:0");
  auto res_2026=network->addElementWise(*res_2025->getOutput(0),*res_471->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2026 && "failed to build Node_2164_add (type:add)");
  res_2026->getOutput(0)->setName("Node_2164_add:0");
  auto res_2027=network->addElementWise(*res_2026->getOutput(0),*res_2004->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2027 && "failed to build Node_2168 (type:add)");
  res_2027->getOutput(0)->setName("Node_2168:0");
  auto res_2028=network->addReduce(*res_2027->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2028 && "failed to build Node_2175_mean (type:mean)");
  res_2028->getOutput(0)->setName("Node_2175_mean:0");
  auto res_2029=network->addElementWise(*res_2027->getOutput(0),*res_2028->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2029 && "failed to build Node_2175_diff (type:sub)");
  res_2029->getOutput(0)->setName("Node_2175_diff:0");
  auto res_2030=network->addElementWise(*res_2029->getOutput(0),*res_1161->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2030 && "failed to build Node_2175_power (type:power)");
  res_2030->getOutput(0)->setName("Node_2175_power:0");
  auto res_2031=network->addReduce(*res_2030->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2031 && "failed to build Node_2175_var (type:mean)");
  res_2031->getOutput(0)->setName("Node_2175_var:0");
  auto res_2032=network->addElementWise(*res_2031->getOutput(0),*res_1035->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2032 && "failed to build Node_2175_modify (type:add)");
  res_2032->getOutput(0)->setName("Node_2175_modify:0");
  auto res_2033=network->addUnary(*res_2032->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2033 && "failed to build Node_2175_sqrt (type:power)");
  res_2033->getOutput(0)->setName("Node_2175_sqrt:0");
  auto res_2034=network->addElementWise(*res_2029->getOutput(0),*res_2033->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2034 && "failed to build Node_2175_rsqrt (type:divide)");
  res_2034->getOutput(0)->setName("Node_2175_rsqrt:0");
  auto res_2035=network->addElementWise(*res_2034->getOutput(0),*res_132->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2035 && "failed to build Node_2175_mul (type:multiply)");
  res_2035->getOutput(0)->setName("Node_2175_mul:0");
  auto res_2036=network->addElementWise(*res_2035->getOutput(0),*res_133->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2036 && "failed to build Node_2175 (type:add)");
  res_2036->getOutput(0)->setName("Node_2175:0");
  auto res_2037=network->addMatrixMultiply(*res_2036->getOutput(0),MatrixOperation::kNONE,*res_472->getOutput(0),MatrixOperation::kNONE);
  assert(res_2037 && "failed to build Node_2181 (type:matmul)");
  res_2037->getOutput(0)->setName("Node_2181:0");
  auto res_2038=network->addElementWise(*res_2037->getOutput(0),*res_473->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2038 && "failed to build Node_2181_add (type:add)");
  res_2038->getOutput(0)->setName("Node_2181_add:0");
  ITensor* inputTensors_2039[1] = {res_2038->getOutput(0)};
  auto plugin_2039=GELU_Plugin("gelu");
  auto res_2039=network->addPluginV2(inputTensors_2039,1,plugin_2039);
  assert(res_2039 && "failed to build Node_2182 (type:gelu)");
  res_2039->getOutput(0)->setName("Node_2182:0");
  auto res_2040=network->addMatrixMultiply(*res_2039->getOutput(0),MatrixOperation::kNONE,*res_474->getOutput(0),MatrixOperation::kNONE);
  assert(res_2040 && "failed to build Node_2189 (type:matmul)");
  res_2040->getOutput(0)->setName("Node_2189:0");
  auto res_2041=network->addElementWise(*res_2040->getOutput(0),*res_475->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2041 && "failed to build Node_2189_add (type:add)");
  res_2041->getOutput(0)->setName("Node_2189_add:0");
  auto res_2042=network->addElementWise(*res_2041->getOutput(0),*res_2036->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2042 && "failed to build Node_2193 (type:add)");
  res_2042->getOutput(0)->setName("Node_2193:0");
  auto res_2043=network->addReduce(*res_2042->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2043 && "failed to build Node_2200_mean (type:mean)");
  res_2043->getOutput(0)->setName("Node_2200_mean:0");
  auto res_2044=network->addElementWise(*res_2042->getOutput(0),*res_2043->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2044 && "failed to build Node_2200_diff (type:sub)");
  res_2044->getOutput(0)->setName("Node_2200_diff:0");
  auto res_2045=network->addElementWise(*res_2044->getOutput(0),*res_1162->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2045 && "failed to build Node_2200_power (type:power)");
  res_2045->getOutput(0)->setName("Node_2200_power:0");
  auto res_2046=network->addReduce(*res_2045->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2046 && "failed to build Node_2200_var (type:mean)");
  res_2046->getOutput(0)->setName("Node_2200_var:0");
  auto res_2047=network->addElementWise(*res_2046->getOutput(0),*res_1036->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2047 && "failed to build Node_2200_modify (type:add)");
  res_2047->getOutput(0)->setName("Node_2200_modify:0");
  auto res_2048=network->addUnary(*res_2047->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2048 && "failed to build Node_2200_sqrt (type:power)");
  res_2048->getOutput(0)->setName("Node_2200_sqrt:0");
  auto res_2049=network->addElementWise(*res_2044->getOutput(0),*res_2048->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2049 && "failed to build Node_2200_rsqrt (type:divide)");
  res_2049->getOutput(0)->setName("Node_2200_rsqrt:0");
  auto res_2050=network->addElementWise(*res_2049->getOutput(0),*res_134->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2050 && "failed to build Node_2200_mul (type:multiply)");
  res_2050->getOutput(0)->setName("Node_2200_mul:0");
  auto res_2051=network->addElementWise(*res_2050->getOutput(0),*res_135->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2051 && "failed to build Node_2200 (type:add)");
  res_2051->getOutput(0)->setName("Node_2200:0");
  auto res_2052=network->addMatrixMultiply(*res_2051->getOutput(0),MatrixOperation::kNONE,*res_476->getOutput(0),MatrixOperation::kNONE);
  assert(res_2052 && "failed to build Node_2217 (type:matmul)");
  res_2052->getOutput(0)->setName("Node_2217:0");
  auto res_2053=network->addElementWise(*res_2052->getOutput(0),*res_477->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2053 && "failed to build Node_2217_add (type:add)");
  res_2053->getOutput(0)->setName("Node_2217_add:0");
  auto res_2054=network->addShuffle(*res_2053->getOutput(0));
  res_2054->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2054 && "failed to build Node_2237 (type:reshape)");
  res_2054->getOutput(0)->setName("Node_2237:0");
  auto res_2055=network->addShuffle(*res_2054->getOutput(0));
  Permutation permute_2055;
  permute_2055.order[0]=1;
  permute_2055.order[1]=0;
  permute_2055.order[2]=2;
  res_2055->setFirstTranspose(permute_2055);
  assert(res_2055 && "failed to build Node_2239 (type:transpose)");
  res_2055->getOutput(0)->setName("Node_2239:0");
  auto res_2056=network->addMatrixMultiply(*res_2051->getOutput(0),MatrixOperation::kNONE,*res_478->getOutput(0),MatrixOperation::kNONE);
  assert(res_2056 && "failed to build Node_2223 (type:matmul)");
  res_2056->getOutput(0)->setName("Node_2223:0");
  auto res_2057=network->addElementWise(*res_2056->getOutput(0),*res_479->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2057 && "failed to build Node_2223_add (type:add)");
  res_2057->getOutput(0)->setName("Node_2223_add:0");
  auto res_2058=network->addShuffle(*res_2057->getOutput(0));
  res_2058->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2058 && "failed to build Node_2247 (type:reshape)");
  res_2058->getOutput(0)->setName("Node_2247:0");
  auto res_2059=network->addShuffle(*res_2058->getOutput(0));
  Permutation permute_2059;
  permute_2059.order[0]=1;
  permute_2059.order[1]=2;
  permute_2059.order[2]=0;
  res_2059->setFirstTranspose(permute_2059);
  assert(res_2059 && "failed to build Node_2260 (type:transpose)");
  res_2059->getOutput(0)->setName("Node_2260:0");
  auto res_2060=network->addMatrixMultiply(*res_2055->getOutput(0),MatrixOperation::kNONE,*res_2059->getOutput(0),MatrixOperation::kNONE);
  assert(res_2060 && "failed to build Node_2261 (type:matmul)");
  res_2060->getOutput(0)->setName("Node_2261:0");
  auto res_2061=network->addElementWise(*res_2060->getOutput(0),*res_947->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2061 && "failed to build Node_2262 (type:divide)");
  res_2061->getOutput(0)->setName("Node_2262:0");
  auto res_2062=network->addElementWise(*res_2061->getOutput(0),*res_1895->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2062 && "failed to build Node_2263 (type:add)");
  res_2062->getOutput(0)->setName("Node_2263:0");
  auto res_2063=network->addSoftMax(*res_2062->getOutput(0));
  res_2063->setAxes(4);
  assert(res_2063 && "failed to build Node_2264 (type:softmax)");
  res_2063->getOutput(0)->setName("Node_2264:0");
  auto res_2064=network->addMatrixMultiply(*res_2051->getOutput(0),MatrixOperation::kNONE,*res_480->getOutput(0),MatrixOperation::kNONE);
  assert(res_2064 && "failed to build Node_2229 (type:matmul)");
  res_2064->getOutput(0)->setName("Node_2229:0");
  auto res_2065=network->addElementWise(*res_2064->getOutput(0),*res_481->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2065 && "failed to build Node_2229_add (type:add)");
  res_2065->getOutput(0)->setName("Node_2229_add:0");
  auto res_2066=network->addShuffle(*res_2065->getOutput(0));
  res_2066->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2066 && "failed to build Node_2257 (type:reshape)");
  res_2066->getOutput(0)->setName("Node_2257:0");
  auto res_2067=network->addShuffle(*res_2066->getOutput(0));
  Permutation permute_2067;
  permute_2067.order[0]=1;
  permute_2067.order[1]=0;
  permute_2067.order[2]=2;
  res_2067->setFirstTranspose(permute_2067);
  assert(res_2067 && "failed to build Node_2259 (type:transpose)");
  res_2067->getOutput(0)->setName("Node_2259:0");
  auto res_2068=network->addMatrixMultiply(*res_2063->getOutput(0),MatrixOperation::kNONE,*res_2067->getOutput(0),MatrixOperation::kNONE);
  assert(res_2068 && "failed to build Node_2268 (type:matmul)");
  res_2068->getOutput(0)->setName("Node_2268:0");
  auto res_2069=network->addShuffle(*res_2068->getOutput(0));
  Permutation permute_2069;
  permute_2069.order[0]=1;
  permute_2069.order[1]=0;
  permute_2069.order[2]=2;
  res_2069->setFirstTranspose(permute_2069);
  assert(res_2069 && "failed to build Node_2270 (type:transpose)");
  res_2069->getOutput(0)->setName("Node_2270:0");
  auto res_2070=network->addIdentity(*res_2069->getOutput(0));
  assert(res_2070 && "failed to build Node_2271 (type:contiguous)");
  res_2070->getOutput(0)->setName("Node_2271:0");
  auto res_2071=network->addShuffle(*res_2070->getOutput(0));
  res_2071->setReshapeDimensions(Dims{2,{75,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2071 && "failed to build Node_2279 (type:reshape)");
  res_2071->getOutput(0)->setName("Node_2279:0");
  auto res_2072=network->addMatrixMultiply(*res_2071->getOutput(0),MatrixOperation::kNONE,*res_482->getOutput(0),MatrixOperation::kNONE);
  assert(res_2072 && "failed to build Node_2286 (type:matmul)");
  res_2072->getOutput(0)->setName("Node_2286:0");
  auto res_2073=network->addElementWise(*res_2072->getOutput(0),*res_483->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2073 && "failed to build Node_2286_add (type:add)");
  res_2073->getOutput(0)->setName("Node_2286_add:0");
  auto res_2074=network->addElementWise(*res_2073->getOutput(0),*res_2051->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2074 && "failed to build Node_2290 (type:add)");
  res_2074->getOutput(0)->setName("Node_2290:0");
  auto res_2075=network->addReduce(*res_2074->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2075 && "failed to build Node_2297_mean (type:mean)");
  res_2075->getOutput(0)->setName("Node_2297_mean:0");
  auto res_2076=network->addElementWise(*res_2074->getOutput(0),*res_2075->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2076 && "failed to build Node_2297_diff (type:sub)");
  res_2076->getOutput(0)->setName("Node_2297_diff:0");
  auto res_2077=network->addElementWise(*res_2076->getOutput(0),*res_1163->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2077 && "failed to build Node_2297_power (type:power)");
  res_2077->getOutput(0)->setName("Node_2297_power:0");
  auto res_2078=network->addReduce(*res_2077->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2078 && "failed to build Node_2297_var (type:mean)");
  res_2078->getOutput(0)->setName("Node_2297_var:0");
  auto res_2079=network->addElementWise(*res_2078->getOutput(0),*res_1037->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2079 && "failed to build Node_2297_modify (type:add)");
  res_2079->getOutput(0)->setName("Node_2297_modify:0");
  auto res_2080=network->addUnary(*res_2079->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2080 && "failed to build Node_2297_sqrt (type:power)");
  res_2080->getOutput(0)->setName("Node_2297_sqrt:0");
  auto res_2081=network->addElementWise(*res_2076->getOutput(0),*res_2080->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2081 && "failed to build Node_2297_rsqrt (type:divide)");
  res_2081->getOutput(0)->setName("Node_2297_rsqrt:0");
  auto res_2082=network->addElementWise(*res_2081->getOutput(0),*res_136->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2082 && "failed to build Node_2297_mul (type:multiply)");
  res_2082->getOutput(0)->setName("Node_2297_mul:0");
  auto res_2083=network->addElementWise(*res_2082->getOutput(0),*res_137->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2083 && "failed to build Node_2297 (type:add)");
  res_2083->getOutput(0)->setName("Node_2297:0");
  auto res_2084=network->addMatrixMultiply(*res_2083->getOutput(0),MatrixOperation::kNONE,*res_484->getOutput(0),MatrixOperation::kNONE);
  assert(res_2084 && "failed to build Node_2303 (type:matmul)");
  res_2084->getOutput(0)->setName("Node_2303:0");
  auto res_2085=network->addElementWise(*res_2084->getOutput(0),*res_485->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2085 && "failed to build Node_2303_add (type:add)");
  res_2085->getOutput(0)->setName("Node_2303_add:0");
  ITensor* inputTensors_2086[1] = {res_2085->getOutput(0)};
  auto plugin_2086=GELU_Plugin("gelu");
  auto res_2086=network->addPluginV2(inputTensors_2086,1,plugin_2086);
  assert(res_2086 && "failed to build Node_2304 (type:gelu)");
  res_2086->getOutput(0)->setName("Node_2304:0");
  auto res_2087=network->addMatrixMultiply(*res_2086->getOutput(0),MatrixOperation::kNONE,*res_486->getOutput(0),MatrixOperation::kNONE);
  assert(res_2087 && "failed to build Node_2311 (type:matmul)");
  res_2087->getOutput(0)->setName("Node_2311:0");
  auto res_2088=network->addElementWise(*res_2087->getOutput(0),*res_487->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2088 && "failed to build Node_2311_add (type:add)");
  res_2088->getOutput(0)->setName("Node_2311_add:0");
  auto res_2089=network->addElementWise(*res_2088->getOutput(0),*res_2083->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2089 && "failed to build Node_2315 (type:add)");
  res_2089->getOutput(0)->setName("Node_2315:0");
  auto res_2090=network->addReduce(*res_2089->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2090 && "failed to build Node_2322_mean (type:mean)");
  res_2090->getOutput(0)->setName("Node_2322_mean:0");
  auto res_2091=network->addElementWise(*res_2089->getOutput(0),*res_2090->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2091 && "failed to build Node_2322_diff (type:sub)");
  res_2091->getOutput(0)->setName("Node_2322_diff:0");
  auto res_2092=network->addElementWise(*res_2091->getOutput(0),*res_1164->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2092 && "failed to build Node_2322_power (type:power)");
  res_2092->getOutput(0)->setName("Node_2322_power:0");
  auto res_2093=network->addReduce(*res_2092->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2093 && "failed to build Node_2322_var (type:mean)");
  res_2093->getOutput(0)->setName("Node_2322_var:0");
  auto res_2094=network->addElementWise(*res_2093->getOutput(0),*res_1038->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2094 && "failed to build Node_2322_modify (type:add)");
  res_2094->getOutput(0)->setName("Node_2322_modify:0");
  auto res_2095=network->addUnary(*res_2094->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2095 && "failed to build Node_2322_sqrt (type:power)");
  res_2095->getOutput(0)->setName("Node_2322_sqrt:0");
  auto res_2096=network->addElementWise(*res_2091->getOutput(0),*res_2095->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2096 && "failed to build Node_2322_rsqrt (type:divide)");
  res_2096->getOutput(0)->setName("Node_2322_rsqrt:0");
  auto res_2097=network->addElementWise(*res_2096->getOutput(0),*res_138->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2097 && "failed to build Node_2322_mul (type:multiply)");
  res_2097->getOutput(0)->setName("Node_2322_mul:0");
  auto res_2098=network->addElementWise(*res_2097->getOutput(0),*res_139->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2098 && "failed to build Node_2322 (type:add)");
  res_2098->getOutput(0)->setName("Node_2322:0");
  auto res_2099=network->addMatrixMultiply(*res_2098->getOutput(0),MatrixOperation::kNONE,*res_488->getOutput(0),MatrixOperation::kNONE);
  assert(res_2099 && "failed to build Node_2339 (type:matmul)");
  res_2099->getOutput(0)->setName("Node_2339:0");
  auto res_2100=network->addElementWise(*res_2099->getOutput(0),*res_489->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2100 && "failed to build Node_2339_add (type:add)");
  res_2100->getOutput(0)->setName("Node_2339_add:0");
  auto res_2101=network->addShuffle(*res_2100->getOutput(0));
  res_2101->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2101 && "failed to build Node_2359 (type:reshape)");
  res_2101->getOutput(0)->setName("Node_2359:0");
  auto res_2102=network->addShuffle(*res_2101->getOutput(0));
  Permutation permute_2102;
  permute_2102.order[0]=1;
  permute_2102.order[1]=0;
  permute_2102.order[2]=2;
  res_2102->setFirstTranspose(permute_2102);
  assert(res_2102 && "failed to build Node_2361 (type:transpose)");
  res_2102->getOutput(0)->setName("Node_2361:0");
  auto res_2103=network->addMatrixMultiply(*res_2098->getOutput(0),MatrixOperation::kNONE,*res_490->getOutput(0),MatrixOperation::kNONE);
  assert(res_2103 && "failed to build Node_2345 (type:matmul)");
  res_2103->getOutput(0)->setName("Node_2345:0");
  auto res_2104=network->addElementWise(*res_2103->getOutput(0),*res_491->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2104 && "failed to build Node_2345_add (type:add)");
  res_2104->getOutput(0)->setName("Node_2345_add:0");
  auto res_2105=network->addShuffle(*res_2104->getOutput(0));
  res_2105->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2105 && "failed to build Node_2369 (type:reshape)");
  res_2105->getOutput(0)->setName("Node_2369:0");
  auto res_2106=network->addShuffle(*res_2105->getOutput(0));
  Permutation permute_2106;
  permute_2106.order[0]=1;
  permute_2106.order[1]=2;
  permute_2106.order[2]=0;
  res_2106->setFirstTranspose(permute_2106);
  assert(res_2106 && "failed to build Node_2382 (type:transpose)");
  res_2106->getOutput(0)->setName("Node_2382:0");
  auto res_2107=network->addMatrixMultiply(*res_2102->getOutput(0),MatrixOperation::kNONE,*res_2106->getOutput(0),MatrixOperation::kNONE);
  assert(res_2107 && "failed to build Node_2383 (type:matmul)");
  res_2107->getOutput(0)->setName("Node_2383:0");
  auto res_2108=network->addElementWise(*res_2107->getOutput(0),*res_948->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2108 && "failed to build Node_2384 (type:divide)");
  res_2108->getOutput(0)->setName("Node_2384:0");
  auto res_2109=network->addElementWise(*res_2108->getOutput(0),*res_1895->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2109 && "failed to build Node_2385 (type:add)");
  res_2109->getOutput(0)->setName("Node_2385:0");
  auto res_2110=network->addSoftMax(*res_2109->getOutput(0));
  res_2110->setAxes(4);
  assert(res_2110 && "failed to build Node_2386 (type:softmax)");
  res_2110->getOutput(0)->setName("Node_2386:0");
  auto res_2111=network->addMatrixMultiply(*res_2098->getOutput(0),MatrixOperation::kNONE,*res_492->getOutput(0),MatrixOperation::kNONE);
  assert(res_2111 && "failed to build Node_2351 (type:matmul)");
  res_2111->getOutput(0)->setName("Node_2351:0");
  auto res_2112=network->addElementWise(*res_2111->getOutput(0),*res_493->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2112 && "failed to build Node_2351_add (type:add)");
  res_2112->getOutput(0)->setName("Node_2351_add:0");
  auto res_2113=network->addShuffle(*res_2112->getOutput(0));
  res_2113->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2113 && "failed to build Node_2379 (type:reshape)");
  res_2113->getOutput(0)->setName("Node_2379:0");
  auto res_2114=network->addShuffle(*res_2113->getOutput(0));
  Permutation permute_2114;
  permute_2114.order[0]=1;
  permute_2114.order[1]=0;
  permute_2114.order[2]=2;
  res_2114->setFirstTranspose(permute_2114);
  assert(res_2114 && "failed to build Node_2381 (type:transpose)");
  res_2114->getOutput(0)->setName("Node_2381:0");
  auto res_2115=network->addMatrixMultiply(*res_2110->getOutput(0),MatrixOperation::kNONE,*res_2114->getOutput(0),MatrixOperation::kNONE);
  assert(res_2115 && "failed to build Node_2390 (type:matmul)");
  res_2115->getOutput(0)->setName("Node_2390:0");
  auto res_2116=network->addShuffle(*res_2115->getOutput(0));
  Permutation permute_2116;
  permute_2116.order[0]=1;
  permute_2116.order[1]=0;
  permute_2116.order[2]=2;
  res_2116->setFirstTranspose(permute_2116);
  assert(res_2116 && "failed to build Node_2392 (type:transpose)");
  res_2116->getOutput(0)->setName("Node_2392:0");
  auto res_2117=network->addIdentity(*res_2116->getOutput(0));
  assert(res_2117 && "failed to build Node_2393 (type:contiguous)");
  res_2117->getOutput(0)->setName("Node_2393:0");
  auto res_2118=network->addShuffle(*res_2117->getOutput(0));
  res_2118->setReshapeDimensions(Dims{2,{75,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2118 && "failed to build Node_2401 (type:reshape)");
  res_2118->getOutput(0)->setName("Node_2401:0");
  auto res_2119=network->addMatrixMultiply(*res_2118->getOutput(0),MatrixOperation::kNONE,*res_494->getOutput(0),MatrixOperation::kNONE);
  assert(res_2119 && "failed to build Node_2408 (type:matmul)");
  res_2119->getOutput(0)->setName("Node_2408:0");
  auto res_2120=network->addElementWise(*res_2119->getOutput(0),*res_495->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2120 && "failed to build Node_2408_add (type:add)");
  res_2120->getOutput(0)->setName("Node_2408_add:0");
  auto res_2121=network->addElementWise(*res_2120->getOutput(0),*res_2098->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2121 && "failed to build Node_2412 (type:add)");
  res_2121->getOutput(0)->setName("Node_2412:0");
  auto res_2122=network->addReduce(*res_2121->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2122 && "failed to build Node_2419_mean (type:mean)");
  res_2122->getOutput(0)->setName("Node_2419_mean:0");
  auto res_2123=network->addElementWise(*res_2121->getOutput(0),*res_2122->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2123 && "failed to build Node_2419_diff (type:sub)");
  res_2123->getOutput(0)->setName("Node_2419_diff:0");
  auto res_2124=network->addElementWise(*res_2123->getOutput(0),*res_1165->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2124 && "failed to build Node_2419_power (type:power)");
  res_2124->getOutput(0)->setName("Node_2419_power:0");
  auto res_2125=network->addReduce(*res_2124->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2125 && "failed to build Node_2419_var (type:mean)");
  res_2125->getOutput(0)->setName("Node_2419_var:0");
  auto res_2126=network->addElementWise(*res_2125->getOutput(0),*res_1039->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2126 && "failed to build Node_2419_modify (type:add)");
  res_2126->getOutput(0)->setName("Node_2419_modify:0");
  auto res_2127=network->addUnary(*res_2126->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2127 && "failed to build Node_2419_sqrt (type:power)");
  res_2127->getOutput(0)->setName("Node_2419_sqrt:0");
  auto res_2128=network->addElementWise(*res_2123->getOutput(0),*res_2127->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2128 && "failed to build Node_2419_rsqrt (type:divide)");
  res_2128->getOutput(0)->setName("Node_2419_rsqrt:0");
  auto res_2129=network->addElementWise(*res_2128->getOutput(0),*res_140->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2129 && "failed to build Node_2419_mul (type:multiply)");
  res_2129->getOutput(0)->setName("Node_2419_mul:0");
  auto res_2130=network->addElementWise(*res_2129->getOutput(0),*res_141->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2130 && "failed to build Node_2419 (type:add)");
  res_2130->getOutput(0)->setName("Node_2419:0");
  auto res_2131=network->addMatrixMultiply(*res_2130->getOutput(0),MatrixOperation::kNONE,*res_496->getOutput(0),MatrixOperation::kNONE);
  assert(res_2131 && "failed to build Node_2425 (type:matmul)");
  res_2131->getOutput(0)->setName("Node_2425:0");
  auto res_2132=network->addElementWise(*res_2131->getOutput(0),*res_497->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2132 && "failed to build Node_2425_add (type:add)");
  res_2132->getOutput(0)->setName("Node_2425_add:0");
  ITensor* inputTensors_2133[1] = {res_2132->getOutput(0)};
  auto plugin_2133=GELU_Plugin("gelu");
  auto res_2133=network->addPluginV2(inputTensors_2133,1,plugin_2133);
  assert(res_2133 && "failed to build Node_2426 (type:gelu)");
  res_2133->getOutput(0)->setName("Node_2426:0");
  auto res_2134=network->addMatrixMultiply(*res_2133->getOutput(0),MatrixOperation::kNONE,*res_498->getOutput(0),MatrixOperation::kNONE);
  assert(res_2134 && "failed to build Node_2433 (type:matmul)");
  res_2134->getOutput(0)->setName("Node_2433:0");
  auto res_2135=network->addElementWise(*res_2134->getOutput(0),*res_499->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2135 && "failed to build Node_2433_add (type:add)");
  res_2135->getOutput(0)->setName("Node_2433_add:0");
  auto res_2136=network->addElementWise(*res_2135->getOutput(0),*res_2130->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2136 && "failed to build Node_2437 (type:add)");
  res_2136->getOutput(0)->setName("Node_2437:0");
  auto res_2137=network->addReduce(*res_2136->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2137 && "failed to build Node_2444_mean (type:mean)");
  res_2137->getOutput(0)->setName("Node_2444_mean:0");
  auto res_2138=network->addElementWise(*res_2136->getOutput(0),*res_2137->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2138 && "failed to build Node_2444_diff (type:sub)");
  res_2138->getOutput(0)->setName("Node_2444_diff:0");
  auto res_2139=network->addElementWise(*res_2138->getOutput(0),*res_1166->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2139 && "failed to build Node_2444_power (type:power)");
  res_2139->getOutput(0)->setName("Node_2444_power:0");
  auto res_2140=network->addReduce(*res_2139->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2140 && "failed to build Node_2444_var (type:mean)");
  res_2140->getOutput(0)->setName("Node_2444_var:0");
  auto res_2141=network->addElementWise(*res_2140->getOutput(0),*res_1040->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2141 && "failed to build Node_2444_modify (type:add)");
  res_2141->getOutput(0)->setName("Node_2444_modify:0");
  auto res_2142=network->addUnary(*res_2141->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2142 && "failed to build Node_2444_sqrt (type:power)");
  res_2142->getOutput(0)->setName("Node_2444_sqrt:0");
  auto res_2143=network->addElementWise(*res_2138->getOutput(0),*res_2142->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2143 && "failed to build Node_2444_rsqrt (type:divide)");
  res_2143->getOutput(0)->setName("Node_2444_rsqrt:0");
  auto res_2144=network->addElementWise(*res_2143->getOutput(0),*res_142->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2144 && "failed to build Node_2444_mul (type:multiply)");
  res_2144->getOutput(0)->setName("Node_2444_mul:0");
  auto res_2145=network->addElementWise(*res_2144->getOutput(0),*res_143->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2145 && "failed to build Node_2444 (type:add)");
  res_2145->getOutput(0)->setName("Node_2444:0");
  auto res_2146=network->addMatrixMultiply(*res_2145->getOutput(0),MatrixOperation::kNONE,*res_500->getOutput(0),MatrixOperation::kNONE);
  assert(res_2146 && "failed to build Node_2461 (type:matmul)");
  res_2146->getOutput(0)->setName("Node_2461:0");
  auto res_2147=network->addElementWise(*res_2146->getOutput(0),*res_501->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2147 && "failed to build Node_2461_add (type:add)");
  res_2147->getOutput(0)->setName("Node_2461_add:0");
  auto res_2148=network->addShuffle(*res_2147->getOutput(0));
  res_2148->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2148 && "failed to build Node_2481 (type:reshape)");
  res_2148->getOutput(0)->setName("Node_2481:0");
  auto res_2149=network->addShuffle(*res_2148->getOutput(0));
  Permutation permute_2149;
  permute_2149.order[0]=1;
  permute_2149.order[1]=0;
  permute_2149.order[2]=2;
  res_2149->setFirstTranspose(permute_2149);
  assert(res_2149 && "failed to build Node_2483 (type:transpose)");
  res_2149->getOutput(0)->setName("Node_2483:0");
  auto res_2150=network->addMatrixMultiply(*res_2145->getOutput(0),MatrixOperation::kNONE,*res_502->getOutput(0),MatrixOperation::kNONE);
  assert(res_2150 && "failed to build Node_2467 (type:matmul)");
  res_2150->getOutput(0)->setName("Node_2467:0");
  auto res_2151=network->addElementWise(*res_2150->getOutput(0),*res_503->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2151 && "failed to build Node_2467_add (type:add)");
  res_2151->getOutput(0)->setName("Node_2467_add:0");
  auto res_2152=network->addShuffle(*res_2151->getOutput(0));
  res_2152->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2152 && "failed to build Node_2491 (type:reshape)");
  res_2152->getOutput(0)->setName("Node_2491:0");
  auto res_2153=network->addShuffle(*res_2152->getOutput(0));
  Permutation permute_2153;
  permute_2153.order[0]=1;
  permute_2153.order[1]=2;
  permute_2153.order[2]=0;
  res_2153->setFirstTranspose(permute_2153);
  assert(res_2153 && "failed to build Node_2504 (type:transpose)");
  res_2153->getOutput(0)->setName("Node_2504:0");
  auto res_2154=network->addMatrixMultiply(*res_2149->getOutput(0),MatrixOperation::kNONE,*res_2153->getOutput(0),MatrixOperation::kNONE);
  assert(res_2154 && "failed to build Node_2505 (type:matmul)");
  res_2154->getOutput(0)->setName("Node_2505:0");
  auto res_2155=network->addElementWise(*res_2154->getOutput(0),*res_949->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2155 && "failed to build Node_2506 (type:divide)");
  res_2155->getOutput(0)->setName("Node_2506:0");
  auto res_2156=network->addElementWise(*res_2155->getOutput(0),*res_1895->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2156 && "failed to build Node_2507 (type:add)");
  res_2156->getOutput(0)->setName("Node_2507:0");
  auto res_2157=network->addSoftMax(*res_2156->getOutput(0));
  res_2157->setAxes(4);
  assert(res_2157 && "failed to build Node_2508 (type:softmax)");
  res_2157->getOutput(0)->setName("Node_2508:0");
  auto res_2158=network->addMatrixMultiply(*res_2145->getOutput(0),MatrixOperation::kNONE,*res_504->getOutput(0),MatrixOperation::kNONE);
  assert(res_2158 && "failed to build Node_2473 (type:matmul)");
  res_2158->getOutput(0)->setName("Node_2473:0");
  auto res_2159=network->addElementWise(*res_2158->getOutput(0),*res_505->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2159 && "failed to build Node_2473_add (type:add)");
  res_2159->getOutput(0)->setName("Node_2473_add:0");
  auto res_2160=network->addShuffle(*res_2159->getOutput(0));
  res_2160->setReshapeDimensions(Dims3{75,6,32});
  assert(res_2160 && "failed to build Node_2501 (type:reshape)");
  res_2160->getOutput(0)->setName("Node_2501:0");
  auto res_2161=network->addShuffle(*res_2160->getOutput(0));
  Permutation permute_2161;
  permute_2161.order[0]=1;
  permute_2161.order[1]=0;
  permute_2161.order[2]=2;
  res_2161->setFirstTranspose(permute_2161);
  assert(res_2161 && "failed to build Node_2503 (type:transpose)");
  res_2161->getOutput(0)->setName("Node_2503:0");
  auto res_2162=network->addMatrixMultiply(*res_2157->getOutput(0),MatrixOperation::kNONE,*res_2161->getOutput(0),MatrixOperation::kNONE);
  assert(res_2162 && "failed to build Node_2512 (type:matmul)");
  res_2162->getOutput(0)->setName("Node_2512:0");
  auto res_2163=network->addShuffle(*res_2162->getOutput(0));
  Permutation permute_2163;
  permute_2163.order[0]=1;
  permute_2163.order[1]=0;
  permute_2163.order[2]=2;
  res_2163->setFirstTranspose(permute_2163);
  assert(res_2163 && "failed to build Node_2514 (type:transpose)");
  res_2163->getOutput(0)->setName("Node_2514:0");
  auto res_2164=network->addIdentity(*res_2163->getOutput(0));
  assert(res_2164 && "failed to build Node_2515 (type:contiguous)");
  res_2164->getOutput(0)->setName("Node_2515:0");
  auto res_2165=network->addShuffle(*res_2164->getOutput(0));
  res_2165->setReshapeDimensions(Dims{2,{75,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2165 && "failed to build Node_2523 (type:reshape)");
  res_2165->getOutput(0)->setName("Node_2523:0");
  auto res_2166=network->addMatrixMultiply(*res_2165->getOutput(0),MatrixOperation::kNONE,*res_506->getOutput(0),MatrixOperation::kNONE);
  assert(res_2166 && "failed to build Node_2530 (type:matmul)");
  res_2166->getOutput(0)->setName("Node_2530:0");
  auto res_2167=network->addElementWise(*res_2166->getOutput(0),*res_507->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2167 && "failed to build Node_2530_add (type:add)");
  res_2167->getOutput(0)->setName("Node_2530_add:0");
  auto res_2168=network->addElementWise(*res_2167->getOutput(0),*res_2145->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2168 && "failed to build Node_2534 (type:add)");
  res_2168->getOutput(0)->setName("Node_2534:0");
  auto res_2169=network->addReduce(*res_2168->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2169 && "failed to build Node_2541_mean (type:mean)");
  res_2169->getOutput(0)->setName("Node_2541_mean:0");
  auto res_2170=network->addElementWise(*res_2168->getOutput(0),*res_2169->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2170 && "failed to build Node_2541_diff (type:sub)");
  res_2170->getOutput(0)->setName("Node_2541_diff:0");
  auto res_2171=network->addElementWise(*res_2170->getOutput(0),*res_1167->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2171 && "failed to build Node_2541_power (type:power)");
  res_2171->getOutput(0)->setName("Node_2541_power:0");
  auto res_2172=network->addReduce(*res_2171->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2172 && "failed to build Node_2541_var (type:mean)");
  res_2172->getOutput(0)->setName("Node_2541_var:0");
  auto res_2173=network->addElementWise(*res_2172->getOutput(0),*res_1041->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2173 && "failed to build Node_2541_modify (type:add)");
  res_2173->getOutput(0)->setName("Node_2541_modify:0");
  auto res_2174=network->addUnary(*res_2173->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2174 && "failed to build Node_2541_sqrt (type:power)");
  res_2174->getOutput(0)->setName("Node_2541_sqrt:0");
  auto res_2175=network->addElementWise(*res_2170->getOutput(0),*res_2174->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2175 && "failed to build Node_2541_rsqrt (type:divide)");
  res_2175->getOutput(0)->setName("Node_2541_rsqrt:0");
  auto res_2176=network->addElementWise(*res_2175->getOutput(0),*res_144->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2176 && "failed to build Node_2541_mul (type:multiply)");
  res_2176->getOutput(0)->setName("Node_2541_mul:0");
  auto res_2177=network->addElementWise(*res_2176->getOutput(0),*res_145->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2177 && "failed to build Node_2541 (type:add)");
  res_2177->getOutput(0)->setName("Node_2541:0");
  auto res_2178=network->addMatrixMultiply(*res_2177->getOutput(0),MatrixOperation::kNONE,*res_508->getOutput(0),MatrixOperation::kNONE);
  assert(res_2178 && "failed to build Node_2547 (type:matmul)");
  res_2178->getOutput(0)->setName("Node_2547:0");
  auto res_2179=network->addElementWise(*res_2178->getOutput(0),*res_509->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2179 && "failed to build Node_2547_add (type:add)");
  res_2179->getOutput(0)->setName("Node_2547_add:0");
  ITensor* inputTensors_2180[1] = {res_2179->getOutput(0)};
  auto plugin_2180=GELU_Plugin("gelu");
  auto res_2180=network->addPluginV2(inputTensors_2180,1,plugin_2180);
  assert(res_2180 && "failed to build Node_2548 (type:gelu)");
  res_2180->getOutput(0)->setName("Node_2548:0");
  auto res_2181=network->addMatrixMultiply(*res_2180->getOutput(0),MatrixOperation::kNONE,*res_510->getOutput(0),MatrixOperation::kNONE);
  assert(res_2181 && "failed to build Node_2555 (type:matmul)");
  res_2181->getOutput(0)->setName("Node_2555:0");
  auto res_2182=network->addElementWise(*res_2181->getOutput(0),*res_511->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2182 && "failed to build Node_2555_add (type:add)");
  res_2182->getOutput(0)->setName("Node_2555_add:0");
  auto res_2183=network->addElementWise(*res_2182->getOutput(0),*res_2177->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2183 && "failed to build Node_2559 (type:add)");
  res_2183->getOutput(0)->setName("Node_2559:0");
  auto res_2184=network->addReduce(*res_2183->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2184 && "failed to build Node_2566_mean (type:mean)");
  res_2184->getOutput(0)->setName("Node_2566_mean:0");
  auto res_2185=network->addElementWise(*res_2183->getOutput(0),*res_2184->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2185 && "failed to build Node_2566_diff (type:sub)");
  res_2185->getOutput(0)->setName("Node_2566_diff:0");
  auto res_2186=network->addElementWise(*res_2185->getOutput(0),*res_1168->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2186 && "failed to build Node_2566_power (type:power)");
  res_2186->getOutput(0)->setName("Node_2566_power:0");
  auto res_2187=network->addReduce(*res_2186->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2187 && "failed to build Node_2566_var (type:mean)");
  res_2187->getOutput(0)->setName("Node_2566_var:0");
  auto res_2188=network->addElementWise(*res_2187->getOutput(0),*res_1042->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2188 && "failed to build Node_2566_modify (type:add)");
  res_2188->getOutput(0)->setName("Node_2566_modify:0");
  auto res_2189=network->addUnary(*res_2188->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2189 && "failed to build Node_2566_sqrt (type:power)");
  res_2189->getOutput(0)->setName("Node_2566_sqrt:0");
  auto res_2190=network->addElementWise(*res_2185->getOutput(0),*res_2189->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2190 && "failed to build Node_2566_rsqrt (type:divide)");
  res_2190->getOutput(0)->setName("Node_2566_rsqrt:0");
  auto res_2191=network->addElementWise(*res_2190->getOutput(0),*res_146->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2191 && "failed to build Node_2566_mul (type:multiply)");
  res_2191->getOutput(0)->setName("Node_2566_mul:0");
  auto res_2192=network->addElementWise(*res_2191->getOutput(0),*res_147->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2192 && "failed to build Node_2566 (type:add)");
  res_2192->getOutput(0)->setName("Node_2566:0");
  auto res_2193=network->addSlice(*res_2192->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_2193 && "failed to build Node_2570 (type:dlr_slice)");
  res_2193->getOutput(0)->setName("Node_2570:0");
  auto res_2194=network->addShuffle(*res_2193->getOutput(0));
  res_2194->setReshapeDimensions(Dims3{192,1,1});
  assert(res_2194 && "failed to build Node_2572_reshape (type:reshape)");
  res_2194->getOutput(0)->setName("Node_2572_reshape:0");
  auto res_2195=network->addFullyConnected(*res_2194->getOutput(0),192,mWeightsMap["weight_2195"],mWeightsMap["bias_2195"]);
  assert(res_2195 && "failed to build Node_2577 (type:dense)");
  res_2195->getOutput(0)->setName("Node_2577:0");
  auto res_2196=network->addShuffle(*res_2195->getOutput(0));
  res_2196->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_2196 && "failed to build Node_2577_reshape (type:reshape)");
  res_2196->getOutput(0)->setName("Node_2577_reshape:0");
  auto res_2197=network->addActivation(*res_2196->getOutput(0),ActivationType::kTANH);
  assert(res_2197 && "failed to build Node_2578 (type:tanh)");
  res_2197->getOutput(0)->setName("Node_2578:0");
  auto res_2198=network->addShuffle(*res_2197->getOutput(0));
  res_2198->setReshapeDimensions(Dims{2,{1,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2198 && "failed to build Node_7278 (type:reshape)");
  res_2198->getOutput(0)->setName("Node_7278:0");
  auto res_2199=network->addShuffle(*inputs[12]);
  res_2199->setReshapeDimensions(Dims{2,{33,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2199 && "failed to build Node_2595 (type:reshape)");
  res_2199->getOutput(0)->setName("Node_2595:0");
  auto res_2200=network->addElementWise(*res_45->getOutput(0),*res_2199->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2200 && "failed to build Node_2597 (type:add)");
  res_2200->getOutput(0)->setName("Node_2597:0");
  auto res_2201=network->addElementWise(*inputs[13],*res_2200->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2201 && "failed to build Node_2598 (type:multiply)");
  res_2201->getOutput(0)->setName("Node_2598:0");
  auto res_2202=network->addShuffle(*inputs[12]);
  res_2202->setReshapeDimensions(Dims{2,{33,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2202 && "failed to build Node_2610 (type:reshape)");
  res_2202->getOutput(0)->setName("Node_2610:0");
  auto res_2203=network->addElementWise(*res_46->getOutput(0),*res_2202->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2203 && "failed to build Node_2612 (type:add)");
  res_2203->getOutput(0)->setName("Node_2612:0");
  auto res_2204=network->addShuffle(*inputs[12]);
  res_2204->setReshapeDimensions(Dims{2,{33,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2204 && "failed to build Node_2625 (type:reshape)");
  res_2204->getOutput(0)->setName("Node_2625:0");
  auto res_2205=network->addElementWise(*res_47->getOutput(0),*res_2204->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2205 && "failed to build Node_2627 (type:add)");
  res_2205->getOutput(0)->setName("Node_2627:0");
  auto res_2206=network->addShuffle(*inputs[12]);
  res_2206->setReshapeDimensions(Dims3{1,1,33});
  assert(res_2206 && "failed to build Node_2746 (type:reshape)");
  res_2206->getOutput(0)->setName("Node_2746:0");
  auto res_2207=network->addElementWise(*res_950->getOutput(0),*res_2206->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2207 && "failed to build Node_2748 (type:sub)");
  res_2207->getOutput(0)->setName("Node_2748:0");
  auto res_2208=network->addElementWise(*res_2207->getOutput(0),*res_951->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2208 && "failed to build Node_2749 (type:multiply)");
  res_2208->getOutput(0)->setName("Node_2749:0");
  auto res_2209=network->addElementWise(*inputs[14],*res_2203->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2209 && "failed to build Node_2613 (type:multiply)");
  res_2209->getOutput(0)->setName("Node_2613:0");
  auto res_2210=network->addElementWise(*res_2201->getOutput(0),*res_2209->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2210 && "failed to build Node_2736 (type:add)");
  res_2210->getOutput(0)->setName("Node_2736:0");
  auto res_2211=network->addElementWise(*inputs[15],*res_2205->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2211 && "failed to build Node_2628 (type:multiply)");
  res_2211->getOutput(0)->setName("Node_2628:0");
  auto res_2212=network->addElementWise(*res_2210->getOutput(0),*res_2211->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2212 && "failed to build Node_2737 (type:add)");
  res_2212->getOutput(0)->setName("Node_2737:0");
  auto res_2213=network->addElementWise(*res_2212->getOutput(0),*res_64->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2213 && "failed to build Node_2769 (type:add)");
  res_2213->getOutput(0)->setName("Node_2769:0");
  auto res_2214=network->addReduce(*res_2213->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2214 && "failed to build Node_2774_mean (type:mean)");
  res_2214->getOutput(0)->setName("Node_2774_mean:0");
  auto res_2215=network->addElementWise(*res_2213->getOutput(0),*res_2214->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2215 && "failed to build Node_2774_diff (type:sub)");
  res_2215->getOutput(0)->setName("Node_2774_diff:0");
  auto res_2216=network->addElementWise(*res_2215->getOutput(0),*res_1169->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2216 && "failed to build Node_2774_power (type:power)");
  res_2216->getOutput(0)->setName("Node_2774_power:0");
  auto res_2217=network->addReduce(*res_2216->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2217 && "failed to build Node_2774_var (type:mean)");
  res_2217->getOutput(0)->setName("Node_2774_var:0");
  auto res_2218=network->addElementWise(*res_2217->getOutput(0),*res_1043->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2218 && "failed to build Node_2774_modify (type:add)");
  res_2218->getOutput(0)->setName("Node_2774_modify:0");
  auto res_2219=network->addUnary(*res_2218->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2219 && "failed to build Node_2774_sqrt (type:power)");
  res_2219->getOutput(0)->setName("Node_2774_sqrt:0");
  auto res_2220=network->addElementWise(*res_2215->getOutput(0),*res_2219->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2220 && "failed to build Node_2774_rsqrt (type:divide)");
  res_2220->getOutput(0)->setName("Node_2774_rsqrt:0");
  auto res_2221=network->addElementWise(*res_2220->getOutput(0),*res_148->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2221 && "failed to build Node_2774_mul (type:multiply)");
  res_2221->getOutput(0)->setName("Node_2774_mul:0");
  auto res_2222=network->addElementWise(*res_2221->getOutput(0),*res_149->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2222 && "failed to build Node_2774 (type:add)");
  res_2222->getOutput(0)->setName("Node_2774:0");
  auto res_2223=network->addMatrixMultiply(*res_2222->getOutput(0),MatrixOperation::kNONE,*res_512->getOutput(0),MatrixOperation::kNONE);
  assert(res_2223 && "failed to build Node_2792 (type:matmul)");
  res_2223->getOutput(0)->setName("Node_2792:0");
  auto res_2224=network->addElementWise(*res_2223->getOutput(0),*res_513->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2224 && "failed to build Node_2792_add (type:add)");
  res_2224->getOutput(0)->setName("Node_2792_add:0");
  auto res_2225=network->addShuffle(*res_2224->getOutput(0));
  res_2225->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2225 && "failed to build Node_2808 (type:reshape)");
  res_2225->getOutput(0)->setName("Node_2808:0");
  auto res_2226=network->addShuffle(*res_2225->getOutput(0));
  Permutation permute_2226;
  permute_2226.order[0]=1;
  permute_2226.order[1]=0;
  permute_2226.order[2]=2;
  res_2226->setFirstTranspose(permute_2226);
  assert(res_2226 && "failed to build Node_2810 (type:transpose)");
  res_2226->getOutput(0)->setName("Node_2810:0");
  auto res_2227=network->addMatrixMultiply(*res_2222->getOutput(0),MatrixOperation::kNONE,*res_514->getOutput(0),MatrixOperation::kNONE);
  assert(res_2227 && "failed to build Node_2796 (type:matmul)");
  res_2227->getOutput(0)->setName("Node_2796:0");
  auto res_2228=network->addElementWise(*res_2227->getOutput(0),*res_515->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2228 && "failed to build Node_2796_add (type:add)");
  res_2228->getOutput(0)->setName("Node_2796_add:0");
  auto res_2229=network->addShuffle(*res_2228->getOutput(0));
  res_2229->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2229 && "failed to build Node_2818 (type:reshape)");
  res_2229->getOutput(0)->setName("Node_2818:0");
  auto res_2230=network->addShuffle(*res_2229->getOutput(0));
  Permutation permute_2230;
  permute_2230.order[0]=1;
  permute_2230.order[1]=2;
  permute_2230.order[2]=0;
  res_2230->setFirstTranspose(permute_2230);
  assert(res_2230 && "failed to build Node_2831 (type:transpose)");
  res_2230->getOutput(0)->setName("Node_2831:0");
  auto res_2231=network->addMatrixMultiply(*res_2226->getOutput(0),MatrixOperation::kNONE,*res_2230->getOutput(0),MatrixOperation::kNONE);
  assert(res_2231 && "failed to build Node_2832 (type:matmul)");
  res_2231->getOutput(0)->setName("Node_2832:0");
  auto res_2232=network->addElementWise(*res_2231->getOutput(0),*res_952->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2232 && "failed to build Node_2833 (type:divide)");
  res_2232->getOutput(0)->setName("Node_2833:0");
  auto res_2233=network->addElementWise(*res_2232->getOutput(0),*res_2208->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2233 && "failed to build Node_2834 (type:add)");
  res_2233->getOutput(0)->setName("Node_2834:0");
  auto res_2234=network->addSoftMax(*res_2233->getOutput(0));
  res_2234->setAxes(4);
  assert(res_2234 && "failed to build Node_2835 (type:softmax)");
  res_2234->getOutput(0)->setName("Node_2835:0");
  auto res_2235=network->addMatrixMultiply(*res_2222->getOutput(0),MatrixOperation::kNONE,*res_516->getOutput(0),MatrixOperation::kNONE);
  assert(res_2235 && "failed to build Node_2800 (type:matmul)");
  res_2235->getOutput(0)->setName("Node_2800:0");
  auto res_2236=network->addElementWise(*res_2235->getOutput(0),*res_517->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2236 && "failed to build Node_2800_add (type:add)");
  res_2236->getOutput(0)->setName("Node_2800_add:0");
  auto res_2237=network->addShuffle(*res_2236->getOutput(0));
  res_2237->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2237 && "failed to build Node_2828 (type:reshape)");
  res_2237->getOutput(0)->setName("Node_2828:0");
  auto res_2238=network->addShuffle(*res_2237->getOutput(0));
  Permutation permute_2238;
  permute_2238.order[0]=1;
  permute_2238.order[1]=0;
  permute_2238.order[2]=2;
  res_2238->setFirstTranspose(permute_2238);
  assert(res_2238 && "failed to build Node_2830 (type:transpose)");
  res_2238->getOutput(0)->setName("Node_2830:0");
  auto res_2239=network->addMatrixMultiply(*res_2234->getOutput(0),MatrixOperation::kNONE,*res_2238->getOutput(0),MatrixOperation::kNONE);
  assert(res_2239 && "failed to build Node_2839 (type:matmul)");
  res_2239->getOutput(0)->setName("Node_2839:0");
  auto res_2240=network->addShuffle(*res_2239->getOutput(0));
  Permutation permute_2240;
  permute_2240.order[0]=1;
  permute_2240.order[1]=0;
  permute_2240.order[2]=2;
  res_2240->setFirstTranspose(permute_2240);
  assert(res_2240 && "failed to build Node_2841 (type:transpose)");
  res_2240->getOutput(0)->setName("Node_2841:0");
  auto res_2241=network->addIdentity(*res_2240->getOutput(0));
  assert(res_2241 && "failed to build Node_2842 (type:contiguous)");
  res_2241->getOutput(0)->setName("Node_2842:0");
  auto res_2242=network->addShuffle(*res_2241->getOutput(0));
  res_2242->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2242 && "failed to build Node_2850 (type:reshape)");
  res_2242->getOutput(0)->setName("Node_2850:0");
  auto res_2243=network->addMatrixMultiply(*res_2242->getOutput(0),MatrixOperation::kNONE,*res_518->getOutput(0),MatrixOperation::kNONE);
  assert(res_2243 && "failed to build Node_2855 (type:matmul)");
  res_2243->getOutput(0)->setName("Node_2855:0");
  auto res_2244=network->addElementWise(*res_2243->getOutput(0),*res_519->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2244 && "failed to build Node_2855_add (type:add)");
  res_2244->getOutput(0)->setName("Node_2855_add:0");
  auto res_2245=network->addElementWise(*res_2244->getOutput(0),*res_2222->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2245 && "failed to build Node_2859 (type:add)");
  res_2245->getOutput(0)->setName("Node_2859:0");
  auto res_2246=network->addReduce(*res_2245->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2246 && "failed to build Node_2864_mean (type:mean)");
  res_2246->getOutput(0)->setName("Node_2864_mean:0");
  auto res_2247=network->addElementWise(*res_2245->getOutput(0),*res_2246->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2247 && "failed to build Node_2864_diff (type:sub)");
  res_2247->getOutput(0)->setName("Node_2864_diff:0");
  auto res_2248=network->addElementWise(*res_2247->getOutput(0),*res_1170->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2248 && "failed to build Node_2864_power (type:power)");
  res_2248->getOutput(0)->setName("Node_2864_power:0");
  auto res_2249=network->addReduce(*res_2248->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2249 && "failed to build Node_2864_var (type:mean)");
  res_2249->getOutput(0)->setName("Node_2864_var:0");
  auto res_2250=network->addElementWise(*res_2249->getOutput(0),*res_1044->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2250 && "failed to build Node_2864_modify (type:add)");
  res_2250->getOutput(0)->setName("Node_2864_modify:0");
  auto res_2251=network->addUnary(*res_2250->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2251 && "failed to build Node_2864_sqrt (type:power)");
  res_2251->getOutput(0)->setName("Node_2864_sqrt:0");
  auto res_2252=network->addElementWise(*res_2247->getOutput(0),*res_2251->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2252 && "failed to build Node_2864_rsqrt (type:divide)");
  res_2252->getOutput(0)->setName("Node_2864_rsqrt:0");
  auto res_2253=network->addElementWise(*res_2252->getOutput(0),*res_150->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2253 && "failed to build Node_2864_mul (type:multiply)");
  res_2253->getOutput(0)->setName("Node_2864_mul:0");
  auto res_2254=network->addElementWise(*res_2253->getOutput(0),*res_151->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2254 && "failed to build Node_2864 (type:add)");
  res_2254->getOutput(0)->setName("Node_2864:0");
  auto res_2255=network->addMatrixMultiply(*res_2254->getOutput(0),MatrixOperation::kNONE,*res_520->getOutput(0),MatrixOperation::kNONE);
  assert(res_2255 && "failed to build Node_2868 (type:matmul)");
  res_2255->getOutput(0)->setName("Node_2868:0");
  auto res_2256=network->addElementWise(*res_2255->getOutput(0),*res_521->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2256 && "failed to build Node_2868_add (type:add)");
  res_2256->getOutput(0)->setName("Node_2868_add:0");
  ITensor* inputTensors_2257[1] = {res_2256->getOutput(0)};
  auto plugin_2257=GELU_Plugin("gelu");
  auto res_2257=network->addPluginV2(inputTensors_2257,1,plugin_2257);
  assert(res_2257 && "failed to build Node_2869 (type:gelu)");
  res_2257->getOutput(0)->setName("Node_2869:0");
  auto res_2258=network->addMatrixMultiply(*res_2257->getOutput(0),MatrixOperation::kNONE,*res_522->getOutput(0),MatrixOperation::kNONE);
  assert(res_2258 && "failed to build Node_2874 (type:matmul)");
  res_2258->getOutput(0)->setName("Node_2874:0");
  auto res_2259=network->addElementWise(*res_2258->getOutput(0),*res_523->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2259 && "failed to build Node_2874_add (type:add)");
  res_2259->getOutput(0)->setName("Node_2874_add:0");
  auto res_2260=network->addElementWise(*res_2259->getOutput(0),*res_2254->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2260 && "failed to build Node_2878 (type:add)");
  res_2260->getOutput(0)->setName("Node_2878:0");
  auto res_2261=network->addReduce(*res_2260->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2261 && "failed to build Node_2883_mean (type:mean)");
  res_2261->getOutput(0)->setName("Node_2883_mean:0");
  auto res_2262=network->addElementWise(*res_2260->getOutput(0),*res_2261->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2262 && "failed to build Node_2883_diff (type:sub)");
  res_2262->getOutput(0)->setName("Node_2883_diff:0");
  auto res_2263=network->addElementWise(*res_2262->getOutput(0),*res_1171->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2263 && "failed to build Node_2883_power (type:power)");
  res_2263->getOutput(0)->setName("Node_2883_power:0");
  auto res_2264=network->addReduce(*res_2263->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2264 && "failed to build Node_2883_var (type:mean)");
  res_2264->getOutput(0)->setName("Node_2883_var:0");
  auto res_2265=network->addElementWise(*res_2264->getOutput(0),*res_1045->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2265 && "failed to build Node_2883_modify (type:add)");
  res_2265->getOutput(0)->setName("Node_2883_modify:0");
  auto res_2266=network->addUnary(*res_2265->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2266 && "failed to build Node_2883_sqrt (type:power)");
  res_2266->getOutput(0)->setName("Node_2883_sqrt:0");
  auto res_2267=network->addElementWise(*res_2262->getOutput(0),*res_2266->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2267 && "failed to build Node_2883_rsqrt (type:divide)");
  res_2267->getOutput(0)->setName("Node_2883_rsqrt:0");
  auto res_2268=network->addElementWise(*res_2267->getOutput(0),*res_152->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2268 && "failed to build Node_2883_mul (type:multiply)");
  res_2268->getOutput(0)->setName("Node_2883_mul:0");
  auto res_2269=network->addElementWise(*res_2268->getOutput(0),*res_153->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2269 && "failed to build Node_2883 (type:add)");
  res_2269->getOutput(0)->setName("Node_2883:0");
  auto res_2270=network->addMatrixMultiply(*res_2269->getOutput(0),MatrixOperation::kNONE,*res_524->getOutput(0),MatrixOperation::kNONE);
  assert(res_2270 && "failed to build Node_2898 (type:matmul)");
  res_2270->getOutput(0)->setName("Node_2898:0");
  auto res_2271=network->addElementWise(*res_2270->getOutput(0),*res_525->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2271 && "failed to build Node_2898_add (type:add)");
  res_2271->getOutput(0)->setName("Node_2898_add:0");
  auto res_2272=network->addShuffle(*res_2271->getOutput(0));
  res_2272->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2272 && "failed to build Node_2914 (type:reshape)");
  res_2272->getOutput(0)->setName("Node_2914:0");
  auto res_2273=network->addShuffle(*res_2272->getOutput(0));
  Permutation permute_2273;
  permute_2273.order[0]=1;
  permute_2273.order[1]=0;
  permute_2273.order[2]=2;
  res_2273->setFirstTranspose(permute_2273);
  assert(res_2273 && "failed to build Node_2916 (type:transpose)");
  res_2273->getOutput(0)->setName("Node_2916:0");
  auto res_2274=network->addMatrixMultiply(*res_2269->getOutput(0),MatrixOperation::kNONE,*res_526->getOutput(0),MatrixOperation::kNONE);
  assert(res_2274 && "failed to build Node_2902 (type:matmul)");
  res_2274->getOutput(0)->setName("Node_2902:0");
  auto res_2275=network->addElementWise(*res_2274->getOutput(0),*res_527->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2275 && "failed to build Node_2902_add (type:add)");
  res_2275->getOutput(0)->setName("Node_2902_add:0");
  auto res_2276=network->addShuffle(*res_2275->getOutput(0));
  res_2276->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2276 && "failed to build Node_2924 (type:reshape)");
  res_2276->getOutput(0)->setName("Node_2924:0");
  auto res_2277=network->addShuffle(*res_2276->getOutput(0));
  Permutation permute_2277;
  permute_2277.order[0]=1;
  permute_2277.order[1]=2;
  permute_2277.order[2]=0;
  res_2277->setFirstTranspose(permute_2277);
  assert(res_2277 && "failed to build Node_2937 (type:transpose)");
  res_2277->getOutput(0)->setName("Node_2937:0");
  auto res_2278=network->addMatrixMultiply(*res_2273->getOutput(0),MatrixOperation::kNONE,*res_2277->getOutput(0),MatrixOperation::kNONE);
  assert(res_2278 && "failed to build Node_2938 (type:matmul)");
  res_2278->getOutput(0)->setName("Node_2938:0");
  auto res_2279=network->addElementWise(*res_2278->getOutput(0),*res_953->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2279 && "failed to build Node_2939 (type:divide)");
  res_2279->getOutput(0)->setName("Node_2939:0");
  auto res_2280=network->addElementWise(*res_2279->getOutput(0),*res_2208->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2280 && "failed to build Node_2940 (type:add)");
  res_2280->getOutput(0)->setName("Node_2940:0");
  auto res_2281=network->addSoftMax(*res_2280->getOutput(0));
  res_2281->setAxes(4);
  assert(res_2281 && "failed to build Node_2941 (type:softmax)");
  res_2281->getOutput(0)->setName("Node_2941:0");
  auto res_2282=network->addMatrixMultiply(*res_2269->getOutput(0),MatrixOperation::kNONE,*res_528->getOutput(0),MatrixOperation::kNONE);
  assert(res_2282 && "failed to build Node_2906 (type:matmul)");
  res_2282->getOutput(0)->setName("Node_2906:0");
  auto res_2283=network->addElementWise(*res_2282->getOutput(0),*res_529->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2283 && "failed to build Node_2906_add (type:add)");
  res_2283->getOutput(0)->setName("Node_2906_add:0");
  auto res_2284=network->addShuffle(*res_2283->getOutput(0));
  res_2284->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2284 && "failed to build Node_2934 (type:reshape)");
  res_2284->getOutput(0)->setName("Node_2934:0");
  auto res_2285=network->addShuffle(*res_2284->getOutput(0));
  Permutation permute_2285;
  permute_2285.order[0]=1;
  permute_2285.order[1]=0;
  permute_2285.order[2]=2;
  res_2285->setFirstTranspose(permute_2285);
  assert(res_2285 && "failed to build Node_2936 (type:transpose)");
  res_2285->getOutput(0)->setName("Node_2936:0");
  auto res_2286=network->addMatrixMultiply(*res_2281->getOutput(0),MatrixOperation::kNONE,*res_2285->getOutput(0),MatrixOperation::kNONE);
  assert(res_2286 && "failed to build Node_2945 (type:matmul)");
  res_2286->getOutput(0)->setName("Node_2945:0");
  auto res_2287=network->addShuffle(*res_2286->getOutput(0));
  Permutation permute_2287;
  permute_2287.order[0]=1;
  permute_2287.order[1]=0;
  permute_2287.order[2]=2;
  res_2287->setFirstTranspose(permute_2287);
  assert(res_2287 && "failed to build Node_2947 (type:transpose)");
  res_2287->getOutput(0)->setName("Node_2947:0");
  auto res_2288=network->addIdentity(*res_2287->getOutput(0));
  assert(res_2288 && "failed to build Node_2948 (type:contiguous)");
  res_2288->getOutput(0)->setName("Node_2948:0");
  auto res_2289=network->addShuffle(*res_2288->getOutput(0));
  res_2289->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2289 && "failed to build Node_2956 (type:reshape)");
  res_2289->getOutput(0)->setName("Node_2956:0");
  auto res_2290=network->addMatrixMultiply(*res_2289->getOutput(0),MatrixOperation::kNONE,*res_530->getOutput(0),MatrixOperation::kNONE);
  assert(res_2290 && "failed to build Node_2961 (type:matmul)");
  res_2290->getOutput(0)->setName("Node_2961:0");
  auto res_2291=network->addElementWise(*res_2290->getOutput(0),*res_531->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2291 && "failed to build Node_2961_add (type:add)");
  res_2291->getOutput(0)->setName("Node_2961_add:0");
  auto res_2292=network->addElementWise(*res_2291->getOutput(0),*res_2269->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2292 && "failed to build Node_2965 (type:add)");
  res_2292->getOutput(0)->setName("Node_2965:0");
  auto res_2293=network->addReduce(*res_2292->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2293 && "failed to build Node_2970_mean (type:mean)");
  res_2293->getOutput(0)->setName("Node_2970_mean:0");
  auto res_2294=network->addElementWise(*res_2292->getOutput(0),*res_2293->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2294 && "failed to build Node_2970_diff (type:sub)");
  res_2294->getOutput(0)->setName("Node_2970_diff:0");
  auto res_2295=network->addElementWise(*res_2294->getOutput(0),*res_1172->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2295 && "failed to build Node_2970_power (type:power)");
  res_2295->getOutput(0)->setName("Node_2970_power:0");
  auto res_2296=network->addReduce(*res_2295->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2296 && "failed to build Node_2970_var (type:mean)");
  res_2296->getOutput(0)->setName("Node_2970_var:0");
  auto res_2297=network->addElementWise(*res_2296->getOutput(0),*res_1046->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2297 && "failed to build Node_2970_modify (type:add)");
  res_2297->getOutput(0)->setName("Node_2970_modify:0");
  auto res_2298=network->addUnary(*res_2297->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2298 && "failed to build Node_2970_sqrt (type:power)");
  res_2298->getOutput(0)->setName("Node_2970_sqrt:0");
  auto res_2299=network->addElementWise(*res_2294->getOutput(0),*res_2298->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2299 && "failed to build Node_2970_rsqrt (type:divide)");
  res_2299->getOutput(0)->setName("Node_2970_rsqrt:0");
  auto res_2300=network->addElementWise(*res_2299->getOutput(0),*res_154->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2300 && "failed to build Node_2970_mul (type:multiply)");
  res_2300->getOutput(0)->setName("Node_2970_mul:0");
  auto res_2301=network->addElementWise(*res_2300->getOutput(0),*res_155->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2301 && "failed to build Node_2970 (type:add)");
  res_2301->getOutput(0)->setName("Node_2970:0");
  auto res_2302=network->addMatrixMultiply(*res_2301->getOutput(0),MatrixOperation::kNONE,*res_532->getOutput(0),MatrixOperation::kNONE);
  assert(res_2302 && "failed to build Node_2974 (type:matmul)");
  res_2302->getOutput(0)->setName("Node_2974:0");
  auto res_2303=network->addElementWise(*res_2302->getOutput(0),*res_533->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2303 && "failed to build Node_2974_add (type:add)");
  res_2303->getOutput(0)->setName("Node_2974_add:0");
  ITensor* inputTensors_2304[1] = {res_2303->getOutput(0)};
  auto plugin_2304=GELU_Plugin("gelu");
  auto res_2304=network->addPluginV2(inputTensors_2304,1,plugin_2304);
  assert(res_2304 && "failed to build Node_2975 (type:gelu)");
  res_2304->getOutput(0)->setName("Node_2975:0");
  auto res_2305=network->addMatrixMultiply(*res_2304->getOutput(0),MatrixOperation::kNONE,*res_534->getOutput(0),MatrixOperation::kNONE);
  assert(res_2305 && "failed to build Node_2980 (type:matmul)");
  res_2305->getOutput(0)->setName("Node_2980:0");
  auto res_2306=network->addElementWise(*res_2305->getOutput(0),*res_535->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2306 && "failed to build Node_2980_add (type:add)");
  res_2306->getOutput(0)->setName("Node_2980_add:0");
  auto res_2307=network->addElementWise(*res_2306->getOutput(0),*res_2301->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2307 && "failed to build Node_2984 (type:add)");
  res_2307->getOutput(0)->setName("Node_2984:0");
  auto res_2308=network->addReduce(*res_2307->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2308 && "failed to build Node_2989_mean (type:mean)");
  res_2308->getOutput(0)->setName("Node_2989_mean:0");
  auto res_2309=network->addElementWise(*res_2307->getOutput(0),*res_2308->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2309 && "failed to build Node_2989_diff (type:sub)");
  res_2309->getOutput(0)->setName("Node_2989_diff:0");
  auto res_2310=network->addElementWise(*res_2309->getOutput(0),*res_1173->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2310 && "failed to build Node_2989_power (type:power)");
  res_2310->getOutput(0)->setName("Node_2989_power:0");
  auto res_2311=network->addReduce(*res_2310->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2311 && "failed to build Node_2989_var (type:mean)");
  res_2311->getOutput(0)->setName("Node_2989_var:0");
  auto res_2312=network->addElementWise(*res_2311->getOutput(0),*res_1047->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2312 && "failed to build Node_2989_modify (type:add)");
  res_2312->getOutput(0)->setName("Node_2989_modify:0");
  auto res_2313=network->addUnary(*res_2312->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2313 && "failed to build Node_2989_sqrt (type:power)");
  res_2313->getOutput(0)->setName("Node_2989_sqrt:0");
  auto res_2314=network->addElementWise(*res_2309->getOutput(0),*res_2313->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2314 && "failed to build Node_2989_rsqrt (type:divide)");
  res_2314->getOutput(0)->setName("Node_2989_rsqrt:0");
  auto res_2315=network->addElementWise(*res_2314->getOutput(0),*res_156->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2315 && "failed to build Node_2989_mul (type:multiply)");
  res_2315->getOutput(0)->setName("Node_2989_mul:0");
  auto res_2316=network->addElementWise(*res_2315->getOutput(0),*res_157->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2316 && "failed to build Node_2989 (type:add)");
  res_2316->getOutput(0)->setName("Node_2989:0");
  auto res_2317=network->addMatrixMultiply(*res_2316->getOutput(0),MatrixOperation::kNONE,*res_536->getOutput(0),MatrixOperation::kNONE);
  assert(res_2317 && "failed to build Node_3004 (type:matmul)");
  res_2317->getOutput(0)->setName("Node_3004:0");
  auto res_2318=network->addElementWise(*res_2317->getOutput(0),*res_537->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2318 && "failed to build Node_3004_add (type:add)");
  res_2318->getOutput(0)->setName("Node_3004_add:0");
  auto res_2319=network->addShuffle(*res_2318->getOutput(0));
  res_2319->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2319 && "failed to build Node_3020 (type:reshape)");
  res_2319->getOutput(0)->setName("Node_3020:0");
  auto res_2320=network->addShuffle(*res_2319->getOutput(0));
  Permutation permute_2320;
  permute_2320.order[0]=1;
  permute_2320.order[1]=0;
  permute_2320.order[2]=2;
  res_2320->setFirstTranspose(permute_2320);
  assert(res_2320 && "failed to build Node_3022 (type:transpose)");
  res_2320->getOutput(0)->setName("Node_3022:0");
  auto res_2321=network->addMatrixMultiply(*res_2316->getOutput(0),MatrixOperation::kNONE,*res_538->getOutput(0),MatrixOperation::kNONE);
  assert(res_2321 && "failed to build Node_3008 (type:matmul)");
  res_2321->getOutput(0)->setName("Node_3008:0");
  auto res_2322=network->addElementWise(*res_2321->getOutput(0),*res_539->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2322 && "failed to build Node_3008_add (type:add)");
  res_2322->getOutput(0)->setName("Node_3008_add:0");
  auto res_2323=network->addShuffle(*res_2322->getOutput(0));
  res_2323->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2323 && "failed to build Node_3030 (type:reshape)");
  res_2323->getOutput(0)->setName("Node_3030:0");
  auto res_2324=network->addShuffle(*res_2323->getOutput(0));
  Permutation permute_2324;
  permute_2324.order[0]=1;
  permute_2324.order[1]=2;
  permute_2324.order[2]=0;
  res_2324->setFirstTranspose(permute_2324);
  assert(res_2324 && "failed to build Node_3043 (type:transpose)");
  res_2324->getOutput(0)->setName("Node_3043:0");
  auto res_2325=network->addMatrixMultiply(*res_2320->getOutput(0),MatrixOperation::kNONE,*res_2324->getOutput(0),MatrixOperation::kNONE);
  assert(res_2325 && "failed to build Node_3044 (type:matmul)");
  res_2325->getOutput(0)->setName("Node_3044:0");
  auto res_2326=network->addElementWise(*res_2325->getOutput(0),*res_954->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2326 && "failed to build Node_3045 (type:divide)");
  res_2326->getOutput(0)->setName("Node_3045:0");
  auto res_2327=network->addElementWise(*res_2326->getOutput(0),*res_2208->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2327 && "failed to build Node_3046 (type:add)");
  res_2327->getOutput(0)->setName("Node_3046:0");
  auto res_2328=network->addSoftMax(*res_2327->getOutput(0));
  res_2328->setAxes(4);
  assert(res_2328 && "failed to build Node_3047 (type:softmax)");
  res_2328->getOutput(0)->setName("Node_3047:0");
  auto res_2329=network->addMatrixMultiply(*res_2316->getOutput(0),MatrixOperation::kNONE,*res_540->getOutput(0),MatrixOperation::kNONE);
  assert(res_2329 && "failed to build Node_3012 (type:matmul)");
  res_2329->getOutput(0)->setName("Node_3012:0");
  auto res_2330=network->addElementWise(*res_2329->getOutput(0),*res_541->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2330 && "failed to build Node_3012_add (type:add)");
  res_2330->getOutput(0)->setName("Node_3012_add:0");
  auto res_2331=network->addShuffle(*res_2330->getOutput(0));
  res_2331->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2331 && "failed to build Node_3040 (type:reshape)");
  res_2331->getOutput(0)->setName("Node_3040:0");
  auto res_2332=network->addShuffle(*res_2331->getOutput(0));
  Permutation permute_2332;
  permute_2332.order[0]=1;
  permute_2332.order[1]=0;
  permute_2332.order[2]=2;
  res_2332->setFirstTranspose(permute_2332);
  assert(res_2332 && "failed to build Node_3042 (type:transpose)");
  res_2332->getOutput(0)->setName("Node_3042:0");
  auto res_2333=network->addMatrixMultiply(*res_2328->getOutput(0),MatrixOperation::kNONE,*res_2332->getOutput(0),MatrixOperation::kNONE);
  assert(res_2333 && "failed to build Node_3051 (type:matmul)");
  res_2333->getOutput(0)->setName("Node_3051:0");
  auto res_2334=network->addShuffle(*res_2333->getOutput(0));
  Permutation permute_2334;
  permute_2334.order[0]=1;
  permute_2334.order[1]=0;
  permute_2334.order[2]=2;
  res_2334->setFirstTranspose(permute_2334);
  assert(res_2334 && "failed to build Node_3053 (type:transpose)");
  res_2334->getOutput(0)->setName("Node_3053:0");
  auto res_2335=network->addIdentity(*res_2334->getOutput(0));
  assert(res_2335 && "failed to build Node_3054 (type:contiguous)");
  res_2335->getOutput(0)->setName("Node_3054:0");
  auto res_2336=network->addShuffle(*res_2335->getOutput(0));
  res_2336->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2336 && "failed to build Node_3062 (type:reshape)");
  res_2336->getOutput(0)->setName("Node_3062:0");
  auto res_2337=network->addMatrixMultiply(*res_2336->getOutput(0),MatrixOperation::kNONE,*res_542->getOutput(0),MatrixOperation::kNONE);
  assert(res_2337 && "failed to build Node_3067 (type:matmul)");
  res_2337->getOutput(0)->setName("Node_3067:0");
  auto res_2338=network->addElementWise(*res_2337->getOutput(0),*res_543->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2338 && "failed to build Node_3067_add (type:add)");
  res_2338->getOutput(0)->setName("Node_3067_add:0");
  auto res_2339=network->addElementWise(*res_2338->getOutput(0),*res_2316->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2339 && "failed to build Node_3071 (type:add)");
  res_2339->getOutput(0)->setName("Node_3071:0");
  auto res_2340=network->addReduce(*res_2339->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2340 && "failed to build Node_3076_mean (type:mean)");
  res_2340->getOutput(0)->setName("Node_3076_mean:0");
  auto res_2341=network->addElementWise(*res_2339->getOutput(0),*res_2340->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2341 && "failed to build Node_3076_diff (type:sub)");
  res_2341->getOutput(0)->setName("Node_3076_diff:0");
  auto res_2342=network->addElementWise(*res_2341->getOutput(0),*res_1174->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2342 && "failed to build Node_3076_power (type:power)");
  res_2342->getOutput(0)->setName("Node_3076_power:0");
  auto res_2343=network->addReduce(*res_2342->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2343 && "failed to build Node_3076_var (type:mean)");
  res_2343->getOutput(0)->setName("Node_3076_var:0");
  auto res_2344=network->addElementWise(*res_2343->getOutput(0),*res_1048->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2344 && "failed to build Node_3076_modify (type:add)");
  res_2344->getOutput(0)->setName("Node_3076_modify:0");
  auto res_2345=network->addUnary(*res_2344->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2345 && "failed to build Node_3076_sqrt (type:power)");
  res_2345->getOutput(0)->setName("Node_3076_sqrt:0");
  auto res_2346=network->addElementWise(*res_2341->getOutput(0),*res_2345->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2346 && "failed to build Node_3076_rsqrt (type:divide)");
  res_2346->getOutput(0)->setName("Node_3076_rsqrt:0");
  auto res_2347=network->addElementWise(*res_2346->getOutput(0),*res_158->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2347 && "failed to build Node_3076_mul (type:multiply)");
  res_2347->getOutput(0)->setName("Node_3076_mul:0");
  auto res_2348=network->addElementWise(*res_2347->getOutput(0),*res_159->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2348 && "failed to build Node_3076 (type:add)");
  res_2348->getOutput(0)->setName("Node_3076:0");
  auto res_2349=network->addMatrixMultiply(*res_2348->getOutput(0),MatrixOperation::kNONE,*res_544->getOutput(0),MatrixOperation::kNONE);
  assert(res_2349 && "failed to build Node_3080 (type:matmul)");
  res_2349->getOutput(0)->setName("Node_3080:0");
  auto res_2350=network->addElementWise(*res_2349->getOutput(0),*res_545->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2350 && "failed to build Node_3080_add (type:add)");
  res_2350->getOutput(0)->setName("Node_3080_add:0");
  ITensor* inputTensors_2351[1] = {res_2350->getOutput(0)};
  auto plugin_2351=GELU_Plugin("gelu");
  auto res_2351=network->addPluginV2(inputTensors_2351,1,plugin_2351);
  assert(res_2351 && "failed to build Node_3081 (type:gelu)");
  res_2351->getOutput(0)->setName("Node_3081:0");
  auto res_2352=network->addMatrixMultiply(*res_2351->getOutput(0),MatrixOperation::kNONE,*res_546->getOutput(0),MatrixOperation::kNONE);
  assert(res_2352 && "failed to build Node_3086 (type:matmul)");
  res_2352->getOutput(0)->setName("Node_3086:0");
  auto res_2353=network->addElementWise(*res_2352->getOutput(0),*res_547->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2353 && "failed to build Node_3086_add (type:add)");
  res_2353->getOutput(0)->setName("Node_3086_add:0");
  auto res_2354=network->addElementWise(*res_2353->getOutput(0),*res_2348->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2354 && "failed to build Node_3090 (type:add)");
  res_2354->getOutput(0)->setName("Node_3090:0");
  auto res_2355=network->addReduce(*res_2354->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2355 && "failed to build Node_3095_mean (type:mean)");
  res_2355->getOutput(0)->setName("Node_3095_mean:0");
  auto res_2356=network->addElementWise(*res_2354->getOutput(0),*res_2355->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2356 && "failed to build Node_3095_diff (type:sub)");
  res_2356->getOutput(0)->setName("Node_3095_diff:0");
  auto res_2357=network->addElementWise(*res_2356->getOutput(0),*res_1175->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2357 && "failed to build Node_3095_power (type:power)");
  res_2357->getOutput(0)->setName("Node_3095_power:0");
  auto res_2358=network->addReduce(*res_2357->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2358 && "failed to build Node_3095_var (type:mean)");
  res_2358->getOutput(0)->setName("Node_3095_var:0");
  auto res_2359=network->addElementWise(*res_2358->getOutput(0),*res_1049->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2359 && "failed to build Node_3095_modify (type:add)");
  res_2359->getOutput(0)->setName("Node_3095_modify:0");
  auto res_2360=network->addUnary(*res_2359->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2360 && "failed to build Node_3095_sqrt (type:power)");
  res_2360->getOutput(0)->setName("Node_3095_sqrt:0");
  auto res_2361=network->addElementWise(*res_2356->getOutput(0),*res_2360->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2361 && "failed to build Node_3095_rsqrt (type:divide)");
  res_2361->getOutput(0)->setName("Node_3095_rsqrt:0");
  auto res_2362=network->addElementWise(*res_2361->getOutput(0),*res_160->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2362 && "failed to build Node_3095_mul (type:multiply)");
  res_2362->getOutput(0)->setName("Node_3095_mul:0");
  auto res_2363=network->addElementWise(*res_2362->getOutput(0),*res_161->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2363 && "failed to build Node_3095 (type:add)");
  res_2363->getOutput(0)->setName("Node_3095:0");
  auto res_2364=network->addMatrixMultiply(*res_2363->getOutput(0),MatrixOperation::kNONE,*res_548->getOutput(0),MatrixOperation::kNONE);
  assert(res_2364 && "failed to build Node_3110 (type:matmul)");
  res_2364->getOutput(0)->setName("Node_3110:0");
  auto res_2365=network->addElementWise(*res_2364->getOutput(0),*res_549->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2365 && "failed to build Node_3110_add (type:add)");
  res_2365->getOutput(0)->setName("Node_3110_add:0");
  auto res_2366=network->addShuffle(*res_2365->getOutput(0));
  res_2366->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2366 && "failed to build Node_3126 (type:reshape)");
  res_2366->getOutput(0)->setName("Node_3126:0");
  auto res_2367=network->addShuffle(*res_2366->getOutput(0));
  Permutation permute_2367;
  permute_2367.order[0]=1;
  permute_2367.order[1]=0;
  permute_2367.order[2]=2;
  res_2367->setFirstTranspose(permute_2367);
  assert(res_2367 && "failed to build Node_3128 (type:transpose)");
  res_2367->getOutput(0)->setName("Node_3128:0");
  auto res_2368=network->addMatrixMultiply(*res_2363->getOutput(0),MatrixOperation::kNONE,*res_550->getOutput(0),MatrixOperation::kNONE);
  assert(res_2368 && "failed to build Node_3114 (type:matmul)");
  res_2368->getOutput(0)->setName("Node_3114:0");
  auto res_2369=network->addElementWise(*res_2368->getOutput(0),*res_551->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2369 && "failed to build Node_3114_add (type:add)");
  res_2369->getOutput(0)->setName("Node_3114_add:0");
  auto res_2370=network->addShuffle(*res_2369->getOutput(0));
  res_2370->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2370 && "failed to build Node_3136 (type:reshape)");
  res_2370->getOutput(0)->setName("Node_3136:0");
  auto res_2371=network->addShuffle(*res_2370->getOutput(0));
  Permutation permute_2371;
  permute_2371.order[0]=1;
  permute_2371.order[1]=2;
  permute_2371.order[2]=0;
  res_2371->setFirstTranspose(permute_2371);
  assert(res_2371 && "failed to build Node_3149 (type:transpose)");
  res_2371->getOutput(0)->setName("Node_3149:0");
  auto res_2372=network->addMatrixMultiply(*res_2367->getOutput(0),MatrixOperation::kNONE,*res_2371->getOutput(0),MatrixOperation::kNONE);
  assert(res_2372 && "failed to build Node_3150 (type:matmul)");
  res_2372->getOutput(0)->setName("Node_3150:0");
  auto res_2373=network->addElementWise(*res_2372->getOutput(0),*res_955->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2373 && "failed to build Node_3151 (type:divide)");
  res_2373->getOutput(0)->setName("Node_3151:0");
  auto res_2374=network->addElementWise(*res_2373->getOutput(0),*res_2208->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2374 && "failed to build Node_3152 (type:add)");
  res_2374->getOutput(0)->setName("Node_3152:0");
  auto res_2375=network->addSoftMax(*res_2374->getOutput(0));
  res_2375->setAxes(4);
  assert(res_2375 && "failed to build Node_3153 (type:softmax)");
  res_2375->getOutput(0)->setName("Node_3153:0");
  auto res_2376=network->addMatrixMultiply(*res_2363->getOutput(0),MatrixOperation::kNONE,*res_552->getOutput(0),MatrixOperation::kNONE);
  assert(res_2376 && "failed to build Node_3118 (type:matmul)");
  res_2376->getOutput(0)->setName("Node_3118:0");
  auto res_2377=network->addElementWise(*res_2376->getOutput(0),*res_553->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2377 && "failed to build Node_3118_add (type:add)");
  res_2377->getOutput(0)->setName("Node_3118_add:0");
  auto res_2378=network->addShuffle(*res_2377->getOutput(0));
  res_2378->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2378 && "failed to build Node_3146 (type:reshape)");
  res_2378->getOutput(0)->setName("Node_3146:0");
  auto res_2379=network->addShuffle(*res_2378->getOutput(0));
  Permutation permute_2379;
  permute_2379.order[0]=1;
  permute_2379.order[1]=0;
  permute_2379.order[2]=2;
  res_2379->setFirstTranspose(permute_2379);
  assert(res_2379 && "failed to build Node_3148 (type:transpose)");
  res_2379->getOutput(0)->setName("Node_3148:0");
  auto res_2380=network->addMatrixMultiply(*res_2375->getOutput(0),MatrixOperation::kNONE,*res_2379->getOutput(0),MatrixOperation::kNONE);
  assert(res_2380 && "failed to build Node_3157 (type:matmul)");
  res_2380->getOutput(0)->setName("Node_3157:0");
  auto res_2381=network->addShuffle(*res_2380->getOutput(0));
  Permutation permute_2381;
  permute_2381.order[0]=1;
  permute_2381.order[1]=0;
  permute_2381.order[2]=2;
  res_2381->setFirstTranspose(permute_2381);
  assert(res_2381 && "failed to build Node_3159 (type:transpose)");
  res_2381->getOutput(0)->setName("Node_3159:0");
  auto res_2382=network->addIdentity(*res_2381->getOutput(0));
  assert(res_2382 && "failed to build Node_3160 (type:contiguous)");
  res_2382->getOutput(0)->setName("Node_3160:0");
  auto res_2383=network->addShuffle(*res_2382->getOutput(0));
  res_2383->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2383 && "failed to build Node_3168 (type:reshape)");
  res_2383->getOutput(0)->setName("Node_3168:0");
  auto res_2384=network->addMatrixMultiply(*res_2383->getOutput(0),MatrixOperation::kNONE,*res_554->getOutput(0),MatrixOperation::kNONE);
  assert(res_2384 && "failed to build Node_3173 (type:matmul)");
  res_2384->getOutput(0)->setName("Node_3173:0");
  auto res_2385=network->addElementWise(*res_2384->getOutput(0),*res_555->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2385 && "failed to build Node_3173_add (type:add)");
  res_2385->getOutput(0)->setName("Node_3173_add:0");
  auto res_2386=network->addElementWise(*res_2385->getOutput(0),*res_2363->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2386 && "failed to build Node_3177 (type:add)");
  res_2386->getOutput(0)->setName("Node_3177:0");
  auto res_2387=network->addReduce(*res_2386->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2387 && "failed to build Node_3182_mean (type:mean)");
  res_2387->getOutput(0)->setName("Node_3182_mean:0");
  auto res_2388=network->addElementWise(*res_2386->getOutput(0),*res_2387->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2388 && "failed to build Node_3182_diff (type:sub)");
  res_2388->getOutput(0)->setName("Node_3182_diff:0");
  auto res_2389=network->addElementWise(*res_2388->getOutput(0),*res_1176->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2389 && "failed to build Node_3182_power (type:power)");
  res_2389->getOutput(0)->setName("Node_3182_power:0");
  auto res_2390=network->addReduce(*res_2389->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2390 && "failed to build Node_3182_var (type:mean)");
  res_2390->getOutput(0)->setName("Node_3182_var:0");
  auto res_2391=network->addElementWise(*res_2390->getOutput(0),*res_1050->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2391 && "failed to build Node_3182_modify (type:add)");
  res_2391->getOutput(0)->setName("Node_3182_modify:0");
  auto res_2392=network->addUnary(*res_2391->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2392 && "failed to build Node_3182_sqrt (type:power)");
  res_2392->getOutput(0)->setName("Node_3182_sqrt:0");
  auto res_2393=network->addElementWise(*res_2388->getOutput(0),*res_2392->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2393 && "failed to build Node_3182_rsqrt (type:divide)");
  res_2393->getOutput(0)->setName("Node_3182_rsqrt:0");
  auto res_2394=network->addElementWise(*res_2393->getOutput(0),*res_162->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2394 && "failed to build Node_3182_mul (type:multiply)");
  res_2394->getOutput(0)->setName("Node_3182_mul:0");
  auto res_2395=network->addElementWise(*res_2394->getOutput(0),*res_163->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2395 && "failed to build Node_3182 (type:add)");
  res_2395->getOutput(0)->setName("Node_3182:0");
  auto res_2396=network->addMatrixMultiply(*res_2395->getOutput(0),MatrixOperation::kNONE,*res_556->getOutput(0),MatrixOperation::kNONE);
  assert(res_2396 && "failed to build Node_3186 (type:matmul)");
  res_2396->getOutput(0)->setName("Node_3186:0");
  auto res_2397=network->addElementWise(*res_2396->getOutput(0),*res_557->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2397 && "failed to build Node_3186_add (type:add)");
  res_2397->getOutput(0)->setName("Node_3186_add:0");
  ITensor* inputTensors_2398[1] = {res_2397->getOutput(0)};
  auto plugin_2398=GELU_Plugin("gelu");
  auto res_2398=network->addPluginV2(inputTensors_2398,1,plugin_2398);
  assert(res_2398 && "failed to build Node_3187 (type:gelu)");
  res_2398->getOutput(0)->setName("Node_3187:0");
  auto res_2399=network->addMatrixMultiply(*res_2398->getOutput(0),MatrixOperation::kNONE,*res_558->getOutput(0),MatrixOperation::kNONE);
  assert(res_2399 && "failed to build Node_3192 (type:matmul)");
  res_2399->getOutput(0)->setName("Node_3192:0");
  auto res_2400=network->addElementWise(*res_2399->getOutput(0),*res_559->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2400 && "failed to build Node_3192_add (type:add)");
  res_2400->getOutput(0)->setName("Node_3192_add:0");
  auto res_2401=network->addElementWise(*res_2400->getOutput(0),*res_2395->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2401 && "failed to build Node_3196 (type:add)");
  res_2401->getOutput(0)->setName("Node_3196:0");
  auto res_2402=network->addReduce(*res_2401->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2402 && "failed to build Node_3201_mean (type:mean)");
  res_2402->getOutput(0)->setName("Node_3201_mean:0");
  auto res_2403=network->addElementWise(*res_2401->getOutput(0),*res_2402->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2403 && "failed to build Node_3201_diff (type:sub)");
  res_2403->getOutput(0)->setName("Node_3201_diff:0");
  auto res_2404=network->addElementWise(*res_2403->getOutput(0),*res_1177->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2404 && "failed to build Node_3201_power (type:power)");
  res_2404->getOutput(0)->setName("Node_3201_power:0");
  auto res_2405=network->addReduce(*res_2404->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2405 && "failed to build Node_3201_var (type:mean)");
  res_2405->getOutput(0)->setName("Node_3201_var:0");
  auto res_2406=network->addElementWise(*res_2405->getOutput(0),*res_1051->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2406 && "failed to build Node_3201_modify (type:add)");
  res_2406->getOutput(0)->setName("Node_3201_modify:0");
  auto res_2407=network->addUnary(*res_2406->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2407 && "failed to build Node_3201_sqrt (type:power)");
  res_2407->getOutput(0)->setName("Node_3201_sqrt:0");
  auto res_2408=network->addElementWise(*res_2403->getOutput(0),*res_2407->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2408 && "failed to build Node_3201_rsqrt (type:divide)");
  res_2408->getOutput(0)->setName("Node_3201_rsqrt:0");
  auto res_2409=network->addElementWise(*res_2408->getOutput(0),*res_164->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2409 && "failed to build Node_3201_mul (type:multiply)");
  res_2409->getOutput(0)->setName("Node_3201_mul:0");
  auto res_2410=network->addElementWise(*res_2409->getOutput(0),*res_165->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2410 && "failed to build Node_3201 (type:add)");
  res_2410->getOutput(0)->setName("Node_3201:0");
  auto res_2411=network->addMatrixMultiply(*res_2410->getOutput(0),MatrixOperation::kNONE,*res_560->getOutput(0),MatrixOperation::kNONE);
  assert(res_2411 && "failed to build Node_3216 (type:matmul)");
  res_2411->getOutput(0)->setName("Node_3216:0");
  auto res_2412=network->addElementWise(*res_2411->getOutput(0),*res_561->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2412 && "failed to build Node_3216_add (type:add)");
  res_2412->getOutput(0)->setName("Node_3216_add:0");
  auto res_2413=network->addShuffle(*res_2412->getOutput(0));
  res_2413->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2413 && "failed to build Node_3232 (type:reshape)");
  res_2413->getOutput(0)->setName("Node_3232:0");
  auto res_2414=network->addShuffle(*res_2413->getOutput(0));
  Permutation permute_2414;
  permute_2414.order[0]=1;
  permute_2414.order[1]=0;
  permute_2414.order[2]=2;
  res_2414->setFirstTranspose(permute_2414);
  assert(res_2414 && "failed to build Node_3234 (type:transpose)");
  res_2414->getOutput(0)->setName("Node_3234:0");
  auto res_2415=network->addMatrixMultiply(*res_2410->getOutput(0),MatrixOperation::kNONE,*res_562->getOutput(0),MatrixOperation::kNONE);
  assert(res_2415 && "failed to build Node_3220 (type:matmul)");
  res_2415->getOutput(0)->setName("Node_3220:0");
  auto res_2416=network->addElementWise(*res_2415->getOutput(0),*res_563->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2416 && "failed to build Node_3220_add (type:add)");
  res_2416->getOutput(0)->setName("Node_3220_add:0");
  auto res_2417=network->addShuffle(*res_2416->getOutput(0));
  res_2417->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2417 && "failed to build Node_3242 (type:reshape)");
  res_2417->getOutput(0)->setName("Node_3242:0");
  auto res_2418=network->addShuffle(*res_2417->getOutput(0));
  Permutation permute_2418;
  permute_2418.order[0]=1;
  permute_2418.order[1]=2;
  permute_2418.order[2]=0;
  res_2418->setFirstTranspose(permute_2418);
  assert(res_2418 && "failed to build Node_3255 (type:transpose)");
  res_2418->getOutput(0)->setName("Node_3255:0");
  auto res_2419=network->addMatrixMultiply(*res_2414->getOutput(0),MatrixOperation::kNONE,*res_2418->getOutput(0),MatrixOperation::kNONE);
  assert(res_2419 && "failed to build Node_3256 (type:matmul)");
  res_2419->getOutput(0)->setName("Node_3256:0");
  auto res_2420=network->addElementWise(*res_2419->getOutput(0),*res_956->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2420 && "failed to build Node_3257 (type:divide)");
  res_2420->getOutput(0)->setName("Node_3257:0");
  auto res_2421=network->addElementWise(*res_2420->getOutput(0),*res_2208->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2421 && "failed to build Node_3258 (type:add)");
  res_2421->getOutput(0)->setName("Node_3258:0");
  auto res_2422=network->addSoftMax(*res_2421->getOutput(0));
  res_2422->setAxes(4);
  assert(res_2422 && "failed to build Node_3259 (type:softmax)");
  res_2422->getOutput(0)->setName("Node_3259:0");
  auto res_2423=network->addMatrixMultiply(*res_2410->getOutput(0),MatrixOperation::kNONE,*res_564->getOutput(0),MatrixOperation::kNONE);
  assert(res_2423 && "failed to build Node_3224 (type:matmul)");
  res_2423->getOutput(0)->setName("Node_3224:0");
  auto res_2424=network->addElementWise(*res_2423->getOutput(0),*res_565->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2424 && "failed to build Node_3224_add (type:add)");
  res_2424->getOutput(0)->setName("Node_3224_add:0");
  auto res_2425=network->addShuffle(*res_2424->getOutput(0));
  res_2425->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2425 && "failed to build Node_3252 (type:reshape)");
  res_2425->getOutput(0)->setName("Node_3252:0");
  auto res_2426=network->addShuffle(*res_2425->getOutput(0));
  Permutation permute_2426;
  permute_2426.order[0]=1;
  permute_2426.order[1]=0;
  permute_2426.order[2]=2;
  res_2426->setFirstTranspose(permute_2426);
  assert(res_2426 && "failed to build Node_3254 (type:transpose)");
  res_2426->getOutput(0)->setName("Node_3254:0");
  auto res_2427=network->addMatrixMultiply(*res_2422->getOutput(0),MatrixOperation::kNONE,*res_2426->getOutput(0),MatrixOperation::kNONE);
  assert(res_2427 && "failed to build Node_3263 (type:matmul)");
  res_2427->getOutput(0)->setName("Node_3263:0");
  auto res_2428=network->addShuffle(*res_2427->getOutput(0));
  Permutation permute_2428;
  permute_2428.order[0]=1;
  permute_2428.order[1]=0;
  permute_2428.order[2]=2;
  res_2428->setFirstTranspose(permute_2428);
  assert(res_2428 && "failed to build Node_3265 (type:transpose)");
  res_2428->getOutput(0)->setName("Node_3265:0");
  auto res_2429=network->addIdentity(*res_2428->getOutput(0));
  assert(res_2429 && "failed to build Node_3266 (type:contiguous)");
  res_2429->getOutput(0)->setName("Node_3266:0");
  auto res_2430=network->addShuffle(*res_2429->getOutput(0));
  res_2430->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2430 && "failed to build Node_3274 (type:reshape)");
  res_2430->getOutput(0)->setName("Node_3274:0");
  auto res_2431=network->addMatrixMultiply(*res_2430->getOutput(0),MatrixOperation::kNONE,*res_566->getOutput(0),MatrixOperation::kNONE);
  assert(res_2431 && "failed to build Node_3279 (type:matmul)");
  res_2431->getOutput(0)->setName("Node_3279:0");
  auto res_2432=network->addElementWise(*res_2431->getOutput(0),*res_567->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2432 && "failed to build Node_3279_add (type:add)");
  res_2432->getOutput(0)->setName("Node_3279_add:0");
  auto res_2433=network->addElementWise(*res_2432->getOutput(0),*res_2410->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2433 && "failed to build Node_3283 (type:add)");
  res_2433->getOutput(0)->setName("Node_3283:0");
  auto res_2434=network->addReduce(*res_2433->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2434 && "failed to build Node_3288_mean (type:mean)");
  res_2434->getOutput(0)->setName("Node_3288_mean:0");
  auto res_2435=network->addElementWise(*res_2433->getOutput(0),*res_2434->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2435 && "failed to build Node_3288_diff (type:sub)");
  res_2435->getOutput(0)->setName("Node_3288_diff:0");
  auto res_2436=network->addElementWise(*res_2435->getOutput(0),*res_1178->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2436 && "failed to build Node_3288_power (type:power)");
  res_2436->getOutput(0)->setName("Node_3288_power:0");
  auto res_2437=network->addReduce(*res_2436->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2437 && "failed to build Node_3288_var (type:mean)");
  res_2437->getOutput(0)->setName("Node_3288_var:0");
  auto res_2438=network->addElementWise(*res_2437->getOutput(0),*res_1052->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2438 && "failed to build Node_3288_modify (type:add)");
  res_2438->getOutput(0)->setName("Node_3288_modify:0");
  auto res_2439=network->addUnary(*res_2438->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2439 && "failed to build Node_3288_sqrt (type:power)");
  res_2439->getOutput(0)->setName("Node_3288_sqrt:0");
  auto res_2440=network->addElementWise(*res_2435->getOutput(0),*res_2439->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2440 && "failed to build Node_3288_rsqrt (type:divide)");
  res_2440->getOutput(0)->setName("Node_3288_rsqrt:0");
  auto res_2441=network->addElementWise(*res_2440->getOutput(0),*res_166->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2441 && "failed to build Node_3288_mul (type:multiply)");
  res_2441->getOutput(0)->setName("Node_3288_mul:0");
  auto res_2442=network->addElementWise(*res_2441->getOutput(0),*res_167->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2442 && "failed to build Node_3288 (type:add)");
  res_2442->getOutput(0)->setName("Node_3288:0");
  auto res_2443=network->addMatrixMultiply(*res_2442->getOutput(0),MatrixOperation::kNONE,*res_568->getOutput(0),MatrixOperation::kNONE);
  assert(res_2443 && "failed to build Node_3292 (type:matmul)");
  res_2443->getOutput(0)->setName("Node_3292:0");
  auto res_2444=network->addElementWise(*res_2443->getOutput(0),*res_569->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2444 && "failed to build Node_3292_add (type:add)");
  res_2444->getOutput(0)->setName("Node_3292_add:0");
  ITensor* inputTensors_2445[1] = {res_2444->getOutput(0)};
  auto plugin_2445=GELU_Plugin("gelu");
  auto res_2445=network->addPluginV2(inputTensors_2445,1,plugin_2445);
  assert(res_2445 && "failed to build Node_3293 (type:gelu)");
  res_2445->getOutput(0)->setName("Node_3293:0");
  auto res_2446=network->addMatrixMultiply(*res_2445->getOutput(0),MatrixOperation::kNONE,*res_570->getOutput(0),MatrixOperation::kNONE);
  assert(res_2446 && "failed to build Node_3298 (type:matmul)");
  res_2446->getOutput(0)->setName("Node_3298:0");
  auto res_2447=network->addElementWise(*res_2446->getOutput(0),*res_571->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2447 && "failed to build Node_3298_add (type:add)");
  res_2447->getOutput(0)->setName("Node_3298_add:0");
  auto res_2448=network->addElementWise(*res_2447->getOutput(0),*res_2442->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2448 && "failed to build Node_3302 (type:add)");
  res_2448->getOutput(0)->setName("Node_3302:0");
  auto res_2449=network->addReduce(*res_2448->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2449 && "failed to build Node_3307_mean (type:mean)");
  res_2449->getOutput(0)->setName("Node_3307_mean:0");
  auto res_2450=network->addElementWise(*res_2448->getOutput(0),*res_2449->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2450 && "failed to build Node_3307_diff (type:sub)");
  res_2450->getOutput(0)->setName("Node_3307_diff:0");
  auto res_2451=network->addElementWise(*res_2450->getOutput(0),*res_1179->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2451 && "failed to build Node_3307_power (type:power)");
  res_2451->getOutput(0)->setName("Node_3307_power:0");
  auto res_2452=network->addReduce(*res_2451->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2452 && "failed to build Node_3307_var (type:mean)");
  res_2452->getOutput(0)->setName("Node_3307_var:0");
  auto res_2453=network->addElementWise(*res_2452->getOutput(0),*res_1053->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2453 && "failed to build Node_3307_modify (type:add)");
  res_2453->getOutput(0)->setName("Node_3307_modify:0");
  auto res_2454=network->addUnary(*res_2453->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2454 && "failed to build Node_3307_sqrt (type:power)");
  res_2454->getOutput(0)->setName("Node_3307_sqrt:0");
  auto res_2455=network->addElementWise(*res_2450->getOutput(0),*res_2454->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2455 && "failed to build Node_3307_rsqrt (type:divide)");
  res_2455->getOutput(0)->setName("Node_3307_rsqrt:0");
  auto res_2456=network->addElementWise(*res_2455->getOutput(0),*res_168->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2456 && "failed to build Node_3307_mul (type:multiply)");
  res_2456->getOutput(0)->setName("Node_3307_mul:0");
  auto res_2457=network->addElementWise(*res_2456->getOutput(0),*res_169->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2457 && "failed to build Node_3307 (type:add)");
  res_2457->getOutput(0)->setName("Node_3307:0");
  auto res_2458=network->addMatrixMultiply(*res_2457->getOutput(0),MatrixOperation::kNONE,*res_572->getOutput(0),MatrixOperation::kNONE);
  assert(res_2458 && "failed to build Node_3322 (type:matmul)");
  res_2458->getOutput(0)->setName("Node_3322:0");
  auto res_2459=network->addElementWise(*res_2458->getOutput(0),*res_573->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2459 && "failed to build Node_3322_add (type:add)");
  res_2459->getOutput(0)->setName("Node_3322_add:0");
  auto res_2460=network->addShuffle(*res_2459->getOutput(0));
  res_2460->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2460 && "failed to build Node_3338 (type:reshape)");
  res_2460->getOutput(0)->setName("Node_3338:0");
  auto res_2461=network->addShuffle(*res_2460->getOutput(0));
  Permutation permute_2461;
  permute_2461.order[0]=1;
  permute_2461.order[1]=0;
  permute_2461.order[2]=2;
  res_2461->setFirstTranspose(permute_2461);
  assert(res_2461 && "failed to build Node_3340 (type:transpose)");
  res_2461->getOutput(0)->setName("Node_3340:0");
  auto res_2462=network->addMatrixMultiply(*res_2457->getOutput(0),MatrixOperation::kNONE,*res_574->getOutput(0),MatrixOperation::kNONE);
  assert(res_2462 && "failed to build Node_3326 (type:matmul)");
  res_2462->getOutput(0)->setName("Node_3326:0");
  auto res_2463=network->addElementWise(*res_2462->getOutput(0),*res_575->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2463 && "failed to build Node_3326_add (type:add)");
  res_2463->getOutput(0)->setName("Node_3326_add:0");
  auto res_2464=network->addShuffle(*res_2463->getOutput(0));
  res_2464->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2464 && "failed to build Node_3348 (type:reshape)");
  res_2464->getOutput(0)->setName("Node_3348:0");
  auto res_2465=network->addShuffle(*res_2464->getOutput(0));
  Permutation permute_2465;
  permute_2465.order[0]=1;
  permute_2465.order[1]=2;
  permute_2465.order[2]=0;
  res_2465->setFirstTranspose(permute_2465);
  assert(res_2465 && "failed to build Node_3361 (type:transpose)");
  res_2465->getOutput(0)->setName("Node_3361:0");
  auto res_2466=network->addMatrixMultiply(*res_2461->getOutput(0),MatrixOperation::kNONE,*res_2465->getOutput(0),MatrixOperation::kNONE);
  assert(res_2466 && "failed to build Node_3362 (type:matmul)");
  res_2466->getOutput(0)->setName("Node_3362:0");
  auto res_2467=network->addElementWise(*res_2466->getOutput(0),*res_957->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2467 && "failed to build Node_3363 (type:divide)");
  res_2467->getOutput(0)->setName("Node_3363:0");
  auto res_2468=network->addElementWise(*res_2467->getOutput(0),*res_2208->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2468 && "failed to build Node_3364 (type:add)");
  res_2468->getOutput(0)->setName("Node_3364:0");
  auto res_2469=network->addSoftMax(*res_2468->getOutput(0));
  res_2469->setAxes(4);
  assert(res_2469 && "failed to build Node_3365 (type:softmax)");
  res_2469->getOutput(0)->setName("Node_3365:0");
  auto res_2470=network->addMatrixMultiply(*res_2457->getOutput(0),MatrixOperation::kNONE,*res_576->getOutput(0),MatrixOperation::kNONE);
  assert(res_2470 && "failed to build Node_3330 (type:matmul)");
  res_2470->getOutput(0)->setName("Node_3330:0");
  auto res_2471=network->addElementWise(*res_2470->getOutput(0),*res_577->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2471 && "failed to build Node_3330_add (type:add)");
  res_2471->getOutput(0)->setName("Node_3330_add:0");
  auto res_2472=network->addShuffle(*res_2471->getOutput(0));
  res_2472->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2472 && "failed to build Node_3358 (type:reshape)");
  res_2472->getOutput(0)->setName("Node_3358:0");
  auto res_2473=network->addShuffle(*res_2472->getOutput(0));
  Permutation permute_2473;
  permute_2473.order[0]=1;
  permute_2473.order[1]=0;
  permute_2473.order[2]=2;
  res_2473->setFirstTranspose(permute_2473);
  assert(res_2473 && "failed to build Node_3360 (type:transpose)");
  res_2473->getOutput(0)->setName("Node_3360:0");
  auto res_2474=network->addMatrixMultiply(*res_2469->getOutput(0),MatrixOperation::kNONE,*res_2473->getOutput(0),MatrixOperation::kNONE);
  assert(res_2474 && "failed to build Node_3369 (type:matmul)");
  res_2474->getOutput(0)->setName("Node_3369:0");
  auto res_2475=network->addShuffle(*res_2474->getOutput(0));
  Permutation permute_2475;
  permute_2475.order[0]=1;
  permute_2475.order[1]=0;
  permute_2475.order[2]=2;
  res_2475->setFirstTranspose(permute_2475);
  assert(res_2475 && "failed to build Node_3371 (type:transpose)");
  res_2475->getOutput(0)->setName("Node_3371:0");
  auto res_2476=network->addIdentity(*res_2475->getOutput(0));
  assert(res_2476 && "failed to build Node_3372 (type:contiguous)");
  res_2476->getOutput(0)->setName("Node_3372:0");
  auto res_2477=network->addShuffle(*res_2476->getOutput(0));
  res_2477->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2477 && "failed to build Node_3380 (type:reshape)");
  res_2477->getOutput(0)->setName("Node_3380:0");
  auto res_2478=network->addMatrixMultiply(*res_2477->getOutput(0),MatrixOperation::kNONE,*res_578->getOutput(0),MatrixOperation::kNONE);
  assert(res_2478 && "failed to build Node_3385 (type:matmul)");
  res_2478->getOutput(0)->setName("Node_3385:0");
  auto res_2479=network->addElementWise(*res_2478->getOutput(0),*res_579->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2479 && "failed to build Node_3385_add (type:add)");
  res_2479->getOutput(0)->setName("Node_3385_add:0");
  auto res_2480=network->addElementWise(*res_2479->getOutput(0),*res_2457->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2480 && "failed to build Node_3389 (type:add)");
  res_2480->getOutput(0)->setName("Node_3389:0");
  auto res_2481=network->addReduce(*res_2480->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2481 && "failed to build Node_3394_mean (type:mean)");
  res_2481->getOutput(0)->setName("Node_3394_mean:0");
  auto res_2482=network->addElementWise(*res_2480->getOutput(0),*res_2481->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2482 && "failed to build Node_3394_diff (type:sub)");
  res_2482->getOutput(0)->setName("Node_3394_diff:0");
  auto res_2483=network->addElementWise(*res_2482->getOutput(0),*res_1180->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2483 && "failed to build Node_3394_power (type:power)");
  res_2483->getOutput(0)->setName("Node_3394_power:0");
  auto res_2484=network->addReduce(*res_2483->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2484 && "failed to build Node_3394_var (type:mean)");
  res_2484->getOutput(0)->setName("Node_3394_var:0");
  auto res_2485=network->addElementWise(*res_2484->getOutput(0),*res_1054->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2485 && "failed to build Node_3394_modify (type:add)");
  res_2485->getOutput(0)->setName("Node_3394_modify:0");
  auto res_2486=network->addUnary(*res_2485->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2486 && "failed to build Node_3394_sqrt (type:power)");
  res_2486->getOutput(0)->setName("Node_3394_sqrt:0");
  auto res_2487=network->addElementWise(*res_2482->getOutput(0),*res_2486->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2487 && "failed to build Node_3394_rsqrt (type:divide)");
  res_2487->getOutput(0)->setName("Node_3394_rsqrt:0");
  auto res_2488=network->addElementWise(*res_2487->getOutput(0),*res_170->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2488 && "failed to build Node_3394_mul (type:multiply)");
  res_2488->getOutput(0)->setName("Node_3394_mul:0");
  auto res_2489=network->addElementWise(*res_2488->getOutput(0),*res_171->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2489 && "failed to build Node_3394 (type:add)");
  res_2489->getOutput(0)->setName("Node_3394:0");
  auto res_2490=network->addMatrixMultiply(*res_2489->getOutput(0),MatrixOperation::kNONE,*res_580->getOutput(0),MatrixOperation::kNONE);
  assert(res_2490 && "failed to build Node_3398 (type:matmul)");
  res_2490->getOutput(0)->setName("Node_3398:0");
  auto res_2491=network->addElementWise(*res_2490->getOutput(0),*res_581->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2491 && "failed to build Node_3398_add (type:add)");
  res_2491->getOutput(0)->setName("Node_3398_add:0");
  ITensor* inputTensors_2492[1] = {res_2491->getOutput(0)};
  auto plugin_2492=GELU_Plugin("gelu");
  auto res_2492=network->addPluginV2(inputTensors_2492,1,plugin_2492);
  assert(res_2492 && "failed to build Node_3399 (type:gelu)");
  res_2492->getOutput(0)->setName("Node_3399:0");
  auto res_2493=network->addMatrixMultiply(*res_2492->getOutput(0),MatrixOperation::kNONE,*res_582->getOutput(0),MatrixOperation::kNONE);
  assert(res_2493 && "failed to build Node_3404 (type:matmul)");
  res_2493->getOutput(0)->setName("Node_3404:0");
  auto res_2494=network->addElementWise(*res_2493->getOutput(0),*res_583->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2494 && "failed to build Node_3404_add (type:add)");
  res_2494->getOutput(0)->setName("Node_3404_add:0");
  auto res_2495=network->addElementWise(*res_2494->getOutput(0),*res_2489->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2495 && "failed to build Node_3408 (type:add)");
  res_2495->getOutput(0)->setName("Node_3408:0");
  auto res_2496=network->addReduce(*res_2495->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2496 && "failed to build Node_3413_mean (type:mean)");
  res_2496->getOutput(0)->setName("Node_3413_mean:0");
  auto res_2497=network->addElementWise(*res_2495->getOutput(0),*res_2496->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2497 && "failed to build Node_3413_diff (type:sub)");
  res_2497->getOutput(0)->setName("Node_3413_diff:0");
  auto res_2498=network->addElementWise(*res_2497->getOutput(0),*res_1181->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2498 && "failed to build Node_3413_power (type:power)");
  res_2498->getOutput(0)->setName("Node_3413_power:0");
  auto res_2499=network->addReduce(*res_2498->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2499 && "failed to build Node_3413_var (type:mean)");
  res_2499->getOutput(0)->setName("Node_3413_var:0");
  auto res_2500=network->addElementWise(*res_2499->getOutput(0),*res_1055->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2500 && "failed to build Node_3413_modify (type:add)");
  res_2500->getOutput(0)->setName("Node_3413_modify:0");
  auto res_2501=network->addUnary(*res_2500->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2501 && "failed to build Node_3413_sqrt (type:power)");
  res_2501->getOutput(0)->setName("Node_3413_sqrt:0");
  auto res_2502=network->addElementWise(*res_2497->getOutput(0),*res_2501->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2502 && "failed to build Node_3413_rsqrt (type:divide)");
  res_2502->getOutput(0)->setName("Node_3413_rsqrt:0");
  auto res_2503=network->addElementWise(*res_2502->getOutput(0),*res_172->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2503 && "failed to build Node_3413_mul (type:multiply)");
  res_2503->getOutput(0)->setName("Node_3413_mul:0");
  auto res_2504=network->addElementWise(*res_2503->getOutput(0),*res_173->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2504 && "failed to build Node_3413 (type:add)");
  res_2504->getOutput(0)->setName("Node_3413:0");
  auto res_2505=network->addSlice(*res_2504->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_2505 && "failed to build Node_3417 (type:dlr_slice)");
  res_2505->getOutput(0)->setName("Node_3417:0");
  auto res_2506=network->addShuffle(*res_2505->getOutput(0));
  res_2506->setReshapeDimensions(Dims3{192,1,1});
  assert(res_2506 && "failed to build Node_3419_reshape (type:reshape)");
  res_2506->getOutput(0)->setName("Node_3419_reshape:0");
  auto res_2507=network->addFullyConnected(*res_2506->getOutput(0),192,mWeightsMap["weight_2507"],mWeightsMap["bias_2507"]);
  assert(res_2507 && "failed to build Node_3422 (type:dense)");
  res_2507->getOutput(0)->setName("Node_3422:0");
  auto res_2508=network->addShuffle(*res_2507->getOutput(0));
  res_2508->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_2508 && "failed to build Node_3422_reshape (type:reshape)");
  res_2508->getOutput(0)->setName("Node_3422_reshape:0");
  auto res_2509=network->addActivation(*res_2508->getOutput(0),ActivationType::kTANH);
  assert(res_2509 && "failed to build Node_3423 (type:tanh)");
  res_2509->getOutput(0)->setName("Node_3423:0");
  auto res_2510=network->addShuffle(*res_2509->getOutput(0));
  res_2510->setReshapeDimensions(Dims{2,{1,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2510 && "failed to build Node_7279 (type:reshape)");
  res_2510->getOutput(0)->setName("Node_7279:0");
  auto res_2511=network->addShuffle(*inputs[16]);
  res_2511->setReshapeDimensions(Dims{2,{33,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2511 && "failed to build Node_3439 (type:reshape)");
  res_2511->getOutput(0)->setName("Node_3439:0");
  auto res_2512=network->addElementWise(*res_48->getOutput(0),*res_2511->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2512 && "failed to build Node_3441 (type:add)");
  res_2512->getOutput(0)->setName("Node_3441:0");
  auto res_2513=network->addElementWise(*inputs[17],*res_2512->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2513 && "failed to build Node_3442 (type:multiply)");
  res_2513->getOutput(0)->setName("Node_3442:0");
  auto res_2514=network->addShuffle(*inputs[16]);
  res_2514->setReshapeDimensions(Dims{2,{33,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2514 && "failed to build Node_3454 (type:reshape)");
  res_2514->getOutput(0)->setName("Node_3454:0");
  auto res_2515=network->addElementWise(*res_49->getOutput(0),*res_2514->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2515 && "failed to build Node_3456 (type:add)");
  res_2515->getOutput(0)->setName("Node_3456:0");
  auto res_2516=network->addShuffle(*inputs[16]);
  res_2516->setReshapeDimensions(Dims{2,{33,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2516 && "failed to build Node_3469 (type:reshape)");
  res_2516->getOutput(0)->setName("Node_3469:0");
  auto res_2517=network->addElementWise(*res_50->getOutput(0),*res_2516->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2517 && "failed to build Node_3471 (type:add)");
  res_2517->getOutput(0)->setName("Node_3471:0");
  auto res_2518=network->addShuffle(*inputs[16]);
  res_2518->setReshapeDimensions(Dims3{1,1,33});
  assert(res_2518 && "failed to build Node_3489 (type:reshape)");
  res_2518->getOutput(0)->setName("Node_3489:0");
  auto res_2519=network->addElementWise(*res_958->getOutput(0),*res_2518->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2519 && "failed to build Node_3491 (type:sub)");
  res_2519->getOutput(0)->setName("Node_3491:0");
  auto res_2520=network->addElementWise(*res_2519->getOutput(0),*res_959->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2520 && "failed to build Node_3492 (type:multiply)");
  res_2520->getOutput(0)->setName("Node_3492:0");
  auto res_2521=network->addElementWise(*inputs[18],*res_2515->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2521 && "failed to build Node_3457 (type:multiply)");
  res_2521->getOutput(0)->setName("Node_3457:0");
  auto res_2522=network->addElementWise(*res_2513->getOutput(0),*res_2521->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2522 && "failed to build Node_3479 (type:add)");
  res_2522->getOutput(0)->setName("Node_3479:0");
  auto res_2523=network->addElementWise(*inputs[19],*res_2517->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2523 && "failed to build Node_3472 (type:multiply)");
  res_2523->getOutput(0)->setName("Node_3472:0");
  auto res_2524=network->addElementWise(*res_2522->getOutput(0),*res_2523->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2524 && "failed to build Node_3480 (type:add)");
  res_2524->getOutput(0)->setName("Node_3480:0");
  auto res_2525=network->addElementWise(*res_2524->getOutput(0),*res_65->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2525 && "failed to build Node_3512 (type:add)");
  res_2525->getOutput(0)->setName("Node_3512:0");
  auto res_2526=network->addReduce(*res_2525->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2526 && "failed to build Node_3517_mean (type:mean)");
  res_2526->getOutput(0)->setName("Node_3517_mean:0");
  auto res_2527=network->addElementWise(*res_2525->getOutput(0),*res_2526->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2527 && "failed to build Node_3517_diff (type:sub)");
  res_2527->getOutput(0)->setName("Node_3517_diff:0");
  auto res_2528=network->addElementWise(*res_2527->getOutput(0),*res_1182->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2528 && "failed to build Node_3517_power (type:power)");
  res_2528->getOutput(0)->setName("Node_3517_power:0");
  auto res_2529=network->addReduce(*res_2528->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2529 && "failed to build Node_3517_var (type:mean)");
  res_2529->getOutput(0)->setName("Node_3517_var:0");
  auto res_2530=network->addElementWise(*res_2529->getOutput(0),*res_1056->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2530 && "failed to build Node_3517_modify (type:add)");
  res_2530->getOutput(0)->setName("Node_3517_modify:0");
  auto res_2531=network->addUnary(*res_2530->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2531 && "failed to build Node_3517_sqrt (type:power)");
  res_2531->getOutput(0)->setName("Node_3517_sqrt:0");
  auto res_2532=network->addElementWise(*res_2527->getOutput(0),*res_2531->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2532 && "failed to build Node_3517_rsqrt (type:divide)");
  res_2532->getOutput(0)->setName("Node_3517_rsqrt:0");
  auto res_2533=network->addElementWise(*res_2532->getOutput(0),*res_148->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2533 && "failed to build Node_3517_mul (type:multiply)");
  res_2533->getOutput(0)->setName("Node_3517_mul:0");
  auto res_2534=network->addElementWise(*res_2533->getOutput(0),*res_149->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2534 && "failed to build Node_3517 (type:add)");
  res_2534->getOutput(0)->setName("Node_3517:0");
  auto res_2535=network->addMatrixMultiply(*res_2534->getOutput(0),MatrixOperation::kNONE,*res_512->getOutput(0),MatrixOperation::kNONE);
  assert(res_2535 && "failed to build Node_3535 (type:matmul)");
  res_2535->getOutput(0)->setName("Node_3535:0");
  auto res_2536=network->addElementWise(*res_2535->getOutput(0),*res_513->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2536 && "failed to build Node_3535_add (type:add)");
  res_2536->getOutput(0)->setName("Node_3535_add:0");
  auto res_2537=network->addShuffle(*res_2536->getOutput(0));
  res_2537->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2537 && "failed to build Node_3551 (type:reshape)");
  res_2537->getOutput(0)->setName("Node_3551:0");
  auto res_2538=network->addShuffle(*res_2537->getOutput(0));
  Permutation permute_2538;
  permute_2538.order[0]=1;
  permute_2538.order[1]=0;
  permute_2538.order[2]=2;
  res_2538->setFirstTranspose(permute_2538);
  assert(res_2538 && "failed to build Node_3553 (type:transpose)");
  res_2538->getOutput(0)->setName("Node_3553:0");
  auto res_2539=network->addMatrixMultiply(*res_2534->getOutput(0),MatrixOperation::kNONE,*res_514->getOutput(0),MatrixOperation::kNONE);
  assert(res_2539 && "failed to build Node_3539 (type:matmul)");
  res_2539->getOutput(0)->setName("Node_3539:0");
  auto res_2540=network->addElementWise(*res_2539->getOutput(0),*res_515->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2540 && "failed to build Node_3539_add (type:add)");
  res_2540->getOutput(0)->setName("Node_3539_add:0");
  auto res_2541=network->addShuffle(*res_2540->getOutput(0));
  res_2541->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2541 && "failed to build Node_3561 (type:reshape)");
  res_2541->getOutput(0)->setName("Node_3561:0");
  auto res_2542=network->addShuffle(*res_2541->getOutput(0));
  Permutation permute_2542;
  permute_2542.order[0]=1;
  permute_2542.order[1]=2;
  permute_2542.order[2]=0;
  res_2542->setFirstTranspose(permute_2542);
  assert(res_2542 && "failed to build Node_3574 (type:transpose)");
  res_2542->getOutput(0)->setName("Node_3574:0");
  auto res_2543=network->addMatrixMultiply(*res_2538->getOutput(0),MatrixOperation::kNONE,*res_2542->getOutput(0),MatrixOperation::kNONE);
  assert(res_2543 && "failed to build Node_3575 (type:matmul)");
  res_2543->getOutput(0)->setName("Node_3575:0");
  auto res_2544=network->addElementWise(*res_2543->getOutput(0),*res_960->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2544 && "failed to build Node_3576 (type:divide)");
  res_2544->getOutput(0)->setName("Node_3576:0");
  auto res_2545=network->addElementWise(*res_2544->getOutput(0),*res_2520->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2545 && "failed to build Node_3577 (type:add)");
  res_2545->getOutput(0)->setName("Node_3577:0");
  auto res_2546=network->addSoftMax(*res_2545->getOutput(0));
  res_2546->setAxes(4);
  assert(res_2546 && "failed to build Node_3578 (type:softmax)");
  res_2546->getOutput(0)->setName("Node_3578:0");
  auto res_2547=network->addMatrixMultiply(*res_2534->getOutput(0),MatrixOperation::kNONE,*res_516->getOutput(0),MatrixOperation::kNONE);
  assert(res_2547 && "failed to build Node_3543 (type:matmul)");
  res_2547->getOutput(0)->setName("Node_3543:0");
  auto res_2548=network->addElementWise(*res_2547->getOutput(0),*res_517->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2548 && "failed to build Node_3543_add (type:add)");
  res_2548->getOutput(0)->setName("Node_3543_add:0");
  auto res_2549=network->addShuffle(*res_2548->getOutput(0));
  res_2549->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2549 && "failed to build Node_3571 (type:reshape)");
  res_2549->getOutput(0)->setName("Node_3571:0");
  auto res_2550=network->addShuffle(*res_2549->getOutput(0));
  Permutation permute_2550;
  permute_2550.order[0]=1;
  permute_2550.order[1]=0;
  permute_2550.order[2]=2;
  res_2550->setFirstTranspose(permute_2550);
  assert(res_2550 && "failed to build Node_3573 (type:transpose)");
  res_2550->getOutput(0)->setName("Node_3573:0");
  auto res_2551=network->addMatrixMultiply(*res_2546->getOutput(0),MatrixOperation::kNONE,*res_2550->getOutput(0),MatrixOperation::kNONE);
  assert(res_2551 && "failed to build Node_3582 (type:matmul)");
  res_2551->getOutput(0)->setName("Node_3582:0");
  auto res_2552=network->addShuffle(*res_2551->getOutput(0));
  Permutation permute_2552;
  permute_2552.order[0]=1;
  permute_2552.order[1]=0;
  permute_2552.order[2]=2;
  res_2552->setFirstTranspose(permute_2552);
  assert(res_2552 && "failed to build Node_3584 (type:transpose)");
  res_2552->getOutput(0)->setName("Node_3584:0");
  auto res_2553=network->addIdentity(*res_2552->getOutput(0));
  assert(res_2553 && "failed to build Node_3585 (type:contiguous)");
  res_2553->getOutput(0)->setName("Node_3585:0");
  auto res_2554=network->addShuffle(*res_2553->getOutput(0));
  res_2554->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2554 && "failed to build Node_3593 (type:reshape)");
  res_2554->getOutput(0)->setName("Node_3593:0");
  auto res_2555=network->addMatrixMultiply(*res_2554->getOutput(0),MatrixOperation::kNONE,*res_518->getOutput(0),MatrixOperation::kNONE);
  assert(res_2555 && "failed to build Node_3598 (type:matmul)");
  res_2555->getOutput(0)->setName("Node_3598:0");
  auto res_2556=network->addElementWise(*res_2555->getOutput(0),*res_519->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2556 && "failed to build Node_3598_add (type:add)");
  res_2556->getOutput(0)->setName("Node_3598_add:0");
  auto res_2557=network->addElementWise(*res_2556->getOutput(0),*res_2534->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2557 && "failed to build Node_3602 (type:add)");
  res_2557->getOutput(0)->setName("Node_3602:0");
  auto res_2558=network->addReduce(*res_2557->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2558 && "failed to build Node_3607_mean (type:mean)");
  res_2558->getOutput(0)->setName("Node_3607_mean:0");
  auto res_2559=network->addElementWise(*res_2557->getOutput(0),*res_2558->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2559 && "failed to build Node_3607_diff (type:sub)");
  res_2559->getOutput(0)->setName("Node_3607_diff:0");
  auto res_2560=network->addElementWise(*res_2559->getOutput(0),*res_1183->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2560 && "failed to build Node_3607_power (type:power)");
  res_2560->getOutput(0)->setName("Node_3607_power:0");
  auto res_2561=network->addReduce(*res_2560->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2561 && "failed to build Node_3607_var (type:mean)");
  res_2561->getOutput(0)->setName("Node_3607_var:0");
  auto res_2562=network->addElementWise(*res_2561->getOutput(0),*res_1057->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2562 && "failed to build Node_3607_modify (type:add)");
  res_2562->getOutput(0)->setName("Node_3607_modify:0");
  auto res_2563=network->addUnary(*res_2562->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2563 && "failed to build Node_3607_sqrt (type:power)");
  res_2563->getOutput(0)->setName("Node_3607_sqrt:0");
  auto res_2564=network->addElementWise(*res_2559->getOutput(0),*res_2563->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2564 && "failed to build Node_3607_rsqrt (type:divide)");
  res_2564->getOutput(0)->setName("Node_3607_rsqrt:0");
  auto res_2565=network->addElementWise(*res_2564->getOutput(0),*res_150->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2565 && "failed to build Node_3607_mul (type:multiply)");
  res_2565->getOutput(0)->setName("Node_3607_mul:0");
  auto res_2566=network->addElementWise(*res_2565->getOutput(0),*res_151->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2566 && "failed to build Node_3607 (type:add)");
  res_2566->getOutput(0)->setName("Node_3607:0");
  auto res_2567=network->addMatrixMultiply(*res_2566->getOutput(0),MatrixOperation::kNONE,*res_520->getOutput(0),MatrixOperation::kNONE);
  assert(res_2567 && "failed to build Node_3611 (type:matmul)");
  res_2567->getOutput(0)->setName("Node_3611:0");
  auto res_2568=network->addElementWise(*res_2567->getOutput(0),*res_521->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2568 && "failed to build Node_3611_add (type:add)");
  res_2568->getOutput(0)->setName("Node_3611_add:0");
  ITensor* inputTensors_2569[1] = {res_2568->getOutput(0)};
  auto plugin_2569=GELU_Plugin("gelu");
  auto res_2569=network->addPluginV2(inputTensors_2569,1,plugin_2569);
  assert(res_2569 && "failed to build Node_3612 (type:gelu)");
  res_2569->getOutput(0)->setName("Node_3612:0");
  auto res_2570=network->addMatrixMultiply(*res_2569->getOutput(0),MatrixOperation::kNONE,*res_522->getOutput(0),MatrixOperation::kNONE);
  assert(res_2570 && "failed to build Node_3617 (type:matmul)");
  res_2570->getOutput(0)->setName("Node_3617:0");
  auto res_2571=network->addElementWise(*res_2570->getOutput(0),*res_523->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2571 && "failed to build Node_3617_add (type:add)");
  res_2571->getOutput(0)->setName("Node_3617_add:0");
  auto res_2572=network->addElementWise(*res_2571->getOutput(0),*res_2566->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2572 && "failed to build Node_3621 (type:add)");
  res_2572->getOutput(0)->setName("Node_3621:0");
  auto res_2573=network->addReduce(*res_2572->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2573 && "failed to build Node_3626_mean (type:mean)");
  res_2573->getOutput(0)->setName("Node_3626_mean:0");
  auto res_2574=network->addElementWise(*res_2572->getOutput(0),*res_2573->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2574 && "failed to build Node_3626_diff (type:sub)");
  res_2574->getOutput(0)->setName("Node_3626_diff:0");
  auto res_2575=network->addElementWise(*res_2574->getOutput(0),*res_1184->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2575 && "failed to build Node_3626_power (type:power)");
  res_2575->getOutput(0)->setName("Node_3626_power:0");
  auto res_2576=network->addReduce(*res_2575->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2576 && "failed to build Node_3626_var (type:mean)");
  res_2576->getOutput(0)->setName("Node_3626_var:0");
  auto res_2577=network->addElementWise(*res_2576->getOutput(0),*res_1058->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2577 && "failed to build Node_3626_modify (type:add)");
  res_2577->getOutput(0)->setName("Node_3626_modify:0");
  auto res_2578=network->addUnary(*res_2577->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2578 && "failed to build Node_3626_sqrt (type:power)");
  res_2578->getOutput(0)->setName("Node_3626_sqrt:0");
  auto res_2579=network->addElementWise(*res_2574->getOutput(0),*res_2578->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2579 && "failed to build Node_3626_rsqrt (type:divide)");
  res_2579->getOutput(0)->setName("Node_3626_rsqrt:0");
  auto res_2580=network->addElementWise(*res_2579->getOutput(0),*res_152->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2580 && "failed to build Node_3626_mul (type:multiply)");
  res_2580->getOutput(0)->setName("Node_3626_mul:0");
  auto res_2581=network->addElementWise(*res_2580->getOutput(0),*res_153->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2581 && "failed to build Node_3626 (type:add)");
  res_2581->getOutput(0)->setName("Node_3626:0");
  auto res_2582=network->addMatrixMultiply(*res_2581->getOutput(0),MatrixOperation::kNONE,*res_524->getOutput(0),MatrixOperation::kNONE);
  assert(res_2582 && "failed to build Node_3641 (type:matmul)");
  res_2582->getOutput(0)->setName("Node_3641:0");
  auto res_2583=network->addElementWise(*res_2582->getOutput(0),*res_525->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2583 && "failed to build Node_3641_add (type:add)");
  res_2583->getOutput(0)->setName("Node_3641_add:0");
  auto res_2584=network->addShuffle(*res_2583->getOutput(0));
  res_2584->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2584 && "failed to build Node_3657 (type:reshape)");
  res_2584->getOutput(0)->setName("Node_3657:0");
  auto res_2585=network->addShuffle(*res_2584->getOutput(0));
  Permutation permute_2585;
  permute_2585.order[0]=1;
  permute_2585.order[1]=0;
  permute_2585.order[2]=2;
  res_2585->setFirstTranspose(permute_2585);
  assert(res_2585 && "failed to build Node_3659 (type:transpose)");
  res_2585->getOutput(0)->setName("Node_3659:0");
  auto res_2586=network->addMatrixMultiply(*res_2581->getOutput(0),MatrixOperation::kNONE,*res_526->getOutput(0),MatrixOperation::kNONE);
  assert(res_2586 && "failed to build Node_3645 (type:matmul)");
  res_2586->getOutput(0)->setName("Node_3645:0");
  auto res_2587=network->addElementWise(*res_2586->getOutput(0),*res_527->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2587 && "failed to build Node_3645_add (type:add)");
  res_2587->getOutput(0)->setName("Node_3645_add:0");
  auto res_2588=network->addShuffle(*res_2587->getOutput(0));
  res_2588->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2588 && "failed to build Node_3667 (type:reshape)");
  res_2588->getOutput(0)->setName("Node_3667:0");
  auto res_2589=network->addShuffle(*res_2588->getOutput(0));
  Permutation permute_2589;
  permute_2589.order[0]=1;
  permute_2589.order[1]=2;
  permute_2589.order[2]=0;
  res_2589->setFirstTranspose(permute_2589);
  assert(res_2589 && "failed to build Node_3680 (type:transpose)");
  res_2589->getOutput(0)->setName("Node_3680:0");
  auto res_2590=network->addMatrixMultiply(*res_2585->getOutput(0),MatrixOperation::kNONE,*res_2589->getOutput(0),MatrixOperation::kNONE);
  assert(res_2590 && "failed to build Node_3681 (type:matmul)");
  res_2590->getOutput(0)->setName("Node_3681:0");
  auto res_2591=network->addElementWise(*res_2590->getOutput(0),*res_961->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2591 && "failed to build Node_3682 (type:divide)");
  res_2591->getOutput(0)->setName("Node_3682:0");
  auto res_2592=network->addElementWise(*res_2591->getOutput(0),*res_2520->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2592 && "failed to build Node_3683 (type:add)");
  res_2592->getOutput(0)->setName("Node_3683:0");
  auto res_2593=network->addSoftMax(*res_2592->getOutput(0));
  res_2593->setAxes(4);
  assert(res_2593 && "failed to build Node_3684 (type:softmax)");
  res_2593->getOutput(0)->setName("Node_3684:0");
  auto res_2594=network->addMatrixMultiply(*res_2581->getOutput(0),MatrixOperation::kNONE,*res_528->getOutput(0),MatrixOperation::kNONE);
  assert(res_2594 && "failed to build Node_3649 (type:matmul)");
  res_2594->getOutput(0)->setName("Node_3649:0");
  auto res_2595=network->addElementWise(*res_2594->getOutput(0),*res_529->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2595 && "failed to build Node_3649_add (type:add)");
  res_2595->getOutput(0)->setName("Node_3649_add:0");
  auto res_2596=network->addShuffle(*res_2595->getOutput(0));
  res_2596->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2596 && "failed to build Node_3677 (type:reshape)");
  res_2596->getOutput(0)->setName("Node_3677:0");
  auto res_2597=network->addShuffle(*res_2596->getOutput(0));
  Permutation permute_2597;
  permute_2597.order[0]=1;
  permute_2597.order[1]=0;
  permute_2597.order[2]=2;
  res_2597->setFirstTranspose(permute_2597);
  assert(res_2597 && "failed to build Node_3679 (type:transpose)");
  res_2597->getOutput(0)->setName("Node_3679:0");
  auto res_2598=network->addMatrixMultiply(*res_2593->getOutput(0),MatrixOperation::kNONE,*res_2597->getOutput(0),MatrixOperation::kNONE);
  assert(res_2598 && "failed to build Node_3688 (type:matmul)");
  res_2598->getOutput(0)->setName("Node_3688:0");
  auto res_2599=network->addShuffle(*res_2598->getOutput(0));
  Permutation permute_2599;
  permute_2599.order[0]=1;
  permute_2599.order[1]=0;
  permute_2599.order[2]=2;
  res_2599->setFirstTranspose(permute_2599);
  assert(res_2599 && "failed to build Node_3690 (type:transpose)");
  res_2599->getOutput(0)->setName("Node_3690:0");
  auto res_2600=network->addIdentity(*res_2599->getOutput(0));
  assert(res_2600 && "failed to build Node_3691 (type:contiguous)");
  res_2600->getOutput(0)->setName("Node_3691:0");
  auto res_2601=network->addShuffle(*res_2600->getOutput(0));
  res_2601->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2601 && "failed to build Node_3699 (type:reshape)");
  res_2601->getOutput(0)->setName("Node_3699:0");
  auto res_2602=network->addMatrixMultiply(*res_2601->getOutput(0),MatrixOperation::kNONE,*res_530->getOutput(0),MatrixOperation::kNONE);
  assert(res_2602 && "failed to build Node_3704 (type:matmul)");
  res_2602->getOutput(0)->setName("Node_3704:0");
  auto res_2603=network->addElementWise(*res_2602->getOutput(0),*res_531->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2603 && "failed to build Node_3704_add (type:add)");
  res_2603->getOutput(0)->setName("Node_3704_add:0");
  auto res_2604=network->addElementWise(*res_2603->getOutput(0),*res_2581->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2604 && "failed to build Node_3708 (type:add)");
  res_2604->getOutput(0)->setName("Node_3708:0");
  auto res_2605=network->addReduce(*res_2604->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2605 && "failed to build Node_3713_mean (type:mean)");
  res_2605->getOutput(0)->setName("Node_3713_mean:0");
  auto res_2606=network->addElementWise(*res_2604->getOutput(0),*res_2605->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2606 && "failed to build Node_3713_diff (type:sub)");
  res_2606->getOutput(0)->setName("Node_3713_diff:0");
  auto res_2607=network->addElementWise(*res_2606->getOutput(0),*res_1185->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2607 && "failed to build Node_3713_power (type:power)");
  res_2607->getOutput(0)->setName("Node_3713_power:0");
  auto res_2608=network->addReduce(*res_2607->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2608 && "failed to build Node_3713_var (type:mean)");
  res_2608->getOutput(0)->setName("Node_3713_var:0");
  auto res_2609=network->addElementWise(*res_2608->getOutput(0),*res_1059->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2609 && "failed to build Node_3713_modify (type:add)");
  res_2609->getOutput(0)->setName("Node_3713_modify:0");
  auto res_2610=network->addUnary(*res_2609->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2610 && "failed to build Node_3713_sqrt (type:power)");
  res_2610->getOutput(0)->setName("Node_3713_sqrt:0");
  auto res_2611=network->addElementWise(*res_2606->getOutput(0),*res_2610->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2611 && "failed to build Node_3713_rsqrt (type:divide)");
  res_2611->getOutput(0)->setName("Node_3713_rsqrt:0");
  auto res_2612=network->addElementWise(*res_2611->getOutput(0),*res_154->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2612 && "failed to build Node_3713_mul (type:multiply)");
  res_2612->getOutput(0)->setName("Node_3713_mul:0");
  auto res_2613=network->addElementWise(*res_2612->getOutput(0),*res_155->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2613 && "failed to build Node_3713 (type:add)");
  res_2613->getOutput(0)->setName("Node_3713:0");
  auto res_2614=network->addMatrixMultiply(*res_2613->getOutput(0),MatrixOperation::kNONE,*res_532->getOutput(0),MatrixOperation::kNONE);
  assert(res_2614 && "failed to build Node_3717 (type:matmul)");
  res_2614->getOutput(0)->setName("Node_3717:0");
  auto res_2615=network->addElementWise(*res_2614->getOutput(0),*res_533->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2615 && "failed to build Node_3717_add (type:add)");
  res_2615->getOutput(0)->setName("Node_3717_add:0");
  ITensor* inputTensors_2616[1] = {res_2615->getOutput(0)};
  auto plugin_2616=GELU_Plugin("gelu");
  auto res_2616=network->addPluginV2(inputTensors_2616,1,plugin_2616);
  assert(res_2616 && "failed to build Node_3718 (type:gelu)");
  res_2616->getOutput(0)->setName("Node_3718:0");
  auto res_2617=network->addMatrixMultiply(*res_2616->getOutput(0),MatrixOperation::kNONE,*res_534->getOutput(0),MatrixOperation::kNONE);
  assert(res_2617 && "failed to build Node_3723 (type:matmul)");
  res_2617->getOutput(0)->setName("Node_3723:0");
  auto res_2618=network->addElementWise(*res_2617->getOutput(0),*res_535->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2618 && "failed to build Node_3723_add (type:add)");
  res_2618->getOutput(0)->setName("Node_3723_add:0");
  auto res_2619=network->addElementWise(*res_2618->getOutput(0),*res_2613->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2619 && "failed to build Node_3727 (type:add)");
  res_2619->getOutput(0)->setName("Node_3727:0");
  auto res_2620=network->addReduce(*res_2619->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2620 && "failed to build Node_3732_mean (type:mean)");
  res_2620->getOutput(0)->setName("Node_3732_mean:0");
  auto res_2621=network->addElementWise(*res_2619->getOutput(0),*res_2620->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2621 && "failed to build Node_3732_diff (type:sub)");
  res_2621->getOutput(0)->setName("Node_3732_diff:0");
  auto res_2622=network->addElementWise(*res_2621->getOutput(0),*res_1186->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2622 && "failed to build Node_3732_power (type:power)");
  res_2622->getOutput(0)->setName("Node_3732_power:0");
  auto res_2623=network->addReduce(*res_2622->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2623 && "failed to build Node_3732_var (type:mean)");
  res_2623->getOutput(0)->setName("Node_3732_var:0");
  auto res_2624=network->addElementWise(*res_2623->getOutput(0),*res_1060->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2624 && "failed to build Node_3732_modify (type:add)");
  res_2624->getOutput(0)->setName("Node_3732_modify:0");
  auto res_2625=network->addUnary(*res_2624->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2625 && "failed to build Node_3732_sqrt (type:power)");
  res_2625->getOutput(0)->setName("Node_3732_sqrt:0");
  auto res_2626=network->addElementWise(*res_2621->getOutput(0),*res_2625->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2626 && "failed to build Node_3732_rsqrt (type:divide)");
  res_2626->getOutput(0)->setName("Node_3732_rsqrt:0");
  auto res_2627=network->addElementWise(*res_2626->getOutput(0),*res_156->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2627 && "failed to build Node_3732_mul (type:multiply)");
  res_2627->getOutput(0)->setName("Node_3732_mul:0");
  auto res_2628=network->addElementWise(*res_2627->getOutput(0),*res_157->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2628 && "failed to build Node_3732 (type:add)");
  res_2628->getOutput(0)->setName("Node_3732:0");
  auto res_2629=network->addMatrixMultiply(*res_2628->getOutput(0),MatrixOperation::kNONE,*res_536->getOutput(0),MatrixOperation::kNONE);
  assert(res_2629 && "failed to build Node_3747 (type:matmul)");
  res_2629->getOutput(0)->setName("Node_3747:0");
  auto res_2630=network->addElementWise(*res_2629->getOutput(0),*res_537->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2630 && "failed to build Node_3747_add (type:add)");
  res_2630->getOutput(0)->setName("Node_3747_add:0");
  auto res_2631=network->addShuffle(*res_2630->getOutput(0));
  res_2631->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2631 && "failed to build Node_3763 (type:reshape)");
  res_2631->getOutput(0)->setName("Node_3763:0");
  auto res_2632=network->addShuffle(*res_2631->getOutput(0));
  Permutation permute_2632;
  permute_2632.order[0]=1;
  permute_2632.order[1]=0;
  permute_2632.order[2]=2;
  res_2632->setFirstTranspose(permute_2632);
  assert(res_2632 && "failed to build Node_3765 (type:transpose)");
  res_2632->getOutput(0)->setName("Node_3765:0");
  auto res_2633=network->addMatrixMultiply(*res_2628->getOutput(0),MatrixOperation::kNONE,*res_538->getOutput(0),MatrixOperation::kNONE);
  assert(res_2633 && "failed to build Node_3751 (type:matmul)");
  res_2633->getOutput(0)->setName("Node_3751:0");
  auto res_2634=network->addElementWise(*res_2633->getOutput(0),*res_539->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2634 && "failed to build Node_3751_add (type:add)");
  res_2634->getOutput(0)->setName("Node_3751_add:0");
  auto res_2635=network->addShuffle(*res_2634->getOutput(0));
  res_2635->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2635 && "failed to build Node_3773 (type:reshape)");
  res_2635->getOutput(0)->setName("Node_3773:0");
  auto res_2636=network->addShuffle(*res_2635->getOutput(0));
  Permutation permute_2636;
  permute_2636.order[0]=1;
  permute_2636.order[1]=2;
  permute_2636.order[2]=0;
  res_2636->setFirstTranspose(permute_2636);
  assert(res_2636 && "failed to build Node_3786 (type:transpose)");
  res_2636->getOutput(0)->setName("Node_3786:0");
  auto res_2637=network->addMatrixMultiply(*res_2632->getOutput(0),MatrixOperation::kNONE,*res_2636->getOutput(0),MatrixOperation::kNONE);
  assert(res_2637 && "failed to build Node_3787 (type:matmul)");
  res_2637->getOutput(0)->setName("Node_3787:0");
  auto res_2638=network->addElementWise(*res_2637->getOutput(0),*res_962->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2638 && "failed to build Node_3788 (type:divide)");
  res_2638->getOutput(0)->setName("Node_3788:0");
  auto res_2639=network->addElementWise(*res_2638->getOutput(0),*res_2520->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2639 && "failed to build Node_3789 (type:add)");
  res_2639->getOutput(0)->setName("Node_3789:0");
  auto res_2640=network->addSoftMax(*res_2639->getOutput(0));
  res_2640->setAxes(4);
  assert(res_2640 && "failed to build Node_3790 (type:softmax)");
  res_2640->getOutput(0)->setName("Node_3790:0");
  auto res_2641=network->addMatrixMultiply(*res_2628->getOutput(0),MatrixOperation::kNONE,*res_540->getOutput(0),MatrixOperation::kNONE);
  assert(res_2641 && "failed to build Node_3755 (type:matmul)");
  res_2641->getOutput(0)->setName("Node_3755:0");
  auto res_2642=network->addElementWise(*res_2641->getOutput(0),*res_541->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2642 && "failed to build Node_3755_add (type:add)");
  res_2642->getOutput(0)->setName("Node_3755_add:0");
  auto res_2643=network->addShuffle(*res_2642->getOutput(0));
  res_2643->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2643 && "failed to build Node_3783 (type:reshape)");
  res_2643->getOutput(0)->setName("Node_3783:0");
  auto res_2644=network->addShuffle(*res_2643->getOutput(0));
  Permutation permute_2644;
  permute_2644.order[0]=1;
  permute_2644.order[1]=0;
  permute_2644.order[2]=2;
  res_2644->setFirstTranspose(permute_2644);
  assert(res_2644 && "failed to build Node_3785 (type:transpose)");
  res_2644->getOutput(0)->setName("Node_3785:0");
  auto res_2645=network->addMatrixMultiply(*res_2640->getOutput(0),MatrixOperation::kNONE,*res_2644->getOutput(0),MatrixOperation::kNONE);
  assert(res_2645 && "failed to build Node_3794 (type:matmul)");
  res_2645->getOutput(0)->setName("Node_3794:0");
  auto res_2646=network->addShuffle(*res_2645->getOutput(0));
  Permutation permute_2646;
  permute_2646.order[0]=1;
  permute_2646.order[1]=0;
  permute_2646.order[2]=2;
  res_2646->setFirstTranspose(permute_2646);
  assert(res_2646 && "failed to build Node_3796 (type:transpose)");
  res_2646->getOutput(0)->setName("Node_3796:0");
  auto res_2647=network->addIdentity(*res_2646->getOutput(0));
  assert(res_2647 && "failed to build Node_3797 (type:contiguous)");
  res_2647->getOutput(0)->setName("Node_3797:0");
  auto res_2648=network->addShuffle(*res_2647->getOutput(0));
  res_2648->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2648 && "failed to build Node_3805 (type:reshape)");
  res_2648->getOutput(0)->setName("Node_3805:0");
  auto res_2649=network->addMatrixMultiply(*res_2648->getOutput(0),MatrixOperation::kNONE,*res_542->getOutput(0),MatrixOperation::kNONE);
  assert(res_2649 && "failed to build Node_3810 (type:matmul)");
  res_2649->getOutput(0)->setName("Node_3810:0");
  auto res_2650=network->addElementWise(*res_2649->getOutput(0),*res_543->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2650 && "failed to build Node_3810_add (type:add)");
  res_2650->getOutput(0)->setName("Node_3810_add:0");
  auto res_2651=network->addElementWise(*res_2650->getOutput(0),*res_2628->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2651 && "failed to build Node_3814 (type:add)");
  res_2651->getOutput(0)->setName("Node_3814:0");
  auto res_2652=network->addReduce(*res_2651->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2652 && "failed to build Node_3819_mean (type:mean)");
  res_2652->getOutput(0)->setName("Node_3819_mean:0");
  auto res_2653=network->addElementWise(*res_2651->getOutput(0),*res_2652->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2653 && "failed to build Node_3819_diff (type:sub)");
  res_2653->getOutput(0)->setName("Node_3819_diff:0");
  auto res_2654=network->addElementWise(*res_2653->getOutput(0),*res_1187->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2654 && "failed to build Node_3819_power (type:power)");
  res_2654->getOutput(0)->setName("Node_3819_power:0");
  auto res_2655=network->addReduce(*res_2654->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2655 && "failed to build Node_3819_var (type:mean)");
  res_2655->getOutput(0)->setName("Node_3819_var:0");
  auto res_2656=network->addElementWise(*res_2655->getOutput(0),*res_1061->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2656 && "failed to build Node_3819_modify (type:add)");
  res_2656->getOutput(0)->setName("Node_3819_modify:0");
  auto res_2657=network->addUnary(*res_2656->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2657 && "failed to build Node_3819_sqrt (type:power)");
  res_2657->getOutput(0)->setName("Node_3819_sqrt:0");
  auto res_2658=network->addElementWise(*res_2653->getOutput(0),*res_2657->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2658 && "failed to build Node_3819_rsqrt (type:divide)");
  res_2658->getOutput(0)->setName("Node_3819_rsqrt:0");
  auto res_2659=network->addElementWise(*res_2658->getOutput(0),*res_158->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2659 && "failed to build Node_3819_mul (type:multiply)");
  res_2659->getOutput(0)->setName("Node_3819_mul:0");
  auto res_2660=network->addElementWise(*res_2659->getOutput(0),*res_159->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2660 && "failed to build Node_3819 (type:add)");
  res_2660->getOutput(0)->setName("Node_3819:0");
  auto res_2661=network->addMatrixMultiply(*res_2660->getOutput(0),MatrixOperation::kNONE,*res_544->getOutput(0),MatrixOperation::kNONE);
  assert(res_2661 && "failed to build Node_3823 (type:matmul)");
  res_2661->getOutput(0)->setName("Node_3823:0");
  auto res_2662=network->addElementWise(*res_2661->getOutput(0),*res_545->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2662 && "failed to build Node_3823_add (type:add)");
  res_2662->getOutput(0)->setName("Node_3823_add:0");
  ITensor* inputTensors_2663[1] = {res_2662->getOutput(0)};
  auto plugin_2663=GELU_Plugin("gelu");
  auto res_2663=network->addPluginV2(inputTensors_2663,1,plugin_2663);
  assert(res_2663 && "failed to build Node_3824 (type:gelu)");
  res_2663->getOutput(0)->setName("Node_3824:0");
  auto res_2664=network->addMatrixMultiply(*res_2663->getOutput(0),MatrixOperation::kNONE,*res_546->getOutput(0),MatrixOperation::kNONE);
  assert(res_2664 && "failed to build Node_3829 (type:matmul)");
  res_2664->getOutput(0)->setName("Node_3829:0");
  auto res_2665=network->addElementWise(*res_2664->getOutput(0),*res_547->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2665 && "failed to build Node_3829_add (type:add)");
  res_2665->getOutput(0)->setName("Node_3829_add:0");
  auto res_2666=network->addElementWise(*res_2665->getOutput(0),*res_2660->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2666 && "failed to build Node_3833 (type:add)");
  res_2666->getOutput(0)->setName("Node_3833:0");
  auto res_2667=network->addReduce(*res_2666->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2667 && "failed to build Node_3838_mean (type:mean)");
  res_2667->getOutput(0)->setName("Node_3838_mean:0");
  auto res_2668=network->addElementWise(*res_2666->getOutput(0),*res_2667->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2668 && "failed to build Node_3838_diff (type:sub)");
  res_2668->getOutput(0)->setName("Node_3838_diff:0");
  auto res_2669=network->addElementWise(*res_2668->getOutput(0),*res_1188->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2669 && "failed to build Node_3838_power (type:power)");
  res_2669->getOutput(0)->setName("Node_3838_power:0");
  auto res_2670=network->addReduce(*res_2669->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2670 && "failed to build Node_3838_var (type:mean)");
  res_2670->getOutput(0)->setName("Node_3838_var:0");
  auto res_2671=network->addElementWise(*res_2670->getOutput(0),*res_1062->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2671 && "failed to build Node_3838_modify (type:add)");
  res_2671->getOutput(0)->setName("Node_3838_modify:0");
  auto res_2672=network->addUnary(*res_2671->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2672 && "failed to build Node_3838_sqrt (type:power)");
  res_2672->getOutput(0)->setName("Node_3838_sqrt:0");
  auto res_2673=network->addElementWise(*res_2668->getOutput(0),*res_2672->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2673 && "failed to build Node_3838_rsqrt (type:divide)");
  res_2673->getOutput(0)->setName("Node_3838_rsqrt:0");
  auto res_2674=network->addElementWise(*res_2673->getOutput(0),*res_160->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2674 && "failed to build Node_3838_mul (type:multiply)");
  res_2674->getOutput(0)->setName("Node_3838_mul:0");
  auto res_2675=network->addElementWise(*res_2674->getOutput(0),*res_161->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2675 && "failed to build Node_3838 (type:add)");
  res_2675->getOutput(0)->setName("Node_3838:0");
  auto res_2676=network->addMatrixMultiply(*res_2675->getOutput(0),MatrixOperation::kNONE,*res_548->getOutput(0),MatrixOperation::kNONE);
  assert(res_2676 && "failed to build Node_3853 (type:matmul)");
  res_2676->getOutput(0)->setName("Node_3853:0");
  auto res_2677=network->addElementWise(*res_2676->getOutput(0),*res_549->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2677 && "failed to build Node_3853_add (type:add)");
  res_2677->getOutput(0)->setName("Node_3853_add:0");
  auto res_2678=network->addShuffle(*res_2677->getOutput(0));
  res_2678->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2678 && "failed to build Node_3869 (type:reshape)");
  res_2678->getOutput(0)->setName("Node_3869:0");
  auto res_2679=network->addShuffle(*res_2678->getOutput(0));
  Permutation permute_2679;
  permute_2679.order[0]=1;
  permute_2679.order[1]=0;
  permute_2679.order[2]=2;
  res_2679->setFirstTranspose(permute_2679);
  assert(res_2679 && "failed to build Node_3871 (type:transpose)");
  res_2679->getOutput(0)->setName("Node_3871:0");
  auto res_2680=network->addMatrixMultiply(*res_2675->getOutput(0),MatrixOperation::kNONE,*res_550->getOutput(0),MatrixOperation::kNONE);
  assert(res_2680 && "failed to build Node_3857 (type:matmul)");
  res_2680->getOutput(0)->setName("Node_3857:0");
  auto res_2681=network->addElementWise(*res_2680->getOutput(0),*res_551->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2681 && "failed to build Node_3857_add (type:add)");
  res_2681->getOutput(0)->setName("Node_3857_add:0");
  auto res_2682=network->addShuffle(*res_2681->getOutput(0));
  res_2682->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2682 && "failed to build Node_3879 (type:reshape)");
  res_2682->getOutput(0)->setName("Node_3879:0");
  auto res_2683=network->addShuffle(*res_2682->getOutput(0));
  Permutation permute_2683;
  permute_2683.order[0]=1;
  permute_2683.order[1]=2;
  permute_2683.order[2]=0;
  res_2683->setFirstTranspose(permute_2683);
  assert(res_2683 && "failed to build Node_3892 (type:transpose)");
  res_2683->getOutput(0)->setName("Node_3892:0");
  auto res_2684=network->addMatrixMultiply(*res_2679->getOutput(0),MatrixOperation::kNONE,*res_2683->getOutput(0),MatrixOperation::kNONE);
  assert(res_2684 && "failed to build Node_3893 (type:matmul)");
  res_2684->getOutput(0)->setName("Node_3893:0");
  auto res_2685=network->addElementWise(*res_2684->getOutput(0),*res_963->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2685 && "failed to build Node_3894 (type:divide)");
  res_2685->getOutput(0)->setName("Node_3894:0");
  auto res_2686=network->addElementWise(*res_2685->getOutput(0),*res_2520->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2686 && "failed to build Node_3895 (type:add)");
  res_2686->getOutput(0)->setName("Node_3895:0");
  auto res_2687=network->addSoftMax(*res_2686->getOutput(0));
  res_2687->setAxes(4);
  assert(res_2687 && "failed to build Node_3896 (type:softmax)");
  res_2687->getOutput(0)->setName("Node_3896:0");
  auto res_2688=network->addMatrixMultiply(*res_2675->getOutput(0),MatrixOperation::kNONE,*res_552->getOutput(0),MatrixOperation::kNONE);
  assert(res_2688 && "failed to build Node_3861 (type:matmul)");
  res_2688->getOutput(0)->setName("Node_3861:0");
  auto res_2689=network->addElementWise(*res_2688->getOutput(0),*res_553->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2689 && "failed to build Node_3861_add (type:add)");
  res_2689->getOutput(0)->setName("Node_3861_add:0");
  auto res_2690=network->addShuffle(*res_2689->getOutput(0));
  res_2690->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2690 && "failed to build Node_3889 (type:reshape)");
  res_2690->getOutput(0)->setName("Node_3889:0");
  auto res_2691=network->addShuffle(*res_2690->getOutput(0));
  Permutation permute_2691;
  permute_2691.order[0]=1;
  permute_2691.order[1]=0;
  permute_2691.order[2]=2;
  res_2691->setFirstTranspose(permute_2691);
  assert(res_2691 && "failed to build Node_3891 (type:transpose)");
  res_2691->getOutput(0)->setName("Node_3891:0");
  auto res_2692=network->addMatrixMultiply(*res_2687->getOutput(0),MatrixOperation::kNONE,*res_2691->getOutput(0),MatrixOperation::kNONE);
  assert(res_2692 && "failed to build Node_3900 (type:matmul)");
  res_2692->getOutput(0)->setName("Node_3900:0");
  auto res_2693=network->addShuffle(*res_2692->getOutput(0));
  Permutation permute_2693;
  permute_2693.order[0]=1;
  permute_2693.order[1]=0;
  permute_2693.order[2]=2;
  res_2693->setFirstTranspose(permute_2693);
  assert(res_2693 && "failed to build Node_3902 (type:transpose)");
  res_2693->getOutput(0)->setName("Node_3902:0");
  auto res_2694=network->addIdentity(*res_2693->getOutput(0));
  assert(res_2694 && "failed to build Node_3903 (type:contiguous)");
  res_2694->getOutput(0)->setName("Node_3903:0");
  auto res_2695=network->addShuffle(*res_2694->getOutput(0));
  res_2695->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2695 && "failed to build Node_3911 (type:reshape)");
  res_2695->getOutput(0)->setName("Node_3911:0");
  auto res_2696=network->addMatrixMultiply(*res_2695->getOutput(0),MatrixOperation::kNONE,*res_554->getOutput(0),MatrixOperation::kNONE);
  assert(res_2696 && "failed to build Node_3916 (type:matmul)");
  res_2696->getOutput(0)->setName("Node_3916:0");
  auto res_2697=network->addElementWise(*res_2696->getOutput(0),*res_555->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2697 && "failed to build Node_3916_add (type:add)");
  res_2697->getOutput(0)->setName("Node_3916_add:0");
  auto res_2698=network->addElementWise(*res_2697->getOutput(0),*res_2675->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2698 && "failed to build Node_3920 (type:add)");
  res_2698->getOutput(0)->setName("Node_3920:0");
  auto res_2699=network->addReduce(*res_2698->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2699 && "failed to build Node_3925_mean (type:mean)");
  res_2699->getOutput(0)->setName("Node_3925_mean:0");
  auto res_2700=network->addElementWise(*res_2698->getOutput(0),*res_2699->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2700 && "failed to build Node_3925_diff (type:sub)");
  res_2700->getOutput(0)->setName("Node_3925_diff:0");
  auto res_2701=network->addElementWise(*res_2700->getOutput(0),*res_1189->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2701 && "failed to build Node_3925_power (type:power)");
  res_2701->getOutput(0)->setName("Node_3925_power:0");
  auto res_2702=network->addReduce(*res_2701->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2702 && "failed to build Node_3925_var (type:mean)");
  res_2702->getOutput(0)->setName("Node_3925_var:0");
  auto res_2703=network->addElementWise(*res_2702->getOutput(0),*res_1063->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2703 && "failed to build Node_3925_modify (type:add)");
  res_2703->getOutput(0)->setName("Node_3925_modify:0");
  auto res_2704=network->addUnary(*res_2703->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2704 && "failed to build Node_3925_sqrt (type:power)");
  res_2704->getOutput(0)->setName("Node_3925_sqrt:0");
  auto res_2705=network->addElementWise(*res_2700->getOutput(0),*res_2704->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2705 && "failed to build Node_3925_rsqrt (type:divide)");
  res_2705->getOutput(0)->setName("Node_3925_rsqrt:0");
  auto res_2706=network->addElementWise(*res_2705->getOutput(0),*res_162->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2706 && "failed to build Node_3925_mul (type:multiply)");
  res_2706->getOutput(0)->setName("Node_3925_mul:0");
  auto res_2707=network->addElementWise(*res_2706->getOutput(0),*res_163->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2707 && "failed to build Node_3925 (type:add)");
  res_2707->getOutput(0)->setName("Node_3925:0");
  auto res_2708=network->addMatrixMultiply(*res_2707->getOutput(0),MatrixOperation::kNONE,*res_556->getOutput(0),MatrixOperation::kNONE);
  assert(res_2708 && "failed to build Node_3929 (type:matmul)");
  res_2708->getOutput(0)->setName("Node_3929:0");
  auto res_2709=network->addElementWise(*res_2708->getOutput(0),*res_557->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2709 && "failed to build Node_3929_add (type:add)");
  res_2709->getOutput(0)->setName("Node_3929_add:0");
  ITensor* inputTensors_2710[1] = {res_2709->getOutput(0)};
  auto plugin_2710=GELU_Plugin("gelu");
  auto res_2710=network->addPluginV2(inputTensors_2710,1,plugin_2710);
  assert(res_2710 && "failed to build Node_3930 (type:gelu)");
  res_2710->getOutput(0)->setName("Node_3930:0");
  auto res_2711=network->addMatrixMultiply(*res_2710->getOutput(0),MatrixOperation::kNONE,*res_558->getOutput(0),MatrixOperation::kNONE);
  assert(res_2711 && "failed to build Node_3935 (type:matmul)");
  res_2711->getOutput(0)->setName("Node_3935:0");
  auto res_2712=network->addElementWise(*res_2711->getOutput(0),*res_559->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2712 && "failed to build Node_3935_add (type:add)");
  res_2712->getOutput(0)->setName("Node_3935_add:0");
  auto res_2713=network->addElementWise(*res_2712->getOutput(0),*res_2707->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2713 && "failed to build Node_3939 (type:add)");
  res_2713->getOutput(0)->setName("Node_3939:0");
  auto res_2714=network->addReduce(*res_2713->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2714 && "failed to build Node_3944_mean (type:mean)");
  res_2714->getOutput(0)->setName("Node_3944_mean:0");
  auto res_2715=network->addElementWise(*res_2713->getOutput(0),*res_2714->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2715 && "failed to build Node_3944_diff (type:sub)");
  res_2715->getOutput(0)->setName("Node_3944_diff:0");
  auto res_2716=network->addElementWise(*res_2715->getOutput(0),*res_1190->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2716 && "failed to build Node_3944_power (type:power)");
  res_2716->getOutput(0)->setName("Node_3944_power:0");
  auto res_2717=network->addReduce(*res_2716->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2717 && "failed to build Node_3944_var (type:mean)");
  res_2717->getOutput(0)->setName("Node_3944_var:0");
  auto res_2718=network->addElementWise(*res_2717->getOutput(0),*res_1064->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2718 && "failed to build Node_3944_modify (type:add)");
  res_2718->getOutput(0)->setName("Node_3944_modify:0");
  auto res_2719=network->addUnary(*res_2718->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2719 && "failed to build Node_3944_sqrt (type:power)");
  res_2719->getOutput(0)->setName("Node_3944_sqrt:0");
  auto res_2720=network->addElementWise(*res_2715->getOutput(0),*res_2719->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2720 && "failed to build Node_3944_rsqrt (type:divide)");
  res_2720->getOutput(0)->setName("Node_3944_rsqrt:0");
  auto res_2721=network->addElementWise(*res_2720->getOutput(0),*res_164->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2721 && "failed to build Node_3944_mul (type:multiply)");
  res_2721->getOutput(0)->setName("Node_3944_mul:0");
  auto res_2722=network->addElementWise(*res_2721->getOutput(0),*res_165->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2722 && "failed to build Node_3944 (type:add)");
  res_2722->getOutput(0)->setName("Node_3944:0");
  auto res_2723=network->addMatrixMultiply(*res_2722->getOutput(0),MatrixOperation::kNONE,*res_560->getOutput(0),MatrixOperation::kNONE);
  assert(res_2723 && "failed to build Node_3959 (type:matmul)");
  res_2723->getOutput(0)->setName("Node_3959:0");
  auto res_2724=network->addElementWise(*res_2723->getOutput(0),*res_561->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2724 && "failed to build Node_3959_add (type:add)");
  res_2724->getOutput(0)->setName("Node_3959_add:0");
  auto res_2725=network->addShuffle(*res_2724->getOutput(0));
  res_2725->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2725 && "failed to build Node_3975 (type:reshape)");
  res_2725->getOutput(0)->setName("Node_3975:0");
  auto res_2726=network->addShuffle(*res_2725->getOutput(0));
  Permutation permute_2726;
  permute_2726.order[0]=1;
  permute_2726.order[1]=0;
  permute_2726.order[2]=2;
  res_2726->setFirstTranspose(permute_2726);
  assert(res_2726 && "failed to build Node_3977 (type:transpose)");
  res_2726->getOutput(0)->setName("Node_3977:0");
  auto res_2727=network->addMatrixMultiply(*res_2722->getOutput(0),MatrixOperation::kNONE,*res_562->getOutput(0),MatrixOperation::kNONE);
  assert(res_2727 && "failed to build Node_3963 (type:matmul)");
  res_2727->getOutput(0)->setName("Node_3963:0");
  auto res_2728=network->addElementWise(*res_2727->getOutput(0),*res_563->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2728 && "failed to build Node_3963_add (type:add)");
  res_2728->getOutput(0)->setName("Node_3963_add:0");
  auto res_2729=network->addShuffle(*res_2728->getOutput(0));
  res_2729->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2729 && "failed to build Node_3985 (type:reshape)");
  res_2729->getOutput(0)->setName("Node_3985:0");
  auto res_2730=network->addShuffle(*res_2729->getOutput(0));
  Permutation permute_2730;
  permute_2730.order[0]=1;
  permute_2730.order[1]=2;
  permute_2730.order[2]=0;
  res_2730->setFirstTranspose(permute_2730);
  assert(res_2730 && "failed to build Node_3998 (type:transpose)");
  res_2730->getOutput(0)->setName("Node_3998:0");
  auto res_2731=network->addMatrixMultiply(*res_2726->getOutput(0),MatrixOperation::kNONE,*res_2730->getOutput(0),MatrixOperation::kNONE);
  assert(res_2731 && "failed to build Node_3999 (type:matmul)");
  res_2731->getOutput(0)->setName("Node_3999:0");
  auto res_2732=network->addElementWise(*res_2731->getOutput(0),*res_964->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2732 && "failed to build Node_4000 (type:divide)");
  res_2732->getOutput(0)->setName("Node_4000:0");
  auto res_2733=network->addElementWise(*res_2732->getOutput(0),*res_2520->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2733 && "failed to build Node_4001 (type:add)");
  res_2733->getOutput(0)->setName("Node_4001:0");
  auto res_2734=network->addSoftMax(*res_2733->getOutput(0));
  res_2734->setAxes(4);
  assert(res_2734 && "failed to build Node_4002 (type:softmax)");
  res_2734->getOutput(0)->setName("Node_4002:0");
  auto res_2735=network->addMatrixMultiply(*res_2722->getOutput(0),MatrixOperation::kNONE,*res_564->getOutput(0),MatrixOperation::kNONE);
  assert(res_2735 && "failed to build Node_3967 (type:matmul)");
  res_2735->getOutput(0)->setName("Node_3967:0");
  auto res_2736=network->addElementWise(*res_2735->getOutput(0),*res_565->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2736 && "failed to build Node_3967_add (type:add)");
  res_2736->getOutput(0)->setName("Node_3967_add:0");
  auto res_2737=network->addShuffle(*res_2736->getOutput(0));
  res_2737->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2737 && "failed to build Node_3995 (type:reshape)");
  res_2737->getOutput(0)->setName("Node_3995:0");
  auto res_2738=network->addShuffle(*res_2737->getOutput(0));
  Permutation permute_2738;
  permute_2738.order[0]=1;
  permute_2738.order[1]=0;
  permute_2738.order[2]=2;
  res_2738->setFirstTranspose(permute_2738);
  assert(res_2738 && "failed to build Node_3997 (type:transpose)");
  res_2738->getOutput(0)->setName("Node_3997:0");
  auto res_2739=network->addMatrixMultiply(*res_2734->getOutput(0),MatrixOperation::kNONE,*res_2738->getOutput(0),MatrixOperation::kNONE);
  assert(res_2739 && "failed to build Node_4006 (type:matmul)");
  res_2739->getOutput(0)->setName("Node_4006:0");
  auto res_2740=network->addShuffle(*res_2739->getOutput(0));
  Permutation permute_2740;
  permute_2740.order[0]=1;
  permute_2740.order[1]=0;
  permute_2740.order[2]=2;
  res_2740->setFirstTranspose(permute_2740);
  assert(res_2740 && "failed to build Node_4008 (type:transpose)");
  res_2740->getOutput(0)->setName("Node_4008:0");
  auto res_2741=network->addIdentity(*res_2740->getOutput(0));
  assert(res_2741 && "failed to build Node_4009 (type:contiguous)");
  res_2741->getOutput(0)->setName("Node_4009:0");
  auto res_2742=network->addShuffle(*res_2741->getOutput(0));
  res_2742->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2742 && "failed to build Node_4017 (type:reshape)");
  res_2742->getOutput(0)->setName("Node_4017:0");
  auto res_2743=network->addMatrixMultiply(*res_2742->getOutput(0),MatrixOperation::kNONE,*res_566->getOutput(0),MatrixOperation::kNONE);
  assert(res_2743 && "failed to build Node_4022 (type:matmul)");
  res_2743->getOutput(0)->setName("Node_4022:0");
  auto res_2744=network->addElementWise(*res_2743->getOutput(0),*res_567->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2744 && "failed to build Node_4022_add (type:add)");
  res_2744->getOutput(0)->setName("Node_4022_add:0");
  auto res_2745=network->addElementWise(*res_2744->getOutput(0),*res_2722->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2745 && "failed to build Node_4026 (type:add)");
  res_2745->getOutput(0)->setName("Node_4026:0");
  auto res_2746=network->addReduce(*res_2745->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2746 && "failed to build Node_4031_mean (type:mean)");
  res_2746->getOutput(0)->setName("Node_4031_mean:0");
  auto res_2747=network->addElementWise(*res_2745->getOutput(0),*res_2746->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2747 && "failed to build Node_4031_diff (type:sub)");
  res_2747->getOutput(0)->setName("Node_4031_diff:0");
  auto res_2748=network->addElementWise(*res_2747->getOutput(0),*res_1191->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2748 && "failed to build Node_4031_power (type:power)");
  res_2748->getOutput(0)->setName("Node_4031_power:0");
  auto res_2749=network->addReduce(*res_2748->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2749 && "failed to build Node_4031_var (type:mean)");
  res_2749->getOutput(0)->setName("Node_4031_var:0");
  auto res_2750=network->addElementWise(*res_2749->getOutput(0),*res_1065->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2750 && "failed to build Node_4031_modify (type:add)");
  res_2750->getOutput(0)->setName("Node_4031_modify:0");
  auto res_2751=network->addUnary(*res_2750->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2751 && "failed to build Node_4031_sqrt (type:power)");
  res_2751->getOutput(0)->setName("Node_4031_sqrt:0");
  auto res_2752=network->addElementWise(*res_2747->getOutput(0),*res_2751->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2752 && "failed to build Node_4031_rsqrt (type:divide)");
  res_2752->getOutput(0)->setName("Node_4031_rsqrt:0");
  auto res_2753=network->addElementWise(*res_2752->getOutput(0),*res_166->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2753 && "failed to build Node_4031_mul (type:multiply)");
  res_2753->getOutput(0)->setName("Node_4031_mul:0");
  auto res_2754=network->addElementWise(*res_2753->getOutput(0),*res_167->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2754 && "failed to build Node_4031 (type:add)");
  res_2754->getOutput(0)->setName("Node_4031:0");
  auto res_2755=network->addMatrixMultiply(*res_2754->getOutput(0),MatrixOperation::kNONE,*res_568->getOutput(0),MatrixOperation::kNONE);
  assert(res_2755 && "failed to build Node_4035 (type:matmul)");
  res_2755->getOutput(0)->setName("Node_4035:0");
  auto res_2756=network->addElementWise(*res_2755->getOutput(0),*res_569->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2756 && "failed to build Node_4035_add (type:add)");
  res_2756->getOutput(0)->setName("Node_4035_add:0");
  ITensor* inputTensors_2757[1] = {res_2756->getOutput(0)};
  auto plugin_2757=GELU_Plugin("gelu");
  auto res_2757=network->addPluginV2(inputTensors_2757,1,plugin_2757);
  assert(res_2757 && "failed to build Node_4036 (type:gelu)");
  res_2757->getOutput(0)->setName("Node_4036:0");
  auto res_2758=network->addMatrixMultiply(*res_2757->getOutput(0),MatrixOperation::kNONE,*res_570->getOutput(0),MatrixOperation::kNONE);
  assert(res_2758 && "failed to build Node_4041 (type:matmul)");
  res_2758->getOutput(0)->setName("Node_4041:0");
  auto res_2759=network->addElementWise(*res_2758->getOutput(0),*res_571->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2759 && "failed to build Node_4041_add (type:add)");
  res_2759->getOutput(0)->setName("Node_4041_add:0");
  auto res_2760=network->addElementWise(*res_2759->getOutput(0),*res_2754->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2760 && "failed to build Node_4045 (type:add)");
  res_2760->getOutput(0)->setName("Node_4045:0");
  auto res_2761=network->addReduce(*res_2760->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2761 && "failed to build Node_4050_mean (type:mean)");
  res_2761->getOutput(0)->setName("Node_4050_mean:0");
  auto res_2762=network->addElementWise(*res_2760->getOutput(0),*res_2761->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2762 && "failed to build Node_4050_diff (type:sub)");
  res_2762->getOutput(0)->setName("Node_4050_diff:0");
  auto res_2763=network->addElementWise(*res_2762->getOutput(0),*res_1192->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2763 && "failed to build Node_4050_power (type:power)");
  res_2763->getOutput(0)->setName("Node_4050_power:0");
  auto res_2764=network->addReduce(*res_2763->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2764 && "failed to build Node_4050_var (type:mean)");
  res_2764->getOutput(0)->setName("Node_4050_var:0");
  auto res_2765=network->addElementWise(*res_2764->getOutput(0),*res_1066->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2765 && "failed to build Node_4050_modify (type:add)");
  res_2765->getOutput(0)->setName("Node_4050_modify:0");
  auto res_2766=network->addUnary(*res_2765->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2766 && "failed to build Node_4050_sqrt (type:power)");
  res_2766->getOutput(0)->setName("Node_4050_sqrt:0");
  auto res_2767=network->addElementWise(*res_2762->getOutput(0),*res_2766->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2767 && "failed to build Node_4050_rsqrt (type:divide)");
  res_2767->getOutput(0)->setName("Node_4050_rsqrt:0");
  auto res_2768=network->addElementWise(*res_2767->getOutput(0),*res_168->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2768 && "failed to build Node_4050_mul (type:multiply)");
  res_2768->getOutput(0)->setName("Node_4050_mul:0");
  auto res_2769=network->addElementWise(*res_2768->getOutput(0),*res_169->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2769 && "failed to build Node_4050 (type:add)");
  res_2769->getOutput(0)->setName("Node_4050:0");
  auto res_2770=network->addMatrixMultiply(*res_2769->getOutput(0),MatrixOperation::kNONE,*res_572->getOutput(0),MatrixOperation::kNONE);
  assert(res_2770 && "failed to build Node_4065 (type:matmul)");
  res_2770->getOutput(0)->setName("Node_4065:0");
  auto res_2771=network->addElementWise(*res_2770->getOutput(0),*res_573->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2771 && "failed to build Node_4065_add (type:add)");
  res_2771->getOutput(0)->setName("Node_4065_add:0");
  auto res_2772=network->addShuffle(*res_2771->getOutput(0));
  res_2772->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2772 && "failed to build Node_4081 (type:reshape)");
  res_2772->getOutput(0)->setName("Node_4081:0");
  auto res_2773=network->addShuffle(*res_2772->getOutput(0));
  Permutation permute_2773;
  permute_2773.order[0]=1;
  permute_2773.order[1]=0;
  permute_2773.order[2]=2;
  res_2773->setFirstTranspose(permute_2773);
  assert(res_2773 && "failed to build Node_4083 (type:transpose)");
  res_2773->getOutput(0)->setName("Node_4083:0");
  auto res_2774=network->addMatrixMultiply(*res_2769->getOutput(0),MatrixOperation::kNONE,*res_574->getOutput(0),MatrixOperation::kNONE);
  assert(res_2774 && "failed to build Node_4069 (type:matmul)");
  res_2774->getOutput(0)->setName("Node_4069:0");
  auto res_2775=network->addElementWise(*res_2774->getOutput(0),*res_575->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2775 && "failed to build Node_4069_add (type:add)");
  res_2775->getOutput(0)->setName("Node_4069_add:0");
  auto res_2776=network->addShuffle(*res_2775->getOutput(0));
  res_2776->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2776 && "failed to build Node_4091 (type:reshape)");
  res_2776->getOutput(0)->setName("Node_4091:0");
  auto res_2777=network->addShuffle(*res_2776->getOutput(0));
  Permutation permute_2777;
  permute_2777.order[0]=1;
  permute_2777.order[1]=2;
  permute_2777.order[2]=0;
  res_2777->setFirstTranspose(permute_2777);
  assert(res_2777 && "failed to build Node_4104 (type:transpose)");
  res_2777->getOutput(0)->setName("Node_4104:0");
  auto res_2778=network->addMatrixMultiply(*res_2773->getOutput(0),MatrixOperation::kNONE,*res_2777->getOutput(0),MatrixOperation::kNONE);
  assert(res_2778 && "failed to build Node_4105 (type:matmul)");
  res_2778->getOutput(0)->setName("Node_4105:0");
  auto res_2779=network->addElementWise(*res_2778->getOutput(0),*res_965->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2779 && "failed to build Node_4106 (type:divide)");
  res_2779->getOutput(0)->setName("Node_4106:0");
  auto res_2780=network->addElementWise(*res_2779->getOutput(0),*res_2520->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2780 && "failed to build Node_4107 (type:add)");
  res_2780->getOutput(0)->setName("Node_4107:0");
  auto res_2781=network->addSoftMax(*res_2780->getOutput(0));
  res_2781->setAxes(4);
  assert(res_2781 && "failed to build Node_4108 (type:softmax)");
  res_2781->getOutput(0)->setName("Node_4108:0");
  auto res_2782=network->addMatrixMultiply(*res_2769->getOutput(0),MatrixOperation::kNONE,*res_576->getOutput(0),MatrixOperation::kNONE);
  assert(res_2782 && "failed to build Node_4073 (type:matmul)");
  res_2782->getOutput(0)->setName("Node_4073:0");
  auto res_2783=network->addElementWise(*res_2782->getOutput(0),*res_577->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2783 && "failed to build Node_4073_add (type:add)");
  res_2783->getOutput(0)->setName("Node_4073_add:0");
  auto res_2784=network->addShuffle(*res_2783->getOutput(0));
  res_2784->setReshapeDimensions(Dims3{33,6,32});
  assert(res_2784 && "failed to build Node_4101 (type:reshape)");
  res_2784->getOutput(0)->setName("Node_4101:0");
  auto res_2785=network->addShuffle(*res_2784->getOutput(0));
  Permutation permute_2785;
  permute_2785.order[0]=1;
  permute_2785.order[1]=0;
  permute_2785.order[2]=2;
  res_2785->setFirstTranspose(permute_2785);
  assert(res_2785 && "failed to build Node_4103 (type:transpose)");
  res_2785->getOutput(0)->setName("Node_4103:0");
  auto res_2786=network->addMatrixMultiply(*res_2781->getOutput(0),MatrixOperation::kNONE,*res_2785->getOutput(0),MatrixOperation::kNONE);
  assert(res_2786 && "failed to build Node_4112 (type:matmul)");
  res_2786->getOutput(0)->setName("Node_4112:0");
  auto res_2787=network->addShuffle(*res_2786->getOutput(0));
  Permutation permute_2787;
  permute_2787.order[0]=1;
  permute_2787.order[1]=0;
  permute_2787.order[2]=2;
  res_2787->setFirstTranspose(permute_2787);
  assert(res_2787 && "failed to build Node_4114 (type:transpose)");
  res_2787->getOutput(0)->setName("Node_4114:0");
  auto res_2788=network->addIdentity(*res_2787->getOutput(0));
  assert(res_2788 && "failed to build Node_4115 (type:contiguous)");
  res_2788->getOutput(0)->setName("Node_4115:0");
  auto res_2789=network->addShuffle(*res_2788->getOutput(0));
  res_2789->setReshapeDimensions(Dims{2,{33,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2789 && "failed to build Node_4123 (type:reshape)");
  res_2789->getOutput(0)->setName("Node_4123:0");
  auto res_2790=network->addMatrixMultiply(*res_2789->getOutput(0),MatrixOperation::kNONE,*res_578->getOutput(0),MatrixOperation::kNONE);
  assert(res_2790 && "failed to build Node_4128 (type:matmul)");
  res_2790->getOutput(0)->setName("Node_4128:0");
  auto res_2791=network->addElementWise(*res_2790->getOutput(0),*res_579->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2791 && "failed to build Node_4128_add (type:add)");
  res_2791->getOutput(0)->setName("Node_4128_add:0");
  auto res_2792=network->addElementWise(*res_2791->getOutput(0),*res_2769->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2792 && "failed to build Node_4132 (type:add)");
  res_2792->getOutput(0)->setName("Node_4132:0");
  auto res_2793=network->addReduce(*res_2792->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2793 && "failed to build Node_4137_mean (type:mean)");
  res_2793->getOutput(0)->setName("Node_4137_mean:0");
  auto res_2794=network->addElementWise(*res_2792->getOutput(0),*res_2793->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2794 && "failed to build Node_4137_diff (type:sub)");
  res_2794->getOutput(0)->setName("Node_4137_diff:0");
  auto res_2795=network->addElementWise(*res_2794->getOutput(0),*res_1193->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2795 && "failed to build Node_4137_power (type:power)");
  res_2795->getOutput(0)->setName("Node_4137_power:0");
  auto res_2796=network->addReduce(*res_2795->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2796 && "failed to build Node_4137_var (type:mean)");
  res_2796->getOutput(0)->setName("Node_4137_var:0");
  auto res_2797=network->addElementWise(*res_2796->getOutput(0),*res_1067->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2797 && "failed to build Node_4137_modify (type:add)");
  res_2797->getOutput(0)->setName("Node_4137_modify:0");
  auto res_2798=network->addUnary(*res_2797->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2798 && "failed to build Node_4137_sqrt (type:power)");
  res_2798->getOutput(0)->setName("Node_4137_sqrt:0");
  auto res_2799=network->addElementWise(*res_2794->getOutput(0),*res_2798->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2799 && "failed to build Node_4137_rsqrt (type:divide)");
  res_2799->getOutput(0)->setName("Node_4137_rsqrt:0");
  auto res_2800=network->addElementWise(*res_2799->getOutput(0),*res_170->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2800 && "failed to build Node_4137_mul (type:multiply)");
  res_2800->getOutput(0)->setName("Node_4137_mul:0");
  auto res_2801=network->addElementWise(*res_2800->getOutput(0),*res_171->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2801 && "failed to build Node_4137 (type:add)");
  res_2801->getOutput(0)->setName("Node_4137:0");
  auto res_2802=network->addMatrixMultiply(*res_2801->getOutput(0),MatrixOperation::kNONE,*res_580->getOutput(0),MatrixOperation::kNONE);
  assert(res_2802 && "failed to build Node_4141 (type:matmul)");
  res_2802->getOutput(0)->setName("Node_4141:0");
  auto res_2803=network->addElementWise(*res_2802->getOutput(0),*res_581->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2803 && "failed to build Node_4141_add (type:add)");
  res_2803->getOutput(0)->setName("Node_4141_add:0");
  ITensor* inputTensors_2804[1] = {res_2803->getOutput(0)};
  auto plugin_2804=GELU_Plugin("gelu");
  auto res_2804=network->addPluginV2(inputTensors_2804,1,plugin_2804);
  assert(res_2804 && "failed to build Node_4142 (type:gelu)");
  res_2804->getOutput(0)->setName("Node_4142:0");
  auto res_2805=network->addMatrixMultiply(*res_2804->getOutput(0),MatrixOperation::kNONE,*res_582->getOutput(0),MatrixOperation::kNONE);
  assert(res_2805 && "failed to build Node_4147 (type:matmul)");
  res_2805->getOutput(0)->setName("Node_4147:0");
  auto res_2806=network->addElementWise(*res_2805->getOutput(0),*res_583->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2806 && "failed to build Node_4147_add (type:add)");
  res_2806->getOutput(0)->setName("Node_4147_add:0");
  auto res_2807=network->addElementWise(*res_2806->getOutput(0),*res_2801->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2807 && "failed to build Node_4151 (type:add)");
  res_2807->getOutput(0)->setName("Node_4151:0");
  auto res_2808=network->addReduce(*res_2807->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2808 && "failed to build Node_4156_mean (type:mean)");
  res_2808->getOutput(0)->setName("Node_4156_mean:0");
  auto res_2809=network->addElementWise(*res_2807->getOutput(0),*res_2808->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2809 && "failed to build Node_4156_diff (type:sub)");
  res_2809->getOutput(0)->setName("Node_4156_diff:0");
  auto res_2810=network->addElementWise(*res_2809->getOutput(0),*res_1194->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2810 && "failed to build Node_4156_power (type:power)");
  res_2810->getOutput(0)->setName("Node_4156_power:0");
  auto res_2811=network->addReduce(*res_2810->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2811 && "failed to build Node_4156_var (type:mean)");
  res_2811->getOutput(0)->setName("Node_4156_var:0");
  auto res_2812=network->addElementWise(*res_2811->getOutput(0),*res_1068->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2812 && "failed to build Node_4156_modify (type:add)");
  res_2812->getOutput(0)->setName("Node_4156_modify:0");
  auto res_2813=network->addUnary(*res_2812->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2813 && "failed to build Node_4156_sqrt (type:power)");
  res_2813->getOutput(0)->setName("Node_4156_sqrt:0");
  auto res_2814=network->addElementWise(*res_2809->getOutput(0),*res_2813->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2814 && "failed to build Node_4156_rsqrt (type:divide)");
  res_2814->getOutput(0)->setName("Node_4156_rsqrt:0");
  auto res_2815=network->addElementWise(*res_2814->getOutput(0),*res_172->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2815 && "failed to build Node_4156_mul (type:multiply)");
  res_2815->getOutput(0)->setName("Node_4156_mul:0");
  auto res_2816=network->addElementWise(*res_2815->getOutput(0),*res_173->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2816 && "failed to build Node_4156 (type:add)");
  res_2816->getOutput(0)->setName("Node_4156:0");
  auto res_2817=network->addSlice(*res_2816->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_2817 && "failed to build Node_4160 (type:dlr_slice)");
  res_2817->getOutput(0)->setName("Node_4160:0");
  auto res_2818=network->addShuffle(*res_2817->getOutput(0));
  res_2818->setReshapeDimensions(Dims3{192,1,1});
  assert(res_2818 && "failed to build Node_4162_reshape (type:reshape)");
  res_2818->getOutput(0)->setName("Node_4162_reshape:0");
  auto res_2819=network->addFullyConnected(*res_2818->getOutput(0),192,mWeightsMap["weight_2507"],mWeightsMap["bias_2507"]);
  assert(res_2819 && "failed to build Node_4165 (type:dense)");
  res_2819->getOutput(0)->setName("Node_4165:0");
  auto res_2820=network->addShuffle(*res_2819->getOutput(0));
  res_2820->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_2820 && "failed to build Node_4165_reshape (type:reshape)");
  res_2820->getOutput(0)->setName("Node_4165_reshape:0");
  auto res_2821=network->addActivation(*res_2820->getOutput(0),ActivationType::kTANH);
  assert(res_2821 && "failed to build Node_4166 (type:tanh)");
  res_2821->getOutput(0)->setName("Node_4166:0");
  auto res_2822=network->addShuffle(*res_2821->getOutput(0));
  res_2822->setReshapeDimensions(Dims{2,{1,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2822 && "failed to build Node_7280 (type:reshape)");
  res_2822->getOutput(0)->setName("Node_7280:0");
  auto res_2823=network->addUnary(*inputs[20],UnaryOperation::kABS);
  assert(res_2823 && "failed to build Node_4175 (type:abs)");
  res_2823->getOutput(0)->setName("Node_4175:0");
  ITensor* inputTensors_2824[1] = {res_2823->getOutput(0)};
  auto plugin_2824=MASK_Plugin("mask",1e-06,MaskMode::kGREATER_THAN);
  auto res_2824=network->addPluginV2(inputTensors_2824,1,plugin_2824);
  assert(res_2824 && "failed to build Node_4176 (type:mask)");
  res_2824->getOutput(0)->setName("Node_4176:0");
  auto res_2825=network->addShuffle(*res_2824->getOutput(0));
  res_2825->setReshapeDimensions(Dims{2,{12,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2825 && "failed to build Node_4190 (type:reshape)");
  res_2825->getOutput(0)->setName("Node_4190:0");
  auto res_2826=network->addElementWise(*res_51->getOutput(0),*res_2825->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2826 && "failed to build Node_4192 (type:add)");
  res_2826->getOutput(0)->setName("Node_4192:0");
  auto res_2827=network->addElementWise(*inputs[21],*res_2826->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2827 && "failed to build Node_4193 (type:multiply)");
  res_2827->getOutput(0)->setName("Node_4193:0");
  auto res_2828=network->addShuffle(*res_2824->getOutput(0));
  res_2828->setReshapeDimensions(Dims{2,{12,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2828 && "failed to build Node_4206 (type:reshape)");
  res_2828->getOutput(0)->setName("Node_4206:0");
  auto res_2829=network->addElementWise(*res_52->getOutput(0),*res_2828->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2829 && "failed to build Node_4208 (type:add)");
  res_2829->getOutput(0)->setName("Node_4208:0");
  auto res_2830=network->addShuffle(*res_2824->getOutput(0));
  res_2830->setReshapeDimensions(Dims{2,{12,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2830 && "failed to build Node_4222 (type:reshape)");
  res_2830->getOutput(0)->setName("Node_4222:0");
  auto res_2831=network->addElementWise(*res_53->getOutput(0),*res_2830->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2831 && "failed to build Node_4224 (type:add)");
  res_2831->getOutput(0)->setName("Node_4224:0");
  auto res_2832=network->addShuffle(*res_2824->getOutput(0));
  res_2832->setReshapeDimensions(Dims3{1,1,12});
  assert(res_2832 && "failed to build Node_4242 (type:reshape)");
  res_2832->getOutput(0)->setName("Node_4242:0");
  auto res_2833=network->addElementWise(*res_966->getOutput(0),*res_2832->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2833 && "failed to build Node_4244 (type:sub)");
  res_2833->getOutput(0)->setName("Node_4244:0");
  auto res_2834=network->addElementWise(*res_2833->getOutput(0),*res_967->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2834 && "failed to build Node_4245 (type:multiply)");
  res_2834->getOutput(0)->setName("Node_4245:0");
  auto res_2835=network->addElementWise(*inputs[22],*res_2829->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2835 && "failed to build Node_4209 (type:multiply)");
  res_2835->getOutput(0)->setName("Node_4209:0");
  auto res_2836=network->addElementWise(*res_2827->getOutput(0),*res_2835->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2836 && "failed to build Node_4232 (type:add)");
  res_2836->getOutput(0)->setName("Node_4232:0");
  auto res_2837=network->addElementWise(*inputs[23],*res_2831->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2837 && "failed to build Node_4225 (type:multiply)");
  res_2837->getOutput(0)->setName("Node_4225:0");
  auto res_2838=network->addElementWise(*res_2836->getOutput(0),*res_2837->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2838 && "failed to build Node_4233 (type:add)");
  res_2838->getOutput(0)->setName("Node_4233:0");
  auto res_2839=network->addElementWise(*res_2838->getOutput(0),*res_66->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2839 && "failed to build Node_4266 (type:add)");
  res_2839->getOutput(0)->setName("Node_4266:0");
  auto res_2840=network->addReduce(*res_2839->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2840 && "failed to build Node_4273_mean (type:mean)");
  res_2840->getOutput(0)->setName("Node_4273_mean:0");
  auto res_2841=network->addElementWise(*res_2839->getOutput(0),*res_2840->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2841 && "failed to build Node_4273_diff (type:sub)");
  res_2841->getOutput(0)->setName("Node_4273_diff:0");
  auto res_2842=network->addElementWise(*res_2841->getOutput(0),*res_1195->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2842 && "failed to build Node_4273_power (type:power)");
  res_2842->getOutput(0)->setName("Node_4273_power:0");
  auto res_2843=network->addReduce(*res_2842->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2843 && "failed to build Node_4273_var (type:mean)");
  res_2843->getOutput(0)->setName("Node_4273_var:0");
  auto res_2844=network->addElementWise(*res_2843->getOutput(0),*res_1069->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2844 && "failed to build Node_4273_modify (type:add)");
  res_2844->getOutput(0)->setName("Node_4273_modify:0");
  auto res_2845=network->addUnary(*res_2844->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2845 && "failed to build Node_4273_sqrt (type:power)");
  res_2845->getOutput(0)->setName("Node_4273_sqrt:0");
  auto res_2846=network->addElementWise(*res_2841->getOutput(0),*res_2845->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2846 && "failed to build Node_4273_rsqrt (type:divide)");
  res_2846->getOutput(0)->setName("Node_4273_rsqrt:0");
  auto res_2847=network->addElementWise(*res_2846->getOutput(0),*res_174->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2847 && "failed to build Node_4273_mul (type:multiply)");
  res_2847->getOutput(0)->setName("Node_4273_mul:0");
  auto res_2848=network->addElementWise(*res_2847->getOutput(0),*res_175->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2848 && "failed to build Node_4273 (type:add)");
  res_2848->getOutput(0)->setName("Node_4273:0");
  auto res_2849=network->addMatrixMultiply(*res_2848->getOutput(0),MatrixOperation::kNONE,*res_584->getOutput(0),MatrixOperation::kNONE);
  assert(res_2849 && "failed to build Node_4293 (type:matmul)");
  res_2849->getOutput(0)->setName("Node_4293:0");
  auto res_2850=network->addElementWise(*res_2849->getOutput(0),*res_585->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2850 && "failed to build Node_4293_add (type:add)");
  res_2850->getOutput(0)->setName("Node_4293_add:0");
  auto res_2851=network->addShuffle(*res_2850->getOutput(0));
  res_2851->setReshapeDimensions(Dims3{12,6,32});
  assert(res_2851 && "failed to build Node_4313 (type:reshape)");
  res_2851->getOutput(0)->setName("Node_4313:0");
  auto res_2852=network->addShuffle(*res_2851->getOutput(0));
  Permutation permute_2852;
  permute_2852.order[0]=1;
  permute_2852.order[1]=0;
  permute_2852.order[2]=2;
  res_2852->setFirstTranspose(permute_2852);
  assert(res_2852 && "failed to build Node_4315 (type:transpose)");
  res_2852->getOutput(0)->setName("Node_4315:0");
  auto res_2853=network->addMatrixMultiply(*res_2848->getOutput(0),MatrixOperation::kNONE,*res_586->getOutput(0),MatrixOperation::kNONE);
  assert(res_2853 && "failed to build Node_4299 (type:matmul)");
  res_2853->getOutput(0)->setName("Node_4299:0");
  auto res_2854=network->addElementWise(*res_2853->getOutput(0),*res_587->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2854 && "failed to build Node_4299_add (type:add)");
  res_2854->getOutput(0)->setName("Node_4299_add:0");
  auto res_2855=network->addShuffle(*res_2854->getOutput(0));
  res_2855->setReshapeDimensions(Dims3{12,6,32});
  assert(res_2855 && "failed to build Node_4323 (type:reshape)");
  res_2855->getOutput(0)->setName("Node_4323:0");
  auto res_2856=network->addShuffle(*res_2855->getOutput(0));
  Permutation permute_2856;
  permute_2856.order[0]=1;
  permute_2856.order[1]=2;
  permute_2856.order[2]=0;
  res_2856->setFirstTranspose(permute_2856);
  assert(res_2856 && "failed to build Node_4336 (type:transpose)");
  res_2856->getOutput(0)->setName("Node_4336:0");
  auto res_2857=network->addMatrixMultiply(*res_2852->getOutput(0),MatrixOperation::kNONE,*res_2856->getOutput(0),MatrixOperation::kNONE);
  assert(res_2857 && "failed to build Node_4337 (type:matmul)");
  res_2857->getOutput(0)->setName("Node_4337:0");
  auto res_2858=network->addElementWise(*res_2857->getOutput(0),*res_968->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2858 && "failed to build Node_4338 (type:divide)");
  res_2858->getOutput(0)->setName("Node_4338:0");
  auto res_2859=network->addElementWise(*res_2858->getOutput(0),*res_2834->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2859 && "failed to build Node_4339 (type:add)");
  res_2859->getOutput(0)->setName("Node_4339:0");
  auto res_2860=network->addSoftMax(*res_2859->getOutput(0));
  res_2860->setAxes(4);
  assert(res_2860 && "failed to build Node_4340 (type:softmax)");
  res_2860->getOutput(0)->setName("Node_4340:0");
  auto res_2861=network->addMatrixMultiply(*res_2848->getOutput(0),MatrixOperation::kNONE,*res_588->getOutput(0),MatrixOperation::kNONE);
  assert(res_2861 && "failed to build Node_4305 (type:matmul)");
  res_2861->getOutput(0)->setName("Node_4305:0");
  auto res_2862=network->addElementWise(*res_2861->getOutput(0),*res_589->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2862 && "failed to build Node_4305_add (type:add)");
  res_2862->getOutput(0)->setName("Node_4305_add:0");
  auto res_2863=network->addShuffle(*res_2862->getOutput(0));
  res_2863->setReshapeDimensions(Dims3{12,6,32});
  assert(res_2863 && "failed to build Node_4333 (type:reshape)");
  res_2863->getOutput(0)->setName("Node_4333:0");
  auto res_2864=network->addShuffle(*res_2863->getOutput(0));
  Permutation permute_2864;
  permute_2864.order[0]=1;
  permute_2864.order[1]=0;
  permute_2864.order[2]=2;
  res_2864->setFirstTranspose(permute_2864);
  assert(res_2864 && "failed to build Node_4335 (type:transpose)");
  res_2864->getOutput(0)->setName("Node_4335:0");
  auto res_2865=network->addMatrixMultiply(*res_2860->getOutput(0),MatrixOperation::kNONE,*res_2864->getOutput(0),MatrixOperation::kNONE);
  assert(res_2865 && "failed to build Node_4344 (type:matmul)");
  res_2865->getOutput(0)->setName("Node_4344:0");
  auto res_2866=network->addShuffle(*res_2865->getOutput(0));
  Permutation permute_2866;
  permute_2866.order[0]=1;
  permute_2866.order[1]=0;
  permute_2866.order[2]=2;
  res_2866->setFirstTranspose(permute_2866);
  assert(res_2866 && "failed to build Node_4346 (type:transpose)");
  res_2866->getOutput(0)->setName("Node_4346:0");
  auto res_2867=network->addIdentity(*res_2866->getOutput(0));
  assert(res_2867 && "failed to build Node_4347 (type:contiguous)");
  res_2867->getOutput(0)->setName("Node_4347:0");
  auto res_2868=network->addShuffle(*res_2867->getOutput(0));
  res_2868->setReshapeDimensions(Dims{2,{12,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2868 && "failed to build Node_4355 (type:reshape)");
  res_2868->getOutput(0)->setName("Node_4355:0");
  auto res_2869=network->addMatrixMultiply(*res_2868->getOutput(0),MatrixOperation::kNONE,*res_590->getOutput(0),MatrixOperation::kNONE);
  assert(res_2869 && "failed to build Node_4362 (type:matmul)");
  res_2869->getOutput(0)->setName("Node_4362:0");
  auto res_2870=network->addElementWise(*res_2869->getOutput(0),*res_591->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2870 && "failed to build Node_4362_add (type:add)");
  res_2870->getOutput(0)->setName("Node_4362_add:0");
  auto res_2871=network->addElementWise(*res_2870->getOutput(0),*res_2848->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2871 && "failed to build Node_4366 (type:add)");
  res_2871->getOutput(0)->setName("Node_4366:0");
  auto res_2872=network->addReduce(*res_2871->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2872 && "failed to build Node_4373_mean (type:mean)");
  res_2872->getOutput(0)->setName("Node_4373_mean:0");
  auto res_2873=network->addElementWise(*res_2871->getOutput(0),*res_2872->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2873 && "failed to build Node_4373_diff (type:sub)");
  res_2873->getOutput(0)->setName("Node_4373_diff:0");
  auto res_2874=network->addElementWise(*res_2873->getOutput(0),*res_1196->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2874 && "failed to build Node_4373_power (type:power)");
  res_2874->getOutput(0)->setName("Node_4373_power:0");
  auto res_2875=network->addReduce(*res_2874->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2875 && "failed to build Node_4373_var (type:mean)");
  res_2875->getOutput(0)->setName("Node_4373_var:0");
  auto res_2876=network->addElementWise(*res_2875->getOutput(0),*res_1070->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2876 && "failed to build Node_4373_modify (type:add)");
  res_2876->getOutput(0)->setName("Node_4373_modify:0");
  auto res_2877=network->addUnary(*res_2876->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2877 && "failed to build Node_4373_sqrt (type:power)");
  res_2877->getOutput(0)->setName("Node_4373_sqrt:0");
  auto res_2878=network->addElementWise(*res_2873->getOutput(0),*res_2877->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2878 && "failed to build Node_4373_rsqrt (type:divide)");
  res_2878->getOutput(0)->setName("Node_4373_rsqrt:0");
  auto res_2879=network->addElementWise(*res_2878->getOutput(0),*res_176->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2879 && "failed to build Node_4373_mul (type:multiply)");
  res_2879->getOutput(0)->setName("Node_4373_mul:0");
  auto res_2880=network->addElementWise(*res_2879->getOutput(0),*res_177->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2880 && "failed to build Node_4373 (type:add)");
  res_2880->getOutput(0)->setName("Node_4373:0");
  auto res_2881=network->addMatrixMultiply(*res_2880->getOutput(0),MatrixOperation::kNONE,*res_592->getOutput(0),MatrixOperation::kNONE);
  assert(res_2881 && "failed to build Node_4379 (type:matmul)");
  res_2881->getOutput(0)->setName("Node_4379:0");
  auto res_2882=network->addElementWise(*res_2881->getOutput(0),*res_593->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2882 && "failed to build Node_4379_add (type:add)");
  res_2882->getOutput(0)->setName("Node_4379_add:0");
  ITensor* inputTensors_2883[1] = {res_2882->getOutput(0)};
  auto plugin_2883=GELU_Plugin("gelu");
  auto res_2883=network->addPluginV2(inputTensors_2883,1,plugin_2883);
  assert(res_2883 && "failed to build Node_4380 (type:gelu)");
  res_2883->getOutput(0)->setName("Node_4380:0");
  auto res_2884=network->addMatrixMultiply(*res_2883->getOutput(0),MatrixOperation::kNONE,*res_594->getOutput(0),MatrixOperation::kNONE);
  assert(res_2884 && "failed to build Node_4387 (type:matmul)");
  res_2884->getOutput(0)->setName("Node_4387:0");
  auto res_2885=network->addElementWise(*res_2884->getOutput(0),*res_595->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2885 && "failed to build Node_4387_add (type:add)");
  res_2885->getOutput(0)->setName("Node_4387_add:0");
  auto res_2886=network->addElementWise(*res_2885->getOutput(0),*res_2880->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2886 && "failed to build Node_4391 (type:add)");
  res_2886->getOutput(0)->setName("Node_4391:0");
  auto res_2887=network->addReduce(*res_2886->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2887 && "failed to build Node_4398_mean (type:mean)");
  res_2887->getOutput(0)->setName("Node_4398_mean:0");
  auto res_2888=network->addElementWise(*res_2886->getOutput(0),*res_2887->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2888 && "failed to build Node_4398_diff (type:sub)");
  res_2888->getOutput(0)->setName("Node_4398_diff:0");
  auto res_2889=network->addElementWise(*res_2888->getOutput(0),*res_1197->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2889 && "failed to build Node_4398_power (type:power)");
  res_2889->getOutput(0)->setName("Node_4398_power:0");
  auto res_2890=network->addReduce(*res_2889->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2890 && "failed to build Node_4398_var (type:mean)");
  res_2890->getOutput(0)->setName("Node_4398_var:0");
  auto res_2891=network->addElementWise(*res_2890->getOutput(0),*res_1071->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2891 && "failed to build Node_4398_modify (type:add)");
  res_2891->getOutput(0)->setName("Node_4398_modify:0");
  auto res_2892=network->addUnary(*res_2891->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2892 && "failed to build Node_4398_sqrt (type:power)");
  res_2892->getOutput(0)->setName("Node_4398_sqrt:0");
  auto res_2893=network->addElementWise(*res_2888->getOutput(0),*res_2892->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2893 && "failed to build Node_4398_rsqrt (type:divide)");
  res_2893->getOutput(0)->setName("Node_4398_rsqrt:0");
  auto res_2894=network->addElementWise(*res_2893->getOutput(0),*res_178->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2894 && "failed to build Node_4398_mul (type:multiply)");
  res_2894->getOutput(0)->setName("Node_4398_mul:0");
  auto res_2895=network->addElementWise(*res_2894->getOutput(0),*res_179->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2895 && "failed to build Node_4398 (type:add)");
  res_2895->getOutput(0)->setName("Node_4398:0");
  auto res_2896=network->addMatrixMultiply(*res_2895->getOutput(0),MatrixOperation::kNONE,*res_596->getOutput(0),MatrixOperation::kNONE);
  assert(res_2896 && "failed to build Node_4415 (type:matmul)");
  res_2896->getOutput(0)->setName("Node_4415:0");
  auto res_2897=network->addElementWise(*res_2896->getOutput(0),*res_597->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2897 && "failed to build Node_4415_add (type:add)");
  res_2897->getOutput(0)->setName("Node_4415_add:0");
  auto res_2898=network->addShuffle(*res_2897->getOutput(0));
  res_2898->setReshapeDimensions(Dims3{12,6,32});
  assert(res_2898 && "failed to build Node_4435 (type:reshape)");
  res_2898->getOutput(0)->setName("Node_4435:0");
  auto res_2899=network->addShuffle(*res_2898->getOutput(0));
  Permutation permute_2899;
  permute_2899.order[0]=1;
  permute_2899.order[1]=0;
  permute_2899.order[2]=2;
  res_2899->setFirstTranspose(permute_2899);
  assert(res_2899 && "failed to build Node_4437 (type:transpose)");
  res_2899->getOutput(0)->setName("Node_4437:0");
  auto res_2900=network->addMatrixMultiply(*res_2895->getOutput(0),MatrixOperation::kNONE,*res_598->getOutput(0),MatrixOperation::kNONE);
  assert(res_2900 && "failed to build Node_4421 (type:matmul)");
  res_2900->getOutput(0)->setName("Node_4421:0");
  auto res_2901=network->addElementWise(*res_2900->getOutput(0),*res_599->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2901 && "failed to build Node_4421_add (type:add)");
  res_2901->getOutput(0)->setName("Node_4421_add:0");
  auto res_2902=network->addShuffle(*res_2901->getOutput(0));
  res_2902->setReshapeDimensions(Dims3{12,6,32});
  assert(res_2902 && "failed to build Node_4445 (type:reshape)");
  res_2902->getOutput(0)->setName("Node_4445:0");
  auto res_2903=network->addShuffle(*res_2902->getOutput(0));
  Permutation permute_2903;
  permute_2903.order[0]=1;
  permute_2903.order[1]=2;
  permute_2903.order[2]=0;
  res_2903->setFirstTranspose(permute_2903);
  assert(res_2903 && "failed to build Node_4458 (type:transpose)");
  res_2903->getOutput(0)->setName("Node_4458:0");
  auto res_2904=network->addMatrixMultiply(*res_2899->getOutput(0),MatrixOperation::kNONE,*res_2903->getOutput(0),MatrixOperation::kNONE);
  assert(res_2904 && "failed to build Node_4459 (type:matmul)");
  res_2904->getOutput(0)->setName("Node_4459:0");
  auto res_2905=network->addElementWise(*res_2904->getOutput(0),*res_969->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2905 && "failed to build Node_4460 (type:divide)");
  res_2905->getOutput(0)->setName("Node_4460:0");
  auto res_2906=network->addElementWise(*res_2905->getOutput(0),*res_2834->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2906 && "failed to build Node_4461 (type:add)");
  res_2906->getOutput(0)->setName("Node_4461:0");
  auto res_2907=network->addSoftMax(*res_2906->getOutput(0));
  res_2907->setAxes(4);
  assert(res_2907 && "failed to build Node_4462 (type:softmax)");
  res_2907->getOutput(0)->setName("Node_4462:0");
  auto res_2908=network->addMatrixMultiply(*res_2895->getOutput(0),MatrixOperation::kNONE,*res_600->getOutput(0),MatrixOperation::kNONE);
  assert(res_2908 && "failed to build Node_4427 (type:matmul)");
  res_2908->getOutput(0)->setName("Node_4427:0");
  auto res_2909=network->addElementWise(*res_2908->getOutput(0),*res_601->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2909 && "failed to build Node_4427_add (type:add)");
  res_2909->getOutput(0)->setName("Node_4427_add:0");
  auto res_2910=network->addShuffle(*res_2909->getOutput(0));
  res_2910->setReshapeDimensions(Dims3{12,6,32});
  assert(res_2910 && "failed to build Node_4455 (type:reshape)");
  res_2910->getOutput(0)->setName("Node_4455:0");
  auto res_2911=network->addShuffle(*res_2910->getOutput(0));
  Permutation permute_2911;
  permute_2911.order[0]=1;
  permute_2911.order[1]=0;
  permute_2911.order[2]=2;
  res_2911->setFirstTranspose(permute_2911);
  assert(res_2911 && "failed to build Node_4457 (type:transpose)");
  res_2911->getOutput(0)->setName("Node_4457:0");
  auto res_2912=network->addMatrixMultiply(*res_2907->getOutput(0),MatrixOperation::kNONE,*res_2911->getOutput(0),MatrixOperation::kNONE);
  assert(res_2912 && "failed to build Node_4466 (type:matmul)");
  res_2912->getOutput(0)->setName("Node_4466:0");
  auto res_2913=network->addShuffle(*res_2912->getOutput(0));
  Permutation permute_2913;
  permute_2913.order[0]=1;
  permute_2913.order[1]=0;
  permute_2913.order[2]=2;
  res_2913->setFirstTranspose(permute_2913);
  assert(res_2913 && "failed to build Node_4468 (type:transpose)");
  res_2913->getOutput(0)->setName("Node_4468:0");
  auto res_2914=network->addIdentity(*res_2913->getOutput(0));
  assert(res_2914 && "failed to build Node_4469 (type:contiguous)");
  res_2914->getOutput(0)->setName("Node_4469:0");
  auto res_2915=network->addShuffle(*res_2914->getOutput(0));
  res_2915->setReshapeDimensions(Dims{2,{12,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2915 && "failed to build Node_4477 (type:reshape)");
  res_2915->getOutput(0)->setName("Node_4477:0");
  auto res_2916=network->addMatrixMultiply(*res_2915->getOutput(0),MatrixOperation::kNONE,*res_602->getOutput(0),MatrixOperation::kNONE);
  assert(res_2916 && "failed to build Node_4484 (type:matmul)");
  res_2916->getOutput(0)->setName("Node_4484:0");
  auto res_2917=network->addElementWise(*res_2916->getOutput(0),*res_603->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2917 && "failed to build Node_4484_add (type:add)");
  res_2917->getOutput(0)->setName("Node_4484_add:0");
  auto res_2918=network->addElementWise(*res_2917->getOutput(0),*res_2895->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2918 && "failed to build Node_4488 (type:add)");
  res_2918->getOutput(0)->setName("Node_4488:0");
  auto res_2919=network->addReduce(*res_2918->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2919 && "failed to build Node_4495_mean (type:mean)");
  res_2919->getOutput(0)->setName("Node_4495_mean:0");
  auto res_2920=network->addElementWise(*res_2918->getOutput(0),*res_2919->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2920 && "failed to build Node_4495_diff (type:sub)");
  res_2920->getOutput(0)->setName("Node_4495_diff:0");
  auto res_2921=network->addElementWise(*res_2920->getOutput(0),*res_1198->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2921 && "failed to build Node_4495_power (type:power)");
  res_2921->getOutput(0)->setName("Node_4495_power:0");
  auto res_2922=network->addReduce(*res_2921->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2922 && "failed to build Node_4495_var (type:mean)");
  res_2922->getOutput(0)->setName("Node_4495_var:0");
  auto res_2923=network->addElementWise(*res_2922->getOutput(0),*res_1072->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2923 && "failed to build Node_4495_modify (type:add)");
  res_2923->getOutput(0)->setName("Node_4495_modify:0");
  auto res_2924=network->addUnary(*res_2923->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2924 && "failed to build Node_4495_sqrt (type:power)");
  res_2924->getOutput(0)->setName("Node_4495_sqrt:0");
  auto res_2925=network->addElementWise(*res_2920->getOutput(0),*res_2924->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2925 && "failed to build Node_4495_rsqrt (type:divide)");
  res_2925->getOutput(0)->setName("Node_4495_rsqrt:0");
  auto res_2926=network->addElementWise(*res_2925->getOutput(0),*res_180->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2926 && "failed to build Node_4495_mul (type:multiply)");
  res_2926->getOutput(0)->setName("Node_4495_mul:0");
  auto res_2927=network->addElementWise(*res_2926->getOutput(0),*res_181->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2927 && "failed to build Node_4495 (type:add)");
  res_2927->getOutput(0)->setName("Node_4495:0");
  auto res_2928=network->addMatrixMultiply(*res_2927->getOutput(0),MatrixOperation::kNONE,*res_604->getOutput(0),MatrixOperation::kNONE);
  assert(res_2928 && "failed to build Node_4501 (type:matmul)");
  res_2928->getOutput(0)->setName("Node_4501:0");
  auto res_2929=network->addElementWise(*res_2928->getOutput(0),*res_605->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2929 && "failed to build Node_4501_add (type:add)");
  res_2929->getOutput(0)->setName("Node_4501_add:0");
  ITensor* inputTensors_2930[1] = {res_2929->getOutput(0)};
  auto plugin_2930=GELU_Plugin("gelu");
  auto res_2930=network->addPluginV2(inputTensors_2930,1,plugin_2930);
  assert(res_2930 && "failed to build Node_4502 (type:gelu)");
  res_2930->getOutput(0)->setName("Node_4502:0");
  auto res_2931=network->addMatrixMultiply(*res_2930->getOutput(0),MatrixOperation::kNONE,*res_606->getOutput(0),MatrixOperation::kNONE);
  assert(res_2931 && "failed to build Node_4509 (type:matmul)");
  res_2931->getOutput(0)->setName("Node_4509:0");
  auto res_2932=network->addElementWise(*res_2931->getOutput(0),*res_607->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2932 && "failed to build Node_4509_add (type:add)");
  res_2932->getOutput(0)->setName("Node_4509_add:0");
  auto res_2933=network->addElementWise(*res_2932->getOutput(0),*res_2927->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2933 && "failed to build Node_4513 (type:add)");
  res_2933->getOutput(0)->setName("Node_4513:0");
  auto res_2934=network->addReduce(*res_2933->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2934 && "failed to build Node_4520_mean (type:mean)");
  res_2934->getOutput(0)->setName("Node_4520_mean:0");
  auto res_2935=network->addElementWise(*res_2933->getOutput(0),*res_2934->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2935 && "failed to build Node_4520_diff (type:sub)");
  res_2935->getOutput(0)->setName("Node_4520_diff:0");
  auto res_2936=network->addElementWise(*res_2935->getOutput(0),*res_1199->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2936 && "failed to build Node_4520_power (type:power)");
  res_2936->getOutput(0)->setName("Node_4520_power:0");
  auto res_2937=network->addReduce(*res_2936->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2937 && "failed to build Node_4520_var (type:mean)");
  res_2937->getOutput(0)->setName("Node_4520_var:0");
  auto res_2938=network->addElementWise(*res_2937->getOutput(0),*res_1073->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2938 && "failed to build Node_4520_modify (type:add)");
  res_2938->getOutput(0)->setName("Node_4520_modify:0");
  auto res_2939=network->addUnary(*res_2938->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2939 && "failed to build Node_4520_sqrt (type:power)");
  res_2939->getOutput(0)->setName("Node_4520_sqrt:0");
  auto res_2940=network->addElementWise(*res_2935->getOutput(0),*res_2939->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2940 && "failed to build Node_4520_rsqrt (type:divide)");
  res_2940->getOutput(0)->setName("Node_4520_rsqrt:0");
  auto res_2941=network->addElementWise(*res_2940->getOutput(0),*res_182->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2941 && "failed to build Node_4520_mul (type:multiply)");
  res_2941->getOutput(0)->setName("Node_4520_mul:0");
  auto res_2942=network->addElementWise(*res_2941->getOutput(0),*res_183->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2942 && "failed to build Node_4520 (type:add)");
  res_2942->getOutput(0)->setName("Node_4520:0");
  auto res_2943=network->addMatrixMultiply(*res_2942->getOutput(0),MatrixOperation::kNONE,*res_608->getOutput(0),MatrixOperation::kNONE);
  assert(res_2943 && "failed to build Node_4537 (type:matmul)");
  res_2943->getOutput(0)->setName("Node_4537:0");
  auto res_2944=network->addElementWise(*res_2943->getOutput(0),*res_609->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2944 && "failed to build Node_4537_add (type:add)");
  res_2944->getOutput(0)->setName("Node_4537_add:0");
  auto res_2945=network->addShuffle(*res_2944->getOutput(0));
  res_2945->setReshapeDimensions(Dims3{12,6,32});
  assert(res_2945 && "failed to build Node_4557 (type:reshape)");
  res_2945->getOutput(0)->setName("Node_4557:0");
  auto res_2946=network->addShuffle(*res_2945->getOutput(0));
  Permutation permute_2946;
  permute_2946.order[0]=1;
  permute_2946.order[1]=0;
  permute_2946.order[2]=2;
  res_2946->setFirstTranspose(permute_2946);
  assert(res_2946 && "failed to build Node_4559 (type:transpose)");
  res_2946->getOutput(0)->setName("Node_4559:0");
  auto res_2947=network->addMatrixMultiply(*res_2942->getOutput(0),MatrixOperation::kNONE,*res_610->getOutput(0),MatrixOperation::kNONE);
  assert(res_2947 && "failed to build Node_4543 (type:matmul)");
  res_2947->getOutput(0)->setName("Node_4543:0");
  auto res_2948=network->addElementWise(*res_2947->getOutput(0),*res_611->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2948 && "failed to build Node_4543_add (type:add)");
  res_2948->getOutput(0)->setName("Node_4543_add:0");
  auto res_2949=network->addShuffle(*res_2948->getOutput(0));
  res_2949->setReshapeDimensions(Dims3{12,6,32});
  assert(res_2949 && "failed to build Node_4567 (type:reshape)");
  res_2949->getOutput(0)->setName("Node_4567:0");
  auto res_2950=network->addShuffle(*res_2949->getOutput(0));
  Permutation permute_2950;
  permute_2950.order[0]=1;
  permute_2950.order[1]=2;
  permute_2950.order[2]=0;
  res_2950->setFirstTranspose(permute_2950);
  assert(res_2950 && "failed to build Node_4580 (type:transpose)");
  res_2950->getOutput(0)->setName("Node_4580:0");
  auto res_2951=network->addMatrixMultiply(*res_2946->getOutput(0),MatrixOperation::kNONE,*res_2950->getOutput(0),MatrixOperation::kNONE);
  assert(res_2951 && "failed to build Node_4581 (type:matmul)");
  res_2951->getOutput(0)->setName("Node_4581:0");
  auto res_2952=network->addElementWise(*res_2951->getOutput(0),*res_970->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2952 && "failed to build Node_4582 (type:divide)");
  res_2952->getOutput(0)->setName("Node_4582:0");
  auto res_2953=network->addElementWise(*res_2952->getOutput(0),*res_2834->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2953 && "failed to build Node_4583 (type:add)");
  res_2953->getOutput(0)->setName("Node_4583:0");
  auto res_2954=network->addSoftMax(*res_2953->getOutput(0));
  res_2954->setAxes(4);
  assert(res_2954 && "failed to build Node_4584 (type:softmax)");
  res_2954->getOutput(0)->setName("Node_4584:0");
  auto res_2955=network->addMatrixMultiply(*res_2942->getOutput(0),MatrixOperation::kNONE,*res_612->getOutput(0),MatrixOperation::kNONE);
  assert(res_2955 && "failed to build Node_4549 (type:matmul)");
  res_2955->getOutput(0)->setName("Node_4549:0");
  auto res_2956=network->addElementWise(*res_2955->getOutput(0),*res_613->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2956 && "failed to build Node_4549_add (type:add)");
  res_2956->getOutput(0)->setName("Node_4549_add:0");
  auto res_2957=network->addShuffle(*res_2956->getOutput(0));
  res_2957->setReshapeDimensions(Dims3{12,6,32});
  assert(res_2957 && "failed to build Node_4577 (type:reshape)");
  res_2957->getOutput(0)->setName("Node_4577:0");
  auto res_2958=network->addShuffle(*res_2957->getOutput(0));
  Permutation permute_2958;
  permute_2958.order[0]=1;
  permute_2958.order[1]=0;
  permute_2958.order[2]=2;
  res_2958->setFirstTranspose(permute_2958);
  assert(res_2958 && "failed to build Node_4579 (type:transpose)");
  res_2958->getOutput(0)->setName("Node_4579:0");
  auto res_2959=network->addMatrixMultiply(*res_2954->getOutput(0),MatrixOperation::kNONE,*res_2958->getOutput(0),MatrixOperation::kNONE);
  assert(res_2959 && "failed to build Node_4588 (type:matmul)");
  res_2959->getOutput(0)->setName("Node_4588:0");
  auto res_2960=network->addShuffle(*res_2959->getOutput(0));
  Permutation permute_2960;
  permute_2960.order[0]=1;
  permute_2960.order[1]=0;
  permute_2960.order[2]=2;
  res_2960->setFirstTranspose(permute_2960);
  assert(res_2960 && "failed to build Node_4590 (type:transpose)");
  res_2960->getOutput(0)->setName("Node_4590:0");
  auto res_2961=network->addIdentity(*res_2960->getOutput(0));
  assert(res_2961 && "failed to build Node_4591 (type:contiguous)");
  res_2961->getOutput(0)->setName("Node_4591:0");
  auto res_2962=network->addShuffle(*res_2961->getOutput(0));
  res_2962->setReshapeDimensions(Dims{2,{12,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_2962 && "failed to build Node_4599 (type:reshape)");
  res_2962->getOutput(0)->setName("Node_4599:0");
  auto res_2963=network->addMatrixMultiply(*res_2962->getOutput(0),MatrixOperation::kNONE,*res_614->getOutput(0),MatrixOperation::kNONE);
  assert(res_2963 && "failed to build Node_4606 (type:matmul)");
  res_2963->getOutput(0)->setName("Node_4606:0");
  auto res_2964=network->addElementWise(*res_2963->getOutput(0),*res_615->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2964 && "failed to build Node_4606_add (type:add)");
  res_2964->getOutput(0)->setName("Node_4606_add:0");
  auto res_2965=network->addElementWise(*res_2964->getOutput(0),*res_2942->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2965 && "failed to build Node_4610 (type:add)");
  res_2965->getOutput(0)->setName("Node_4610:0");
  auto res_2966=network->addReduce(*res_2965->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2966 && "failed to build Node_4617_mean (type:mean)");
  res_2966->getOutput(0)->setName("Node_4617_mean:0");
  auto res_2967=network->addElementWise(*res_2965->getOutput(0),*res_2966->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2967 && "failed to build Node_4617_diff (type:sub)");
  res_2967->getOutput(0)->setName("Node_4617_diff:0");
  auto res_2968=network->addElementWise(*res_2967->getOutput(0),*res_1200->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2968 && "failed to build Node_4617_power (type:power)");
  res_2968->getOutput(0)->setName("Node_4617_power:0");
  auto res_2969=network->addReduce(*res_2968->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2969 && "failed to build Node_4617_var (type:mean)");
  res_2969->getOutput(0)->setName("Node_4617_var:0");
  auto res_2970=network->addElementWise(*res_2969->getOutput(0),*res_1074->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2970 && "failed to build Node_4617_modify (type:add)");
  res_2970->getOutput(0)->setName("Node_4617_modify:0");
  auto res_2971=network->addUnary(*res_2970->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2971 && "failed to build Node_4617_sqrt (type:power)");
  res_2971->getOutput(0)->setName("Node_4617_sqrt:0");
  auto res_2972=network->addElementWise(*res_2967->getOutput(0),*res_2971->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2972 && "failed to build Node_4617_rsqrt (type:divide)");
  res_2972->getOutput(0)->setName("Node_4617_rsqrt:0");
  auto res_2973=network->addElementWise(*res_2972->getOutput(0),*res_184->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2973 && "failed to build Node_4617_mul (type:multiply)");
  res_2973->getOutput(0)->setName("Node_4617_mul:0");
  auto res_2974=network->addElementWise(*res_2973->getOutput(0),*res_185->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2974 && "failed to build Node_4617 (type:add)");
  res_2974->getOutput(0)->setName("Node_4617:0");
  auto res_2975=network->addMatrixMultiply(*res_2974->getOutput(0),MatrixOperation::kNONE,*res_616->getOutput(0),MatrixOperation::kNONE);
  assert(res_2975 && "failed to build Node_4623 (type:matmul)");
  res_2975->getOutput(0)->setName("Node_4623:0");
  auto res_2976=network->addElementWise(*res_2975->getOutput(0),*res_617->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2976 && "failed to build Node_4623_add (type:add)");
  res_2976->getOutput(0)->setName("Node_4623_add:0");
  ITensor* inputTensors_2977[1] = {res_2976->getOutput(0)};
  auto plugin_2977=GELU_Plugin("gelu");
  auto res_2977=network->addPluginV2(inputTensors_2977,1,plugin_2977);
  assert(res_2977 && "failed to build Node_4624 (type:gelu)");
  res_2977->getOutput(0)->setName("Node_4624:0");
  auto res_2978=network->addMatrixMultiply(*res_2977->getOutput(0),MatrixOperation::kNONE,*res_618->getOutput(0),MatrixOperation::kNONE);
  assert(res_2978 && "failed to build Node_4631 (type:matmul)");
  res_2978->getOutput(0)->setName("Node_4631:0");
  auto res_2979=network->addElementWise(*res_2978->getOutput(0),*res_619->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2979 && "failed to build Node_4631_add (type:add)");
  res_2979->getOutput(0)->setName("Node_4631_add:0");
  auto res_2980=network->addElementWise(*res_2979->getOutput(0),*res_2974->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2980 && "failed to build Node_4635 (type:add)");
  res_2980->getOutput(0)->setName("Node_4635:0");
  auto res_2981=network->addReduce(*res_2980->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2981 && "failed to build Node_4642_mean (type:mean)");
  res_2981->getOutput(0)->setName("Node_4642_mean:0");
  auto res_2982=network->addElementWise(*res_2980->getOutput(0),*res_2981->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_2982 && "failed to build Node_4642_diff (type:sub)");
  res_2982->getOutput(0)->setName("Node_4642_diff:0");
  auto res_2983=network->addElementWise(*res_2982->getOutput(0),*res_1201->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_2983 && "failed to build Node_4642_power (type:power)");
  res_2983->getOutput(0)->setName("Node_4642_power:0");
  auto res_2984=network->addReduce(*res_2983->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_2984 && "failed to build Node_4642_var (type:mean)");
  res_2984->getOutput(0)->setName("Node_4642_var:0");
  auto res_2985=network->addElementWise(*res_2984->getOutput(0),*res_1075->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2985 && "failed to build Node_4642_modify (type:add)");
  res_2985->getOutput(0)->setName("Node_4642_modify:0");
  auto res_2986=network->addUnary(*res_2985->getOutput(0),UnaryOperation::kSQRT);
  assert(res_2986 && "failed to build Node_4642_sqrt (type:power)");
  res_2986->getOutput(0)->setName("Node_4642_sqrt:0");
  auto res_2987=network->addElementWise(*res_2982->getOutput(0),*res_2986->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2987 && "failed to build Node_4642_rsqrt (type:divide)");
  res_2987->getOutput(0)->setName("Node_4642_rsqrt:0");
  auto res_2988=network->addElementWise(*res_2987->getOutput(0),*res_186->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_2988 && "failed to build Node_4642_mul (type:multiply)");
  res_2988->getOutput(0)->setName("Node_4642_mul:0");
  auto res_2989=network->addElementWise(*res_2988->getOutput(0),*res_187->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2989 && "failed to build Node_4642 (type:add)");
  res_2989->getOutput(0)->setName("Node_4642:0");
  auto res_2990=network->addMatrixMultiply(*res_2989->getOutput(0),MatrixOperation::kNONE,*res_620->getOutput(0),MatrixOperation::kNONE);
  assert(res_2990 && "failed to build Node_4659 (type:matmul)");
  res_2990->getOutput(0)->setName("Node_4659:0");
  auto res_2991=network->addElementWise(*res_2990->getOutput(0),*res_621->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2991 && "failed to build Node_4659_add (type:add)");
  res_2991->getOutput(0)->setName("Node_4659_add:0");
  auto res_2992=network->addShuffle(*res_2991->getOutput(0));
  res_2992->setReshapeDimensions(Dims3{12,6,32});
  assert(res_2992 && "failed to build Node_4679 (type:reshape)");
  res_2992->getOutput(0)->setName("Node_4679:0");
  auto res_2993=network->addShuffle(*res_2992->getOutput(0));
  Permutation permute_2993;
  permute_2993.order[0]=1;
  permute_2993.order[1]=0;
  permute_2993.order[2]=2;
  res_2993->setFirstTranspose(permute_2993);
  assert(res_2993 && "failed to build Node_4681 (type:transpose)");
  res_2993->getOutput(0)->setName("Node_4681:0");
  auto res_2994=network->addMatrixMultiply(*res_2989->getOutput(0),MatrixOperation::kNONE,*res_622->getOutput(0),MatrixOperation::kNONE);
  assert(res_2994 && "failed to build Node_4665 (type:matmul)");
  res_2994->getOutput(0)->setName("Node_4665:0");
  auto res_2995=network->addElementWise(*res_2994->getOutput(0),*res_623->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_2995 && "failed to build Node_4665_add (type:add)");
  res_2995->getOutput(0)->setName("Node_4665_add:0");
  auto res_2996=network->addShuffle(*res_2995->getOutput(0));
  res_2996->setReshapeDimensions(Dims3{12,6,32});
  assert(res_2996 && "failed to build Node_4689 (type:reshape)");
  res_2996->getOutput(0)->setName("Node_4689:0");
  auto res_2997=network->addShuffle(*res_2996->getOutput(0));
  Permutation permute_2997;
  permute_2997.order[0]=1;
  permute_2997.order[1]=2;
  permute_2997.order[2]=0;
  res_2997->setFirstTranspose(permute_2997);
  assert(res_2997 && "failed to build Node_4702 (type:transpose)");
  res_2997->getOutput(0)->setName("Node_4702:0");
  auto res_2998=network->addMatrixMultiply(*res_2993->getOutput(0),MatrixOperation::kNONE,*res_2997->getOutput(0),MatrixOperation::kNONE);
  assert(res_2998 && "failed to build Node_4703 (type:matmul)");
  res_2998->getOutput(0)->setName("Node_4703:0");
  auto res_2999=network->addElementWise(*res_2998->getOutput(0),*res_971->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_2999 && "failed to build Node_4704 (type:divide)");
  res_2999->getOutput(0)->setName("Node_4704:0");
  auto res_3000=network->addElementWise(*res_2999->getOutput(0),*res_2834->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3000 && "failed to build Node_4705 (type:add)");
  res_3000->getOutput(0)->setName("Node_4705:0");
  auto res_3001=network->addSoftMax(*res_3000->getOutput(0));
  res_3001->setAxes(4);
  assert(res_3001 && "failed to build Node_4706 (type:softmax)");
  res_3001->getOutput(0)->setName("Node_4706:0");
  auto res_3002=network->addMatrixMultiply(*res_2989->getOutput(0),MatrixOperation::kNONE,*res_624->getOutput(0),MatrixOperation::kNONE);
  assert(res_3002 && "failed to build Node_4671 (type:matmul)");
  res_3002->getOutput(0)->setName("Node_4671:0");
  auto res_3003=network->addElementWise(*res_3002->getOutput(0),*res_625->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3003 && "failed to build Node_4671_add (type:add)");
  res_3003->getOutput(0)->setName("Node_4671_add:0");
  auto res_3004=network->addShuffle(*res_3003->getOutput(0));
  res_3004->setReshapeDimensions(Dims3{12,6,32});
  assert(res_3004 && "failed to build Node_4699 (type:reshape)");
  res_3004->getOutput(0)->setName("Node_4699:0");
  auto res_3005=network->addShuffle(*res_3004->getOutput(0));
  Permutation permute_3005;
  permute_3005.order[0]=1;
  permute_3005.order[1]=0;
  permute_3005.order[2]=2;
  res_3005->setFirstTranspose(permute_3005);
  assert(res_3005 && "failed to build Node_4701 (type:transpose)");
  res_3005->getOutput(0)->setName("Node_4701:0");
  auto res_3006=network->addMatrixMultiply(*res_3001->getOutput(0),MatrixOperation::kNONE,*res_3005->getOutput(0),MatrixOperation::kNONE);
  assert(res_3006 && "failed to build Node_4710 (type:matmul)");
  res_3006->getOutput(0)->setName("Node_4710:0");
  auto res_3007=network->addShuffle(*res_3006->getOutput(0));
  Permutation permute_3007;
  permute_3007.order[0]=1;
  permute_3007.order[1]=0;
  permute_3007.order[2]=2;
  res_3007->setFirstTranspose(permute_3007);
  assert(res_3007 && "failed to build Node_4712 (type:transpose)");
  res_3007->getOutput(0)->setName("Node_4712:0");
  auto res_3008=network->addIdentity(*res_3007->getOutput(0));
  assert(res_3008 && "failed to build Node_4713 (type:contiguous)");
  res_3008->getOutput(0)->setName("Node_4713:0");
  auto res_3009=network->addShuffle(*res_3008->getOutput(0));
  res_3009->setReshapeDimensions(Dims{2,{12,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3009 && "failed to build Node_4721 (type:reshape)");
  res_3009->getOutput(0)->setName("Node_4721:0");
  auto res_3010=network->addMatrixMultiply(*res_3009->getOutput(0),MatrixOperation::kNONE,*res_626->getOutput(0),MatrixOperation::kNONE);
  assert(res_3010 && "failed to build Node_4728 (type:matmul)");
  res_3010->getOutput(0)->setName("Node_4728:0");
  auto res_3011=network->addElementWise(*res_3010->getOutput(0),*res_627->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3011 && "failed to build Node_4728_add (type:add)");
  res_3011->getOutput(0)->setName("Node_4728_add:0");
  auto res_3012=network->addElementWise(*res_3011->getOutput(0),*res_2989->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3012 && "failed to build Node_4732 (type:add)");
  res_3012->getOutput(0)->setName("Node_4732:0");
  auto res_3013=network->addReduce(*res_3012->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3013 && "failed to build Node_4739_mean (type:mean)");
  res_3013->getOutput(0)->setName("Node_4739_mean:0");
  auto res_3014=network->addElementWise(*res_3012->getOutput(0),*res_3013->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3014 && "failed to build Node_4739_diff (type:sub)");
  res_3014->getOutput(0)->setName("Node_4739_diff:0");
  auto res_3015=network->addElementWise(*res_3014->getOutput(0),*res_1202->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3015 && "failed to build Node_4739_power (type:power)");
  res_3015->getOutput(0)->setName("Node_4739_power:0");
  auto res_3016=network->addReduce(*res_3015->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3016 && "failed to build Node_4739_var (type:mean)");
  res_3016->getOutput(0)->setName("Node_4739_var:0");
  auto res_3017=network->addElementWise(*res_3016->getOutput(0),*res_1076->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3017 && "failed to build Node_4739_modify (type:add)");
  res_3017->getOutput(0)->setName("Node_4739_modify:0");
  auto res_3018=network->addUnary(*res_3017->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3018 && "failed to build Node_4739_sqrt (type:power)");
  res_3018->getOutput(0)->setName("Node_4739_sqrt:0");
  auto res_3019=network->addElementWise(*res_3014->getOutput(0),*res_3018->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3019 && "failed to build Node_4739_rsqrt (type:divide)");
  res_3019->getOutput(0)->setName("Node_4739_rsqrt:0");
  auto res_3020=network->addElementWise(*res_3019->getOutput(0),*res_188->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3020 && "failed to build Node_4739_mul (type:multiply)");
  res_3020->getOutput(0)->setName("Node_4739_mul:0");
  auto res_3021=network->addElementWise(*res_3020->getOutput(0),*res_189->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3021 && "failed to build Node_4739 (type:add)");
  res_3021->getOutput(0)->setName("Node_4739:0");
  auto res_3022=network->addMatrixMultiply(*res_3021->getOutput(0),MatrixOperation::kNONE,*res_628->getOutput(0),MatrixOperation::kNONE);
  assert(res_3022 && "failed to build Node_4745 (type:matmul)");
  res_3022->getOutput(0)->setName("Node_4745:0");
  auto res_3023=network->addElementWise(*res_3022->getOutput(0),*res_629->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3023 && "failed to build Node_4745_add (type:add)");
  res_3023->getOutput(0)->setName("Node_4745_add:0");
  ITensor* inputTensors_3024[1] = {res_3023->getOutput(0)};
  auto plugin_3024=GELU_Plugin("gelu");
  auto res_3024=network->addPluginV2(inputTensors_3024,1,plugin_3024);
  assert(res_3024 && "failed to build Node_4746 (type:gelu)");
  res_3024->getOutput(0)->setName("Node_4746:0");
  auto res_3025=network->addMatrixMultiply(*res_3024->getOutput(0),MatrixOperation::kNONE,*res_630->getOutput(0),MatrixOperation::kNONE);
  assert(res_3025 && "failed to build Node_4753 (type:matmul)");
  res_3025->getOutput(0)->setName("Node_4753:0");
  auto res_3026=network->addElementWise(*res_3025->getOutput(0),*res_631->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3026 && "failed to build Node_4753_add (type:add)");
  res_3026->getOutput(0)->setName("Node_4753_add:0");
  auto res_3027=network->addElementWise(*res_3026->getOutput(0),*res_3021->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3027 && "failed to build Node_4757 (type:add)");
  res_3027->getOutput(0)->setName("Node_4757:0");
  auto res_3028=network->addReduce(*res_3027->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3028 && "failed to build Node_4764_mean (type:mean)");
  res_3028->getOutput(0)->setName("Node_4764_mean:0");
  auto res_3029=network->addElementWise(*res_3027->getOutput(0),*res_3028->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3029 && "failed to build Node_4764_diff (type:sub)");
  res_3029->getOutput(0)->setName("Node_4764_diff:0");
  auto res_3030=network->addElementWise(*res_3029->getOutput(0),*res_1203->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3030 && "failed to build Node_4764_power (type:power)");
  res_3030->getOutput(0)->setName("Node_4764_power:0");
  auto res_3031=network->addReduce(*res_3030->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3031 && "failed to build Node_4764_var (type:mean)");
  res_3031->getOutput(0)->setName("Node_4764_var:0");
  auto res_3032=network->addElementWise(*res_3031->getOutput(0),*res_1077->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3032 && "failed to build Node_4764_modify (type:add)");
  res_3032->getOutput(0)->setName("Node_4764_modify:0");
  auto res_3033=network->addUnary(*res_3032->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3033 && "failed to build Node_4764_sqrt (type:power)");
  res_3033->getOutput(0)->setName("Node_4764_sqrt:0");
  auto res_3034=network->addElementWise(*res_3029->getOutput(0),*res_3033->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3034 && "failed to build Node_4764_rsqrt (type:divide)");
  res_3034->getOutput(0)->setName("Node_4764_rsqrt:0");
  auto res_3035=network->addElementWise(*res_3034->getOutput(0),*res_190->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3035 && "failed to build Node_4764_mul (type:multiply)");
  res_3035->getOutput(0)->setName("Node_4764_mul:0");
  auto res_3036=network->addElementWise(*res_3035->getOutput(0),*res_191->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3036 && "failed to build Node_4764 (type:add)");
  res_3036->getOutput(0)->setName("Node_4764:0");
  auto res_3037=network->addMatrixMultiply(*res_3036->getOutput(0),MatrixOperation::kNONE,*res_632->getOutput(0),MatrixOperation::kNONE);
  assert(res_3037 && "failed to build Node_4781 (type:matmul)");
  res_3037->getOutput(0)->setName("Node_4781:0");
  auto res_3038=network->addElementWise(*res_3037->getOutput(0),*res_633->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3038 && "failed to build Node_4781_add (type:add)");
  res_3038->getOutput(0)->setName("Node_4781_add:0");
  auto res_3039=network->addShuffle(*res_3038->getOutput(0));
  res_3039->setReshapeDimensions(Dims3{12,6,32});
  assert(res_3039 && "failed to build Node_4801 (type:reshape)");
  res_3039->getOutput(0)->setName("Node_4801:0");
  auto res_3040=network->addShuffle(*res_3039->getOutput(0));
  Permutation permute_3040;
  permute_3040.order[0]=1;
  permute_3040.order[1]=0;
  permute_3040.order[2]=2;
  res_3040->setFirstTranspose(permute_3040);
  assert(res_3040 && "failed to build Node_4803 (type:transpose)");
  res_3040->getOutput(0)->setName("Node_4803:0");
  auto res_3041=network->addMatrixMultiply(*res_3036->getOutput(0),MatrixOperation::kNONE,*res_634->getOutput(0),MatrixOperation::kNONE);
  assert(res_3041 && "failed to build Node_4787 (type:matmul)");
  res_3041->getOutput(0)->setName("Node_4787:0");
  auto res_3042=network->addElementWise(*res_3041->getOutput(0),*res_635->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3042 && "failed to build Node_4787_add (type:add)");
  res_3042->getOutput(0)->setName("Node_4787_add:0");
  auto res_3043=network->addShuffle(*res_3042->getOutput(0));
  res_3043->setReshapeDimensions(Dims3{12,6,32});
  assert(res_3043 && "failed to build Node_4811 (type:reshape)");
  res_3043->getOutput(0)->setName("Node_4811:0");
  auto res_3044=network->addShuffle(*res_3043->getOutput(0));
  Permutation permute_3044;
  permute_3044.order[0]=1;
  permute_3044.order[1]=2;
  permute_3044.order[2]=0;
  res_3044->setFirstTranspose(permute_3044);
  assert(res_3044 && "failed to build Node_4824 (type:transpose)");
  res_3044->getOutput(0)->setName("Node_4824:0");
  auto res_3045=network->addMatrixMultiply(*res_3040->getOutput(0),MatrixOperation::kNONE,*res_3044->getOutput(0),MatrixOperation::kNONE);
  assert(res_3045 && "failed to build Node_4825 (type:matmul)");
  res_3045->getOutput(0)->setName("Node_4825:0");
  auto res_3046=network->addElementWise(*res_3045->getOutput(0),*res_972->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3046 && "failed to build Node_4826 (type:divide)");
  res_3046->getOutput(0)->setName("Node_4826:0");
  auto res_3047=network->addElementWise(*res_3046->getOutput(0),*res_2834->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3047 && "failed to build Node_4827 (type:add)");
  res_3047->getOutput(0)->setName("Node_4827:0");
  auto res_3048=network->addSoftMax(*res_3047->getOutput(0));
  res_3048->setAxes(4);
  assert(res_3048 && "failed to build Node_4828 (type:softmax)");
  res_3048->getOutput(0)->setName("Node_4828:0");
  auto res_3049=network->addMatrixMultiply(*res_3036->getOutput(0),MatrixOperation::kNONE,*res_636->getOutput(0),MatrixOperation::kNONE);
  assert(res_3049 && "failed to build Node_4793 (type:matmul)");
  res_3049->getOutput(0)->setName("Node_4793:0");
  auto res_3050=network->addElementWise(*res_3049->getOutput(0),*res_637->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3050 && "failed to build Node_4793_add (type:add)");
  res_3050->getOutput(0)->setName("Node_4793_add:0");
  auto res_3051=network->addShuffle(*res_3050->getOutput(0));
  res_3051->setReshapeDimensions(Dims3{12,6,32});
  assert(res_3051 && "failed to build Node_4821 (type:reshape)");
  res_3051->getOutput(0)->setName("Node_4821:0");
  auto res_3052=network->addShuffle(*res_3051->getOutput(0));
  Permutation permute_3052;
  permute_3052.order[0]=1;
  permute_3052.order[1]=0;
  permute_3052.order[2]=2;
  res_3052->setFirstTranspose(permute_3052);
  assert(res_3052 && "failed to build Node_4823 (type:transpose)");
  res_3052->getOutput(0)->setName("Node_4823:0");
  auto res_3053=network->addMatrixMultiply(*res_3048->getOutput(0),MatrixOperation::kNONE,*res_3052->getOutput(0),MatrixOperation::kNONE);
  assert(res_3053 && "failed to build Node_4832 (type:matmul)");
  res_3053->getOutput(0)->setName("Node_4832:0");
  auto res_3054=network->addShuffle(*res_3053->getOutput(0));
  Permutation permute_3054;
  permute_3054.order[0]=1;
  permute_3054.order[1]=0;
  permute_3054.order[2]=2;
  res_3054->setFirstTranspose(permute_3054);
  assert(res_3054 && "failed to build Node_4834 (type:transpose)");
  res_3054->getOutput(0)->setName("Node_4834:0");
  auto res_3055=network->addIdentity(*res_3054->getOutput(0));
  assert(res_3055 && "failed to build Node_4835 (type:contiguous)");
  res_3055->getOutput(0)->setName("Node_4835:0");
  auto res_3056=network->addShuffle(*res_3055->getOutput(0));
  res_3056->setReshapeDimensions(Dims{2,{12,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3056 && "failed to build Node_4843 (type:reshape)");
  res_3056->getOutput(0)->setName("Node_4843:0");
  auto res_3057=network->addMatrixMultiply(*res_3056->getOutput(0),MatrixOperation::kNONE,*res_638->getOutput(0),MatrixOperation::kNONE);
  assert(res_3057 && "failed to build Node_4850 (type:matmul)");
  res_3057->getOutput(0)->setName("Node_4850:0");
  auto res_3058=network->addElementWise(*res_3057->getOutput(0),*res_639->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3058 && "failed to build Node_4850_add (type:add)");
  res_3058->getOutput(0)->setName("Node_4850_add:0");
  auto res_3059=network->addElementWise(*res_3058->getOutput(0),*res_3036->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3059 && "failed to build Node_4854 (type:add)");
  res_3059->getOutput(0)->setName("Node_4854:0");
  auto res_3060=network->addReduce(*res_3059->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3060 && "failed to build Node_4861_mean (type:mean)");
  res_3060->getOutput(0)->setName("Node_4861_mean:0");
  auto res_3061=network->addElementWise(*res_3059->getOutput(0),*res_3060->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3061 && "failed to build Node_4861_diff (type:sub)");
  res_3061->getOutput(0)->setName("Node_4861_diff:0");
  auto res_3062=network->addElementWise(*res_3061->getOutput(0),*res_1204->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3062 && "failed to build Node_4861_power (type:power)");
  res_3062->getOutput(0)->setName("Node_4861_power:0");
  auto res_3063=network->addReduce(*res_3062->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3063 && "failed to build Node_4861_var (type:mean)");
  res_3063->getOutput(0)->setName("Node_4861_var:0");
  auto res_3064=network->addElementWise(*res_3063->getOutput(0),*res_1078->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3064 && "failed to build Node_4861_modify (type:add)");
  res_3064->getOutput(0)->setName("Node_4861_modify:0");
  auto res_3065=network->addUnary(*res_3064->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3065 && "failed to build Node_4861_sqrt (type:power)");
  res_3065->getOutput(0)->setName("Node_4861_sqrt:0");
  auto res_3066=network->addElementWise(*res_3061->getOutput(0),*res_3065->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3066 && "failed to build Node_4861_rsqrt (type:divide)");
  res_3066->getOutput(0)->setName("Node_4861_rsqrt:0");
  auto res_3067=network->addElementWise(*res_3066->getOutput(0),*res_192->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3067 && "failed to build Node_4861_mul (type:multiply)");
  res_3067->getOutput(0)->setName("Node_4861_mul:0");
  auto res_3068=network->addElementWise(*res_3067->getOutput(0),*res_193->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3068 && "failed to build Node_4861 (type:add)");
  res_3068->getOutput(0)->setName("Node_4861:0");
  auto res_3069=network->addMatrixMultiply(*res_3068->getOutput(0),MatrixOperation::kNONE,*res_640->getOutput(0),MatrixOperation::kNONE);
  assert(res_3069 && "failed to build Node_4867 (type:matmul)");
  res_3069->getOutput(0)->setName("Node_4867:0");
  auto res_3070=network->addElementWise(*res_3069->getOutput(0),*res_641->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3070 && "failed to build Node_4867_add (type:add)");
  res_3070->getOutput(0)->setName("Node_4867_add:0");
  ITensor* inputTensors_3071[1] = {res_3070->getOutput(0)};
  auto plugin_3071=GELU_Plugin("gelu");
  auto res_3071=network->addPluginV2(inputTensors_3071,1,plugin_3071);
  assert(res_3071 && "failed to build Node_4868 (type:gelu)");
  res_3071->getOutput(0)->setName("Node_4868:0");
  auto res_3072=network->addMatrixMultiply(*res_3071->getOutput(0),MatrixOperation::kNONE,*res_642->getOutput(0),MatrixOperation::kNONE);
  assert(res_3072 && "failed to build Node_4875 (type:matmul)");
  res_3072->getOutput(0)->setName("Node_4875:0");
  auto res_3073=network->addElementWise(*res_3072->getOutput(0),*res_643->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3073 && "failed to build Node_4875_add (type:add)");
  res_3073->getOutput(0)->setName("Node_4875_add:0");
  auto res_3074=network->addElementWise(*res_3073->getOutput(0),*res_3068->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3074 && "failed to build Node_4879 (type:add)");
  res_3074->getOutput(0)->setName("Node_4879:0");
  auto res_3075=network->addReduce(*res_3074->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3075 && "failed to build Node_4886_mean (type:mean)");
  res_3075->getOutput(0)->setName("Node_4886_mean:0");
  auto res_3076=network->addElementWise(*res_3074->getOutput(0),*res_3075->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3076 && "failed to build Node_4886_diff (type:sub)");
  res_3076->getOutput(0)->setName("Node_4886_diff:0");
  auto res_3077=network->addElementWise(*res_3076->getOutput(0),*res_1205->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3077 && "failed to build Node_4886_power (type:power)");
  res_3077->getOutput(0)->setName("Node_4886_power:0");
  auto res_3078=network->addReduce(*res_3077->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3078 && "failed to build Node_4886_var (type:mean)");
  res_3078->getOutput(0)->setName("Node_4886_var:0");
  auto res_3079=network->addElementWise(*res_3078->getOutput(0),*res_1079->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3079 && "failed to build Node_4886_modify (type:add)");
  res_3079->getOutput(0)->setName("Node_4886_modify:0");
  auto res_3080=network->addUnary(*res_3079->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3080 && "failed to build Node_4886_sqrt (type:power)");
  res_3080->getOutput(0)->setName("Node_4886_sqrt:0");
  auto res_3081=network->addElementWise(*res_3076->getOutput(0),*res_3080->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3081 && "failed to build Node_4886_rsqrt (type:divide)");
  res_3081->getOutput(0)->setName("Node_4886_rsqrt:0");
  auto res_3082=network->addElementWise(*res_3081->getOutput(0),*res_194->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3082 && "failed to build Node_4886_mul (type:multiply)");
  res_3082->getOutput(0)->setName("Node_4886_mul:0");
  auto res_3083=network->addElementWise(*res_3082->getOutput(0),*res_195->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3083 && "failed to build Node_4886 (type:add)");
  res_3083->getOutput(0)->setName("Node_4886:0");
  auto res_3084=network->addMatrixMultiply(*res_3083->getOutput(0),MatrixOperation::kNONE,*res_644->getOutput(0),MatrixOperation::kNONE);
  assert(res_3084 && "failed to build Node_4903 (type:matmul)");
  res_3084->getOutput(0)->setName("Node_4903:0");
  auto res_3085=network->addElementWise(*res_3084->getOutput(0),*res_645->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3085 && "failed to build Node_4903_add (type:add)");
  res_3085->getOutput(0)->setName("Node_4903_add:0");
  auto res_3086=network->addShuffle(*res_3085->getOutput(0));
  res_3086->setReshapeDimensions(Dims3{12,6,32});
  assert(res_3086 && "failed to build Node_4923 (type:reshape)");
  res_3086->getOutput(0)->setName("Node_4923:0");
  auto res_3087=network->addShuffle(*res_3086->getOutput(0));
  Permutation permute_3087;
  permute_3087.order[0]=1;
  permute_3087.order[1]=0;
  permute_3087.order[2]=2;
  res_3087->setFirstTranspose(permute_3087);
  assert(res_3087 && "failed to build Node_4925 (type:transpose)");
  res_3087->getOutput(0)->setName("Node_4925:0");
  auto res_3088=network->addMatrixMultiply(*res_3083->getOutput(0),MatrixOperation::kNONE,*res_646->getOutput(0),MatrixOperation::kNONE);
  assert(res_3088 && "failed to build Node_4909 (type:matmul)");
  res_3088->getOutput(0)->setName("Node_4909:0");
  auto res_3089=network->addElementWise(*res_3088->getOutput(0),*res_647->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3089 && "failed to build Node_4909_add (type:add)");
  res_3089->getOutput(0)->setName("Node_4909_add:0");
  auto res_3090=network->addShuffle(*res_3089->getOutput(0));
  res_3090->setReshapeDimensions(Dims3{12,6,32});
  assert(res_3090 && "failed to build Node_4933 (type:reshape)");
  res_3090->getOutput(0)->setName("Node_4933:0");
  auto res_3091=network->addShuffle(*res_3090->getOutput(0));
  Permutation permute_3091;
  permute_3091.order[0]=1;
  permute_3091.order[1]=2;
  permute_3091.order[2]=0;
  res_3091->setFirstTranspose(permute_3091);
  assert(res_3091 && "failed to build Node_4946 (type:transpose)");
  res_3091->getOutput(0)->setName("Node_4946:0");
  auto res_3092=network->addMatrixMultiply(*res_3087->getOutput(0),MatrixOperation::kNONE,*res_3091->getOutput(0),MatrixOperation::kNONE);
  assert(res_3092 && "failed to build Node_4947 (type:matmul)");
  res_3092->getOutput(0)->setName("Node_4947:0");
  auto res_3093=network->addElementWise(*res_3092->getOutput(0),*res_973->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3093 && "failed to build Node_4948 (type:divide)");
  res_3093->getOutput(0)->setName("Node_4948:0");
  auto res_3094=network->addElementWise(*res_3093->getOutput(0),*res_2834->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3094 && "failed to build Node_4949 (type:add)");
  res_3094->getOutput(0)->setName("Node_4949:0");
  auto res_3095=network->addSoftMax(*res_3094->getOutput(0));
  res_3095->setAxes(4);
  assert(res_3095 && "failed to build Node_4950 (type:softmax)");
  res_3095->getOutput(0)->setName("Node_4950:0");
  auto res_3096=network->addMatrixMultiply(*res_3083->getOutput(0),MatrixOperation::kNONE,*res_648->getOutput(0),MatrixOperation::kNONE);
  assert(res_3096 && "failed to build Node_4915 (type:matmul)");
  res_3096->getOutput(0)->setName("Node_4915:0");
  auto res_3097=network->addElementWise(*res_3096->getOutput(0),*res_649->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3097 && "failed to build Node_4915_add (type:add)");
  res_3097->getOutput(0)->setName("Node_4915_add:0");
  auto res_3098=network->addShuffle(*res_3097->getOutput(0));
  res_3098->setReshapeDimensions(Dims3{12,6,32});
  assert(res_3098 && "failed to build Node_4943 (type:reshape)");
  res_3098->getOutput(0)->setName("Node_4943:0");
  auto res_3099=network->addShuffle(*res_3098->getOutput(0));
  Permutation permute_3099;
  permute_3099.order[0]=1;
  permute_3099.order[1]=0;
  permute_3099.order[2]=2;
  res_3099->setFirstTranspose(permute_3099);
  assert(res_3099 && "failed to build Node_4945 (type:transpose)");
  res_3099->getOutput(0)->setName("Node_4945:0");
  auto res_3100=network->addMatrixMultiply(*res_3095->getOutput(0),MatrixOperation::kNONE,*res_3099->getOutput(0),MatrixOperation::kNONE);
  assert(res_3100 && "failed to build Node_4954 (type:matmul)");
  res_3100->getOutput(0)->setName("Node_4954:0");
  auto res_3101=network->addShuffle(*res_3100->getOutput(0));
  Permutation permute_3101;
  permute_3101.order[0]=1;
  permute_3101.order[1]=0;
  permute_3101.order[2]=2;
  res_3101->setFirstTranspose(permute_3101);
  assert(res_3101 && "failed to build Node_4956 (type:transpose)");
  res_3101->getOutput(0)->setName("Node_4956:0");
  auto res_3102=network->addIdentity(*res_3101->getOutput(0));
  assert(res_3102 && "failed to build Node_4957 (type:contiguous)");
  res_3102->getOutput(0)->setName("Node_4957:0");
  auto res_3103=network->addShuffle(*res_3102->getOutput(0));
  res_3103->setReshapeDimensions(Dims{2,{12,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3103 && "failed to build Node_4965 (type:reshape)");
  res_3103->getOutput(0)->setName("Node_4965:0");
  auto res_3104=network->addMatrixMultiply(*res_3103->getOutput(0),MatrixOperation::kNONE,*res_650->getOutput(0),MatrixOperation::kNONE);
  assert(res_3104 && "failed to build Node_4972 (type:matmul)");
  res_3104->getOutput(0)->setName("Node_4972:0");
  auto res_3105=network->addElementWise(*res_3104->getOutput(0),*res_651->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3105 && "failed to build Node_4972_add (type:add)");
  res_3105->getOutput(0)->setName("Node_4972_add:0");
  auto res_3106=network->addElementWise(*res_3105->getOutput(0),*res_3083->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3106 && "failed to build Node_4976 (type:add)");
  res_3106->getOutput(0)->setName("Node_4976:0");
  auto res_3107=network->addReduce(*res_3106->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3107 && "failed to build Node_4983_mean (type:mean)");
  res_3107->getOutput(0)->setName("Node_4983_mean:0");
  auto res_3108=network->addElementWise(*res_3106->getOutput(0),*res_3107->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3108 && "failed to build Node_4983_diff (type:sub)");
  res_3108->getOutput(0)->setName("Node_4983_diff:0");
  auto res_3109=network->addElementWise(*res_3108->getOutput(0),*res_1206->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3109 && "failed to build Node_4983_power (type:power)");
  res_3109->getOutput(0)->setName("Node_4983_power:0");
  auto res_3110=network->addReduce(*res_3109->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3110 && "failed to build Node_4983_var (type:mean)");
  res_3110->getOutput(0)->setName("Node_4983_var:0");
  auto res_3111=network->addElementWise(*res_3110->getOutput(0),*res_1080->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3111 && "failed to build Node_4983_modify (type:add)");
  res_3111->getOutput(0)->setName("Node_4983_modify:0");
  auto res_3112=network->addUnary(*res_3111->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3112 && "failed to build Node_4983_sqrt (type:power)");
  res_3112->getOutput(0)->setName("Node_4983_sqrt:0");
  auto res_3113=network->addElementWise(*res_3108->getOutput(0),*res_3112->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3113 && "failed to build Node_4983_rsqrt (type:divide)");
  res_3113->getOutput(0)->setName("Node_4983_rsqrt:0");
  auto res_3114=network->addElementWise(*res_3113->getOutput(0),*res_196->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3114 && "failed to build Node_4983_mul (type:multiply)");
  res_3114->getOutput(0)->setName("Node_4983_mul:0");
  auto res_3115=network->addElementWise(*res_3114->getOutput(0),*res_197->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3115 && "failed to build Node_4983 (type:add)");
  res_3115->getOutput(0)->setName("Node_4983:0");
  auto res_3116=network->addMatrixMultiply(*res_3115->getOutput(0),MatrixOperation::kNONE,*res_652->getOutput(0),MatrixOperation::kNONE);
  assert(res_3116 && "failed to build Node_4989 (type:matmul)");
  res_3116->getOutput(0)->setName("Node_4989:0");
  auto res_3117=network->addElementWise(*res_3116->getOutput(0),*res_653->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3117 && "failed to build Node_4989_add (type:add)");
  res_3117->getOutput(0)->setName("Node_4989_add:0");
  ITensor* inputTensors_3118[1] = {res_3117->getOutput(0)};
  auto plugin_3118=GELU_Plugin("gelu");
  auto res_3118=network->addPluginV2(inputTensors_3118,1,plugin_3118);
  assert(res_3118 && "failed to build Node_4990 (type:gelu)");
  res_3118->getOutput(0)->setName("Node_4990:0");
  auto res_3119=network->addMatrixMultiply(*res_3118->getOutput(0),MatrixOperation::kNONE,*res_654->getOutput(0),MatrixOperation::kNONE);
  assert(res_3119 && "failed to build Node_4997 (type:matmul)");
  res_3119->getOutput(0)->setName("Node_4997:0");
  auto res_3120=network->addElementWise(*res_3119->getOutput(0),*res_655->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3120 && "failed to build Node_4997_add (type:add)");
  res_3120->getOutput(0)->setName("Node_4997_add:0");
  auto res_3121=network->addElementWise(*res_3120->getOutput(0),*res_3115->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3121 && "failed to build Node_5001 (type:add)");
  res_3121->getOutput(0)->setName("Node_5001:0");
  auto res_3122=network->addReduce(*res_3121->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3122 && "failed to build Node_5008_mean (type:mean)");
  res_3122->getOutput(0)->setName("Node_5008_mean:0");
  auto res_3123=network->addElementWise(*res_3121->getOutput(0),*res_3122->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3123 && "failed to build Node_5008_diff (type:sub)");
  res_3123->getOutput(0)->setName("Node_5008_diff:0");
  auto res_3124=network->addElementWise(*res_3123->getOutput(0),*res_1207->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3124 && "failed to build Node_5008_power (type:power)");
  res_3124->getOutput(0)->setName("Node_5008_power:0");
  auto res_3125=network->addReduce(*res_3124->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3125 && "failed to build Node_5008_var (type:mean)");
  res_3125->getOutput(0)->setName("Node_5008_var:0");
  auto res_3126=network->addElementWise(*res_3125->getOutput(0),*res_1081->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3126 && "failed to build Node_5008_modify (type:add)");
  res_3126->getOutput(0)->setName("Node_5008_modify:0");
  auto res_3127=network->addUnary(*res_3126->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3127 && "failed to build Node_5008_sqrt (type:power)");
  res_3127->getOutput(0)->setName("Node_5008_sqrt:0");
  auto res_3128=network->addElementWise(*res_3123->getOutput(0),*res_3127->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3128 && "failed to build Node_5008_rsqrt (type:divide)");
  res_3128->getOutput(0)->setName("Node_5008_rsqrt:0");
  auto res_3129=network->addElementWise(*res_3128->getOutput(0),*res_198->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3129 && "failed to build Node_5008_mul (type:multiply)");
  res_3129->getOutput(0)->setName("Node_5008_mul:0");
  auto res_3130=network->addElementWise(*res_3129->getOutput(0),*res_199->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3130 && "failed to build Node_5008 (type:add)");
  res_3130->getOutput(0)->setName("Node_5008:0");
  auto res_3131=network->addSlice(*res_3130->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_3131 && "failed to build Node_5012 (type:dlr_slice)");
  res_3131->getOutput(0)->setName("Node_5012:0");
  auto res_3132=network->addShuffle(*res_3131->getOutput(0));
  res_3132->setReshapeDimensions(Dims3{192,1,1});
  assert(res_3132 && "failed to build Node_5014_reshape (type:reshape)");
  res_3132->getOutput(0)->setName("Node_5014_reshape:0");
  auto res_3133=network->addFullyConnected(*res_3132->getOutput(0),192,mWeightsMap["weight_3133"],mWeightsMap["bias_3133"]);
  assert(res_3133 && "failed to build Node_5019 (type:dense)");
  res_3133->getOutput(0)->setName("Node_5019:0");
  auto res_3134=network->addShuffle(*res_3133->getOutput(0));
  res_3134->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_3134 && "failed to build Node_5019_reshape (type:reshape)");
  res_3134->getOutput(0)->setName("Node_5019_reshape:0");
  auto res_3135=network->addActivation(*res_3134->getOutput(0),ActivationType::kTANH);
  assert(res_3135 && "failed to build Node_5020 (type:tanh)");
  res_3135->getOutput(0)->setName("Node_5020:0");
  auto res_3136=network->addShuffle(*res_3135->getOutput(0));
  res_3136->setReshapeDimensions(Dims{2,{1,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3136 && "failed to build Node_7281 (type:reshape)");
  res_3136->getOutput(0)->setName("Node_7281:0");
  auto res_3137=network->addGather(*res_923->getOutput(0),*inputs[24],0);
  assert(res_3137 && "failed to build Node_5034 (type:gather)");
  res_3137->getOutput(0)->setName("Node_5034:0");
  auto res_3138=network->addShuffle(*inputs[25]);
  res_3138->setReshapeDimensions(Dims{2,{133,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3138 && "failed to build Node_5037 (type:reshape)");
  res_3138->getOutput(0)->setName("Node_5037:0");
  auto res_3139=network->addElementWise(*res_54->getOutput(0),*res_3138->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3139 && "failed to build Node_5039 (type:add)");
  res_3139->getOutput(0)->setName("Node_5039:0");
  auto res_3140=network->addElementWise(*res_3137->getOutput(0),*res_3139->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3140 && "failed to build Node_5040 (type:multiply)");
  res_3140->getOutput(0)->setName("Node_5040:0");
  auto res_3141=network->addShuffle(*inputs[25]);
  res_3141->setReshapeDimensions(Dims{2,{133,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3141 && "failed to build Node_5053 (type:reshape)");
  res_3141->getOutput(0)->setName("Node_5053:0");
  auto res_3142=network->addElementWise(*res_55->getOutput(0),*res_3141->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3142 && "failed to build Node_5055 (type:add)");
  res_3142->getOutput(0)->setName("Node_5055:0");
  auto res_3143=network->addShuffle(*inputs[25]);
  res_3143->setReshapeDimensions(Dims{2,{133,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3143 && "failed to build Node_5069 (type:reshape)");
  res_3143->getOutput(0)->setName("Node_5069:0");
  auto res_3144=network->addElementWise(*res_56->getOutput(0),*res_3143->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3144 && "failed to build Node_5071 (type:add)");
  res_3144->getOutput(0)->setName("Node_5071:0");
  auto res_3145=network->addShuffle(*inputs[25]);
  res_3145->setReshapeDimensions(Dims3{1,1,133});
  assert(res_3145 && "failed to build Node_5089 (type:reshape)");
  res_3145->getOutput(0)->setName("Node_5089:0");
  auto res_3146=network->addElementWise(*res_974->getOutput(0),*res_3145->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3146 && "failed to build Node_5091 (type:sub)");
  res_3146->getOutput(0)->setName("Node_5091:0");
  auto res_3147=network->addElementWise(*res_3146->getOutput(0),*res_975->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3147 && "failed to build Node_5092 (type:multiply)");
  res_3147->getOutput(0)->setName("Node_5092:0");
  auto res_3148=network->addGather(*res_923->getOutput(0),*inputs[26],0);
  assert(res_3148 && "failed to build Node_5050 (type:gather)");
  res_3148->getOutput(0)->setName("Node_5050:0");
  auto res_3149=network->addElementWise(*res_3148->getOutput(0),*res_3142->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3149 && "failed to build Node_5056 (type:multiply)");
  res_3149->getOutput(0)->setName("Node_5056:0");
  auto res_3150=network->addElementWise(*res_3140->getOutput(0),*res_3149->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3150 && "failed to build Node_5079 (type:add)");
  res_3150->getOutput(0)->setName("Node_5079:0");
  auto res_3151=network->addGather(*res_923->getOutput(0),*inputs[27],0);
  assert(res_3151 && "failed to build Node_5066 (type:gather)");
  res_3151->getOutput(0)->setName("Node_5066:0");
  auto res_3152=network->addElementWise(*res_3151->getOutput(0),*res_3144->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3152 && "failed to build Node_5072 (type:multiply)");
  res_3152->getOutput(0)->setName("Node_5072:0");
  auto res_3153=network->addElementWise(*res_3150->getOutput(0),*res_3152->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3153 && "failed to build Node_5080 (type:add)");
  res_3153->getOutput(0)->setName("Node_5080:0");
  auto res_3154=network->addReduce(*res_3153->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3154 && "failed to build Node_5099_mean (type:mean)");
  res_3154->getOutput(0)->setName("Node_5099_mean:0");
  auto res_3155=network->addElementWise(*res_3153->getOutput(0),*res_3154->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3155 && "failed to build Node_5099_diff (type:sub)");
  res_3155->getOutput(0)->setName("Node_5099_diff:0");
  auto res_3156=network->addElementWise(*res_3155->getOutput(0),*res_1208->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3156 && "failed to build Node_5099_power (type:power)");
  res_3156->getOutput(0)->setName("Node_5099_power:0");
  auto res_3157=network->addReduce(*res_3156->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3157 && "failed to build Node_5099_var (type:mean)");
  res_3157->getOutput(0)->setName("Node_5099_var:0");
  auto res_3158=network->addElementWise(*res_3157->getOutput(0),*res_1082->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3158 && "failed to build Node_5099_modify (type:add)");
  res_3158->getOutput(0)->setName("Node_5099_modify:0");
  auto res_3159=network->addUnary(*res_3158->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3159 && "failed to build Node_5099_sqrt (type:power)");
  res_3159->getOutput(0)->setName("Node_5099_sqrt:0");
  auto res_3160=network->addElementWise(*res_3155->getOutput(0),*res_3159->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3160 && "failed to build Node_5099_rsqrt (type:divide)");
  res_3160->getOutput(0)->setName("Node_5099_rsqrt:0");
  auto res_3161=network->addElementWise(*res_3160->getOutput(0),*res_200->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3161 && "failed to build Node_5099_mul (type:multiply)");
  res_3161->getOutput(0)->setName("Node_5099_mul:0");
  auto res_3162=network->addElementWise(*res_3161->getOutput(0),*res_201->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3162 && "failed to build Node_5099 (type:add)");
  res_3162->getOutput(0)->setName("Node_5099:0");
  auto res_3163=network->addMatrixMultiply(*res_3162->getOutput(0),MatrixOperation::kNONE,*res_656->getOutput(0),MatrixOperation::kNONE);
  assert(res_3163 && "failed to build Node_5118 (type:matmul)");
  res_3163->getOutput(0)->setName("Node_5118:0");
  auto res_3164=network->addElementWise(*res_3163->getOutput(0),*res_657->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3164 && "failed to build Node_5118_add (type:add)");
  res_3164->getOutput(0)->setName("Node_5118_add:0");
  auto res_3165=network->addShuffle(*res_3164->getOutput(0));
  res_3165->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3165 && "failed to build Node_5138 (type:reshape)");
  res_3165->getOutput(0)->setName("Node_5138:0");
  auto res_3166=network->addShuffle(*res_3165->getOutput(0));
  Permutation permute_3166;
  permute_3166.order[0]=1;
  permute_3166.order[1]=0;
  permute_3166.order[2]=2;
  res_3166->setFirstTranspose(permute_3166);
  assert(res_3166 && "failed to build Node_5140 (type:transpose)");
  res_3166->getOutput(0)->setName("Node_5140:0");
  auto res_3167=network->addMatrixMultiply(*res_3162->getOutput(0),MatrixOperation::kNONE,*res_658->getOutput(0),MatrixOperation::kNONE);
  assert(res_3167 && "failed to build Node_5124 (type:matmul)");
  res_3167->getOutput(0)->setName("Node_5124:0");
  auto res_3168=network->addElementWise(*res_3167->getOutput(0),*res_659->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3168 && "failed to build Node_5124_add (type:add)");
  res_3168->getOutput(0)->setName("Node_5124_add:0");
  auto res_3169=network->addShuffle(*res_3168->getOutput(0));
  res_3169->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3169 && "failed to build Node_5148 (type:reshape)");
  res_3169->getOutput(0)->setName("Node_5148:0");
  auto res_3170=network->addShuffle(*res_3169->getOutput(0));
  Permutation permute_3170;
  permute_3170.order[0]=1;
  permute_3170.order[1]=2;
  permute_3170.order[2]=0;
  res_3170->setFirstTranspose(permute_3170);
  assert(res_3170 && "failed to build Node_5161 (type:transpose)");
  res_3170->getOutput(0)->setName("Node_5161:0");
  auto res_3171=network->addMatrixMultiply(*res_3166->getOutput(0),MatrixOperation::kNONE,*res_3170->getOutput(0),MatrixOperation::kNONE);
  assert(res_3171 && "failed to build Node_5162 (type:matmul)");
  res_3171->getOutput(0)->setName("Node_5162:0");
  auto res_3172=network->addElementWise(*res_3171->getOutput(0),*res_976->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3172 && "failed to build Node_5163 (type:divide)");
  res_3172->getOutput(0)->setName("Node_5163:0");
  auto res_3173=network->addElementWise(*res_3172->getOutput(0),*res_3147->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3173 && "failed to build Node_5164 (type:add)");
  res_3173->getOutput(0)->setName("Node_5164:0");
  auto res_3174=network->addSoftMax(*res_3173->getOutput(0));
  res_3174->setAxes(4);
  assert(res_3174 && "failed to build Node_5165 (type:softmax)");
  res_3174->getOutput(0)->setName("Node_5165:0");
  auto res_3175=network->addMatrixMultiply(*res_3162->getOutput(0),MatrixOperation::kNONE,*res_660->getOutput(0),MatrixOperation::kNONE);
  assert(res_3175 && "failed to build Node_5130 (type:matmul)");
  res_3175->getOutput(0)->setName("Node_5130:0");
  auto res_3176=network->addElementWise(*res_3175->getOutput(0),*res_661->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3176 && "failed to build Node_5130_add (type:add)");
  res_3176->getOutput(0)->setName("Node_5130_add:0");
  auto res_3177=network->addShuffle(*res_3176->getOutput(0));
  res_3177->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3177 && "failed to build Node_5158 (type:reshape)");
  res_3177->getOutput(0)->setName("Node_5158:0");
  auto res_3178=network->addShuffle(*res_3177->getOutput(0));
  Permutation permute_3178;
  permute_3178.order[0]=1;
  permute_3178.order[1]=0;
  permute_3178.order[2]=2;
  res_3178->setFirstTranspose(permute_3178);
  assert(res_3178 && "failed to build Node_5160 (type:transpose)");
  res_3178->getOutput(0)->setName("Node_5160:0");
  auto res_3179=network->addMatrixMultiply(*res_3174->getOutput(0),MatrixOperation::kNONE,*res_3178->getOutput(0),MatrixOperation::kNONE);
  assert(res_3179 && "failed to build Node_5169 (type:matmul)");
  res_3179->getOutput(0)->setName("Node_5169:0");
  auto res_3180=network->addShuffle(*res_3179->getOutput(0));
  Permutation permute_3180;
  permute_3180.order[0]=1;
  permute_3180.order[1]=0;
  permute_3180.order[2]=2;
  res_3180->setFirstTranspose(permute_3180);
  assert(res_3180 && "failed to build Node_5171 (type:transpose)");
  res_3180->getOutput(0)->setName("Node_5171:0");
  auto res_3181=network->addIdentity(*res_3180->getOutput(0));
  assert(res_3181 && "failed to build Node_5172 (type:contiguous)");
  res_3181->getOutput(0)->setName("Node_5172:0");
  auto res_3182=network->addShuffle(*res_3181->getOutput(0));
  res_3182->setReshapeDimensions(Dims{2,{133,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3182 && "failed to build Node_5180 (type:reshape)");
  res_3182->getOutput(0)->setName("Node_5180:0");
  auto res_3183=network->addMatrixMultiply(*res_3182->getOutput(0),MatrixOperation::kNONE,*res_662->getOutput(0),MatrixOperation::kNONE);
  assert(res_3183 && "failed to build Node_5187 (type:matmul)");
  res_3183->getOutput(0)->setName("Node_5187:0");
  auto res_3184=network->addElementWise(*res_3183->getOutput(0),*res_663->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3184 && "failed to build Node_5187_add (type:add)");
  res_3184->getOutput(0)->setName("Node_5187_add:0");
  auto res_3185=network->addElementWise(*res_3184->getOutput(0),*res_3162->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3185 && "failed to build Node_5191 (type:add)");
  res_3185->getOutput(0)->setName("Node_5191:0");
  auto res_3186=network->addReduce(*res_3185->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3186 && "failed to build Node_5198_mean (type:mean)");
  res_3186->getOutput(0)->setName("Node_5198_mean:0");
  auto res_3187=network->addElementWise(*res_3185->getOutput(0),*res_3186->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3187 && "failed to build Node_5198_diff (type:sub)");
  res_3187->getOutput(0)->setName("Node_5198_diff:0");
  auto res_3188=network->addElementWise(*res_3187->getOutput(0),*res_1209->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3188 && "failed to build Node_5198_power (type:power)");
  res_3188->getOutput(0)->setName("Node_5198_power:0");
  auto res_3189=network->addReduce(*res_3188->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3189 && "failed to build Node_5198_var (type:mean)");
  res_3189->getOutput(0)->setName("Node_5198_var:0");
  auto res_3190=network->addElementWise(*res_3189->getOutput(0),*res_1083->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3190 && "failed to build Node_5198_modify (type:add)");
  res_3190->getOutput(0)->setName("Node_5198_modify:0");
  auto res_3191=network->addUnary(*res_3190->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3191 && "failed to build Node_5198_sqrt (type:power)");
  res_3191->getOutput(0)->setName("Node_5198_sqrt:0");
  auto res_3192=network->addElementWise(*res_3187->getOutput(0),*res_3191->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3192 && "failed to build Node_5198_rsqrt (type:divide)");
  res_3192->getOutput(0)->setName("Node_5198_rsqrt:0");
  auto res_3193=network->addElementWise(*res_3192->getOutput(0),*res_202->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3193 && "failed to build Node_5198_mul (type:multiply)");
  res_3193->getOutput(0)->setName("Node_5198_mul:0");
  auto res_3194=network->addElementWise(*res_3193->getOutput(0),*res_203->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3194 && "failed to build Node_5198 (type:add)");
  res_3194->getOutput(0)->setName("Node_5198:0");
  auto res_3195=network->addMatrixMultiply(*res_3194->getOutput(0),MatrixOperation::kNONE,*res_664->getOutput(0),MatrixOperation::kNONE);
  assert(res_3195 && "failed to build Node_5204 (type:matmul)");
  res_3195->getOutput(0)->setName("Node_5204:0");
  auto res_3196=network->addElementWise(*res_3195->getOutput(0),*res_665->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3196 && "failed to build Node_5204_add (type:add)");
  res_3196->getOutput(0)->setName("Node_5204_add:0");
  ITensor* inputTensors_3197[1] = {res_3196->getOutput(0)};
  auto plugin_3197=GELU_Plugin("gelu");
  auto res_3197=network->addPluginV2(inputTensors_3197,1,plugin_3197);
  assert(res_3197 && "failed to build Node_5205 (type:gelu)");
  res_3197->getOutput(0)->setName("Node_5205:0");
  auto res_3198=network->addMatrixMultiply(*res_3197->getOutput(0),MatrixOperation::kNONE,*res_666->getOutput(0),MatrixOperation::kNONE);
  assert(res_3198 && "failed to build Node_5212 (type:matmul)");
  res_3198->getOutput(0)->setName("Node_5212:0");
  auto res_3199=network->addElementWise(*res_3198->getOutput(0),*res_667->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3199 && "failed to build Node_5212_add (type:add)");
  res_3199->getOutput(0)->setName("Node_5212_add:0");
  auto res_3200=network->addElementWise(*res_3199->getOutput(0),*res_3194->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3200 && "failed to build Node_5216 (type:add)");
  res_3200->getOutput(0)->setName("Node_5216:0");
  auto res_3201=network->addReduce(*res_3200->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3201 && "failed to build Node_5223_mean (type:mean)");
  res_3201->getOutput(0)->setName("Node_5223_mean:0");
  auto res_3202=network->addElementWise(*res_3200->getOutput(0),*res_3201->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3202 && "failed to build Node_5223_diff (type:sub)");
  res_3202->getOutput(0)->setName("Node_5223_diff:0");
  auto res_3203=network->addElementWise(*res_3202->getOutput(0),*res_1210->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3203 && "failed to build Node_5223_power (type:power)");
  res_3203->getOutput(0)->setName("Node_5223_power:0");
  auto res_3204=network->addReduce(*res_3203->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3204 && "failed to build Node_5223_var (type:mean)");
  res_3204->getOutput(0)->setName("Node_5223_var:0");
  auto res_3205=network->addElementWise(*res_3204->getOutput(0),*res_1084->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3205 && "failed to build Node_5223_modify (type:add)");
  res_3205->getOutput(0)->setName("Node_5223_modify:0");
  auto res_3206=network->addUnary(*res_3205->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3206 && "failed to build Node_5223_sqrt (type:power)");
  res_3206->getOutput(0)->setName("Node_5223_sqrt:0");
  auto res_3207=network->addElementWise(*res_3202->getOutput(0),*res_3206->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3207 && "failed to build Node_5223_rsqrt (type:divide)");
  res_3207->getOutput(0)->setName("Node_5223_rsqrt:0");
  auto res_3208=network->addElementWise(*res_3207->getOutput(0),*res_204->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3208 && "failed to build Node_5223_mul (type:multiply)");
  res_3208->getOutput(0)->setName("Node_5223_mul:0");
  auto res_3209=network->addElementWise(*res_3208->getOutput(0),*res_205->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3209 && "failed to build Node_5223 (type:add)");
  res_3209->getOutput(0)->setName("Node_5223:0");
  auto res_3210=network->addMatrixMultiply(*res_3209->getOutput(0),MatrixOperation::kNONE,*res_668->getOutput(0),MatrixOperation::kNONE);
  assert(res_3210 && "failed to build Node_5239 (type:matmul)");
  res_3210->getOutput(0)->setName("Node_5239:0");
  auto res_3211=network->addElementWise(*res_3210->getOutput(0),*res_669->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3211 && "failed to build Node_5239_add (type:add)");
  res_3211->getOutput(0)->setName("Node_5239_add:0");
  auto res_3212=network->addShuffle(*res_3211->getOutput(0));
  res_3212->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3212 && "failed to build Node_5259 (type:reshape)");
  res_3212->getOutput(0)->setName("Node_5259:0");
  auto res_3213=network->addShuffle(*res_3212->getOutput(0));
  Permutation permute_3213;
  permute_3213.order[0]=1;
  permute_3213.order[1]=0;
  permute_3213.order[2]=2;
  res_3213->setFirstTranspose(permute_3213);
  assert(res_3213 && "failed to build Node_5261 (type:transpose)");
  res_3213->getOutput(0)->setName("Node_5261:0");
  auto res_3214=network->addMatrixMultiply(*res_3209->getOutput(0),MatrixOperation::kNONE,*res_670->getOutput(0),MatrixOperation::kNONE);
  assert(res_3214 && "failed to build Node_5245 (type:matmul)");
  res_3214->getOutput(0)->setName("Node_5245:0");
  auto res_3215=network->addElementWise(*res_3214->getOutput(0),*res_671->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3215 && "failed to build Node_5245_add (type:add)");
  res_3215->getOutput(0)->setName("Node_5245_add:0");
  auto res_3216=network->addShuffle(*res_3215->getOutput(0));
  res_3216->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3216 && "failed to build Node_5269 (type:reshape)");
  res_3216->getOutput(0)->setName("Node_5269:0");
  auto res_3217=network->addShuffle(*res_3216->getOutput(0));
  Permutation permute_3217;
  permute_3217.order[0]=1;
  permute_3217.order[1]=2;
  permute_3217.order[2]=0;
  res_3217->setFirstTranspose(permute_3217);
  assert(res_3217 && "failed to build Node_5282 (type:transpose)");
  res_3217->getOutput(0)->setName("Node_5282:0");
  auto res_3218=network->addMatrixMultiply(*res_3213->getOutput(0),MatrixOperation::kNONE,*res_3217->getOutput(0),MatrixOperation::kNONE);
  assert(res_3218 && "failed to build Node_5283 (type:matmul)");
  res_3218->getOutput(0)->setName("Node_5283:0");
  auto res_3219=network->addElementWise(*res_3218->getOutput(0),*res_977->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3219 && "failed to build Node_5284 (type:divide)");
  res_3219->getOutput(0)->setName("Node_5284:0");
  auto res_3220=network->addElementWise(*res_3219->getOutput(0),*res_3147->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3220 && "failed to build Node_5285 (type:add)");
  res_3220->getOutput(0)->setName("Node_5285:0");
  auto res_3221=network->addSoftMax(*res_3220->getOutput(0));
  res_3221->setAxes(4);
  assert(res_3221 && "failed to build Node_5286 (type:softmax)");
  res_3221->getOutput(0)->setName("Node_5286:0");
  auto res_3222=network->addMatrixMultiply(*res_3209->getOutput(0),MatrixOperation::kNONE,*res_672->getOutput(0),MatrixOperation::kNONE);
  assert(res_3222 && "failed to build Node_5251 (type:matmul)");
  res_3222->getOutput(0)->setName("Node_5251:0");
  auto res_3223=network->addElementWise(*res_3222->getOutput(0),*res_673->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3223 && "failed to build Node_5251_add (type:add)");
  res_3223->getOutput(0)->setName("Node_5251_add:0");
  auto res_3224=network->addShuffle(*res_3223->getOutput(0));
  res_3224->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3224 && "failed to build Node_5279 (type:reshape)");
  res_3224->getOutput(0)->setName("Node_5279:0");
  auto res_3225=network->addShuffle(*res_3224->getOutput(0));
  Permutation permute_3225;
  permute_3225.order[0]=1;
  permute_3225.order[1]=0;
  permute_3225.order[2]=2;
  res_3225->setFirstTranspose(permute_3225);
  assert(res_3225 && "failed to build Node_5281 (type:transpose)");
  res_3225->getOutput(0)->setName("Node_5281:0");
  auto res_3226=network->addMatrixMultiply(*res_3221->getOutput(0),MatrixOperation::kNONE,*res_3225->getOutput(0),MatrixOperation::kNONE);
  assert(res_3226 && "failed to build Node_5290 (type:matmul)");
  res_3226->getOutput(0)->setName("Node_5290:0");
  auto res_3227=network->addShuffle(*res_3226->getOutput(0));
  Permutation permute_3227;
  permute_3227.order[0]=1;
  permute_3227.order[1]=0;
  permute_3227.order[2]=2;
  res_3227->setFirstTranspose(permute_3227);
  assert(res_3227 && "failed to build Node_5292 (type:transpose)");
  res_3227->getOutput(0)->setName("Node_5292:0");
  auto res_3228=network->addIdentity(*res_3227->getOutput(0));
  assert(res_3228 && "failed to build Node_5293 (type:contiguous)");
  res_3228->getOutput(0)->setName("Node_5293:0");
  auto res_3229=network->addShuffle(*res_3228->getOutput(0));
  res_3229->setReshapeDimensions(Dims{2,{133,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3229 && "failed to build Node_5301 (type:reshape)");
  res_3229->getOutput(0)->setName("Node_5301:0");
  auto res_3230=network->addMatrixMultiply(*res_3229->getOutput(0),MatrixOperation::kNONE,*res_674->getOutput(0),MatrixOperation::kNONE);
  assert(res_3230 && "failed to build Node_5308 (type:matmul)");
  res_3230->getOutput(0)->setName("Node_5308:0");
  auto res_3231=network->addElementWise(*res_3230->getOutput(0),*res_675->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3231 && "failed to build Node_5308_add (type:add)");
  res_3231->getOutput(0)->setName("Node_5308_add:0");
  auto res_3232=network->addElementWise(*res_3231->getOutput(0),*res_3209->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3232 && "failed to build Node_5312 (type:add)");
  res_3232->getOutput(0)->setName("Node_5312:0");
  auto res_3233=network->addReduce(*res_3232->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3233 && "failed to build Node_5319_mean (type:mean)");
  res_3233->getOutput(0)->setName("Node_5319_mean:0");
  auto res_3234=network->addElementWise(*res_3232->getOutput(0),*res_3233->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3234 && "failed to build Node_5319_diff (type:sub)");
  res_3234->getOutput(0)->setName("Node_5319_diff:0");
  auto res_3235=network->addElementWise(*res_3234->getOutput(0),*res_1211->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3235 && "failed to build Node_5319_power (type:power)");
  res_3235->getOutput(0)->setName("Node_5319_power:0");
  auto res_3236=network->addReduce(*res_3235->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3236 && "failed to build Node_5319_var (type:mean)");
  res_3236->getOutput(0)->setName("Node_5319_var:0");
  auto res_3237=network->addElementWise(*res_3236->getOutput(0),*res_1085->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3237 && "failed to build Node_5319_modify (type:add)");
  res_3237->getOutput(0)->setName("Node_5319_modify:0");
  auto res_3238=network->addUnary(*res_3237->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3238 && "failed to build Node_5319_sqrt (type:power)");
  res_3238->getOutput(0)->setName("Node_5319_sqrt:0");
  auto res_3239=network->addElementWise(*res_3234->getOutput(0),*res_3238->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3239 && "failed to build Node_5319_rsqrt (type:divide)");
  res_3239->getOutput(0)->setName("Node_5319_rsqrt:0");
  auto res_3240=network->addElementWise(*res_3239->getOutput(0),*res_206->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3240 && "failed to build Node_5319_mul (type:multiply)");
  res_3240->getOutput(0)->setName("Node_5319_mul:0");
  auto res_3241=network->addElementWise(*res_3240->getOutput(0),*res_207->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3241 && "failed to build Node_5319 (type:add)");
  res_3241->getOutput(0)->setName("Node_5319:0");
  auto res_3242=network->addMatrixMultiply(*res_3241->getOutput(0),MatrixOperation::kNONE,*res_676->getOutput(0),MatrixOperation::kNONE);
  assert(res_3242 && "failed to build Node_5325 (type:matmul)");
  res_3242->getOutput(0)->setName("Node_5325:0");
  auto res_3243=network->addElementWise(*res_3242->getOutput(0),*res_677->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3243 && "failed to build Node_5325_add (type:add)");
  res_3243->getOutput(0)->setName("Node_5325_add:0");
  ITensor* inputTensors_3244[1] = {res_3243->getOutput(0)};
  auto plugin_3244=GELU_Plugin("gelu");
  auto res_3244=network->addPluginV2(inputTensors_3244,1,plugin_3244);
  assert(res_3244 && "failed to build Node_5326 (type:gelu)");
  res_3244->getOutput(0)->setName("Node_5326:0");
  auto res_3245=network->addMatrixMultiply(*res_3244->getOutput(0),MatrixOperation::kNONE,*res_678->getOutput(0),MatrixOperation::kNONE);
  assert(res_3245 && "failed to build Node_5333 (type:matmul)");
  res_3245->getOutput(0)->setName("Node_5333:0");
  auto res_3246=network->addElementWise(*res_3245->getOutput(0),*res_679->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3246 && "failed to build Node_5333_add (type:add)");
  res_3246->getOutput(0)->setName("Node_5333_add:0");
  auto res_3247=network->addElementWise(*res_3246->getOutput(0),*res_3241->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3247 && "failed to build Node_5337 (type:add)");
  res_3247->getOutput(0)->setName("Node_5337:0");
  auto res_3248=network->addReduce(*res_3247->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3248 && "failed to build Node_5344_mean (type:mean)");
  res_3248->getOutput(0)->setName("Node_5344_mean:0");
  auto res_3249=network->addElementWise(*res_3247->getOutput(0),*res_3248->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3249 && "failed to build Node_5344_diff (type:sub)");
  res_3249->getOutput(0)->setName("Node_5344_diff:0");
  auto res_3250=network->addElementWise(*res_3249->getOutput(0),*res_1212->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3250 && "failed to build Node_5344_power (type:power)");
  res_3250->getOutput(0)->setName("Node_5344_power:0");
  auto res_3251=network->addReduce(*res_3250->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3251 && "failed to build Node_5344_var (type:mean)");
  res_3251->getOutput(0)->setName("Node_5344_var:0");
  auto res_3252=network->addElementWise(*res_3251->getOutput(0),*res_1086->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3252 && "failed to build Node_5344_modify (type:add)");
  res_3252->getOutput(0)->setName("Node_5344_modify:0");
  auto res_3253=network->addUnary(*res_3252->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3253 && "failed to build Node_5344_sqrt (type:power)");
  res_3253->getOutput(0)->setName("Node_5344_sqrt:0");
  auto res_3254=network->addElementWise(*res_3249->getOutput(0),*res_3253->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3254 && "failed to build Node_5344_rsqrt (type:divide)");
  res_3254->getOutput(0)->setName("Node_5344_rsqrt:0");
  auto res_3255=network->addElementWise(*res_3254->getOutput(0),*res_208->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3255 && "failed to build Node_5344_mul (type:multiply)");
  res_3255->getOutput(0)->setName("Node_5344_mul:0");
  auto res_3256=network->addElementWise(*res_3255->getOutput(0),*res_209->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3256 && "failed to build Node_5344 (type:add)");
  res_3256->getOutput(0)->setName("Node_5344:0");
  auto res_3257=network->addMatrixMultiply(*res_3256->getOutput(0),MatrixOperation::kNONE,*res_680->getOutput(0),MatrixOperation::kNONE);
  assert(res_3257 && "failed to build Node_5360 (type:matmul)");
  res_3257->getOutput(0)->setName("Node_5360:0");
  auto res_3258=network->addElementWise(*res_3257->getOutput(0),*res_681->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3258 && "failed to build Node_5360_add (type:add)");
  res_3258->getOutput(0)->setName("Node_5360_add:0");
  auto res_3259=network->addShuffle(*res_3258->getOutput(0));
  res_3259->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3259 && "failed to build Node_5380 (type:reshape)");
  res_3259->getOutput(0)->setName("Node_5380:0");
  auto res_3260=network->addShuffle(*res_3259->getOutput(0));
  Permutation permute_3260;
  permute_3260.order[0]=1;
  permute_3260.order[1]=0;
  permute_3260.order[2]=2;
  res_3260->setFirstTranspose(permute_3260);
  assert(res_3260 && "failed to build Node_5382 (type:transpose)");
  res_3260->getOutput(0)->setName("Node_5382:0");
  auto res_3261=network->addMatrixMultiply(*res_3256->getOutput(0),MatrixOperation::kNONE,*res_682->getOutput(0),MatrixOperation::kNONE);
  assert(res_3261 && "failed to build Node_5366 (type:matmul)");
  res_3261->getOutput(0)->setName("Node_5366:0");
  auto res_3262=network->addElementWise(*res_3261->getOutput(0),*res_683->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3262 && "failed to build Node_5366_add (type:add)");
  res_3262->getOutput(0)->setName("Node_5366_add:0");
  auto res_3263=network->addShuffle(*res_3262->getOutput(0));
  res_3263->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3263 && "failed to build Node_5390 (type:reshape)");
  res_3263->getOutput(0)->setName("Node_5390:0");
  auto res_3264=network->addShuffle(*res_3263->getOutput(0));
  Permutation permute_3264;
  permute_3264.order[0]=1;
  permute_3264.order[1]=2;
  permute_3264.order[2]=0;
  res_3264->setFirstTranspose(permute_3264);
  assert(res_3264 && "failed to build Node_5403 (type:transpose)");
  res_3264->getOutput(0)->setName("Node_5403:0");
  auto res_3265=network->addMatrixMultiply(*res_3260->getOutput(0),MatrixOperation::kNONE,*res_3264->getOutput(0),MatrixOperation::kNONE);
  assert(res_3265 && "failed to build Node_5404 (type:matmul)");
  res_3265->getOutput(0)->setName("Node_5404:0");
  auto res_3266=network->addElementWise(*res_3265->getOutput(0),*res_978->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3266 && "failed to build Node_5405 (type:divide)");
  res_3266->getOutput(0)->setName("Node_5405:0");
  auto res_3267=network->addElementWise(*res_3266->getOutput(0),*res_3147->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3267 && "failed to build Node_5406 (type:add)");
  res_3267->getOutput(0)->setName("Node_5406:0");
  auto res_3268=network->addSoftMax(*res_3267->getOutput(0));
  res_3268->setAxes(4);
  assert(res_3268 && "failed to build Node_5407 (type:softmax)");
  res_3268->getOutput(0)->setName("Node_5407:0");
  auto res_3269=network->addMatrixMultiply(*res_3256->getOutput(0),MatrixOperation::kNONE,*res_684->getOutput(0),MatrixOperation::kNONE);
  assert(res_3269 && "failed to build Node_5372 (type:matmul)");
  res_3269->getOutput(0)->setName("Node_5372:0");
  auto res_3270=network->addElementWise(*res_3269->getOutput(0),*res_685->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3270 && "failed to build Node_5372_add (type:add)");
  res_3270->getOutput(0)->setName("Node_5372_add:0");
  auto res_3271=network->addShuffle(*res_3270->getOutput(0));
  res_3271->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3271 && "failed to build Node_5400 (type:reshape)");
  res_3271->getOutput(0)->setName("Node_5400:0");
  auto res_3272=network->addShuffle(*res_3271->getOutput(0));
  Permutation permute_3272;
  permute_3272.order[0]=1;
  permute_3272.order[1]=0;
  permute_3272.order[2]=2;
  res_3272->setFirstTranspose(permute_3272);
  assert(res_3272 && "failed to build Node_5402 (type:transpose)");
  res_3272->getOutput(0)->setName("Node_5402:0");
  auto res_3273=network->addMatrixMultiply(*res_3268->getOutput(0),MatrixOperation::kNONE,*res_3272->getOutput(0),MatrixOperation::kNONE);
  assert(res_3273 && "failed to build Node_5411 (type:matmul)");
  res_3273->getOutput(0)->setName("Node_5411:0");
  auto res_3274=network->addShuffle(*res_3273->getOutput(0));
  Permutation permute_3274;
  permute_3274.order[0]=1;
  permute_3274.order[1]=0;
  permute_3274.order[2]=2;
  res_3274->setFirstTranspose(permute_3274);
  assert(res_3274 && "failed to build Node_5413 (type:transpose)");
  res_3274->getOutput(0)->setName("Node_5413:0");
  auto res_3275=network->addIdentity(*res_3274->getOutput(0));
  assert(res_3275 && "failed to build Node_5414 (type:contiguous)");
  res_3275->getOutput(0)->setName("Node_5414:0");
  auto res_3276=network->addShuffle(*res_3275->getOutput(0));
  res_3276->setReshapeDimensions(Dims{2,{133,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3276 && "failed to build Node_5422 (type:reshape)");
  res_3276->getOutput(0)->setName("Node_5422:0");
  auto res_3277=network->addMatrixMultiply(*res_3276->getOutput(0),MatrixOperation::kNONE,*res_686->getOutput(0),MatrixOperation::kNONE);
  assert(res_3277 && "failed to build Node_5429 (type:matmul)");
  res_3277->getOutput(0)->setName("Node_5429:0");
  auto res_3278=network->addElementWise(*res_3277->getOutput(0),*res_687->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3278 && "failed to build Node_5429_add (type:add)");
  res_3278->getOutput(0)->setName("Node_5429_add:0");
  auto res_3279=network->addElementWise(*res_3278->getOutput(0),*res_3256->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3279 && "failed to build Node_5433 (type:add)");
  res_3279->getOutput(0)->setName("Node_5433:0");
  auto res_3280=network->addReduce(*res_3279->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3280 && "failed to build Node_5440_mean (type:mean)");
  res_3280->getOutput(0)->setName("Node_5440_mean:0");
  auto res_3281=network->addElementWise(*res_3279->getOutput(0),*res_3280->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3281 && "failed to build Node_5440_diff (type:sub)");
  res_3281->getOutput(0)->setName("Node_5440_diff:0");
  auto res_3282=network->addElementWise(*res_3281->getOutput(0),*res_1213->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3282 && "failed to build Node_5440_power (type:power)");
  res_3282->getOutput(0)->setName("Node_5440_power:0");
  auto res_3283=network->addReduce(*res_3282->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3283 && "failed to build Node_5440_var (type:mean)");
  res_3283->getOutput(0)->setName("Node_5440_var:0");
  auto res_3284=network->addElementWise(*res_3283->getOutput(0),*res_1087->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3284 && "failed to build Node_5440_modify (type:add)");
  res_3284->getOutput(0)->setName("Node_5440_modify:0");
  auto res_3285=network->addUnary(*res_3284->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3285 && "failed to build Node_5440_sqrt (type:power)");
  res_3285->getOutput(0)->setName("Node_5440_sqrt:0");
  auto res_3286=network->addElementWise(*res_3281->getOutput(0),*res_3285->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3286 && "failed to build Node_5440_rsqrt (type:divide)");
  res_3286->getOutput(0)->setName("Node_5440_rsqrt:0");
  auto res_3287=network->addElementWise(*res_3286->getOutput(0),*res_210->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3287 && "failed to build Node_5440_mul (type:multiply)");
  res_3287->getOutput(0)->setName("Node_5440_mul:0");
  auto res_3288=network->addElementWise(*res_3287->getOutput(0),*res_211->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3288 && "failed to build Node_5440 (type:add)");
  res_3288->getOutput(0)->setName("Node_5440:0");
  auto res_3289=network->addMatrixMultiply(*res_3288->getOutput(0),MatrixOperation::kNONE,*res_688->getOutput(0),MatrixOperation::kNONE);
  assert(res_3289 && "failed to build Node_5446 (type:matmul)");
  res_3289->getOutput(0)->setName("Node_5446:0");
  auto res_3290=network->addElementWise(*res_3289->getOutput(0),*res_689->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3290 && "failed to build Node_5446_add (type:add)");
  res_3290->getOutput(0)->setName("Node_5446_add:0");
  ITensor* inputTensors_3291[1] = {res_3290->getOutput(0)};
  auto plugin_3291=GELU_Plugin("gelu");
  auto res_3291=network->addPluginV2(inputTensors_3291,1,plugin_3291);
  assert(res_3291 && "failed to build Node_5447 (type:gelu)");
  res_3291->getOutput(0)->setName("Node_5447:0");
  auto res_3292=network->addMatrixMultiply(*res_3291->getOutput(0),MatrixOperation::kNONE,*res_690->getOutput(0),MatrixOperation::kNONE);
  assert(res_3292 && "failed to build Node_5454 (type:matmul)");
  res_3292->getOutput(0)->setName("Node_5454:0");
  auto res_3293=network->addElementWise(*res_3292->getOutput(0),*res_691->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3293 && "failed to build Node_5454_add (type:add)");
  res_3293->getOutput(0)->setName("Node_5454_add:0");
  auto res_3294=network->addElementWise(*res_3293->getOutput(0),*res_3288->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3294 && "failed to build Node_5458 (type:add)");
  res_3294->getOutput(0)->setName("Node_5458:0");
  auto res_3295=network->addReduce(*res_3294->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3295 && "failed to build Node_5465_mean (type:mean)");
  res_3295->getOutput(0)->setName("Node_5465_mean:0");
  auto res_3296=network->addElementWise(*res_3294->getOutput(0),*res_3295->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3296 && "failed to build Node_5465_diff (type:sub)");
  res_3296->getOutput(0)->setName("Node_5465_diff:0");
  auto res_3297=network->addElementWise(*res_3296->getOutput(0),*res_1214->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3297 && "failed to build Node_5465_power (type:power)");
  res_3297->getOutput(0)->setName("Node_5465_power:0");
  auto res_3298=network->addReduce(*res_3297->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3298 && "failed to build Node_5465_var (type:mean)");
  res_3298->getOutput(0)->setName("Node_5465_var:0");
  auto res_3299=network->addElementWise(*res_3298->getOutput(0),*res_1088->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3299 && "failed to build Node_5465_modify (type:add)");
  res_3299->getOutput(0)->setName("Node_5465_modify:0");
  auto res_3300=network->addUnary(*res_3299->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3300 && "failed to build Node_5465_sqrt (type:power)");
  res_3300->getOutput(0)->setName("Node_5465_sqrt:0");
  auto res_3301=network->addElementWise(*res_3296->getOutput(0),*res_3300->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3301 && "failed to build Node_5465_rsqrt (type:divide)");
  res_3301->getOutput(0)->setName("Node_5465_rsqrt:0");
  auto res_3302=network->addElementWise(*res_3301->getOutput(0),*res_212->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3302 && "failed to build Node_5465_mul (type:multiply)");
  res_3302->getOutput(0)->setName("Node_5465_mul:0");
  auto res_3303=network->addElementWise(*res_3302->getOutput(0),*res_213->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3303 && "failed to build Node_5465 (type:add)");
  res_3303->getOutput(0)->setName("Node_5465:0");
  auto res_3304=network->addMatrixMultiply(*res_3303->getOutput(0),MatrixOperation::kNONE,*res_692->getOutput(0),MatrixOperation::kNONE);
  assert(res_3304 && "failed to build Node_5481 (type:matmul)");
  res_3304->getOutput(0)->setName("Node_5481:0");
  auto res_3305=network->addElementWise(*res_3304->getOutput(0),*res_693->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3305 && "failed to build Node_5481_add (type:add)");
  res_3305->getOutput(0)->setName("Node_5481_add:0");
  auto res_3306=network->addShuffle(*res_3305->getOutput(0));
  res_3306->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3306 && "failed to build Node_5501 (type:reshape)");
  res_3306->getOutput(0)->setName("Node_5501:0");
  auto res_3307=network->addShuffle(*res_3306->getOutput(0));
  Permutation permute_3307;
  permute_3307.order[0]=1;
  permute_3307.order[1]=0;
  permute_3307.order[2]=2;
  res_3307->setFirstTranspose(permute_3307);
  assert(res_3307 && "failed to build Node_5503 (type:transpose)");
  res_3307->getOutput(0)->setName("Node_5503:0");
  auto res_3308=network->addMatrixMultiply(*res_3303->getOutput(0),MatrixOperation::kNONE,*res_694->getOutput(0),MatrixOperation::kNONE);
  assert(res_3308 && "failed to build Node_5487 (type:matmul)");
  res_3308->getOutput(0)->setName("Node_5487:0");
  auto res_3309=network->addElementWise(*res_3308->getOutput(0),*res_695->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3309 && "failed to build Node_5487_add (type:add)");
  res_3309->getOutput(0)->setName("Node_5487_add:0");
  auto res_3310=network->addShuffle(*res_3309->getOutput(0));
  res_3310->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3310 && "failed to build Node_5511 (type:reshape)");
  res_3310->getOutput(0)->setName("Node_5511:0");
  auto res_3311=network->addShuffle(*res_3310->getOutput(0));
  Permutation permute_3311;
  permute_3311.order[0]=1;
  permute_3311.order[1]=2;
  permute_3311.order[2]=0;
  res_3311->setFirstTranspose(permute_3311);
  assert(res_3311 && "failed to build Node_5524 (type:transpose)");
  res_3311->getOutput(0)->setName("Node_5524:0");
  auto res_3312=network->addMatrixMultiply(*res_3307->getOutput(0),MatrixOperation::kNONE,*res_3311->getOutput(0),MatrixOperation::kNONE);
  assert(res_3312 && "failed to build Node_5525 (type:matmul)");
  res_3312->getOutput(0)->setName("Node_5525:0");
  auto res_3313=network->addElementWise(*res_3312->getOutput(0),*res_979->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3313 && "failed to build Node_5526 (type:divide)");
  res_3313->getOutput(0)->setName("Node_5526:0");
  auto res_3314=network->addElementWise(*res_3313->getOutput(0),*res_3147->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3314 && "failed to build Node_5527 (type:add)");
  res_3314->getOutput(0)->setName("Node_5527:0");
  auto res_3315=network->addSoftMax(*res_3314->getOutput(0));
  res_3315->setAxes(4);
  assert(res_3315 && "failed to build Node_5528 (type:softmax)");
  res_3315->getOutput(0)->setName("Node_5528:0");
  auto res_3316=network->addMatrixMultiply(*res_3303->getOutput(0),MatrixOperation::kNONE,*res_696->getOutput(0),MatrixOperation::kNONE);
  assert(res_3316 && "failed to build Node_5493 (type:matmul)");
  res_3316->getOutput(0)->setName("Node_5493:0");
  auto res_3317=network->addElementWise(*res_3316->getOutput(0),*res_697->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3317 && "failed to build Node_5493_add (type:add)");
  res_3317->getOutput(0)->setName("Node_5493_add:0");
  auto res_3318=network->addShuffle(*res_3317->getOutput(0));
  res_3318->setReshapeDimensions(Dims3{133,2,96});
  assert(res_3318 && "failed to build Node_5521 (type:reshape)");
  res_3318->getOutput(0)->setName("Node_5521:0");
  auto res_3319=network->addShuffle(*res_3318->getOutput(0));
  Permutation permute_3319;
  permute_3319.order[0]=1;
  permute_3319.order[1]=0;
  permute_3319.order[2]=2;
  res_3319->setFirstTranspose(permute_3319);
  assert(res_3319 && "failed to build Node_5523 (type:transpose)");
  res_3319->getOutput(0)->setName("Node_5523:0");
  auto res_3320=network->addMatrixMultiply(*res_3315->getOutput(0),MatrixOperation::kNONE,*res_3319->getOutput(0),MatrixOperation::kNONE);
  assert(res_3320 && "failed to build Node_5532 (type:matmul)");
  res_3320->getOutput(0)->setName("Node_5532:0");
  auto res_3321=network->addShuffle(*res_3320->getOutput(0));
  Permutation permute_3321;
  permute_3321.order[0]=1;
  permute_3321.order[1]=0;
  permute_3321.order[2]=2;
  res_3321->setFirstTranspose(permute_3321);
  assert(res_3321 && "failed to build Node_5534 (type:transpose)");
  res_3321->getOutput(0)->setName("Node_5534:0");
  auto res_3322=network->addIdentity(*res_3321->getOutput(0));
  assert(res_3322 && "failed to build Node_5535 (type:contiguous)");
  res_3322->getOutput(0)->setName("Node_5535:0");
  auto res_3323=network->addShuffle(*res_3322->getOutput(0));
  res_3323->setReshapeDimensions(Dims{2,{133,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3323 && "failed to build Node_5543 (type:reshape)");
  res_3323->getOutput(0)->setName("Node_5543:0");
  auto res_3324=network->addMatrixMultiply(*res_3323->getOutput(0),MatrixOperation::kNONE,*res_698->getOutput(0),MatrixOperation::kNONE);
  assert(res_3324 && "failed to build Node_5550 (type:matmul)");
  res_3324->getOutput(0)->setName("Node_5550:0");
  auto res_3325=network->addElementWise(*res_3324->getOutput(0),*res_699->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3325 && "failed to build Node_5550_add (type:add)");
  res_3325->getOutput(0)->setName("Node_5550_add:0");
  auto res_3326=network->addElementWise(*res_3325->getOutput(0),*res_3303->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3326 && "failed to build Node_5554 (type:add)");
  res_3326->getOutput(0)->setName("Node_5554:0");
  auto res_3327=network->addReduce(*res_3326->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3327 && "failed to build Node_5561_mean (type:mean)");
  res_3327->getOutput(0)->setName("Node_5561_mean:0");
  auto res_3328=network->addElementWise(*res_3326->getOutput(0),*res_3327->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3328 && "failed to build Node_5561_diff (type:sub)");
  res_3328->getOutput(0)->setName("Node_5561_diff:0");
  auto res_3329=network->addElementWise(*res_3328->getOutput(0),*res_1215->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3329 && "failed to build Node_5561_power (type:power)");
  res_3329->getOutput(0)->setName("Node_5561_power:0");
  auto res_3330=network->addReduce(*res_3329->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3330 && "failed to build Node_5561_var (type:mean)");
  res_3330->getOutput(0)->setName("Node_5561_var:0");
  auto res_3331=network->addElementWise(*res_3330->getOutput(0),*res_1089->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3331 && "failed to build Node_5561_modify (type:add)");
  res_3331->getOutput(0)->setName("Node_5561_modify:0");
  auto res_3332=network->addUnary(*res_3331->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3332 && "failed to build Node_5561_sqrt (type:power)");
  res_3332->getOutput(0)->setName("Node_5561_sqrt:0");
  auto res_3333=network->addElementWise(*res_3328->getOutput(0),*res_3332->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3333 && "failed to build Node_5561_rsqrt (type:divide)");
  res_3333->getOutput(0)->setName("Node_5561_rsqrt:0");
  auto res_3334=network->addElementWise(*res_3333->getOutput(0),*res_214->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3334 && "failed to build Node_5561_mul (type:multiply)");
  res_3334->getOutput(0)->setName("Node_5561_mul:0");
  auto res_3335=network->addElementWise(*res_3334->getOutput(0),*res_215->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3335 && "failed to build Node_5561 (type:add)");
  res_3335->getOutput(0)->setName("Node_5561:0");
  auto res_3336=network->addMatrixMultiply(*res_3335->getOutput(0),MatrixOperation::kNONE,*res_700->getOutput(0),MatrixOperation::kNONE);
  assert(res_3336 && "failed to build Node_5567 (type:matmul)");
  res_3336->getOutput(0)->setName("Node_5567:0");
  auto res_3337=network->addElementWise(*res_3336->getOutput(0),*res_701->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3337 && "failed to build Node_5567_add (type:add)");
  res_3337->getOutput(0)->setName("Node_5567_add:0");
  ITensor* inputTensors_3338[1] = {res_3337->getOutput(0)};
  auto plugin_3338=GELU_Plugin("gelu");
  auto res_3338=network->addPluginV2(inputTensors_3338,1,plugin_3338);
  assert(res_3338 && "failed to build Node_5568 (type:gelu)");
  res_3338->getOutput(0)->setName("Node_5568:0");
  auto res_3339=network->addMatrixMultiply(*res_3338->getOutput(0),MatrixOperation::kNONE,*res_702->getOutput(0),MatrixOperation::kNONE);
  assert(res_3339 && "failed to build Node_5575 (type:matmul)");
  res_3339->getOutput(0)->setName("Node_5575:0");
  auto res_3340=network->addElementWise(*res_3339->getOutput(0),*res_703->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3340 && "failed to build Node_5575_add (type:add)");
  res_3340->getOutput(0)->setName("Node_5575_add:0");
  auto res_3341=network->addElementWise(*res_3340->getOutput(0),*res_3335->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3341 && "failed to build Node_5579 (type:add)");
  res_3341->getOutput(0)->setName("Node_5579:0");
  auto res_3342=network->addReduce(*res_3341->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3342 && "failed to build Node_5586_mean (type:mean)");
  res_3342->getOutput(0)->setName("Node_5586_mean:0");
  auto res_3343=network->addElementWise(*res_3341->getOutput(0),*res_3342->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3343 && "failed to build Node_5586_diff (type:sub)");
  res_3343->getOutput(0)->setName("Node_5586_diff:0");
  auto res_3344=network->addElementWise(*res_3343->getOutput(0),*res_1216->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3344 && "failed to build Node_5586_power (type:power)");
  res_3344->getOutput(0)->setName("Node_5586_power:0");
  auto res_3345=network->addReduce(*res_3344->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3345 && "failed to build Node_5586_var (type:mean)");
  res_3345->getOutput(0)->setName("Node_5586_var:0");
  auto res_3346=network->addElementWise(*res_3345->getOutput(0),*res_1090->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3346 && "failed to build Node_5586_modify (type:add)");
  res_3346->getOutput(0)->setName("Node_5586_modify:0");
  auto res_3347=network->addUnary(*res_3346->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3347 && "failed to build Node_5586_sqrt (type:power)");
  res_3347->getOutput(0)->setName("Node_5586_sqrt:0");
  auto res_3348=network->addElementWise(*res_3343->getOutput(0),*res_3347->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3348 && "failed to build Node_5586_rsqrt (type:divide)");
  res_3348->getOutput(0)->setName("Node_5586_rsqrt:0");
  auto res_3349=network->addElementWise(*res_3348->getOutput(0),*res_216->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3349 && "failed to build Node_5586_mul (type:multiply)");
  res_3349->getOutput(0)->setName("Node_5586_mul:0");
  auto res_3350=network->addElementWise(*res_3349->getOutput(0),*res_217->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3350 && "failed to build Node_5586 (type:add)");
  res_3350->getOutput(0)->setName("Node_5586:0");
  auto res_3351=network->addSlice(*res_3350->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_3351 && "failed to build Node_5590 (type:dlr_slice)");
  res_3351->getOutput(0)->setName("Node_5590:0");
  auto res_3352=network->addShuffle(*res_3351->getOutput(0));
  res_3352->setReshapeDimensions(Dims3{192,1,1});
  assert(res_3352 && "failed to build Node_5592_reshape (type:reshape)");
  res_3352->getOutput(0)->setName("Node_5592_reshape:0");
  auto res_3353=network->addFullyConnected(*res_3352->getOutput(0),192,mWeightsMap["weight_3353"],mWeightsMap["bias_3353"]);
  assert(res_3353 && "failed to build Node_5597 (type:dense)");
  res_3353->getOutput(0)->setName("Node_5597:0");
  auto res_3354=network->addShuffle(*res_3353->getOutput(0));
  res_3354->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_3354 && "failed to build Node_5597_reshape (type:reshape)");
  res_3354->getOutput(0)->setName("Node_5597_reshape:0");
  auto res_3355=network->addActivation(*res_3354->getOutput(0),ActivationType::kTANH);
  assert(res_3355 && "failed to build Node_5598 (type:tanh)");
  res_3355->getOutput(0)->setName("Node_5598:0");
  auto res_3356=network->addShuffle(*res_3355->getOutput(0));
  res_3356->setReshapeDimensions(Dims{2,{1,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3356 && "failed to build Node_7282 (type:reshape)");
  res_3356->getOutput(0)->setName("Node_7282:0");
  auto res_3357=network->addGather(*res_924->getOutput(0),*inputs[28],0);
  assert(res_3357 && "failed to build Node_6459 (type:gather)");
  res_3357->getOutput(0)->setName("Node_6459:0");
  auto res_3358=network->addShuffle(*inputs[29]);
  res_3358->setReshapeDimensions(Dims{2,{35,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3358 && "failed to build Node_6462 (type:reshape)");
  res_3358->getOutput(0)->setName("Node_6462:0");
  auto res_3359=network->addElementWise(*res_60->getOutput(0),*res_3358->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3359 && "failed to build Node_6464 (type:add)");
  res_3359->getOutput(0)->setName("Node_6464:0");
  auto res_3360=network->addElementWise(*res_3357->getOutput(0),*res_3359->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3360 && "failed to build Node_6465 (type:multiply)");
  res_3360->getOutput(0)->setName("Node_6465:0");
  auto res_3361=network->addShuffle(*inputs[29]);
  res_3361->setReshapeDimensions(Dims{2,{35,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3361 && "failed to build Node_6478 (type:reshape)");
  res_3361->getOutput(0)->setName("Node_6478:0");
  auto res_3362=network->addElementWise(*res_61->getOutput(0),*res_3361->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3362 && "failed to build Node_6480 (type:add)");
  res_3362->getOutput(0)->setName("Node_6480:0");
  auto res_3363=network->addShuffle(*inputs[29]);
  res_3363->setReshapeDimensions(Dims{2,{35,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3363 && "failed to build Node_6494 (type:reshape)");
  res_3363->getOutput(0)->setName("Node_6494:0");
  auto res_3364=network->addElementWise(*res_62->getOutput(0),*res_3363->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3364 && "failed to build Node_6496 (type:add)");
  res_3364->getOutput(0)->setName("Node_6496:0");
  auto res_3365=network->addShuffle(*inputs[29]);
  res_3365->setReshapeDimensions(Dims3{1,1,35});
  assert(res_3365 && "failed to build Node_6514 (type:reshape)");
  res_3365->getOutput(0)->setName("Node_6514:0");
  auto res_3366=network->addElementWise(*res_980->getOutput(0),*res_3365->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3366 && "failed to build Node_6516 (type:sub)");
  res_3366->getOutput(0)->setName("Node_6516:0");
  auto res_3367=network->addElementWise(*res_3366->getOutput(0),*res_981->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3367 && "failed to build Node_6517 (type:multiply)");
  res_3367->getOutput(0)->setName("Node_6517:0");
  auto res_3368=network->addGather(*res_924->getOutput(0),*inputs[30],0);
  assert(res_3368 && "failed to build Node_6475 (type:gather)");
  res_3368->getOutput(0)->setName("Node_6475:0");
  auto res_3369=network->addElementWise(*res_3368->getOutput(0),*res_3362->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3369 && "failed to build Node_6481 (type:multiply)");
  res_3369->getOutput(0)->setName("Node_6481:0");
  auto res_3370=network->addElementWise(*res_3360->getOutput(0),*res_3369->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3370 && "failed to build Node_6504 (type:add)");
  res_3370->getOutput(0)->setName("Node_6504:0");
  auto res_3371=network->addGather(*res_924->getOutput(0),*inputs[31],0);
  assert(res_3371 && "failed to build Node_6491 (type:gather)");
  res_3371->getOutput(0)->setName("Node_6491:0");
  auto res_3372=network->addElementWise(*res_3371->getOutput(0),*res_3364->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3372 && "failed to build Node_6497 (type:multiply)");
  res_3372->getOutput(0)->setName("Node_6497:0");
  auto res_3373=network->addElementWise(*res_3370->getOutput(0),*res_3372->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3373 && "failed to build Node_6505 (type:add)");
  res_3373->getOutput(0)->setName("Node_6505:0");
  auto res_3374=network->addReduce(*res_3373->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3374 && "failed to build Node_6524_mean (type:mean)");
  res_3374->getOutput(0)->setName("Node_6524_mean:0");
  auto res_3375=network->addElementWise(*res_3373->getOutput(0),*res_3374->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3375 && "failed to build Node_6524_diff (type:sub)");
  res_3375->getOutput(0)->setName("Node_6524_diff:0");
  auto res_3376=network->addElementWise(*res_3375->getOutput(0),*res_1217->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3376 && "failed to build Node_6524_power (type:power)");
  res_3376->getOutput(0)->setName("Node_6524_power:0");
  auto res_3377=network->addReduce(*res_3376->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3377 && "failed to build Node_6524_var (type:mean)");
  res_3377->getOutput(0)->setName("Node_6524_var:0");
  auto res_3378=network->addElementWise(*res_3377->getOutput(0),*res_1091->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3378 && "failed to build Node_6524_modify (type:add)");
  res_3378->getOutput(0)->setName("Node_6524_modify:0");
  auto res_3379=network->addUnary(*res_3378->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3379 && "failed to build Node_6524_sqrt (type:power)");
  res_3379->getOutput(0)->setName("Node_6524_sqrt:0");
  auto res_3380=network->addElementWise(*res_3375->getOutput(0),*res_3379->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3380 && "failed to build Node_6524_rsqrt (type:divide)");
  res_3380->getOutput(0)->setName("Node_6524_rsqrt:0");
  auto res_3381=network->addElementWise(*res_3380->getOutput(0),*res_218->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3381 && "failed to build Node_6524_mul (type:multiply)");
  res_3381->getOutput(0)->setName("Node_6524_mul:0");
  auto res_3382=network->addElementWise(*res_3381->getOutput(0),*res_219->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3382 && "failed to build Node_6524 (type:add)");
  res_3382->getOutput(0)->setName("Node_6524:0");
  auto res_3383=network->addMatrixMultiply(*res_3382->getOutput(0),MatrixOperation::kNONE,*res_704->getOutput(0),MatrixOperation::kNONE);
  assert(res_3383 && "failed to build Node_6544 (type:matmul)");
  res_3383->getOutput(0)->setName("Node_6544:0");
  auto res_3384=network->addElementWise(*res_3383->getOutput(0),*res_705->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3384 && "failed to build Node_6544_add (type:add)");
  res_3384->getOutput(0)->setName("Node_6544_add:0");
  auto res_3385=network->addShuffle(*res_3384->getOutput(0));
  res_3385->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3385 && "failed to build Node_6564 (type:reshape)");
  res_3385->getOutput(0)->setName("Node_6564:0");
  auto res_3386=network->addShuffle(*res_3385->getOutput(0));
  Permutation permute_3386;
  permute_3386.order[0]=1;
  permute_3386.order[1]=0;
  permute_3386.order[2]=2;
  res_3386->setFirstTranspose(permute_3386);
  assert(res_3386 && "failed to build Node_6566 (type:transpose)");
  res_3386->getOutput(0)->setName("Node_6566:0");
  auto res_3387=network->addMatrixMultiply(*res_3382->getOutput(0),MatrixOperation::kNONE,*res_706->getOutput(0),MatrixOperation::kNONE);
  assert(res_3387 && "failed to build Node_6550 (type:matmul)");
  res_3387->getOutput(0)->setName("Node_6550:0");
  auto res_3388=network->addElementWise(*res_3387->getOutput(0),*res_707->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3388 && "failed to build Node_6550_add (type:add)");
  res_3388->getOutput(0)->setName("Node_6550_add:0");
  auto res_3389=network->addShuffle(*res_3388->getOutput(0));
  res_3389->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3389 && "failed to build Node_6574 (type:reshape)");
  res_3389->getOutput(0)->setName("Node_6574:0");
  auto res_3390=network->addShuffle(*res_3389->getOutput(0));
  Permutation permute_3390;
  permute_3390.order[0]=1;
  permute_3390.order[1]=2;
  permute_3390.order[2]=0;
  res_3390->setFirstTranspose(permute_3390);
  assert(res_3390 && "failed to build Node_6587 (type:transpose)");
  res_3390->getOutput(0)->setName("Node_6587:0");
  auto res_3391=network->addMatrixMultiply(*res_3386->getOutput(0),MatrixOperation::kNONE,*res_3390->getOutput(0),MatrixOperation::kNONE);
  assert(res_3391 && "failed to build Node_6588 (type:matmul)");
  res_3391->getOutput(0)->setName("Node_6588:0");
  auto res_3392=network->addElementWise(*res_3391->getOutput(0),*res_982->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3392 && "failed to build Node_6589 (type:divide)");
  res_3392->getOutput(0)->setName("Node_6589:0");
  auto res_3393=network->addElementWise(*res_3392->getOutput(0),*res_3367->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3393 && "failed to build Node_6590 (type:add)");
  res_3393->getOutput(0)->setName("Node_6590:0");
  auto res_3394=network->addSoftMax(*res_3393->getOutput(0));
  res_3394->setAxes(4);
  assert(res_3394 && "failed to build Node_6591 (type:softmax)");
  res_3394->getOutput(0)->setName("Node_6591:0");
  auto res_3395=network->addMatrixMultiply(*res_3382->getOutput(0),MatrixOperation::kNONE,*res_708->getOutput(0),MatrixOperation::kNONE);
  assert(res_3395 && "failed to build Node_6556 (type:matmul)");
  res_3395->getOutput(0)->setName("Node_6556:0");
  auto res_3396=network->addElementWise(*res_3395->getOutput(0),*res_709->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3396 && "failed to build Node_6556_add (type:add)");
  res_3396->getOutput(0)->setName("Node_6556_add:0");
  auto res_3397=network->addShuffle(*res_3396->getOutput(0));
  res_3397->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3397 && "failed to build Node_6584 (type:reshape)");
  res_3397->getOutput(0)->setName("Node_6584:0");
  auto res_3398=network->addShuffle(*res_3397->getOutput(0));
  Permutation permute_3398;
  permute_3398.order[0]=1;
  permute_3398.order[1]=0;
  permute_3398.order[2]=2;
  res_3398->setFirstTranspose(permute_3398);
  assert(res_3398 && "failed to build Node_6586 (type:transpose)");
  res_3398->getOutput(0)->setName("Node_6586:0");
  auto res_3399=network->addMatrixMultiply(*res_3394->getOutput(0),MatrixOperation::kNONE,*res_3398->getOutput(0),MatrixOperation::kNONE);
  assert(res_3399 && "failed to build Node_6595 (type:matmul)");
  res_3399->getOutput(0)->setName("Node_6595:0");
  auto res_3400=network->addShuffle(*res_3399->getOutput(0));
  Permutation permute_3400;
  permute_3400.order[0]=1;
  permute_3400.order[1]=0;
  permute_3400.order[2]=2;
  res_3400->setFirstTranspose(permute_3400);
  assert(res_3400 && "failed to build Node_6597 (type:transpose)");
  res_3400->getOutput(0)->setName("Node_6597:0");
  auto res_3401=network->addIdentity(*res_3400->getOutput(0));
  assert(res_3401 && "failed to build Node_6598 (type:contiguous)");
  res_3401->getOutput(0)->setName("Node_6598:0");
  auto res_3402=network->addShuffle(*res_3401->getOutput(0));
  res_3402->setReshapeDimensions(Dims{2,{35,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3402 && "failed to build Node_6606 (type:reshape)");
  res_3402->getOutput(0)->setName("Node_6606:0");
  auto res_3403=network->addMatrixMultiply(*res_3402->getOutput(0),MatrixOperation::kNONE,*res_710->getOutput(0),MatrixOperation::kNONE);
  assert(res_3403 && "failed to build Node_6613 (type:matmul)");
  res_3403->getOutput(0)->setName("Node_6613:0");
  auto res_3404=network->addElementWise(*res_3403->getOutput(0),*res_711->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3404 && "failed to build Node_6613_add (type:add)");
  res_3404->getOutput(0)->setName("Node_6613_add:0");
  auto res_3405=network->addElementWise(*res_3404->getOutput(0),*res_3382->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3405 && "failed to build Node_6617 (type:add)");
  res_3405->getOutput(0)->setName("Node_6617:0");
  auto res_3406=network->addReduce(*res_3405->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3406 && "failed to build Node_6624_mean (type:mean)");
  res_3406->getOutput(0)->setName("Node_6624_mean:0");
  auto res_3407=network->addElementWise(*res_3405->getOutput(0),*res_3406->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3407 && "failed to build Node_6624_diff (type:sub)");
  res_3407->getOutput(0)->setName("Node_6624_diff:0");
  auto res_3408=network->addElementWise(*res_3407->getOutput(0),*res_1218->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3408 && "failed to build Node_6624_power (type:power)");
  res_3408->getOutput(0)->setName("Node_6624_power:0");
  auto res_3409=network->addReduce(*res_3408->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3409 && "failed to build Node_6624_var (type:mean)");
  res_3409->getOutput(0)->setName("Node_6624_var:0");
  auto res_3410=network->addElementWise(*res_3409->getOutput(0),*res_1092->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3410 && "failed to build Node_6624_modify (type:add)");
  res_3410->getOutput(0)->setName("Node_6624_modify:0");
  auto res_3411=network->addUnary(*res_3410->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3411 && "failed to build Node_6624_sqrt (type:power)");
  res_3411->getOutput(0)->setName("Node_6624_sqrt:0");
  auto res_3412=network->addElementWise(*res_3407->getOutput(0),*res_3411->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3412 && "failed to build Node_6624_rsqrt (type:divide)");
  res_3412->getOutput(0)->setName("Node_6624_rsqrt:0");
  auto res_3413=network->addElementWise(*res_3412->getOutput(0),*res_220->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3413 && "failed to build Node_6624_mul (type:multiply)");
  res_3413->getOutput(0)->setName("Node_6624_mul:0");
  auto res_3414=network->addElementWise(*res_3413->getOutput(0),*res_221->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3414 && "failed to build Node_6624 (type:add)");
  res_3414->getOutput(0)->setName("Node_6624:0");
  auto res_3415=network->addMatrixMultiply(*res_3414->getOutput(0),MatrixOperation::kNONE,*res_712->getOutput(0),MatrixOperation::kNONE);
  assert(res_3415 && "failed to build Node_6630 (type:matmul)");
  res_3415->getOutput(0)->setName("Node_6630:0");
  auto res_3416=network->addElementWise(*res_3415->getOutput(0),*res_713->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3416 && "failed to build Node_6630_add (type:add)");
  res_3416->getOutput(0)->setName("Node_6630_add:0");
  ITensor* inputTensors_3417[1] = {res_3416->getOutput(0)};
  auto plugin_3417=GELU_Plugin("gelu");
  auto res_3417=network->addPluginV2(inputTensors_3417,1,plugin_3417);
  assert(res_3417 && "failed to build Node_6631 (type:gelu)");
  res_3417->getOutput(0)->setName("Node_6631:0");
  auto res_3418=network->addMatrixMultiply(*res_3417->getOutput(0),MatrixOperation::kNONE,*res_714->getOutput(0),MatrixOperation::kNONE);
  assert(res_3418 && "failed to build Node_6638 (type:matmul)");
  res_3418->getOutput(0)->setName("Node_6638:0");
  auto res_3419=network->addElementWise(*res_3418->getOutput(0),*res_715->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3419 && "failed to build Node_6638_add (type:add)");
  res_3419->getOutput(0)->setName("Node_6638_add:0");
  auto res_3420=network->addElementWise(*res_3419->getOutput(0),*res_3414->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3420 && "failed to build Node_6642 (type:add)");
  res_3420->getOutput(0)->setName("Node_6642:0");
  auto res_3421=network->addReduce(*res_3420->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3421 && "failed to build Node_6649_mean (type:mean)");
  res_3421->getOutput(0)->setName("Node_6649_mean:0");
  auto res_3422=network->addElementWise(*res_3420->getOutput(0),*res_3421->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3422 && "failed to build Node_6649_diff (type:sub)");
  res_3422->getOutput(0)->setName("Node_6649_diff:0");
  auto res_3423=network->addElementWise(*res_3422->getOutput(0),*res_1219->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3423 && "failed to build Node_6649_power (type:power)");
  res_3423->getOutput(0)->setName("Node_6649_power:0");
  auto res_3424=network->addReduce(*res_3423->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3424 && "failed to build Node_6649_var (type:mean)");
  res_3424->getOutput(0)->setName("Node_6649_var:0");
  auto res_3425=network->addElementWise(*res_3424->getOutput(0),*res_1093->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3425 && "failed to build Node_6649_modify (type:add)");
  res_3425->getOutput(0)->setName("Node_6649_modify:0");
  auto res_3426=network->addUnary(*res_3425->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3426 && "failed to build Node_6649_sqrt (type:power)");
  res_3426->getOutput(0)->setName("Node_6649_sqrt:0");
  auto res_3427=network->addElementWise(*res_3422->getOutput(0),*res_3426->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3427 && "failed to build Node_6649_rsqrt (type:divide)");
  res_3427->getOutput(0)->setName("Node_6649_rsqrt:0");
  auto res_3428=network->addElementWise(*res_3427->getOutput(0),*res_222->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3428 && "failed to build Node_6649_mul (type:multiply)");
  res_3428->getOutput(0)->setName("Node_6649_mul:0");
  auto res_3429=network->addElementWise(*res_3428->getOutput(0),*res_223->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3429 && "failed to build Node_6649 (type:add)");
  res_3429->getOutput(0)->setName("Node_6649:0");
  auto res_3430=network->addMatrixMultiply(*res_3429->getOutput(0),MatrixOperation::kNONE,*res_716->getOutput(0),MatrixOperation::kNONE);
  assert(res_3430 && "failed to build Node_6666 (type:matmul)");
  res_3430->getOutput(0)->setName("Node_6666:0");
  auto res_3431=network->addElementWise(*res_3430->getOutput(0),*res_717->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3431 && "failed to build Node_6666_add (type:add)");
  res_3431->getOutput(0)->setName("Node_6666_add:0");
  auto res_3432=network->addShuffle(*res_3431->getOutput(0));
  res_3432->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3432 && "failed to build Node_6686 (type:reshape)");
  res_3432->getOutput(0)->setName("Node_6686:0");
  auto res_3433=network->addShuffle(*res_3432->getOutput(0));
  Permutation permute_3433;
  permute_3433.order[0]=1;
  permute_3433.order[1]=0;
  permute_3433.order[2]=2;
  res_3433->setFirstTranspose(permute_3433);
  assert(res_3433 && "failed to build Node_6688 (type:transpose)");
  res_3433->getOutput(0)->setName("Node_6688:0");
  auto res_3434=network->addMatrixMultiply(*res_3429->getOutput(0),MatrixOperation::kNONE,*res_718->getOutput(0),MatrixOperation::kNONE);
  assert(res_3434 && "failed to build Node_6672 (type:matmul)");
  res_3434->getOutput(0)->setName("Node_6672:0");
  auto res_3435=network->addElementWise(*res_3434->getOutput(0),*res_719->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3435 && "failed to build Node_6672_add (type:add)");
  res_3435->getOutput(0)->setName("Node_6672_add:0");
  auto res_3436=network->addShuffle(*res_3435->getOutput(0));
  res_3436->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3436 && "failed to build Node_6696 (type:reshape)");
  res_3436->getOutput(0)->setName("Node_6696:0");
  auto res_3437=network->addShuffle(*res_3436->getOutput(0));
  Permutation permute_3437;
  permute_3437.order[0]=1;
  permute_3437.order[1]=2;
  permute_3437.order[2]=0;
  res_3437->setFirstTranspose(permute_3437);
  assert(res_3437 && "failed to build Node_6709 (type:transpose)");
  res_3437->getOutput(0)->setName("Node_6709:0");
  auto res_3438=network->addMatrixMultiply(*res_3433->getOutput(0),MatrixOperation::kNONE,*res_3437->getOutput(0),MatrixOperation::kNONE);
  assert(res_3438 && "failed to build Node_6710 (type:matmul)");
  res_3438->getOutput(0)->setName("Node_6710:0");
  auto res_3439=network->addElementWise(*res_3438->getOutput(0),*res_983->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3439 && "failed to build Node_6711 (type:divide)");
  res_3439->getOutput(0)->setName("Node_6711:0");
  auto res_3440=network->addElementWise(*res_3439->getOutput(0),*res_3367->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3440 && "failed to build Node_6712 (type:add)");
  res_3440->getOutput(0)->setName("Node_6712:0");
  auto res_3441=network->addSoftMax(*res_3440->getOutput(0));
  res_3441->setAxes(4);
  assert(res_3441 && "failed to build Node_6713 (type:softmax)");
  res_3441->getOutput(0)->setName("Node_6713:0");
  auto res_3442=network->addMatrixMultiply(*res_3429->getOutput(0),MatrixOperation::kNONE,*res_720->getOutput(0),MatrixOperation::kNONE);
  assert(res_3442 && "failed to build Node_6678 (type:matmul)");
  res_3442->getOutput(0)->setName("Node_6678:0");
  auto res_3443=network->addElementWise(*res_3442->getOutput(0),*res_721->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3443 && "failed to build Node_6678_add (type:add)");
  res_3443->getOutput(0)->setName("Node_6678_add:0");
  auto res_3444=network->addShuffle(*res_3443->getOutput(0));
  res_3444->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3444 && "failed to build Node_6706 (type:reshape)");
  res_3444->getOutput(0)->setName("Node_6706:0");
  auto res_3445=network->addShuffle(*res_3444->getOutput(0));
  Permutation permute_3445;
  permute_3445.order[0]=1;
  permute_3445.order[1]=0;
  permute_3445.order[2]=2;
  res_3445->setFirstTranspose(permute_3445);
  assert(res_3445 && "failed to build Node_6708 (type:transpose)");
  res_3445->getOutput(0)->setName("Node_6708:0");
  auto res_3446=network->addMatrixMultiply(*res_3441->getOutput(0),MatrixOperation::kNONE,*res_3445->getOutput(0),MatrixOperation::kNONE);
  assert(res_3446 && "failed to build Node_6717 (type:matmul)");
  res_3446->getOutput(0)->setName("Node_6717:0");
  auto res_3447=network->addShuffle(*res_3446->getOutput(0));
  Permutation permute_3447;
  permute_3447.order[0]=1;
  permute_3447.order[1]=0;
  permute_3447.order[2]=2;
  res_3447->setFirstTranspose(permute_3447);
  assert(res_3447 && "failed to build Node_6719 (type:transpose)");
  res_3447->getOutput(0)->setName("Node_6719:0");
  auto res_3448=network->addIdentity(*res_3447->getOutput(0));
  assert(res_3448 && "failed to build Node_6720 (type:contiguous)");
  res_3448->getOutput(0)->setName("Node_6720:0");
  auto res_3449=network->addShuffle(*res_3448->getOutput(0));
  res_3449->setReshapeDimensions(Dims{2,{35,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3449 && "failed to build Node_6728 (type:reshape)");
  res_3449->getOutput(0)->setName("Node_6728:0");
  auto res_3450=network->addMatrixMultiply(*res_3449->getOutput(0),MatrixOperation::kNONE,*res_722->getOutput(0),MatrixOperation::kNONE);
  assert(res_3450 && "failed to build Node_6735 (type:matmul)");
  res_3450->getOutput(0)->setName("Node_6735:0");
  auto res_3451=network->addElementWise(*res_3450->getOutput(0),*res_723->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3451 && "failed to build Node_6735_add (type:add)");
  res_3451->getOutput(0)->setName("Node_6735_add:0");
  auto res_3452=network->addElementWise(*res_3451->getOutput(0),*res_3429->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3452 && "failed to build Node_6739 (type:add)");
  res_3452->getOutput(0)->setName("Node_6739:0");
  auto res_3453=network->addReduce(*res_3452->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3453 && "failed to build Node_6746_mean (type:mean)");
  res_3453->getOutput(0)->setName("Node_6746_mean:0");
  auto res_3454=network->addElementWise(*res_3452->getOutput(0),*res_3453->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3454 && "failed to build Node_6746_diff (type:sub)");
  res_3454->getOutput(0)->setName("Node_6746_diff:0");
  auto res_3455=network->addElementWise(*res_3454->getOutput(0),*res_1220->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3455 && "failed to build Node_6746_power (type:power)");
  res_3455->getOutput(0)->setName("Node_6746_power:0");
  auto res_3456=network->addReduce(*res_3455->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3456 && "failed to build Node_6746_var (type:mean)");
  res_3456->getOutput(0)->setName("Node_6746_var:0");
  auto res_3457=network->addElementWise(*res_3456->getOutput(0),*res_1094->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3457 && "failed to build Node_6746_modify (type:add)");
  res_3457->getOutput(0)->setName("Node_6746_modify:0");
  auto res_3458=network->addUnary(*res_3457->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3458 && "failed to build Node_6746_sqrt (type:power)");
  res_3458->getOutput(0)->setName("Node_6746_sqrt:0");
  auto res_3459=network->addElementWise(*res_3454->getOutput(0),*res_3458->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3459 && "failed to build Node_6746_rsqrt (type:divide)");
  res_3459->getOutput(0)->setName("Node_6746_rsqrt:0");
  auto res_3460=network->addElementWise(*res_3459->getOutput(0),*res_224->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3460 && "failed to build Node_6746_mul (type:multiply)");
  res_3460->getOutput(0)->setName("Node_6746_mul:0");
  auto res_3461=network->addElementWise(*res_3460->getOutput(0),*res_225->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3461 && "failed to build Node_6746 (type:add)");
  res_3461->getOutput(0)->setName("Node_6746:0");
  auto res_3462=network->addMatrixMultiply(*res_3461->getOutput(0),MatrixOperation::kNONE,*res_724->getOutput(0),MatrixOperation::kNONE);
  assert(res_3462 && "failed to build Node_6752 (type:matmul)");
  res_3462->getOutput(0)->setName("Node_6752:0");
  auto res_3463=network->addElementWise(*res_3462->getOutput(0),*res_725->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3463 && "failed to build Node_6752_add (type:add)");
  res_3463->getOutput(0)->setName("Node_6752_add:0");
  ITensor* inputTensors_3464[1] = {res_3463->getOutput(0)};
  auto plugin_3464=GELU_Plugin("gelu");
  auto res_3464=network->addPluginV2(inputTensors_3464,1,plugin_3464);
  assert(res_3464 && "failed to build Node_6753 (type:gelu)");
  res_3464->getOutput(0)->setName("Node_6753:0");
  auto res_3465=network->addMatrixMultiply(*res_3464->getOutput(0),MatrixOperation::kNONE,*res_726->getOutput(0),MatrixOperation::kNONE);
  assert(res_3465 && "failed to build Node_6760 (type:matmul)");
  res_3465->getOutput(0)->setName("Node_6760:0");
  auto res_3466=network->addElementWise(*res_3465->getOutput(0),*res_727->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3466 && "failed to build Node_6760_add (type:add)");
  res_3466->getOutput(0)->setName("Node_6760_add:0");
  auto res_3467=network->addElementWise(*res_3466->getOutput(0),*res_3461->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3467 && "failed to build Node_6764 (type:add)");
  res_3467->getOutput(0)->setName("Node_6764:0");
  auto res_3468=network->addReduce(*res_3467->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3468 && "failed to build Node_6771_mean (type:mean)");
  res_3468->getOutput(0)->setName("Node_6771_mean:0");
  auto res_3469=network->addElementWise(*res_3467->getOutput(0),*res_3468->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3469 && "failed to build Node_6771_diff (type:sub)");
  res_3469->getOutput(0)->setName("Node_6771_diff:0");
  auto res_3470=network->addElementWise(*res_3469->getOutput(0),*res_1221->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3470 && "failed to build Node_6771_power (type:power)");
  res_3470->getOutput(0)->setName("Node_6771_power:0");
  auto res_3471=network->addReduce(*res_3470->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3471 && "failed to build Node_6771_var (type:mean)");
  res_3471->getOutput(0)->setName("Node_6771_var:0");
  auto res_3472=network->addElementWise(*res_3471->getOutput(0),*res_1095->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3472 && "failed to build Node_6771_modify (type:add)");
  res_3472->getOutput(0)->setName("Node_6771_modify:0");
  auto res_3473=network->addUnary(*res_3472->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3473 && "failed to build Node_6771_sqrt (type:power)");
  res_3473->getOutput(0)->setName("Node_6771_sqrt:0");
  auto res_3474=network->addElementWise(*res_3469->getOutput(0),*res_3473->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3474 && "failed to build Node_6771_rsqrt (type:divide)");
  res_3474->getOutput(0)->setName("Node_6771_rsqrt:0");
  auto res_3475=network->addElementWise(*res_3474->getOutput(0),*res_226->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3475 && "failed to build Node_6771_mul (type:multiply)");
  res_3475->getOutput(0)->setName("Node_6771_mul:0");
  auto res_3476=network->addElementWise(*res_3475->getOutput(0),*res_227->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3476 && "failed to build Node_6771 (type:add)");
  res_3476->getOutput(0)->setName("Node_6771:0");
  auto res_3477=network->addMatrixMultiply(*res_3476->getOutput(0),MatrixOperation::kNONE,*res_728->getOutput(0),MatrixOperation::kNONE);
  assert(res_3477 && "failed to build Node_6788 (type:matmul)");
  res_3477->getOutput(0)->setName("Node_6788:0");
  auto res_3478=network->addElementWise(*res_3477->getOutput(0),*res_729->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3478 && "failed to build Node_6788_add (type:add)");
  res_3478->getOutput(0)->setName("Node_6788_add:0");
  auto res_3479=network->addShuffle(*res_3478->getOutput(0));
  res_3479->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3479 && "failed to build Node_6808 (type:reshape)");
  res_3479->getOutput(0)->setName("Node_6808:0");
  auto res_3480=network->addShuffle(*res_3479->getOutput(0));
  Permutation permute_3480;
  permute_3480.order[0]=1;
  permute_3480.order[1]=0;
  permute_3480.order[2]=2;
  res_3480->setFirstTranspose(permute_3480);
  assert(res_3480 && "failed to build Node_6810 (type:transpose)");
  res_3480->getOutput(0)->setName("Node_6810:0");
  auto res_3481=network->addMatrixMultiply(*res_3476->getOutput(0),MatrixOperation::kNONE,*res_730->getOutput(0),MatrixOperation::kNONE);
  assert(res_3481 && "failed to build Node_6794 (type:matmul)");
  res_3481->getOutput(0)->setName("Node_6794:0");
  auto res_3482=network->addElementWise(*res_3481->getOutput(0),*res_731->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3482 && "failed to build Node_6794_add (type:add)");
  res_3482->getOutput(0)->setName("Node_6794_add:0");
  auto res_3483=network->addShuffle(*res_3482->getOutput(0));
  res_3483->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3483 && "failed to build Node_6818 (type:reshape)");
  res_3483->getOutput(0)->setName("Node_6818:0");
  auto res_3484=network->addShuffle(*res_3483->getOutput(0));
  Permutation permute_3484;
  permute_3484.order[0]=1;
  permute_3484.order[1]=2;
  permute_3484.order[2]=0;
  res_3484->setFirstTranspose(permute_3484);
  assert(res_3484 && "failed to build Node_6831 (type:transpose)");
  res_3484->getOutput(0)->setName("Node_6831:0");
  auto res_3485=network->addMatrixMultiply(*res_3480->getOutput(0),MatrixOperation::kNONE,*res_3484->getOutput(0),MatrixOperation::kNONE);
  assert(res_3485 && "failed to build Node_6832 (type:matmul)");
  res_3485->getOutput(0)->setName("Node_6832:0");
  auto res_3486=network->addElementWise(*res_3485->getOutput(0),*res_984->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3486 && "failed to build Node_6833 (type:divide)");
  res_3486->getOutput(0)->setName("Node_6833:0");
  auto res_3487=network->addElementWise(*res_3486->getOutput(0),*res_3367->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3487 && "failed to build Node_6834 (type:add)");
  res_3487->getOutput(0)->setName("Node_6834:0");
  auto res_3488=network->addSoftMax(*res_3487->getOutput(0));
  res_3488->setAxes(4);
  assert(res_3488 && "failed to build Node_6835 (type:softmax)");
  res_3488->getOutput(0)->setName("Node_6835:0");
  auto res_3489=network->addMatrixMultiply(*res_3476->getOutput(0),MatrixOperation::kNONE,*res_732->getOutput(0),MatrixOperation::kNONE);
  assert(res_3489 && "failed to build Node_6800 (type:matmul)");
  res_3489->getOutput(0)->setName("Node_6800:0");
  auto res_3490=network->addElementWise(*res_3489->getOutput(0),*res_733->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3490 && "failed to build Node_6800_add (type:add)");
  res_3490->getOutput(0)->setName("Node_6800_add:0");
  auto res_3491=network->addShuffle(*res_3490->getOutput(0));
  res_3491->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3491 && "failed to build Node_6828 (type:reshape)");
  res_3491->getOutput(0)->setName("Node_6828:0");
  auto res_3492=network->addShuffle(*res_3491->getOutput(0));
  Permutation permute_3492;
  permute_3492.order[0]=1;
  permute_3492.order[1]=0;
  permute_3492.order[2]=2;
  res_3492->setFirstTranspose(permute_3492);
  assert(res_3492 && "failed to build Node_6830 (type:transpose)");
  res_3492->getOutput(0)->setName("Node_6830:0");
  auto res_3493=network->addMatrixMultiply(*res_3488->getOutput(0),MatrixOperation::kNONE,*res_3492->getOutput(0),MatrixOperation::kNONE);
  assert(res_3493 && "failed to build Node_6839 (type:matmul)");
  res_3493->getOutput(0)->setName("Node_6839:0");
  auto res_3494=network->addShuffle(*res_3493->getOutput(0));
  Permutation permute_3494;
  permute_3494.order[0]=1;
  permute_3494.order[1]=0;
  permute_3494.order[2]=2;
  res_3494->setFirstTranspose(permute_3494);
  assert(res_3494 && "failed to build Node_6841 (type:transpose)");
  res_3494->getOutput(0)->setName("Node_6841:0");
  auto res_3495=network->addIdentity(*res_3494->getOutput(0));
  assert(res_3495 && "failed to build Node_6842 (type:contiguous)");
  res_3495->getOutput(0)->setName("Node_6842:0");
  auto res_3496=network->addShuffle(*res_3495->getOutput(0));
  res_3496->setReshapeDimensions(Dims{2,{35,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3496 && "failed to build Node_6850 (type:reshape)");
  res_3496->getOutput(0)->setName("Node_6850:0");
  auto res_3497=network->addMatrixMultiply(*res_3496->getOutput(0),MatrixOperation::kNONE,*res_734->getOutput(0),MatrixOperation::kNONE);
  assert(res_3497 && "failed to build Node_6857 (type:matmul)");
  res_3497->getOutput(0)->setName("Node_6857:0");
  auto res_3498=network->addElementWise(*res_3497->getOutput(0),*res_735->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3498 && "failed to build Node_6857_add (type:add)");
  res_3498->getOutput(0)->setName("Node_6857_add:0");
  auto res_3499=network->addElementWise(*res_3498->getOutput(0),*res_3476->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3499 && "failed to build Node_6861 (type:add)");
  res_3499->getOutput(0)->setName("Node_6861:0");
  auto res_3500=network->addReduce(*res_3499->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3500 && "failed to build Node_6868_mean (type:mean)");
  res_3500->getOutput(0)->setName("Node_6868_mean:0");
  auto res_3501=network->addElementWise(*res_3499->getOutput(0),*res_3500->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3501 && "failed to build Node_6868_diff (type:sub)");
  res_3501->getOutput(0)->setName("Node_6868_diff:0");
  auto res_3502=network->addElementWise(*res_3501->getOutput(0),*res_1222->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3502 && "failed to build Node_6868_power (type:power)");
  res_3502->getOutput(0)->setName("Node_6868_power:0");
  auto res_3503=network->addReduce(*res_3502->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3503 && "failed to build Node_6868_var (type:mean)");
  res_3503->getOutput(0)->setName("Node_6868_var:0");
  auto res_3504=network->addElementWise(*res_3503->getOutput(0),*res_1096->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3504 && "failed to build Node_6868_modify (type:add)");
  res_3504->getOutput(0)->setName("Node_6868_modify:0");
  auto res_3505=network->addUnary(*res_3504->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3505 && "failed to build Node_6868_sqrt (type:power)");
  res_3505->getOutput(0)->setName("Node_6868_sqrt:0");
  auto res_3506=network->addElementWise(*res_3501->getOutput(0),*res_3505->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3506 && "failed to build Node_6868_rsqrt (type:divide)");
  res_3506->getOutput(0)->setName("Node_6868_rsqrt:0");
  auto res_3507=network->addElementWise(*res_3506->getOutput(0),*res_228->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3507 && "failed to build Node_6868_mul (type:multiply)");
  res_3507->getOutput(0)->setName("Node_6868_mul:0");
  auto res_3508=network->addElementWise(*res_3507->getOutput(0),*res_229->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3508 && "failed to build Node_6868 (type:add)");
  res_3508->getOutput(0)->setName("Node_6868:0");
  auto res_3509=network->addMatrixMultiply(*res_3508->getOutput(0),MatrixOperation::kNONE,*res_736->getOutput(0),MatrixOperation::kNONE);
  assert(res_3509 && "failed to build Node_6874 (type:matmul)");
  res_3509->getOutput(0)->setName("Node_6874:0");
  auto res_3510=network->addElementWise(*res_3509->getOutput(0),*res_737->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3510 && "failed to build Node_6874_add (type:add)");
  res_3510->getOutput(0)->setName("Node_6874_add:0");
  ITensor* inputTensors_3511[1] = {res_3510->getOutput(0)};
  auto plugin_3511=GELU_Plugin("gelu");
  auto res_3511=network->addPluginV2(inputTensors_3511,1,plugin_3511);
  assert(res_3511 && "failed to build Node_6875 (type:gelu)");
  res_3511->getOutput(0)->setName("Node_6875:0");
  auto res_3512=network->addMatrixMultiply(*res_3511->getOutput(0),MatrixOperation::kNONE,*res_738->getOutput(0),MatrixOperation::kNONE);
  assert(res_3512 && "failed to build Node_6882 (type:matmul)");
  res_3512->getOutput(0)->setName("Node_6882:0");
  auto res_3513=network->addElementWise(*res_3512->getOutput(0),*res_739->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3513 && "failed to build Node_6882_add (type:add)");
  res_3513->getOutput(0)->setName("Node_6882_add:0");
  auto res_3514=network->addElementWise(*res_3513->getOutput(0),*res_3508->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3514 && "failed to build Node_6886 (type:add)");
  res_3514->getOutput(0)->setName("Node_6886:0");
  auto res_3515=network->addReduce(*res_3514->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3515 && "failed to build Node_6893_mean (type:mean)");
  res_3515->getOutput(0)->setName("Node_6893_mean:0");
  auto res_3516=network->addElementWise(*res_3514->getOutput(0),*res_3515->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3516 && "failed to build Node_6893_diff (type:sub)");
  res_3516->getOutput(0)->setName("Node_6893_diff:0");
  auto res_3517=network->addElementWise(*res_3516->getOutput(0),*res_1223->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3517 && "failed to build Node_6893_power (type:power)");
  res_3517->getOutput(0)->setName("Node_6893_power:0");
  auto res_3518=network->addReduce(*res_3517->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3518 && "failed to build Node_6893_var (type:mean)");
  res_3518->getOutput(0)->setName("Node_6893_var:0");
  auto res_3519=network->addElementWise(*res_3518->getOutput(0),*res_1097->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3519 && "failed to build Node_6893_modify (type:add)");
  res_3519->getOutput(0)->setName("Node_6893_modify:0");
  auto res_3520=network->addUnary(*res_3519->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3520 && "failed to build Node_6893_sqrt (type:power)");
  res_3520->getOutput(0)->setName("Node_6893_sqrt:0");
  auto res_3521=network->addElementWise(*res_3516->getOutput(0),*res_3520->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3521 && "failed to build Node_6893_rsqrt (type:divide)");
  res_3521->getOutput(0)->setName("Node_6893_rsqrt:0");
  auto res_3522=network->addElementWise(*res_3521->getOutput(0),*res_230->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3522 && "failed to build Node_6893_mul (type:multiply)");
  res_3522->getOutput(0)->setName("Node_6893_mul:0");
  auto res_3523=network->addElementWise(*res_3522->getOutput(0),*res_231->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3523 && "failed to build Node_6893 (type:add)");
  res_3523->getOutput(0)->setName("Node_6893:0");
  auto res_3524=network->addMatrixMultiply(*res_3523->getOutput(0),MatrixOperation::kNONE,*res_740->getOutput(0),MatrixOperation::kNONE);
  assert(res_3524 && "failed to build Node_6910 (type:matmul)");
  res_3524->getOutput(0)->setName("Node_6910:0");
  auto res_3525=network->addElementWise(*res_3524->getOutput(0),*res_741->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3525 && "failed to build Node_6910_add (type:add)");
  res_3525->getOutput(0)->setName("Node_6910_add:0");
  auto res_3526=network->addShuffle(*res_3525->getOutput(0));
  res_3526->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3526 && "failed to build Node_6930 (type:reshape)");
  res_3526->getOutput(0)->setName("Node_6930:0");
  auto res_3527=network->addShuffle(*res_3526->getOutput(0));
  Permutation permute_3527;
  permute_3527.order[0]=1;
  permute_3527.order[1]=0;
  permute_3527.order[2]=2;
  res_3527->setFirstTranspose(permute_3527);
  assert(res_3527 && "failed to build Node_6932 (type:transpose)");
  res_3527->getOutput(0)->setName("Node_6932:0");
  auto res_3528=network->addMatrixMultiply(*res_3523->getOutput(0),MatrixOperation::kNONE,*res_742->getOutput(0),MatrixOperation::kNONE);
  assert(res_3528 && "failed to build Node_6916 (type:matmul)");
  res_3528->getOutput(0)->setName("Node_6916:0");
  auto res_3529=network->addElementWise(*res_3528->getOutput(0),*res_743->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3529 && "failed to build Node_6916_add (type:add)");
  res_3529->getOutput(0)->setName("Node_6916_add:0");
  auto res_3530=network->addShuffle(*res_3529->getOutput(0));
  res_3530->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3530 && "failed to build Node_6940 (type:reshape)");
  res_3530->getOutput(0)->setName("Node_6940:0");
  auto res_3531=network->addShuffle(*res_3530->getOutput(0));
  Permutation permute_3531;
  permute_3531.order[0]=1;
  permute_3531.order[1]=2;
  permute_3531.order[2]=0;
  res_3531->setFirstTranspose(permute_3531);
  assert(res_3531 && "failed to build Node_6953 (type:transpose)");
  res_3531->getOutput(0)->setName("Node_6953:0");
  auto res_3532=network->addMatrixMultiply(*res_3527->getOutput(0),MatrixOperation::kNONE,*res_3531->getOutput(0),MatrixOperation::kNONE);
  assert(res_3532 && "failed to build Node_6954 (type:matmul)");
  res_3532->getOutput(0)->setName("Node_6954:0");
  auto res_3533=network->addElementWise(*res_3532->getOutput(0),*res_985->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3533 && "failed to build Node_6955 (type:divide)");
  res_3533->getOutput(0)->setName("Node_6955:0");
  auto res_3534=network->addElementWise(*res_3533->getOutput(0),*res_3367->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3534 && "failed to build Node_6956 (type:add)");
  res_3534->getOutput(0)->setName("Node_6956:0");
  auto res_3535=network->addSoftMax(*res_3534->getOutput(0));
  res_3535->setAxes(4);
  assert(res_3535 && "failed to build Node_6957 (type:softmax)");
  res_3535->getOutput(0)->setName("Node_6957:0");
  auto res_3536=network->addMatrixMultiply(*res_3523->getOutput(0),MatrixOperation::kNONE,*res_744->getOutput(0),MatrixOperation::kNONE);
  assert(res_3536 && "failed to build Node_6922 (type:matmul)");
  res_3536->getOutput(0)->setName("Node_6922:0");
  auto res_3537=network->addElementWise(*res_3536->getOutput(0),*res_745->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3537 && "failed to build Node_6922_add (type:add)");
  res_3537->getOutput(0)->setName("Node_6922_add:0");
  auto res_3538=network->addShuffle(*res_3537->getOutput(0));
  res_3538->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3538 && "failed to build Node_6950 (type:reshape)");
  res_3538->getOutput(0)->setName("Node_6950:0");
  auto res_3539=network->addShuffle(*res_3538->getOutput(0));
  Permutation permute_3539;
  permute_3539.order[0]=1;
  permute_3539.order[1]=0;
  permute_3539.order[2]=2;
  res_3539->setFirstTranspose(permute_3539);
  assert(res_3539 && "failed to build Node_6952 (type:transpose)");
  res_3539->getOutput(0)->setName("Node_6952:0");
  auto res_3540=network->addMatrixMultiply(*res_3535->getOutput(0),MatrixOperation::kNONE,*res_3539->getOutput(0),MatrixOperation::kNONE);
  assert(res_3540 && "failed to build Node_6961 (type:matmul)");
  res_3540->getOutput(0)->setName("Node_6961:0");
  auto res_3541=network->addShuffle(*res_3540->getOutput(0));
  Permutation permute_3541;
  permute_3541.order[0]=1;
  permute_3541.order[1]=0;
  permute_3541.order[2]=2;
  res_3541->setFirstTranspose(permute_3541);
  assert(res_3541 && "failed to build Node_6963 (type:transpose)");
  res_3541->getOutput(0)->setName("Node_6963:0");
  auto res_3542=network->addIdentity(*res_3541->getOutput(0));
  assert(res_3542 && "failed to build Node_6964 (type:contiguous)");
  res_3542->getOutput(0)->setName("Node_6964:0");
  auto res_3543=network->addShuffle(*res_3542->getOutput(0));
  res_3543->setReshapeDimensions(Dims{2,{35,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3543 && "failed to build Node_6972 (type:reshape)");
  res_3543->getOutput(0)->setName("Node_6972:0");
  auto res_3544=network->addMatrixMultiply(*res_3543->getOutput(0),MatrixOperation::kNONE,*res_746->getOutput(0),MatrixOperation::kNONE);
  assert(res_3544 && "failed to build Node_6979 (type:matmul)");
  res_3544->getOutput(0)->setName("Node_6979:0");
  auto res_3545=network->addElementWise(*res_3544->getOutput(0),*res_747->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3545 && "failed to build Node_6979_add (type:add)");
  res_3545->getOutput(0)->setName("Node_6979_add:0");
  auto res_3546=network->addElementWise(*res_3545->getOutput(0),*res_3523->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3546 && "failed to build Node_6983 (type:add)");
  res_3546->getOutput(0)->setName("Node_6983:0");
  auto res_3547=network->addReduce(*res_3546->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3547 && "failed to build Node_6990_mean (type:mean)");
  res_3547->getOutput(0)->setName("Node_6990_mean:0");
  auto res_3548=network->addElementWise(*res_3546->getOutput(0),*res_3547->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3548 && "failed to build Node_6990_diff (type:sub)");
  res_3548->getOutput(0)->setName("Node_6990_diff:0");
  auto res_3549=network->addElementWise(*res_3548->getOutput(0),*res_1224->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3549 && "failed to build Node_6990_power (type:power)");
  res_3549->getOutput(0)->setName("Node_6990_power:0");
  auto res_3550=network->addReduce(*res_3549->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3550 && "failed to build Node_6990_var (type:mean)");
  res_3550->getOutput(0)->setName("Node_6990_var:0");
  auto res_3551=network->addElementWise(*res_3550->getOutput(0),*res_1098->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3551 && "failed to build Node_6990_modify (type:add)");
  res_3551->getOutput(0)->setName("Node_6990_modify:0");
  auto res_3552=network->addUnary(*res_3551->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3552 && "failed to build Node_6990_sqrt (type:power)");
  res_3552->getOutput(0)->setName("Node_6990_sqrt:0");
  auto res_3553=network->addElementWise(*res_3548->getOutput(0),*res_3552->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3553 && "failed to build Node_6990_rsqrt (type:divide)");
  res_3553->getOutput(0)->setName("Node_6990_rsqrt:0");
  auto res_3554=network->addElementWise(*res_3553->getOutput(0),*res_232->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3554 && "failed to build Node_6990_mul (type:multiply)");
  res_3554->getOutput(0)->setName("Node_6990_mul:0");
  auto res_3555=network->addElementWise(*res_3554->getOutput(0),*res_233->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3555 && "failed to build Node_6990 (type:add)");
  res_3555->getOutput(0)->setName("Node_6990:0");
  auto res_3556=network->addMatrixMultiply(*res_3555->getOutput(0),MatrixOperation::kNONE,*res_748->getOutput(0),MatrixOperation::kNONE);
  assert(res_3556 && "failed to build Node_6996 (type:matmul)");
  res_3556->getOutput(0)->setName("Node_6996:0");
  auto res_3557=network->addElementWise(*res_3556->getOutput(0),*res_749->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3557 && "failed to build Node_6996_add (type:add)");
  res_3557->getOutput(0)->setName("Node_6996_add:0");
  ITensor* inputTensors_3558[1] = {res_3557->getOutput(0)};
  auto plugin_3558=GELU_Plugin("gelu");
  auto res_3558=network->addPluginV2(inputTensors_3558,1,plugin_3558);
  assert(res_3558 && "failed to build Node_6997 (type:gelu)");
  res_3558->getOutput(0)->setName("Node_6997:0");
  auto res_3559=network->addMatrixMultiply(*res_3558->getOutput(0),MatrixOperation::kNONE,*res_750->getOutput(0),MatrixOperation::kNONE);
  assert(res_3559 && "failed to build Node_7004 (type:matmul)");
  res_3559->getOutput(0)->setName("Node_7004:0");
  auto res_3560=network->addElementWise(*res_3559->getOutput(0),*res_751->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3560 && "failed to build Node_7004_add (type:add)");
  res_3560->getOutput(0)->setName("Node_7004_add:0");
  auto res_3561=network->addElementWise(*res_3560->getOutput(0),*res_3555->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3561 && "failed to build Node_7008 (type:add)");
  res_3561->getOutput(0)->setName("Node_7008:0");
  auto res_3562=network->addReduce(*res_3561->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3562 && "failed to build Node_7015_mean (type:mean)");
  res_3562->getOutput(0)->setName("Node_7015_mean:0");
  auto res_3563=network->addElementWise(*res_3561->getOutput(0),*res_3562->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3563 && "failed to build Node_7015_diff (type:sub)");
  res_3563->getOutput(0)->setName("Node_7015_diff:0");
  auto res_3564=network->addElementWise(*res_3563->getOutput(0),*res_1225->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3564 && "failed to build Node_7015_power (type:power)");
  res_3564->getOutput(0)->setName("Node_7015_power:0");
  auto res_3565=network->addReduce(*res_3564->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3565 && "failed to build Node_7015_var (type:mean)");
  res_3565->getOutput(0)->setName("Node_7015_var:0");
  auto res_3566=network->addElementWise(*res_3565->getOutput(0),*res_1099->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3566 && "failed to build Node_7015_modify (type:add)");
  res_3566->getOutput(0)->setName("Node_7015_modify:0");
  auto res_3567=network->addUnary(*res_3566->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3567 && "failed to build Node_7015_sqrt (type:power)");
  res_3567->getOutput(0)->setName("Node_7015_sqrt:0");
  auto res_3568=network->addElementWise(*res_3563->getOutput(0),*res_3567->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3568 && "failed to build Node_7015_rsqrt (type:divide)");
  res_3568->getOutput(0)->setName("Node_7015_rsqrt:0");
  auto res_3569=network->addElementWise(*res_3568->getOutput(0),*res_234->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3569 && "failed to build Node_7015_mul (type:multiply)");
  res_3569->getOutput(0)->setName("Node_7015_mul:0");
  auto res_3570=network->addElementWise(*res_3569->getOutput(0),*res_235->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3570 && "failed to build Node_7015 (type:add)");
  res_3570->getOutput(0)->setName("Node_7015:0");
  auto res_3571=network->addMatrixMultiply(*res_3570->getOutput(0),MatrixOperation::kNONE,*res_752->getOutput(0),MatrixOperation::kNONE);
  assert(res_3571 && "failed to build Node_7032 (type:matmul)");
  res_3571->getOutput(0)->setName("Node_7032:0");
  auto res_3572=network->addElementWise(*res_3571->getOutput(0),*res_753->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3572 && "failed to build Node_7032_add (type:add)");
  res_3572->getOutput(0)->setName("Node_7032_add:0");
  auto res_3573=network->addShuffle(*res_3572->getOutput(0));
  res_3573->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3573 && "failed to build Node_7052 (type:reshape)");
  res_3573->getOutput(0)->setName("Node_7052:0");
  auto res_3574=network->addShuffle(*res_3573->getOutput(0));
  Permutation permute_3574;
  permute_3574.order[0]=1;
  permute_3574.order[1]=0;
  permute_3574.order[2]=2;
  res_3574->setFirstTranspose(permute_3574);
  assert(res_3574 && "failed to build Node_7054 (type:transpose)");
  res_3574->getOutput(0)->setName("Node_7054:0");
  auto res_3575=network->addMatrixMultiply(*res_3570->getOutput(0),MatrixOperation::kNONE,*res_754->getOutput(0),MatrixOperation::kNONE);
  assert(res_3575 && "failed to build Node_7038 (type:matmul)");
  res_3575->getOutput(0)->setName("Node_7038:0");
  auto res_3576=network->addElementWise(*res_3575->getOutput(0),*res_755->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3576 && "failed to build Node_7038_add (type:add)");
  res_3576->getOutput(0)->setName("Node_7038_add:0");
  auto res_3577=network->addShuffle(*res_3576->getOutput(0));
  res_3577->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3577 && "failed to build Node_7062 (type:reshape)");
  res_3577->getOutput(0)->setName("Node_7062:0");
  auto res_3578=network->addShuffle(*res_3577->getOutput(0));
  Permutation permute_3578;
  permute_3578.order[0]=1;
  permute_3578.order[1]=2;
  permute_3578.order[2]=0;
  res_3578->setFirstTranspose(permute_3578);
  assert(res_3578 && "failed to build Node_7075 (type:transpose)");
  res_3578->getOutput(0)->setName("Node_7075:0");
  auto res_3579=network->addMatrixMultiply(*res_3574->getOutput(0),MatrixOperation::kNONE,*res_3578->getOutput(0),MatrixOperation::kNONE);
  assert(res_3579 && "failed to build Node_7076 (type:matmul)");
  res_3579->getOutput(0)->setName("Node_7076:0");
  auto res_3580=network->addElementWise(*res_3579->getOutput(0),*res_986->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3580 && "failed to build Node_7077 (type:divide)");
  res_3580->getOutput(0)->setName("Node_7077:0");
  auto res_3581=network->addElementWise(*res_3580->getOutput(0),*res_3367->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3581 && "failed to build Node_7078 (type:add)");
  res_3581->getOutput(0)->setName("Node_7078:0");
  auto res_3582=network->addSoftMax(*res_3581->getOutput(0));
  res_3582->setAxes(4);
  assert(res_3582 && "failed to build Node_7079 (type:softmax)");
  res_3582->getOutput(0)->setName("Node_7079:0");
  auto res_3583=network->addMatrixMultiply(*res_3570->getOutput(0),MatrixOperation::kNONE,*res_756->getOutput(0),MatrixOperation::kNONE);
  assert(res_3583 && "failed to build Node_7044 (type:matmul)");
  res_3583->getOutput(0)->setName("Node_7044:0");
  auto res_3584=network->addElementWise(*res_3583->getOutput(0),*res_757->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3584 && "failed to build Node_7044_add (type:add)");
  res_3584->getOutput(0)->setName("Node_7044_add:0");
  auto res_3585=network->addShuffle(*res_3584->getOutput(0));
  res_3585->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3585 && "failed to build Node_7072 (type:reshape)");
  res_3585->getOutput(0)->setName("Node_7072:0");
  auto res_3586=network->addShuffle(*res_3585->getOutput(0));
  Permutation permute_3586;
  permute_3586.order[0]=1;
  permute_3586.order[1]=0;
  permute_3586.order[2]=2;
  res_3586->setFirstTranspose(permute_3586);
  assert(res_3586 && "failed to build Node_7074 (type:transpose)");
  res_3586->getOutput(0)->setName("Node_7074:0");
  auto res_3587=network->addMatrixMultiply(*res_3582->getOutput(0),MatrixOperation::kNONE,*res_3586->getOutput(0),MatrixOperation::kNONE);
  assert(res_3587 && "failed to build Node_7083 (type:matmul)");
  res_3587->getOutput(0)->setName("Node_7083:0");
  auto res_3588=network->addShuffle(*res_3587->getOutput(0));
  Permutation permute_3588;
  permute_3588.order[0]=1;
  permute_3588.order[1]=0;
  permute_3588.order[2]=2;
  res_3588->setFirstTranspose(permute_3588);
  assert(res_3588 && "failed to build Node_7085 (type:transpose)");
  res_3588->getOutput(0)->setName("Node_7085:0");
  auto res_3589=network->addIdentity(*res_3588->getOutput(0));
  assert(res_3589 && "failed to build Node_7086 (type:contiguous)");
  res_3589->getOutput(0)->setName("Node_7086:0");
  auto res_3590=network->addShuffle(*res_3589->getOutput(0));
  res_3590->setReshapeDimensions(Dims{2,{35,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3590 && "failed to build Node_7094 (type:reshape)");
  res_3590->getOutput(0)->setName("Node_7094:0");
  auto res_3591=network->addMatrixMultiply(*res_3590->getOutput(0),MatrixOperation::kNONE,*res_758->getOutput(0),MatrixOperation::kNONE);
  assert(res_3591 && "failed to build Node_7101 (type:matmul)");
  res_3591->getOutput(0)->setName("Node_7101:0");
  auto res_3592=network->addElementWise(*res_3591->getOutput(0),*res_759->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3592 && "failed to build Node_7101_add (type:add)");
  res_3592->getOutput(0)->setName("Node_7101_add:0");
  auto res_3593=network->addElementWise(*res_3592->getOutput(0),*res_3570->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3593 && "failed to build Node_7105 (type:add)");
  res_3593->getOutput(0)->setName("Node_7105:0");
  auto res_3594=network->addReduce(*res_3593->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3594 && "failed to build Node_7112_mean (type:mean)");
  res_3594->getOutput(0)->setName("Node_7112_mean:0");
  auto res_3595=network->addElementWise(*res_3593->getOutput(0),*res_3594->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3595 && "failed to build Node_7112_diff (type:sub)");
  res_3595->getOutput(0)->setName("Node_7112_diff:0");
  auto res_3596=network->addElementWise(*res_3595->getOutput(0),*res_1226->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3596 && "failed to build Node_7112_power (type:power)");
  res_3596->getOutput(0)->setName("Node_7112_power:0");
  auto res_3597=network->addReduce(*res_3596->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3597 && "failed to build Node_7112_var (type:mean)");
  res_3597->getOutput(0)->setName("Node_7112_var:0");
  auto res_3598=network->addElementWise(*res_3597->getOutput(0),*res_1100->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3598 && "failed to build Node_7112_modify (type:add)");
  res_3598->getOutput(0)->setName("Node_7112_modify:0");
  auto res_3599=network->addUnary(*res_3598->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3599 && "failed to build Node_7112_sqrt (type:power)");
  res_3599->getOutput(0)->setName("Node_7112_sqrt:0");
  auto res_3600=network->addElementWise(*res_3595->getOutput(0),*res_3599->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3600 && "failed to build Node_7112_rsqrt (type:divide)");
  res_3600->getOutput(0)->setName("Node_7112_rsqrt:0");
  auto res_3601=network->addElementWise(*res_3600->getOutput(0),*res_236->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3601 && "failed to build Node_7112_mul (type:multiply)");
  res_3601->getOutput(0)->setName("Node_7112_mul:0");
  auto res_3602=network->addElementWise(*res_3601->getOutput(0),*res_237->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3602 && "failed to build Node_7112 (type:add)");
  res_3602->getOutput(0)->setName("Node_7112:0");
  auto res_3603=network->addMatrixMultiply(*res_3602->getOutput(0),MatrixOperation::kNONE,*res_760->getOutput(0),MatrixOperation::kNONE);
  assert(res_3603 && "failed to build Node_7118 (type:matmul)");
  res_3603->getOutput(0)->setName("Node_7118:0");
  auto res_3604=network->addElementWise(*res_3603->getOutput(0),*res_761->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3604 && "failed to build Node_7118_add (type:add)");
  res_3604->getOutput(0)->setName("Node_7118_add:0");
  ITensor* inputTensors_3605[1] = {res_3604->getOutput(0)};
  auto plugin_3605=GELU_Plugin("gelu");
  auto res_3605=network->addPluginV2(inputTensors_3605,1,plugin_3605);
  assert(res_3605 && "failed to build Node_7119 (type:gelu)");
  res_3605->getOutput(0)->setName("Node_7119:0");
  auto res_3606=network->addMatrixMultiply(*res_3605->getOutput(0),MatrixOperation::kNONE,*res_762->getOutput(0),MatrixOperation::kNONE);
  assert(res_3606 && "failed to build Node_7126 (type:matmul)");
  res_3606->getOutput(0)->setName("Node_7126:0");
  auto res_3607=network->addElementWise(*res_3606->getOutput(0),*res_763->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3607 && "failed to build Node_7126_add (type:add)");
  res_3607->getOutput(0)->setName("Node_7126_add:0");
  auto res_3608=network->addElementWise(*res_3607->getOutput(0),*res_3602->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3608 && "failed to build Node_7130 (type:add)");
  res_3608->getOutput(0)->setName("Node_7130:0");
  auto res_3609=network->addReduce(*res_3608->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3609 && "failed to build Node_7137_mean (type:mean)");
  res_3609->getOutput(0)->setName("Node_7137_mean:0");
  auto res_3610=network->addElementWise(*res_3608->getOutput(0),*res_3609->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3610 && "failed to build Node_7137_diff (type:sub)");
  res_3610->getOutput(0)->setName("Node_7137_diff:0");
  auto res_3611=network->addElementWise(*res_3610->getOutput(0),*res_1227->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3611 && "failed to build Node_7137_power (type:power)");
  res_3611->getOutput(0)->setName("Node_7137_power:0");
  auto res_3612=network->addReduce(*res_3611->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3612 && "failed to build Node_7137_var (type:mean)");
  res_3612->getOutput(0)->setName("Node_7137_var:0");
  auto res_3613=network->addElementWise(*res_3612->getOutput(0),*res_1101->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3613 && "failed to build Node_7137_modify (type:add)");
  res_3613->getOutput(0)->setName("Node_7137_modify:0");
  auto res_3614=network->addUnary(*res_3613->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3614 && "failed to build Node_7137_sqrt (type:power)");
  res_3614->getOutput(0)->setName("Node_7137_sqrt:0");
  auto res_3615=network->addElementWise(*res_3610->getOutput(0),*res_3614->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3615 && "failed to build Node_7137_rsqrt (type:divide)");
  res_3615->getOutput(0)->setName("Node_7137_rsqrt:0");
  auto res_3616=network->addElementWise(*res_3615->getOutput(0),*res_238->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3616 && "failed to build Node_7137_mul (type:multiply)");
  res_3616->getOutput(0)->setName("Node_7137_mul:0");
  auto res_3617=network->addElementWise(*res_3616->getOutput(0),*res_239->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3617 && "failed to build Node_7137 (type:add)");
  res_3617->getOutput(0)->setName("Node_7137:0");
  auto res_3618=network->addMatrixMultiply(*res_3617->getOutput(0),MatrixOperation::kNONE,*res_764->getOutput(0),MatrixOperation::kNONE);
  assert(res_3618 && "failed to build Node_7154 (type:matmul)");
  res_3618->getOutput(0)->setName("Node_7154:0");
  auto res_3619=network->addElementWise(*res_3618->getOutput(0),*res_765->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3619 && "failed to build Node_7154_add (type:add)");
  res_3619->getOutput(0)->setName("Node_7154_add:0");
  auto res_3620=network->addShuffle(*res_3619->getOutput(0));
  res_3620->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3620 && "failed to build Node_7174 (type:reshape)");
  res_3620->getOutput(0)->setName("Node_7174:0");
  auto res_3621=network->addShuffle(*res_3620->getOutput(0));
  Permutation permute_3621;
  permute_3621.order[0]=1;
  permute_3621.order[1]=0;
  permute_3621.order[2]=2;
  res_3621->setFirstTranspose(permute_3621);
  assert(res_3621 && "failed to build Node_7176 (type:transpose)");
  res_3621->getOutput(0)->setName("Node_7176:0");
  auto res_3622=network->addMatrixMultiply(*res_3617->getOutput(0),MatrixOperation::kNONE,*res_766->getOutput(0),MatrixOperation::kNONE);
  assert(res_3622 && "failed to build Node_7160 (type:matmul)");
  res_3622->getOutput(0)->setName("Node_7160:0");
  auto res_3623=network->addElementWise(*res_3622->getOutput(0),*res_767->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3623 && "failed to build Node_7160_add (type:add)");
  res_3623->getOutput(0)->setName("Node_7160_add:0");
  auto res_3624=network->addShuffle(*res_3623->getOutput(0));
  res_3624->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3624 && "failed to build Node_7184 (type:reshape)");
  res_3624->getOutput(0)->setName("Node_7184:0");
  auto res_3625=network->addShuffle(*res_3624->getOutput(0));
  Permutation permute_3625;
  permute_3625.order[0]=1;
  permute_3625.order[1]=2;
  permute_3625.order[2]=0;
  res_3625->setFirstTranspose(permute_3625);
  assert(res_3625 && "failed to build Node_7197 (type:transpose)");
  res_3625->getOutput(0)->setName("Node_7197:0");
  auto res_3626=network->addMatrixMultiply(*res_3621->getOutput(0),MatrixOperation::kNONE,*res_3625->getOutput(0),MatrixOperation::kNONE);
  assert(res_3626 && "failed to build Node_7198 (type:matmul)");
  res_3626->getOutput(0)->setName("Node_7198:0");
  auto res_3627=network->addElementWise(*res_3626->getOutput(0),*res_987->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3627 && "failed to build Node_7199 (type:divide)");
  res_3627->getOutput(0)->setName("Node_7199:0");
  auto res_3628=network->addElementWise(*res_3627->getOutput(0),*res_3367->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3628 && "failed to build Node_7200 (type:add)");
  res_3628->getOutput(0)->setName("Node_7200:0");
  auto res_3629=network->addSoftMax(*res_3628->getOutput(0));
  res_3629->setAxes(4);
  assert(res_3629 && "failed to build Node_7201 (type:softmax)");
  res_3629->getOutput(0)->setName("Node_7201:0");
  auto res_3630=network->addMatrixMultiply(*res_3617->getOutput(0),MatrixOperation::kNONE,*res_768->getOutput(0),MatrixOperation::kNONE);
  assert(res_3630 && "failed to build Node_7166 (type:matmul)");
  res_3630->getOutput(0)->setName("Node_7166:0");
  auto res_3631=network->addElementWise(*res_3630->getOutput(0),*res_769->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3631 && "failed to build Node_7166_add (type:add)");
  res_3631->getOutput(0)->setName("Node_7166_add:0");
  auto res_3632=network->addShuffle(*res_3631->getOutput(0));
  res_3632->setReshapeDimensions(Dims3{35,6,32});
  assert(res_3632 && "failed to build Node_7194 (type:reshape)");
  res_3632->getOutput(0)->setName("Node_7194:0");
  auto res_3633=network->addShuffle(*res_3632->getOutput(0));
  Permutation permute_3633;
  permute_3633.order[0]=1;
  permute_3633.order[1]=0;
  permute_3633.order[2]=2;
  res_3633->setFirstTranspose(permute_3633);
  assert(res_3633 && "failed to build Node_7196 (type:transpose)");
  res_3633->getOutput(0)->setName("Node_7196:0");
  auto res_3634=network->addMatrixMultiply(*res_3629->getOutput(0),MatrixOperation::kNONE,*res_3633->getOutput(0),MatrixOperation::kNONE);
  assert(res_3634 && "failed to build Node_7205 (type:matmul)");
  res_3634->getOutput(0)->setName("Node_7205:0");
  auto res_3635=network->addShuffle(*res_3634->getOutput(0));
  Permutation permute_3635;
  permute_3635.order[0]=1;
  permute_3635.order[1]=0;
  permute_3635.order[2]=2;
  res_3635->setFirstTranspose(permute_3635);
  assert(res_3635 && "failed to build Node_7207 (type:transpose)");
  res_3635->getOutput(0)->setName("Node_7207:0");
  auto res_3636=network->addIdentity(*res_3635->getOutput(0));
  assert(res_3636 && "failed to build Node_7208 (type:contiguous)");
  res_3636->getOutput(0)->setName("Node_7208:0");
  auto res_3637=network->addShuffle(*res_3636->getOutput(0));
  res_3637->setReshapeDimensions(Dims{2,{35,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3637 && "failed to build Node_7216 (type:reshape)");
  res_3637->getOutput(0)->setName("Node_7216:0");
  auto res_3638=network->addMatrixMultiply(*res_3637->getOutput(0),MatrixOperation::kNONE,*res_770->getOutput(0),MatrixOperation::kNONE);
  assert(res_3638 && "failed to build Node_7223 (type:matmul)");
  res_3638->getOutput(0)->setName("Node_7223:0");
  auto res_3639=network->addElementWise(*res_3638->getOutput(0),*res_771->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3639 && "failed to build Node_7223_add (type:add)");
  res_3639->getOutput(0)->setName("Node_7223_add:0");
  auto res_3640=network->addElementWise(*res_3639->getOutput(0),*res_3617->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3640 && "failed to build Node_7227 (type:add)");
  res_3640->getOutput(0)->setName("Node_7227:0");
  auto res_3641=network->addReduce(*res_3640->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3641 && "failed to build Node_7234_mean (type:mean)");
  res_3641->getOutput(0)->setName("Node_7234_mean:0");
  auto res_3642=network->addElementWise(*res_3640->getOutput(0),*res_3641->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3642 && "failed to build Node_7234_diff (type:sub)");
  res_3642->getOutput(0)->setName("Node_7234_diff:0");
  auto res_3643=network->addElementWise(*res_3642->getOutput(0),*res_1228->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3643 && "failed to build Node_7234_power (type:power)");
  res_3643->getOutput(0)->setName("Node_7234_power:0");
  auto res_3644=network->addReduce(*res_3643->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3644 && "failed to build Node_7234_var (type:mean)");
  res_3644->getOutput(0)->setName("Node_7234_var:0");
  auto res_3645=network->addElementWise(*res_3644->getOutput(0),*res_1102->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3645 && "failed to build Node_7234_modify (type:add)");
  res_3645->getOutput(0)->setName("Node_7234_modify:0");
  auto res_3646=network->addUnary(*res_3645->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3646 && "failed to build Node_7234_sqrt (type:power)");
  res_3646->getOutput(0)->setName("Node_7234_sqrt:0");
  auto res_3647=network->addElementWise(*res_3642->getOutput(0),*res_3646->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3647 && "failed to build Node_7234_rsqrt (type:divide)");
  res_3647->getOutput(0)->setName("Node_7234_rsqrt:0");
  auto res_3648=network->addElementWise(*res_3647->getOutput(0),*res_240->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3648 && "failed to build Node_7234_mul (type:multiply)");
  res_3648->getOutput(0)->setName("Node_7234_mul:0");
  auto res_3649=network->addElementWise(*res_3648->getOutput(0),*res_241->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3649 && "failed to build Node_7234 (type:add)");
  res_3649->getOutput(0)->setName("Node_7234:0");
  auto res_3650=network->addMatrixMultiply(*res_3649->getOutput(0),MatrixOperation::kNONE,*res_772->getOutput(0),MatrixOperation::kNONE);
  assert(res_3650 && "failed to build Node_7240 (type:matmul)");
  res_3650->getOutput(0)->setName("Node_7240:0");
  auto res_3651=network->addElementWise(*res_3650->getOutput(0),*res_773->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3651 && "failed to build Node_7240_add (type:add)");
  res_3651->getOutput(0)->setName("Node_7240_add:0");
  ITensor* inputTensors_3652[1] = {res_3651->getOutput(0)};
  auto plugin_3652=GELU_Plugin("gelu");
  auto res_3652=network->addPluginV2(inputTensors_3652,1,plugin_3652);
  assert(res_3652 && "failed to build Node_7241 (type:gelu)");
  res_3652->getOutput(0)->setName("Node_7241:0");
  auto res_3653=network->addMatrixMultiply(*res_3652->getOutput(0),MatrixOperation::kNONE,*res_774->getOutput(0),MatrixOperation::kNONE);
  assert(res_3653 && "failed to build Node_7248 (type:matmul)");
  res_3653->getOutput(0)->setName("Node_7248:0");
  auto res_3654=network->addElementWise(*res_3653->getOutput(0),*res_775->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3654 && "failed to build Node_7248_add (type:add)");
  res_3654->getOutput(0)->setName("Node_7248_add:0");
  auto res_3655=network->addElementWise(*res_3654->getOutput(0),*res_3649->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3655 && "failed to build Node_7252 (type:add)");
  res_3655->getOutput(0)->setName("Node_7252:0");
  auto res_3656=network->addReduce(*res_3655->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3656 && "failed to build Node_7259_mean (type:mean)");
  res_3656->getOutput(0)->setName("Node_7259_mean:0");
  auto res_3657=network->addElementWise(*res_3655->getOutput(0),*res_3656->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3657 && "failed to build Node_7259_diff (type:sub)");
  res_3657->getOutput(0)->setName("Node_7259_diff:0");
  auto res_3658=network->addElementWise(*res_3657->getOutput(0),*res_1229->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3658 && "failed to build Node_7259_power (type:power)");
  res_3658->getOutput(0)->setName("Node_7259_power:0");
  auto res_3659=network->addReduce(*res_3658->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3659 && "failed to build Node_7259_var (type:mean)");
  res_3659->getOutput(0)->setName("Node_7259_var:0");
  auto res_3660=network->addElementWise(*res_3659->getOutput(0),*res_1103->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3660 && "failed to build Node_7259_modify (type:add)");
  res_3660->getOutput(0)->setName("Node_7259_modify:0");
  auto res_3661=network->addUnary(*res_3660->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3661 && "failed to build Node_7259_sqrt (type:power)");
  res_3661->getOutput(0)->setName("Node_7259_sqrt:0");
  auto res_3662=network->addElementWise(*res_3657->getOutput(0),*res_3661->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3662 && "failed to build Node_7259_rsqrt (type:divide)");
  res_3662->getOutput(0)->setName("Node_7259_rsqrt:0");
  auto res_3663=network->addElementWise(*res_3662->getOutput(0),*res_242->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3663 && "failed to build Node_7259_mul (type:multiply)");
  res_3663->getOutput(0)->setName("Node_7259_mul:0");
  auto res_3664=network->addElementWise(*res_3663->getOutput(0),*res_243->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3664 && "failed to build Node_7259 (type:add)");
  res_3664->getOutput(0)->setName("Node_7259:0");
  auto res_3665=network->addSlice(*res_3664->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_3665 && "failed to build Node_7263 (type:dlr_slice)");
  res_3665->getOutput(0)->setName("Node_7263:0");
  auto res_3666=network->addShuffle(*res_3665->getOutput(0));
  res_3666->setReshapeDimensions(Dims3{192,1,1});
  assert(res_3666 && "failed to build Node_7265_reshape (type:reshape)");
  res_3666->getOutput(0)->setName("Node_7265_reshape:0");
  auto res_3667=network->addFullyConnected(*res_3666->getOutput(0),192,mWeightsMap["weight_3667"],mWeightsMap["bias_3667"]);
  assert(res_3667 && "failed to build Node_7270 (type:dense)");
  res_3667->getOutput(0)->setName("Node_7270:0");
  auto res_3668=network->addShuffle(*res_3667->getOutput(0));
  res_3668->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_3668 && "failed to build Node_7270_reshape (type:reshape)");
  res_3668->getOutput(0)->setName("Node_7270_reshape:0");
  auto res_3669=network->addActivation(*res_3668->getOutput(0),ActivationType::kTANH);
  assert(res_3669 && "failed to build Node_7271 (type:tanh)");
  res_3669->getOutput(0)->setName("Node_7271:0");
  auto res_3670=network->addShuffle(*res_3669->getOutput(0));
  res_3670->setReshapeDimensions(Dims{2,{1,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3670 && "failed to build Node_7283 (type:reshape)");
  res_3670->getOutput(0)->setName("Node_7283:0");
  auto res_3671=network->addGather(*res_925->getOutput(0),*inputs[32],0);
  assert(res_3671 && "failed to build Node_5612 (type:gather)");
  res_3671->getOutput(0)->setName("Node_5612:0");
  auto res_3672=network->addShuffle(*inputs[33]);
  res_3672->setReshapeDimensions(Dims{2,{16,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3672 && "failed to build Node_5615 (type:reshape)");
  res_3672->getOutput(0)->setName("Node_5615:0");
  auto res_3673=network->addElementWise(*res_57->getOutput(0),*res_3672->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3673 && "failed to build Node_5617 (type:add)");
  res_3673->getOutput(0)->setName("Node_5617:0");
  auto res_3674=network->addElementWise(*res_3671->getOutput(0),*res_3673->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3674 && "failed to build Node_5618 (type:multiply)");
  res_3674->getOutput(0)->setName("Node_5618:0");
  auto res_3675=network->addShuffle(*inputs[33]);
  res_3675->setReshapeDimensions(Dims{2,{16,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3675 && "failed to build Node_5631 (type:reshape)");
  res_3675->getOutput(0)->setName("Node_5631:0");
  auto res_3676=network->addElementWise(*res_58->getOutput(0),*res_3675->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3676 && "failed to build Node_5633 (type:add)");
  res_3676->getOutput(0)->setName("Node_5633:0");
  auto res_3677=network->addShuffle(*inputs[33]);
  res_3677->setReshapeDimensions(Dims{2,{16,1},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3677 && "failed to build Node_5647 (type:reshape)");
  res_3677->getOutput(0)->setName("Node_5647:0");
  auto res_3678=network->addElementWise(*res_59->getOutput(0),*res_3677->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3678 && "failed to build Node_5649 (type:add)");
  res_3678->getOutput(0)->setName("Node_5649:0");
  auto res_3679=network->addShuffle(*inputs[33]);
  res_3679->setReshapeDimensions(Dims3{1,1,16});
  assert(res_3679 && "failed to build Node_5667 (type:reshape)");
  res_3679->getOutput(0)->setName("Node_5667:0");
  auto res_3680=network->addElementWise(*res_988->getOutput(0),*res_3679->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3680 && "failed to build Node_5669 (type:sub)");
  res_3680->getOutput(0)->setName("Node_5669:0");
  auto res_3681=network->addElementWise(*res_3680->getOutput(0),*res_989->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3681 && "failed to build Node_5670 (type:multiply)");
  res_3681->getOutput(0)->setName("Node_5670:0");
  auto res_3682=network->addGather(*res_925->getOutput(0),*inputs[34],0);
  assert(res_3682 && "failed to build Node_5628 (type:gather)");
  res_3682->getOutput(0)->setName("Node_5628:0");
  auto res_3683=network->addElementWise(*res_3682->getOutput(0),*res_3676->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3683 && "failed to build Node_5634 (type:multiply)");
  res_3683->getOutput(0)->setName("Node_5634:0");
  auto res_3684=network->addElementWise(*res_3674->getOutput(0),*res_3683->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3684 && "failed to build Node_5657 (type:add)");
  res_3684->getOutput(0)->setName("Node_5657:0");
  auto res_3685=network->addGather(*res_925->getOutput(0),*inputs[35],0);
  assert(res_3685 && "failed to build Node_5644 (type:gather)");
  res_3685->getOutput(0)->setName("Node_5644:0");
  auto res_3686=network->addElementWise(*res_3685->getOutput(0),*res_3678->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3686 && "failed to build Node_5650 (type:multiply)");
  res_3686->getOutput(0)->setName("Node_5650:0");
  auto res_3687=network->addElementWise(*res_3684->getOutput(0),*res_3686->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3687 && "failed to build Node_5658 (type:add)");
  res_3687->getOutput(0)->setName("Node_5658:0");
  auto res_3688=network->addElementWise(*res_3687->getOutput(0),*res_67->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3688 && "failed to build Node_5691 (type:add)");
  res_3688->getOutput(0)->setName("Node_5691:0");
  auto res_3689=network->addReduce(*res_3688->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3689 && "failed to build Node_5698_mean (type:mean)");
  res_3689->getOutput(0)->setName("Node_5698_mean:0");
  auto res_3690=network->addElementWise(*res_3688->getOutput(0),*res_3689->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3690 && "failed to build Node_5698_diff (type:sub)");
  res_3690->getOutput(0)->setName("Node_5698_diff:0");
  auto res_3691=network->addElementWise(*res_3690->getOutput(0),*res_1230->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3691 && "failed to build Node_5698_power (type:power)");
  res_3691->getOutput(0)->setName("Node_5698_power:0");
  auto res_3692=network->addReduce(*res_3691->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3692 && "failed to build Node_5698_var (type:mean)");
  res_3692->getOutput(0)->setName("Node_5698_var:0");
  auto res_3693=network->addElementWise(*res_3692->getOutput(0),*res_1104->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3693 && "failed to build Node_5698_modify (type:add)");
  res_3693->getOutput(0)->setName("Node_5698_modify:0");
  auto res_3694=network->addUnary(*res_3693->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3694 && "failed to build Node_5698_sqrt (type:power)");
  res_3694->getOutput(0)->setName("Node_5698_sqrt:0");
  auto res_3695=network->addElementWise(*res_3690->getOutput(0),*res_3694->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3695 && "failed to build Node_5698_rsqrt (type:divide)");
  res_3695->getOutput(0)->setName("Node_5698_rsqrt:0");
  auto res_3696=network->addElementWise(*res_3695->getOutput(0),*res_244->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3696 && "failed to build Node_5698_mul (type:multiply)");
  res_3696->getOutput(0)->setName("Node_5698_mul:0");
  auto res_3697=network->addElementWise(*res_3696->getOutput(0),*res_245->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3697 && "failed to build Node_5698 (type:add)");
  res_3697->getOutput(0)->setName("Node_5698:0");
  auto res_3698=network->addMatrixMultiply(*res_3697->getOutput(0),MatrixOperation::kNONE,*res_776->getOutput(0),MatrixOperation::kNONE);
  assert(res_3698 && "failed to build Node_5718 (type:matmul)");
  res_3698->getOutput(0)->setName("Node_5718:0");
  auto res_3699=network->addElementWise(*res_3698->getOutput(0),*res_777->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3699 && "failed to build Node_5718_add (type:add)");
  res_3699->getOutput(0)->setName("Node_5718_add:0");
  auto res_3700=network->addShuffle(*res_3699->getOutput(0));
  res_3700->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3700 && "failed to build Node_5738 (type:reshape)");
  res_3700->getOutput(0)->setName("Node_5738:0");
  auto res_3701=network->addShuffle(*res_3700->getOutput(0));
  Permutation permute_3701;
  permute_3701.order[0]=1;
  permute_3701.order[1]=0;
  permute_3701.order[2]=2;
  res_3701->setFirstTranspose(permute_3701);
  assert(res_3701 && "failed to build Node_5740 (type:transpose)");
  res_3701->getOutput(0)->setName("Node_5740:0");
  auto res_3702=network->addMatrixMultiply(*res_3697->getOutput(0),MatrixOperation::kNONE,*res_778->getOutput(0),MatrixOperation::kNONE);
  assert(res_3702 && "failed to build Node_5724 (type:matmul)");
  res_3702->getOutput(0)->setName("Node_5724:0");
  auto res_3703=network->addElementWise(*res_3702->getOutput(0),*res_779->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3703 && "failed to build Node_5724_add (type:add)");
  res_3703->getOutput(0)->setName("Node_5724_add:0");
  auto res_3704=network->addShuffle(*res_3703->getOutput(0));
  res_3704->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3704 && "failed to build Node_5748 (type:reshape)");
  res_3704->getOutput(0)->setName("Node_5748:0");
  auto res_3705=network->addShuffle(*res_3704->getOutput(0));
  Permutation permute_3705;
  permute_3705.order[0]=1;
  permute_3705.order[1]=2;
  permute_3705.order[2]=0;
  res_3705->setFirstTranspose(permute_3705);
  assert(res_3705 && "failed to build Node_5761 (type:transpose)");
  res_3705->getOutput(0)->setName("Node_5761:0");
  auto res_3706=network->addMatrixMultiply(*res_3701->getOutput(0),MatrixOperation::kNONE,*res_3705->getOutput(0),MatrixOperation::kNONE);
  assert(res_3706 && "failed to build Node_5762 (type:matmul)");
  res_3706->getOutput(0)->setName("Node_5762:0");
  auto res_3707=network->addElementWise(*res_3706->getOutput(0),*res_990->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3707 && "failed to build Node_5763 (type:divide)");
  res_3707->getOutput(0)->setName("Node_5763:0");
  auto res_3708=network->addElementWise(*res_3707->getOutput(0),*res_3681->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3708 && "failed to build Node_5764 (type:add)");
  res_3708->getOutput(0)->setName("Node_5764:0");
  auto res_3709=network->addSoftMax(*res_3708->getOutput(0));
  res_3709->setAxes(4);
  assert(res_3709 && "failed to build Node_5765 (type:softmax)");
  res_3709->getOutput(0)->setName("Node_5765:0");
  auto res_3710=network->addMatrixMultiply(*res_3697->getOutput(0),MatrixOperation::kNONE,*res_780->getOutput(0),MatrixOperation::kNONE);
  assert(res_3710 && "failed to build Node_5730 (type:matmul)");
  res_3710->getOutput(0)->setName("Node_5730:0");
  auto res_3711=network->addElementWise(*res_3710->getOutput(0),*res_781->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3711 && "failed to build Node_5730_add (type:add)");
  res_3711->getOutput(0)->setName("Node_5730_add:0");
  auto res_3712=network->addShuffle(*res_3711->getOutput(0));
  res_3712->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3712 && "failed to build Node_5758 (type:reshape)");
  res_3712->getOutput(0)->setName("Node_5758:0");
  auto res_3713=network->addShuffle(*res_3712->getOutput(0));
  Permutation permute_3713;
  permute_3713.order[0]=1;
  permute_3713.order[1]=0;
  permute_3713.order[2]=2;
  res_3713->setFirstTranspose(permute_3713);
  assert(res_3713 && "failed to build Node_5760 (type:transpose)");
  res_3713->getOutput(0)->setName("Node_5760:0");
  auto res_3714=network->addMatrixMultiply(*res_3709->getOutput(0),MatrixOperation::kNONE,*res_3713->getOutput(0),MatrixOperation::kNONE);
  assert(res_3714 && "failed to build Node_5769 (type:matmul)");
  res_3714->getOutput(0)->setName("Node_5769:0");
  auto res_3715=network->addShuffle(*res_3714->getOutput(0));
  Permutation permute_3715;
  permute_3715.order[0]=1;
  permute_3715.order[1]=0;
  permute_3715.order[2]=2;
  res_3715->setFirstTranspose(permute_3715);
  assert(res_3715 && "failed to build Node_5771 (type:transpose)");
  res_3715->getOutput(0)->setName("Node_5771:0");
  auto res_3716=network->addIdentity(*res_3715->getOutput(0));
  assert(res_3716 && "failed to build Node_5772 (type:contiguous)");
  res_3716->getOutput(0)->setName("Node_5772:0");
  auto res_3717=network->addShuffle(*res_3716->getOutput(0));
  res_3717->setReshapeDimensions(Dims{2,{16,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3717 && "failed to build Node_5780 (type:reshape)");
  res_3717->getOutput(0)->setName("Node_5780:0");
  auto res_3718=network->addMatrixMultiply(*res_3717->getOutput(0),MatrixOperation::kNONE,*res_782->getOutput(0),MatrixOperation::kNONE);
  assert(res_3718 && "failed to build Node_5787 (type:matmul)");
  res_3718->getOutput(0)->setName("Node_5787:0");
  auto res_3719=network->addElementWise(*res_3718->getOutput(0),*res_783->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3719 && "failed to build Node_5787_add (type:add)");
  res_3719->getOutput(0)->setName("Node_5787_add:0");
  auto res_3720=network->addElementWise(*res_3719->getOutput(0),*res_3697->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3720 && "failed to build Node_5791 (type:add)");
  res_3720->getOutput(0)->setName("Node_5791:0");
  auto res_3721=network->addReduce(*res_3720->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3721 && "failed to build Node_5798_mean (type:mean)");
  res_3721->getOutput(0)->setName("Node_5798_mean:0");
  auto res_3722=network->addElementWise(*res_3720->getOutput(0),*res_3721->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3722 && "failed to build Node_5798_diff (type:sub)");
  res_3722->getOutput(0)->setName("Node_5798_diff:0");
  auto res_3723=network->addElementWise(*res_3722->getOutput(0),*res_1231->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3723 && "failed to build Node_5798_power (type:power)");
  res_3723->getOutput(0)->setName("Node_5798_power:0");
  auto res_3724=network->addReduce(*res_3723->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3724 && "failed to build Node_5798_var (type:mean)");
  res_3724->getOutput(0)->setName("Node_5798_var:0");
  auto res_3725=network->addElementWise(*res_3724->getOutput(0),*res_1105->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3725 && "failed to build Node_5798_modify (type:add)");
  res_3725->getOutput(0)->setName("Node_5798_modify:0");
  auto res_3726=network->addUnary(*res_3725->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3726 && "failed to build Node_5798_sqrt (type:power)");
  res_3726->getOutput(0)->setName("Node_5798_sqrt:0");
  auto res_3727=network->addElementWise(*res_3722->getOutput(0),*res_3726->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3727 && "failed to build Node_5798_rsqrt (type:divide)");
  res_3727->getOutput(0)->setName("Node_5798_rsqrt:0");
  auto res_3728=network->addElementWise(*res_3727->getOutput(0),*res_246->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3728 && "failed to build Node_5798_mul (type:multiply)");
  res_3728->getOutput(0)->setName("Node_5798_mul:0");
  auto res_3729=network->addElementWise(*res_3728->getOutput(0),*res_247->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3729 && "failed to build Node_5798 (type:add)");
  res_3729->getOutput(0)->setName("Node_5798:0");
  auto res_3730=network->addMatrixMultiply(*res_3729->getOutput(0),MatrixOperation::kNONE,*res_784->getOutput(0),MatrixOperation::kNONE);
  assert(res_3730 && "failed to build Node_5804 (type:matmul)");
  res_3730->getOutput(0)->setName("Node_5804:0");
  auto res_3731=network->addElementWise(*res_3730->getOutput(0),*res_785->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3731 && "failed to build Node_5804_add (type:add)");
  res_3731->getOutput(0)->setName("Node_5804_add:0");
  ITensor* inputTensors_3732[1] = {res_3731->getOutput(0)};
  auto plugin_3732=GELU_Plugin("gelu");
  auto res_3732=network->addPluginV2(inputTensors_3732,1,plugin_3732);
  assert(res_3732 && "failed to build Node_5805 (type:gelu)");
  res_3732->getOutput(0)->setName("Node_5805:0");
  auto res_3733=network->addMatrixMultiply(*res_3732->getOutput(0),MatrixOperation::kNONE,*res_786->getOutput(0),MatrixOperation::kNONE);
  assert(res_3733 && "failed to build Node_5812 (type:matmul)");
  res_3733->getOutput(0)->setName("Node_5812:0");
  auto res_3734=network->addElementWise(*res_3733->getOutput(0),*res_787->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3734 && "failed to build Node_5812_add (type:add)");
  res_3734->getOutput(0)->setName("Node_5812_add:0");
  auto res_3735=network->addElementWise(*res_3734->getOutput(0),*res_3729->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3735 && "failed to build Node_5816 (type:add)");
  res_3735->getOutput(0)->setName("Node_5816:0");
  auto res_3736=network->addReduce(*res_3735->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3736 && "failed to build Node_5823_mean (type:mean)");
  res_3736->getOutput(0)->setName("Node_5823_mean:0");
  auto res_3737=network->addElementWise(*res_3735->getOutput(0),*res_3736->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3737 && "failed to build Node_5823_diff (type:sub)");
  res_3737->getOutput(0)->setName("Node_5823_diff:0");
  auto res_3738=network->addElementWise(*res_3737->getOutput(0),*res_1232->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3738 && "failed to build Node_5823_power (type:power)");
  res_3738->getOutput(0)->setName("Node_5823_power:0");
  auto res_3739=network->addReduce(*res_3738->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3739 && "failed to build Node_5823_var (type:mean)");
  res_3739->getOutput(0)->setName("Node_5823_var:0");
  auto res_3740=network->addElementWise(*res_3739->getOutput(0),*res_1106->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3740 && "failed to build Node_5823_modify (type:add)");
  res_3740->getOutput(0)->setName("Node_5823_modify:0");
  auto res_3741=network->addUnary(*res_3740->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3741 && "failed to build Node_5823_sqrt (type:power)");
  res_3741->getOutput(0)->setName("Node_5823_sqrt:0");
  auto res_3742=network->addElementWise(*res_3737->getOutput(0),*res_3741->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3742 && "failed to build Node_5823_rsqrt (type:divide)");
  res_3742->getOutput(0)->setName("Node_5823_rsqrt:0");
  auto res_3743=network->addElementWise(*res_3742->getOutput(0),*res_248->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3743 && "failed to build Node_5823_mul (type:multiply)");
  res_3743->getOutput(0)->setName("Node_5823_mul:0");
  auto res_3744=network->addElementWise(*res_3743->getOutput(0),*res_249->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3744 && "failed to build Node_5823 (type:add)");
  res_3744->getOutput(0)->setName("Node_5823:0");
  auto res_3745=network->addMatrixMultiply(*res_3744->getOutput(0),MatrixOperation::kNONE,*res_788->getOutput(0),MatrixOperation::kNONE);
  assert(res_3745 && "failed to build Node_5840 (type:matmul)");
  res_3745->getOutput(0)->setName("Node_5840:0");
  auto res_3746=network->addElementWise(*res_3745->getOutput(0),*res_789->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3746 && "failed to build Node_5840_add (type:add)");
  res_3746->getOutput(0)->setName("Node_5840_add:0");
  auto res_3747=network->addShuffle(*res_3746->getOutput(0));
  res_3747->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3747 && "failed to build Node_5860 (type:reshape)");
  res_3747->getOutput(0)->setName("Node_5860:0");
  auto res_3748=network->addShuffle(*res_3747->getOutput(0));
  Permutation permute_3748;
  permute_3748.order[0]=1;
  permute_3748.order[1]=0;
  permute_3748.order[2]=2;
  res_3748->setFirstTranspose(permute_3748);
  assert(res_3748 && "failed to build Node_5862 (type:transpose)");
  res_3748->getOutput(0)->setName("Node_5862:0");
  auto res_3749=network->addMatrixMultiply(*res_3744->getOutput(0),MatrixOperation::kNONE,*res_790->getOutput(0),MatrixOperation::kNONE);
  assert(res_3749 && "failed to build Node_5846 (type:matmul)");
  res_3749->getOutput(0)->setName("Node_5846:0");
  auto res_3750=network->addElementWise(*res_3749->getOutput(0),*res_791->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3750 && "failed to build Node_5846_add (type:add)");
  res_3750->getOutput(0)->setName("Node_5846_add:0");
  auto res_3751=network->addShuffle(*res_3750->getOutput(0));
  res_3751->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3751 && "failed to build Node_5870 (type:reshape)");
  res_3751->getOutput(0)->setName("Node_5870:0");
  auto res_3752=network->addShuffle(*res_3751->getOutput(0));
  Permutation permute_3752;
  permute_3752.order[0]=1;
  permute_3752.order[1]=2;
  permute_3752.order[2]=0;
  res_3752->setFirstTranspose(permute_3752);
  assert(res_3752 && "failed to build Node_5883 (type:transpose)");
  res_3752->getOutput(0)->setName("Node_5883:0");
  auto res_3753=network->addMatrixMultiply(*res_3748->getOutput(0),MatrixOperation::kNONE,*res_3752->getOutput(0),MatrixOperation::kNONE);
  assert(res_3753 && "failed to build Node_5884 (type:matmul)");
  res_3753->getOutput(0)->setName("Node_5884:0");
  auto res_3754=network->addElementWise(*res_3753->getOutput(0),*res_991->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3754 && "failed to build Node_5885 (type:divide)");
  res_3754->getOutput(0)->setName("Node_5885:0");
  auto res_3755=network->addElementWise(*res_3754->getOutput(0),*res_3681->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3755 && "failed to build Node_5886 (type:add)");
  res_3755->getOutput(0)->setName("Node_5886:0");
  auto res_3756=network->addSoftMax(*res_3755->getOutput(0));
  res_3756->setAxes(4);
  assert(res_3756 && "failed to build Node_5887 (type:softmax)");
  res_3756->getOutput(0)->setName("Node_5887:0");
  auto res_3757=network->addMatrixMultiply(*res_3744->getOutput(0),MatrixOperation::kNONE,*res_792->getOutput(0),MatrixOperation::kNONE);
  assert(res_3757 && "failed to build Node_5852 (type:matmul)");
  res_3757->getOutput(0)->setName("Node_5852:0");
  auto res_3758=network->addElementWise(*res_3757->getOutput(0),*res_793->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3758 && "failed to build Node_5852_add (type:add)");
  res_3758->getOutput(0)->setName("Node_5852_add:0");
  auto res_3759=network->addShuffle(*res_3758->getOutput(0));
  res_3759->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3759 && "failed to build Node_5880 (type:reshape)");
  res_3759->getOutput(0)->setName("Node_5880:0");
  auto res_3760=network->addShuffle(*res_3759->getOutput(0));
  Permutation permute_3760;
  permute_3760.order[0]=1;
  permute_3760.order[1]=0;
  permute_3760.order[2]=2;
  res_3760->setFirstTranspose(permute_3760);
  assert(res_3760 && "failed to build Node_5882 (type:transpose)");
  res_3760->getOutput(0)->setName("Node_5882:0");
  auto res_3761=network->addMatrixMultiply(*res_3756->getOutput(0),MatrixOperation::kNONE,*res_3760->getOutput(0),MatrixOperation::kNONE);
  assert(res_3761 && "failed to build Node_5891 (type:matmul)");
  res_3761->getOutput(0)->setName("Node_5891:0");
  auto res_3762=network->addShuffle(*res_3761->getOutput(0));
  Permutation permute_3762;
  permute_3762.order[0]=1;
  permute_3762.order[1]=0;
  permute_3762.order[2]=2;
  res_3762->setFirstTranspose(permute_3762);
  assert(res_3762 && "failed to build Node_5893 (type:transpose)");
  res_3762->getOutput(0)->setName("Node_5893:0");
  auto res_3763=network->addIdentity(*res_3762->getOutput(0));
  assert(res_3763 && "failed to build Node_5894 (type:contiguous)");
  res_3763->getOutput(0)->setName("Node_5894:0");
  auto res_3764=network->addShuffle(*res_3763->getOutput(0));
  res_3764->setReshapeDimensions(Dims{2,{16,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3764 && "failed to build Node_5902 (type:reshape)");
  res_3764->getOutput(0)->setName("Node_5902:0");
  auto res_3765=network->addMatrixMultiply(*res_3764->getOutput(0),MatrixOperation::kNONE,*res_794->getOutput(0),MatrixOperation::kNONE);
  assert(res_3765 && "failed to build Node_5909 (type:matmul)");
  res_3765->getOutput(0)->setName("Node_5909:0");
  auto res_3766=network->addElementWise(*res_3765->getOutput(0),*res_795->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3766 && "failed to build Node_5909_add (type:add)");
  res_3766->getOutput(0)->setName("Node_5909_add:0");
  auto res_3767=network->addElementWise(*res_3766->getOutput(0),*res_3744->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3767 && "failed to build Node_5913 (type:add)");
  res_3767->getOutput(0)->setName("Node_5913:0");
  auto res_3768=network->addReduce(*res_3767->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3768 && "failed to build Node_5920_mean (type:mean)");
  res_3768->getOutput(0)->setName("Node_5920_mean:0");
  auto res_3769=network->addElementWise(*res_3767->getOutput(0),*res_3768->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3769 && "failed to build Node_5920_diff (type:sub)");
  res_3769->getOutput(0)->setName("Node_5920_diff:0");
  auto res_3770=network->addElementWise(*res_3769->getOutput(0),*res_1233->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3770 && "failed to build Node_5920_power (type:power)");
  res_3770->getOutput(0)->setName("Node_5920_power:0");
  auto res_3771=network->addReduce(*res_3770->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3771 && "failed to build Node_5920_var (type:mean)");
  res_3771->getOutput(0)->setName("Node_5920_var:0");
  auto res_3772=network->addElementWise(*res_3771->getOutput(0),*res_1107->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3772 && "failed to build Node_5920_modify (type:add)");
  res_3772->getOutput(0)->setName("Node_5920_modify:0");
  auto res_3773=network->addUnary(*res_3772->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3773 && "failed to build Node_5920_sqrt (type:power)");
  res_3773->getOutput(0)->setName("Node_5920_sqrt:0");
  auto res_3774=network->addElementWise(*res_3769->getOutput(0),*res_3773->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3774 && "failed to build Node_5920_rsqrt (type:divide)");
  res_3774->getOutput(0)->setName("Node_5920_rsqrt:0");
  auto res_3775=network->addElementWise(*res_3774->getOutput(0),*res_250->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3775 && "failed to build Node_5920_mul (type:multiply)");
  res_3775->getOutput(0)->setName("Node_5920_mul:0");
  auto res_3776=network->addElementWise(*res_3775->getOutput(0),*res_251->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3776 && "failed to build Node_5920 (type:add)");
  res_3776->getOutput(0)->setName("Node_5920:0");
  auto res_3777=network->addMatrixMultiply(*res_3776->getOutput(0),MatrixOperation::kNONE,*res_796->getOutput(0),MatrixOperation::kNONE);
  assert(res_3777 && "failed to build Node_5926 (type:matmul)");
  res_3777->getOutput(0)->setName("Node_5926:0");
  auto res_3778=network->addElementWise(*res_3777->getOutput(0),*res_797->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3778 && "failed to build Node_5926_add (type:add)");
  res_3778->getOutput(0)->setName("Node_5926_add:0");
  ITensor* inputTensors_3779[1] = {res_3778->getOutput(0)};
  auto plugin_3779=GELU_Plugin("gelu");
  auto res_3779=network->addPluginV2(inputTensors_3779,1,plugin_3779);
  assert(res_3779 && "failed to build Node_5927 (type:gelu)");
  res_3779->getOutput(0)->setName("Node_5927:0");
  auto res_3780=network->addMatrixMultiply(*res_3779->getOutput(0),MatrixOperation::kNONE,*res_798->getOutput(0),MatrixOperation::kNONE);
  assert(res_3780 && "failed to build Node_5934 (type:matmul)");
  res_3780->getOutput(0)->setName("Node_5934:0");
  auto res_3781=network->addElementWise(*res_3780->getOutput(0),*res_799->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3781 && "failed to build Node_5934_add (type:add)");
  res_3781->getOutput(0)->setName("Node_5934_add:0");
  auto res_3782=network->addElementWise(*res_3781->getOutput(0),*res_3776->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3782 && "failed to build Node_5938 (type:add)");
  res_3782->getOutput(0)->setName("Node_5938:0");
  auto res_3783=network->addReduce(*res_3782->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3783 && "failed to build Node_5945_mean (type:mean)");
  res_3783->getOutput(0)->setName("Node_5945_mean:0");
  auto res_3784=network->addElementWise(*res_3782->getOutput(0),*res_3783->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3784 && "failed to build Node_5945_diff (type:sub)");
  res_3784->getOutput(0)->setName("Node_5945_diff:0");
  auto res_3785=network->addElementWise(*res_3784->getOutput(0),*res_1234->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3785 && "failed to build Node_5945_power (type:power)");
  res_3785->getOutput(0)->setName("Node_5945_power:0");
  auto res_3786=network->addReduce(*res_3785->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3786 && "failed to build Node_5945_var (type:mean)");
  res_3786->getOutput(0)->setName("Node_5945_var:0");
  auto res_3787=network->addElementWise(*res_3786->getOutput(0),*res_1108->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3787 && "failed to build Node_5945_modify (type:add)");
  res_3787->getOutput(0)->setName("Node_5945_modify:0");
  auto res_3788=network->addUnary(*res_3787->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3788 && "failed to build Node_5945_sqrt (type:power)");
  res_3788->getOutput(0)->setName("Node_5945_sqrt:0");
  auto res_3789=network->addElementWise(*res_3784->getOutput(0),*res_3788->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3789 && "failed to build Node_5945_rsqrt (type:divide)");
  res_3789->getOutput(0)->setName("Node_5945_rsqrt:0");
  auto res_3790=network->addElementWise(*res_3789->getOutput(0),*res_252->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3790 && "failed to build Node_5945_mul (type:multiply)");
  res_3790->getOutput(0)->setName("Node_5945_mul:0");
  auto res_3791=network->addElementWise(*res_3790->getOutput(0),*res_253->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3791 && "failed to build Node_5945 (type:add)");
  res_3791->getOutput(0)->setName("Node_5945:0");
  auto res_3792=network->addMatrixMultiply(*res_3791->getOutput(0),MatrixOperation::kNONE,*res_800->getOutput(0),MatrixOperation::kNONE);
  assert(res_3792 && "failed to build Node_5962 (type:matmul)");
  res_3792->getOutput(0)->setName("Node_5962:0");
  auto res_3793=network->addElementWise(*res_3792->getOutput(0),*res_801->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3793 && "failed to build Node_5962_add (type:add)");
  res_3793->getOutput(0)->setName("Node_5962_add:0");
  auto res_3794=network->addShuffle(*res_3793->getOutput(0));
  res_3794->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3794 && "failed to build Node_5982 (type:reshape)");
  res_3794->getOutput(0)->setName("Node_5982:0");
  auto res_3795=network->addShuffle(*res_3794->getOutput(0));
  Permutation permute_3795;
  permute_3795.order[0]=1;
  permute_3795.order[1]=0;
  permute_3795.order[2]=2;
  res_3795->setFirstTranspose(permute_3795);
  assert(res_3795 && "failed to build Node_5984 (type:transpose)");
  res_3795->getOutput(0)->setName("Node_5984:0");
  auto res_3796=network->addMatrixMultiply(*res_3791->getOutput(0),MatrixOperation::kNONE,*res_802->getOutput(0),MatrixOperation::kNONE);
  assert(res_3796 && "failed to build Node_5968 (type:matmul)");
  res_3796->getOutput(0)->setName("Node_5968:0");
  auto res_3797=network->addElementWise(*res_3796->getOutput(0),*res_803->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3797 && "failed to build Node_5968_add (type:add)");
  res_3797->getOutput(0)->setName("Node_5968_add:0");
  auto res_3798=network->addShuffle(*res_3797->getOutput(0));
  res_3798->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3798 && "failed to build Node_5992 (type:reshape)");
  res_3798->getOutput(0)->setName("Node_5992:0");
  auto res_3799=network->addShuffle(*res_3798->getOutput(0));
  Permutation permute_3799;
  permute_3799.order[0]=1;
  permute_3799.order[1]=2;
  permute_3799.order[2]=0;
  res_3799->setFirstTranspose(permute_3799);
  assert(res_3799 && "failed to build Node_6005 (type:transpose)");
  res_3799->getOutput(0)->setName("Node_6005:0");
  auto res_3800=network->addMatrixMultiply(*res_3795->getOutput(0),MatrixOperation::kNONE,*res_3799->getOutput(0),MatrixOperation::kNONE);
  assert(res_3800 && "failed to build Node_6006 (type:matmul)");
  res_3800->getOutput(0)->setName("Node_6006:0");
  auto res_3801=network->addElementWise(*res_3800->getOutput(0),*res_992->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3801 && "failed to build Node_6007 (type:divide)");
  res_3801->getOutput(0)->setName("Node_6007:0");
  auto res_3802=network->addElementWise(*res_3801->getOutput(0),*res_3681->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3802 && "failed to build Node_6008 (type:add)");
  res_3802->getOutput(0)->setName("Node_6008:0");
  auto res_3803=network->addSoftMax(*res_3802->getOutput(0));
  res_3803->setAxes(4);
  assert(res_3803 && "failed to build Node_6009 (type:softmax)");
  res_3803->getOutput(0)->setName("Node_6009:0");
  auto res_3804=network->addMatrixMultiply(*res_3791->getOutput(0),MatrixOperation::kNONE,*res_804->getOutput(0),MatrixOperation::kNONE);
  assert(res_3804 && "failed to build Node_5974 (type:matmul)");
  res_3804->getOutput(0)->setName("Node_5974:0");
  auto res_3805=network->addElementWise(*res_3804->getOutput(0),*res_805->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3805 && "failed to build Node_5974_add (type:add)");
  res_3805->getOutput(0)->setName("Node_5974_add:0");
  auto res_3806=network->addShuffle(*res_3805->getOutput(0));
  res_3806->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3806 && "failed to build Node_6002 (type:reshape)");
  res_3806->getOutput(0)->setName("Node_6002:0");
  auto res_3807=network->addShuffle(*res_3806->getOutput(0));
  Permutation permute_3807;
  permute_3807.order[0]=1;
  permute_3807.order[1]=0;
  permute_3807.order[2]=2;
  res_3807->setFirstTranspose(permute_3807);
  assert(res_3807 && "failed to build Node_6004 (type:transpose)");
  res_3807->getOutput(0)->setName("Node_6004:0");
  auto res_3808=network->addMatrixMultiply(*res_3803->getOutput(0),MatrixOperation::kNONE,*res_3807->getOutput(0),MatrixOperation::kNONE);
  assert(res_3808 && "failed to build Node_6013 (type:matmul)");
  res_3808->getOutput(0)->setName("Node_6013:0");
  auto res_3809=network->addShuffle(*res_3808->getOutput(0));
  Permutation permute_3809;
  permute_3809.order[0]=1;
  permute_3809.order[1]=0;
  permute_3809.order[2]=2;
  res_3809->setFirstTranspose(permute_3809);
  assert(res_3809 && "failed to build Node_6015 (type:transpose)");
  res_3809->getOutput(0)->setName("Node_6015:0");
  auto res_3810=network->addIdentity(*res_3809->getOutput(0));
  assert(res_3810 && "failed to build Node_6016 (type:contiguous)");
  res_3810->getOutput(0)->setName("Node_6016:0");
  auto res_3811=network->addShuffle(*res_3810->getOutput(0));
  res_3811->setReshapeDimensions(Dims{2,{16,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3811 && "failed to build Node_6024 (type:reshape)");
  res_3811->getOutput(0)->setName("Node_6024:0");
  auto res_3812=network->addMatrixMultiply(*res_3811->getOutput(0),MatrixOperation::kNONE,*res_806->getOutput(0),MatrixOperation::kNONE);
  assert(res_3812 && "failed to build Node_6031 (type:matmul)");
  res_3812->getOutput(0)->setName("Node_6031:0");
  auto res_3813=network->addElementWise(*res_3812->getOutput(0),*res_807->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3813 && "failed to build Node_6031_add (type:add)");
  res_3813->getOutput(0)->setName("Node_6031_add:0");
  auto res_3814=network->addElementWise(*res_3813->getOutput(0),*res_3791->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3814 && "failed to build Node_6035 (type:add)");
  res_3814->getOutput(0)->setName("Node_6035:0");
  auto res_3815=network->addReduce(*res_3814->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3815 && "failed to build Node_6042_mean (type:mean)");
  res_3815->getOutput(0)->setName("Node_6042_mean:0");
  auto res_3816=network->addElementWise(*res_3814->getOutput(0),*res_3815->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3816 && "failed to build Node_6042_diff (type:sub)");
  res_3816->getOutput(0)->setName("Node_6042_diff:0");
  auto res_3817=network->addElementWise(*res_3816->getOutput(0),*res_1235->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3817 && "failed to build Node_6042_power (type:power)");
  res_3817->getOutput(0)->setName("Node_6042_power:0");
  auto res_3818=network->addReduce(*res_3817->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3818 && "failed to build Node_6042_var (type:mean)");
  res_3818->getOutput(0)->setName("Node_6042_var:0");
  auto res_3819=network->addElementWise(*res_3818->getOutput(0),*res_1109->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3819 && "failed to build Node_6042_modify (type:add)");
  res_3819->getOutput(0)->setName("Node_6042_modify:0");
  auto res_3820=network->addUnary(*res_3819->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3820 && "failed to build Node_6042_sqrt (type:power)");
  res_3820->getOutput(0)->setName("Node_6042_sqrt:0");
  auto res_3821=network->addElementWise(*res_3816->getOutput(0),*res_3820->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3821 && "failed to build Node_6042_rsqrt (type:divide)");
  res_3821->getOutput(0)->setName("Node_6042_rsqrt:0");
  auto res_3822=network->addElementWise(*res_3821->getOutput(0),*res_254->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3822 && "failed to build Node_6042_mul (type:multiply)");
  res_3822->getOutput(0)->setName("Node_6042_mul:0");
  auto res_3823=network->addElementWise(*res_3822->getOutput(0),*res_255->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3823 && "failed to build Node_6042 (type:add)");
  res_3823->getOutput(0)->setName("Node_6042:0");
  auto res_3824=network->addMatrixMultiply(*res_3823->getOutput(0),MatrixOperation::kNONE,*res_808->getOutput(0),MatrixOperation::kNONE);
  assert(res_3824 && "failed to build Node_6048 (type:matmul)");
  res_3824->getOutput(0)->setName("Node_6048:0");
  auto res_3825=network->addElementWise(*res_3824->getOutput(0),*res_809->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3825 && "failed to build Node_6048_add (type:add)");
  res_3825->getOutput(0)->setName("Node_6048_add:0");
  ITensor* inputTensors_3826[1] = {res_3825->getOutput(0)};
  auto plugin_3826=GELU_Plugin("gelu");
  auto res_3826=network->addPluginV2(inputTensors_3826,1,plugin_3826);
  assert(res_3826 && "failed to build Node_6049 (type:gelu)");
  res_3826->getOutput(0)->setName("Node_6049:0");
  auto res_3827=network->addMatrixMultiply(*res_3826->getOutput(0),MatrixOperation::kNONE,*res_810->getOutput(0),MatrixOperation::kNONE);
  assert(res_3827 && "failed to build Node_6056 (type:matmul)");
  res_3827->getOutput(0)->setName("Node_6056:0");
  auto res_3828=network->addElementWise(*res_3827->getOutput(0),*res_811->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3828 && "failed to build Node_6056_add (type:add)");
  res_3828->getOutput(0)->setName("Node_6056_add:0");
  auto res_3829=network->addElementWise(*res_3828->getOutput(0),*res_3823->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3829 && "failed to build Node_6060 (type:add)");
  res_3829->getOutput(0)->setName("Node_6060:0");
  auto res_3830=network->addReduce(*res_3829->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3830 && "failed to build Node_6067_mean (type:mean)");
  res_3830->getOutput(0)->setName("Node_6067_mean:0");
  auto res_3831=network->addElementWise(*res_3829->getOutput(0),*res_3830->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3831 && "failed to build Node_6067_diff (type:sub)");
  res_3831->getOutput(0)->setName("Node_6067_diff:0");
  auto res_3832=network->addElementWise(*res_3831->getOutput(0),*res_1236->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3832 && "failed to build Node_6067_power (type:power)");
  res_3832->getOutput(0)->setName("Node_6067_power:0");
  auto res_3833=network->addReduce(*res_3832->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3833 && "failed to build Node_6067_var (type:mean)");
  res_3833->getOutput(0)->setName("Node_6067_var:0");
  auto res_3834=network->addElementWise(*res_3833->getOutput(0),*res_1110->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3834 && "failed to build Node_6067_modify (type:add)");
  res_3834->getOutput(0)->setName("Node_6067_modify:0");
  auto res_3835=network->addUnary(*res_3834->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3835 && "failed to build Node_6067_sqrt (type:power)");
  res_3835->getOutput(0)->setName("Node_6067_sqrt:0");
  auto res_3836=network->addElementWise(*res_3831->getOutput(0),*res_3835->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3836 && "failed to build Node_6067_rsqrt (type:divide)");
  res_3836->getOutput(0)->setName("Node_6067_rsqrt:0");
  auto res_3837=network->addElementWise(*res_3836->getOutput(0),*res_256->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3837 && "failed to build Node_6067_mul (type:multiply)");
  res_3837->getOutput(0)->setName("Node_6067_mul:0");
  auto res_3838=network->addElementWise(*res_3837->getOutput(0),*res_257->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3838 && "failed to build Node_6067 (type:add)");
  res_3838->getOutput(0)->setName("Node_6067:0");
  auto res_3839=network->addMatrixMultiply(*res_3838->getOutput(0),MatrixOperation::kNONE,*res_812->getOutput(0),MatrixOperation::kNONE);
  assert(res_3839 && "failed to build Node_6084 (type:matmul)");
  res_3839->getOutput(0)->setName("Node_6084:0");
  auto res_3840=network->addElementWise(*res_3839->getOutput(0),*res_813->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3840 && "failed to build Node_6084_add (type:add)");
  res_3840->getOutput(0)->setName("Node_6084_add:0");
  auto res_3841=network->addShuffle(*res_3840->getOutput(0));
  res_3841->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3841 && "failed to build Node_6104 (type:reshape)");
  res_3841->getOutput(0)->setName("Node_6104:0");
  auto res_3842=network->addShuffle(*res_3841->getOutput(0));
  Permutation permute_3842;
  permute_3842.order[0]=1;
  permute_3842.order[1]=0;
  permute_3842.order[2]=2;
  res_3842->setFirstTranspose(permute_3842);
  assert(res_3842 && "failed to build Node_6106 (type:transpose)");
  res_3842->getOutput(0)->setName("Node_6106:0");
  auto res_3843=network->addMatrixMultiply(*res_3838->getOutput(0),MatrixOperation::kNONE,*res_814->getOutput(0),MatrixOperation::kNONE);
  assert(res_3843 && "failed to build Node_6090 (type:matmul)");
  res_3843->getOutput(0)->setName("Node_6090:0");
  auto res_3844=network->addElementWise(*res_3843->getOutput(0),*res_815->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3844 && "failed to build Node_6090_add (type:add)");
  res_3844->getOutput(0)->setName("Node_6090_add:0");
  auto res_3845=network->addShuffle(*res_3844->getOutput(0));
  res_3845->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3845 && "failed to build Node_6114 (type:reshape)");
  res_3845->getOutput(0)->setName("Node_6114:0");
  auto res_3846=network->addShuffle(*res_3845->getOutput(0));
  Permutation permute_3846;
  permute_3846.order[0]=1;
  permute_3846.order[1]=2;
  permute_3846.order[2]=0;
  res_3846->setFirstTranspose(permute_3846);
  assert(res_3846 && "failed to build Node_6127 (type:transpose)");
  res_3846->getOutput(0)->setName("Node_6127:0");
  auto res_3847=network->addMatrixMultiply(*res_3842->getOutput(0),MatrixOperation::kNONE,*res_3846->getOutput(0),MatrixOperation::kNONE);
  assert(res_3847 && "failed to build Node_6128 (type:matmul)");
  res_3847->getOutput(0)->setName("Node_6128:0");
  auto res_3848=network->addElementWise(*res_3847->getOutput(0),*res_993->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3848 && "failed to build Node_6129 (type:divide)");
  res_3848->getOutput(0)->setName("Node_6129:0");
  auto res_3849=network->addElementWise(*res_3848->getOutput(0),*res_3681->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3849 && "failed to build Node_6130 (type:add)");
  res_3849->getOutput(0)->setName("Node_6130:0");
  auto res_3850=network->addSoftMax(*res_3849->getOutput(0));
  res_3850->setAxes(4);
  assert(res_3850 && "failed to build Node_6131 (type:softmax)");
  res_3850->getOutput(0)->setName("Node_6131:0");
  auto res_3851=network->addMatrixMultiply(*res_3838->getOutput(0),MatrixOperation::kNONE,*res_816->getOutput(0),MatrixOperation::kNONE);
  assert(res_3851 && "failed to build Node_6096 (type:matmul)");
  res_3851->getOutput(0)->setName("Node_6096:0");
  auto res_3852=network->addElementWise(*res_3851->getOutput(0),*res_817->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3852 && "failed to build Node_6096_add (type:add)");
  res_3852->getOutput(0)->setName("Node_6096_add:0");
  auto res_3853=network->addShuffle(*res_3852->getOutput(0));
  res_3853->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3853 && "failed to build Node_6124 (type:reshape)");
  res_3853->getOutput(0)->setName("Node_6124:0");
  auto res_3854=network->addShuffle(*res_3853->getOutput(0));
  Permutation permute_3854;
  permute_3854.order[0]=1;
  permute_3854.order[1]=0;
  permute_3854.order[2]=2;
  res_3854->setFirstTranspose(permute_3854);
  assert(res_3854 && "failed to build Node_6126 (type:transpose)");
  res_3854->getOutput(0)->setName("Node_6126:0");
  auto res_3855=network->addMatrixMultiply(*res_3850->getOutput(0),MatrixOperation::kNONE,*res_3854->getOutput(0),MatrixOperation::kNONE);
  assert(res_3855 && "failed to build Node_6135 (type:matmul)");
  res_3855->getOutput(0)->setName("Node_6135:0");
  auto res_3856=network->addShuffle(*res_3855->getOutput(0));
  Permutation permute_3856;
  permute_3856.order[0]=1;
  permute_3856.order[1]=0;
  permute_3856.order[2]=2;
  res_3856->setFirstTranspose(permute_3856);
  assert(res_3856 && "failed to build Node_6137 (type:transpose)");
  res_3856->getOutput(0)->setName("Node_6137:0");
  auto res_3857=network->addIdentity(*res_3856->getOutput(0));
  assert(res_3857 && "failed to build Node_6138 (type:contiguous)");
  res_3857->getOutput(0)->setName("Node_6138:0");
  auto res_3858=network->addShuffle(*res_3857->getOutput(0));
  res_3858->setReshapeDimensions(Dims{2,{16,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3858 && "failed to build Node_6146 (type:reshape)");
  res_3858->getOutput(0)->setName("Node_6146:0");
  auto res_3859=network->addMatrixMultiply(*res_3858->getOutput(0),MatrixOperation::kNONE,*res_818->getOutput(0),MatrixOperation::kNONE);
  assert(res_3859 && "failed to build Node_6153 (type:matmul)");
  res_3859->getOutput(0)->setName("Node_6153:0");
  auto res_3860=network->addElementWise(*res_3859->getOutput(0),*res_819->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3860 && "failed to build Node_6153_add (type:add)");
  res_3860->getOutput(0)->setName("Node_6153_add:0");
  auto res_3861=network->addElementWise(*res_3860->getOutput(0),*res_3838->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3861 && "failed to build Node_6157 (type:add)");
  res_3861->getOutput(0)->setName("Node_6157:0");
  auto res_3862=network->addReduce(*res_3861->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3862 && "failed to build Node_6164_mean (type:mean)");
  res_3862->getOutput(0)->setName("Node_6164_mean:0");
  auto res_3863=network->addElementWise(*res_3861->getOutput(0),*res_3862->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3863 && "failed to build Node_6164_diff (type:sub)");
  res_3863->getOutput(0)->setName("Node_6164_diff:0");
  auto res_3864=network->addElementWise(*res_3863->getOutput(0),*res_1237->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3864 && "failed to build Node_6164_power (type:power)");
  res_3864->getOutput(0)->setName("Node_6164_power:0");
  auto res_3865=network->addReduce(*res_3864->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3865 && "failed to build Node_6164_var (type:mean)");
  res_3865->getOutput(0)->setName("Node_6164_var:0");
  auto res_3866=network->addElementWise(*res_3865->getOutput(0),*res_1111->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3866 && "failed to build Node_6164_modify (type:add)");
  res_3866->getOutput(0)->setName("Node_6164_modify:0");
  auto res_3867=network->addUnary(*res_3866->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3867 && "failed to build Node_6164_sqrt (type:power)");
  res_3867->getOutput(0)->setName("Node_6164_sqrt:0");
  auto res_3868=network->addElementWise(*res_3863->getOutput(0),*res_3867->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3868 && "failed to build Node_6164_rsqrt (type:divide)");
  res_3868->getOutput(0)->setName("Node_6164_rsqrt:0");
  auto res_3869=network->addElementWise(*res_3868->getOutput(0),*res_258->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3869 && "failed to build Node_6164_mul (type:multiply)");
  res_3869->getOutput(0)->setName("Node_6164_mul:0");
  auto res_3870=network->addElementWise(*res_3869->getOutput(0),*res_259->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3870 && "failed to build Node_6164 (type:add)");
  res_3870->getOutput(0)->setName("Node_6164:0");
  auto res_3871=network->addMatrixMultiply(*res_3870->getOutput(0),MatrixOperation::kNONE,*res_820->getOutput(0),MatrixOperation::kNONE);
  assert(res_3871 && "failed to build Node_6170 (type:matmul)");
  res_3871->getOutput(0)->setName("Node_6170:0");
  auto res_3872=network->addElementWise(*res_3871->getOutput(0),*res_821->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3872 && "failed to build Node_6170_add (type:add)");
  res_3872->getOutput(0)->setName("Node_6170_add:0");
  ITensor* inputTensors_3873[1] = {res_3872->getOutput(0)};
  auto plugin_3873=GELU_Plugin("gelu");
  auto res_3873=network->addPluginV2(inputTensors_3873,1,plugin_3873);
  assert(res_3873 && "failed to build Node_6171 (type:gelu)");
  res_3873->getOutput(0)->setName("Node_6171:0");
  auto res_3874=network->addMatrixMultiply(*res_3873->getOutput(0),MatrixOperation::kNONE,*res_822->getOutput(0),MatrixOperation::kNONE);
  assert(res_3874 && "failed to build Node_6178 (type:matmul)");
  res_3874->getOutput(0)->setName("Node_6178:0");
  auto res_3875=network->addElementWise(*res_3874->getOutput(0),*res_823->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3875 && "failed to build Node_6178_add (type:add)");
  res_3875->getOutput(0)->setName("Node_6178_add:0");
  auto res_3876=network->addElementWise(*res_3875->getOutput(0),*res_3870->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3876 && "failed to build Node_6182 (type:add)");
  res_3876->getOutput(0)->setName("Node_6182:0");
  auto res_3877=network->addReduce(*res_3876->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3877 && "failed to build Node_6189_mean (type:mean)");
  res_3877->getOutput(0)->setName("Node_6189_mean:0");
  auto res_3878=network->addElementWise(*res_3876->getOutput(0),*res_3877->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3878 && "failed to build Node_6189_diff (type:sub)");
  res_3878->getOutput(0)->setName("Node_6189_diff:0");
  auto res_3879=network->addElementWise(*res_3878->getOutput(0),*res_1238->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3879 && "failed to build Node_6189_power (type:power)");
  res_3879->getOutput(0)->setName("Node_6189_power:0");
  auto res_3880=network->addReduce(*res_3879->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3880 && "failed to build Node_6189_var (type:mean)");
  res_3880->getOutput(0)->setName("Node_6189_var:0");
  auto res_3881=network->addElementWise(*res_3880->getOutput(0),*res_1112->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3881 && "failed to build Node_6189_modify (type:add)");
  res_3881->getOutput(0)->setName("Node_6189_modify:0");
  auto res_3882=network->addUnary(*res_3881->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3882 && "failed to build Node_6189_sqrt (type:power)");
  res_3882->getOutput(0)->setName("Node_6189_sqrt:0");
  auto res_3883=network->addElementWise(*res_3878->getOutput(0),*res_3882->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3883 && "failed to build Node_6189_rsqrt (type:divide)");
  res_3883->getOutput(0)->setName("Node_6189_rsqrt:0");
  auto res_3884=network->addElementWise(*res_3883->getOutput(0),*res_260->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3884 && "failed to build Node_6189_mul (type:multiply)");
  res_3884->getOutput(0)->setName("Node_6189_mul:0");
  auto res_3885=network->addElementWise(*res_3884->getOutput(0),*res_261->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3885 && "failed to build Node_6189 (type:add)");
  res_3885->getOutput(0)->setName("Node_6189:0");
  auto res_3886=network->addMatrixMultiply(*res_3885->getOutput(0),MatrixOperation::kNONE,*res_824->getOutput(0),MatrixOperation::kNONE);
  assert(res_3886 && "failed to build Node_6206 (type:matmul)");
  res_3886->getOutput(0)->setName("Node_6206:0");
  auto res_3887=network->addElementWise(*res_3886->getOutput(0),*res_825->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3887 && "failed to build Node_6206_add (type:add)");
  res_3887->getOutput(0)->setName("Node_6206_add:0");
  auto res_3888=network->addShuffle(*res_3887->getOutput(0));
  res_3888->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3888 && "failed to build Node_6226 (type:reshape)");
  res_3888->getOutput(0)->setName("Node_6226:0");
  auto res_3889=network->addShuffle(*res_3888->getOutput(0));
  Permutation permute_3889;
  permute_3889.order[0]=1;
  permute_3889.order[1]=0;
  permute_3889.order[2]=2;
  res_3889->setFirstTranspose(permute_3889);
  assert(res_3889 && "failed to build Node_6228 (type:transpose)");
  res_3889->getOutput(0)->setName("Node_6228:0");
  auto res_3890=network->addMatrixMultiply(*res_3885->getOutput(0),MatrixOperation::kNONE,*res_826->getOutput(0),MatrixOperation::kNONE);
  assert(res_3890 && "failed to build Node_6212 (type:matmul)");
  res_3890->getOutput(0)->setName("Node_6212:0");
  auto res_3891=network->addElementWise(*res_3890->getOutput(0),*res_827->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3891 && "failed to build Node_6212_add (type:add)");
  res_3891->getOutput(0)->setName("Node_6212_add:0");
  auto res_3892=network->addShuffle(*res_3891->getOutput(0));
  res_3892->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3892 && "failed to build Node_6236 (type:reshape)");
  res_3892->getOutput(0)->setName("Node_6236:0");
  auto res_3893=network->addShuffle(*res_3892->getOutput(0));
  Permutation permute_3893;
  permute_3893.order[0]=1;
  permute_3893.order[1]=2;
  permute_3893.order[2]=0;
  res_3893->setFirstTranspose(permute_3893);
  assert(res_3893 && "failed to build Node_6249 (type:transpose)");
  res_3893->getOutput(0)->setName("Node_6249:0");
  auto res_3894=network->addMatrixMultiply(*res_3889->getOutput(0),MatrixOperation::kNONE,*res_3893->getOutput(0),MatrixOperation::kNONE);
  assert(res_3894 && "failed to build Node_6250 (type:matmul)");
  res_3894->getOutput(0)->setName("Node_6250:0");
  auto res_3895=network->addElementWise(*res_3894->getOutput(0),*res_994->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3895 && "failed to build Node_6251 (type:divide)");
  res_3895->getOutput(0)->setName("Node_6251:0");
  auto res_3896=network->addElementWise(*res_3895->getOutput(0),*res_3681->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3896 && "failed to build Node_6252 (type:add)");
  res_3896->getOutput(0)->setName("Node_6252:0");
  auto res_3897=network->addSoftMax(*res_3896->getOutput(0));
  res_3897->setAxes(4);
  assert(res_3897 && "failed to build Node_6253 (type:softmax)");
  res_3897->getOutput(0)->setName("Node_6253:0");
  auto res_3898=network->addMatrixMultiply(*res_3885->getOutput(0),MatrixOperation::kNONE,*res_828->getOutput(0),MatrixOperation::kNONE);
  assert(res_3898 && "failed to build Node_6218 (type:matmul)");
  res_3898->getOutput(0)->setName("Node_6218:0");
  auto res_3899=network->addElementWise(*res_3898->getOutput(0),*res_829->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3899 && "failed to build Node_6218_add (type:add)");
  res_3899->getOutput(0)->setName("Node_6218_add:0");
  auto res_3900=network->addShuffle(*res_3899->getOutput(0));
  res_3900->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3900 && "failed to build Node_6246 (type:reshape)");
  res_3900->getOutput(0)->setName("Node_6246:0");
  auto res_3901=network->addShuffle(*res_3900->getOutput(0));
  Permutation permute_3901;
  permute_3901.order[0]=1;
  permute_3901.order[1]=0;
  permute_3901.order[2]=2;
  res_3901->setFirstTranspose(permute_3901);
  assert(res_3901 && "failed to build Node_6248 (type:transpose)");
  res_3901->getOutput(0)->setName("Node_6248:0");
  auto res_3902=network->addMatrixMultiply(*res_3897->getOutput(0),MatrixOperation::kNONE,*res_3901->getOutput(0),MatrixOperation::kNONE);
  assert(res_3902 && "failed to build Node_6257 (type:matmul)");
  res_3902->getOutput(0)->setName("Node_6257:0");
  auto res_3903=network->addShuffle(*res_3902->getOutput(0));
  Permutation permute_3903;
  permute_3903.order[0]=1;
  permute_3903.order[1]=0;
  permute_3903.order[2]=2;
  res_3903->setFirstTranspose(permute_3903);
  assert(res_3903 && "failed to build Node_6259 (type:transpose)");
  res_3903->getOutput(0)->setName("Node_6259:0");
  auto res_3904=network->addIdentity(*res_3903->getOutput(0));
  assert(res_3904 && "failed to build Node_6260 (type:contiguous)");
  res_3904->getOutput(0)->setName("Node_6260:0");
  auto res_3905=network->addShuffle(*res_3904->getOutput(0));
  res_3905->setReshapeDimensions(Dims{2,{16,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3905 && "failed to build Node_6268 (type:reshape)");
  res_3905->getOutput(0)->setName("Node_6268:0");
  auto res_3906=network->addMatrixMultiply(*res_3905->getOutput(0),MatrixOperation::kNONE,*res_830->getOutput(0),MatrixOperation::kNONE);
  assert(res_3906 && "failed to build Node_6275 (type:matmul)");
  res_3906->getOutput(0)->setName("Node_6275:0");
  auto res_3907=network->addElementWise(*res_3906->getOutput(0),*res_831->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3907 && "failed to build Node_6275_add (type:add)");
  res_3907->getOutput(0)->setName("Node_6275_add:0");
  auto res_3908=network->addElementWise(*res_3907->getOutput(0),*res_3885->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3908 && "failed to build Node_6279 (type:add)");
  res_3908->getOutput(0)->setName("Node_6279:0");
  auto res_3909=network->addReduce(*res_3908->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3909 && "failed to build Node_6286_mean (type:mean)");
  res_3909->getOutput(0)->setName("Node_6286_mean:0");
  auto res_3910=network->addElementWise(*res_3908->getOutput(0),*res_3909->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3910 && "failed to build Node_6286_diff (type:sub)");
  res_3910->getOutput(0)->setName("Node_6286_diff:0");
  auto res_3911=network->addElementWise(*res_3910->getOutput(0),*res_1239->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3911 && "failed to build Node_6286_power (type:power)");
  res_3911->getOutput(0)->setName("Node_6286_power:0");
  auto res_3912=network->addReduce(*res_3911->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3912 && "failed to build Node_6286_var (type:mean)");
  res_3912->getOutput(0)->setName("Node_6286_var:0");
  auto res_3913=network->addElementWise(*res_3912->getOutput(0),*res_1113->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3913 && "failed to build Node_6286_modify (type:add)");
  res_3913->getOutput(0)->setName("Node_6286_modify:0");
  auto res_3914=network->addUnary(*res_3913->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3914 && "failed to build Node_6286_sqrt (type:power)");
  res_3914->getOutput(0)->setName("Node_6286_sqrt:0");
  auto res_3915=network->addElementWise(*res_3910->getOutput(0),*res_3914->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3915 && "failed to build Node_6286_rsqrt (type:divide)");
  res_3915->getOutput(0)->setName("Node_6286_rsqrt:0");
  auto res_3916=network->addElementWise(*res_3915->getOutput(0),*res_262->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3916 && "failed to build Node_6286_mul (type:multiply)");
  res_3916->getOutput(0)->setName("Node_6286_mul:0");
  auto res_3917=network->addElementWise(*res_3916->getOutput(0),*res_263->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3917 && "failed to build Node_6286 (type:add)");
  res_3917->getOutput(0)->setName("Node_6286:0");
  auto res_3918=network->addMatrixMultiply(*res_3917->getOutput(0),MatrixOperation::kNONE,*res_832->getOutput(0),MatrixOperation::kNONE);
  assert(res_3918 && "failed to build Node_6292 (type:matmul)");
  res_3918->getOutput(0)->setName("Node_6292:0");
  auto res_3919=network->addElementWise(*res_3918->getOutput(0),*res_833->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3919 && "failed to build Node_6292_add (type:add)");
  res_3919->getOutput(0)->setName("Node_6292_add:0");
  ITensor* inputTensors_3920[1] = {res_3919->getOutput(0)};
  auto plugin_3920=GELU_Plugin("gelu");
  auto res_3920=network->addPluginV2(inputTensors_3920,1,plugin_3920);
  assert(res_3920 && "failed to build Node_6293 (type:gelu)");
  res_3920->getOutput(0)->setName("Node_6293:0");
  auto res_3921=network->addMatrixMultiply(*res_3920->getOutput(0),MatrixOperation::kNONE,*res_834->getOutput(0),MatrixOperation::kNONE);
  assert(res_3921 && "failed to build Node_6300 (type:matmul)");
  res_3921->getOutput(0)->setName("Node_6300:0");
  auto res_3922=network->addElementWise(*res_3921->getOutput(0),*res_835->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3922 && "failed to build Node_6300_add (type:add)");
  res_3922->getOutput(0)->setName("Node_6300_add:0");
  auto res_3923=network->addElementWise(*res_3922->getOutput(0),*res_3917->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3923 && "failed to build Node_6304 (type:add)");
  res_3923->getOutput(0)->setName("Node_6304:0");
  auto res_3924=network->addReduce(*res_3923->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3924 && "failed to build Node_6311_mean (type:mean)");
  res_3924->getOutput(0)->setName("Node_6311_mean:0");
  auto res_3925=network->addElementWise(*res_3923->getOutput(0),*res_3924->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3925 && "failed to build Node_6311_diff (type:sub)");
  res_3925->getOutput(0)->setName("Node_6311_diff:0");
  auto res_3926=network->addElementWise(*res_3925->getOutput(0),*res_1240->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3926 && "failed to build Node_6311_power (type:power)");
  res_3926->getOutput(0)->setName("Node_6311_power:0");
  auto res_3927=network->addReduce(*res_3926->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3927 && "failed to build Node_6311_var (type:mean)");
  res_3927->getOutput(0)->setName("Node_6311_var:0");
  auto res_3928=network->addElementWise(*res_3927->getOutput(0),*res_1114->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3928 && "failed to build Node_6311_modify (type:add)");
  res_3928->getOutput(0)->setName("Node_6311_modify:0");
  auto res_3929=network->addUnary(*res_3928->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3929 && "failed to build Node_6311_sqrt (type:power)");
  res_3929->getOutput(0)->setName("Node_6311_sqrt:0");
  auto res_3930=network->addElementWise(*res_3925->getOutput(0),*res_3929->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3930 && "failed to build Node_6311_rsqrt (type:divide)");
  res_3930->getOutput(0)->setName("Node_6311_rsqrt:0");
  auto res_3931=network->addElementWise(*res_3930->getOutput(0),*res_264->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3931 && "failed to build Node_6311_mul (type:multiply)");
  res_3931->getOutput(0)->setName("Node_6311_mul:0");
  auto res_3932=network->addElementWise(*res_3931->getOutput(0),*res_265->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3932 && "failed to build Node_6311 (type:add)");
  res_3932->getOutput(0)->setName("Node_6311:0");
  auto res_3933=network->addMatrixMultiply(*res_3932->getOutput(0),MatrixOperation::kNONE,*res_836->getOutput(0),MatrixOperation::kNONE);
  assert(res_3933 && "failed to build Node_6328 (type:matmul)");
  res_3933->getOutput(0)->setName("Node_6328:0");
  auto res_3934=network->addElementWise(*res_3933->getOutput(0),*res_837->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3934 && "failed to build Node_6328_add (type:add)");
  res_3934->getOutput(0)->setName("Node_6328_add:0");
  auto res_3935=network->addShuffle(*res_3934->getOutput(0));
  res_3935->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3935 && "failed to build Node_6348 (type:reshape)");
  res_3935->getOutput(0)->setName("Node_6348:0");
  auto res_3936=network->addShuffle(*res_3935->getOutput(0));
  Permutation permute_3936;
  permute_3936.order[0]=1;
  permute_3936.order[1]=0;
  permute_3936.order[2]=2;
  res_3936->setFirstTranspose(permute_3936);
  assert(res_3936 && "failed to build Node_6350 (type:transpose)");
  res_3936->getOutput(0)->setName("Node_6350:0");
  auto res_3937=network->addMatrixMultiply(*res_3932->getOutput(0),MatrixOperation::kNONE,*res_838->getOutput(0),MatrixOperation::kNONE);
  assert(res_3937 && "failed to build Node_6334 (type:matmul)");
  res_3937->getOutput(0)->setName("Node_6334:0");
  auto res_3938=network->addElementWise(*res_3937->getOutput(0),*res_839->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3938 && "failed to build Node_6334_add (type:add)");
  res_3938->getOutput(0)->setName("Node_6334_add:0");
  auto res_3939=network->addShuffle(*res_3938->getOutput(0));
  res_3939->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3939 && "failed to build Node_6358 (type:reshape)");
  res_3939->getOutput(0)->setName("Node_6358:0");
  auto res_3940=network->addShuffle(*res_3939->getOutput(0));
  Permutation permute_3940;
  permute_3940.order[0]=1;
  permute_3940.order[1]=2;
  permute_3940.order[2]=0;
  res_3940->setFirstTranspose(permute_3940);
  assert(res_3940 && "failed to build Node_6371 (type:transpose)");
  res_3940->getOutput(0)->setName("Node_6371:0");
  auto res_3941=network->addMatrixMultiply(*res_3936->getOutput(0),MatrixOperation::kNONE,*res_3940->getOutput(0),MatrixOperation::kNONE);
  assert(res_3941 && "failed to build Node_6372 (type:matmul)");
  res_3941->getOutput(0)->setName("Node_6372:0");
  auto res_3942=network->addElementWise(*res_3941->getOutput(0),*res_995->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3942 && "failed to build Node_6373 (type:divide)");
  res_3942->getOutput(0)->setName("Node_6373:0");
  auto res_3943=network->addElementWise(*res_3942->getOutput(0),*res_3681->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3943 && "failed to build Node_6374 (type:add)");
  res_3943->getOutput(0)->setName("Node_6374:0");
  auto res_3944=network->addSoftMax(*res_3943->getOutput(0));
  res_3944->setAxes(4);
  assert(res_3944 && "failed to build Node_6375 (type:softmax)");
  res_3944->getOutput(0)->setName("Node_6375:0");
  auto res_3945=network->addMatrixMultiply(*res_3932->getOutput(0),MatrixOperation::kNONE,*res_840->getOutput(0),MatrixOperation::kNONE);
  assert(res_3945 && "failed to build Node_6340 (type:matmul)");
  res_3945->getOutput(0)->setName("Node_6340:0");
  auto res_3946=network->addElementWise(*res_3945->getOutput(0),*res_841->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3946 && "failed to build Node_6340_add (type:add)");
  res_3946->getOutput(0)->setName("Node_6340_add:0");
  auto res_3947=network->addShuffle(*res_3946->getOutput(0));
  res_3947->setReshapeDimensions(Dims3{16,6,32});
  assert(res_3947 && "failed to build Node_6368 (type:reshape)");
  res_3947->getOutput(0)->setName("Node_6368:0");
  auto res_3948=network->addShuffle(*res_3947->getOutput(0));
  Permutation permute_3948;
  permute_3948.order[0]=1;
  permute_3948.order[1]=0;
  permute_3948.order[2]=2;
  res_3948->setFirstTranspose(permute_3948);
  assert(res_3948 && "failed to build Node_6370 (type:transpose)");
  res_3948->getOutput(0)->setName("Node_6370:0");
  auto res_3949=network->addMatrixMultiply(*res_3944->getOutput(0),MatrixOperation::kNONE,*res_3948->getOutput(0),MatrixOperation::kNONE);
  assert(res_3949 && "failed to build Node_6379 (type:matmul)");
  res_3949->getOutput(0)->setName("Node_6379:0");
  auto res_3950=network->addShuffle(*res_3949->getOutput(0));
  Permutation permute_3950;
  permute_3950.order[0]=1;
  permute_3950.order[1]=0;
  permute_3950.order[2]=2;
  res_3950->setFirstTranspose(permute_3950);
  assert(res_3950 && "failed to build Node_6381 (type:transpose)");
  res_3950->getOutput(0)->setName("Node_6381:0");
  auto res_3951=network->addIdentity(*res_3950->getOutput(0));
  assert(res_3951 && "failed to build Node_6382 (type:contiguous)");
  res_3951->getOutput(0)->setName("Node_6382:0");
  auto res_3952=network->addShuffle(*res_3951->getOutput(0));
  res_3952->setReshapeDimensions(Dims{2,{16,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3952 && "failed to build Node_6390 (type:reshape)");
  res_3952->getOutput(0)->setName("Node_6390:0");
  auto res_3953=network->addMatrixMultiply(*res_3952->getOutput(0),MatrixOperation::kNONE,*res_842->getOutput(0),MatrixOperation::kNONE);
  assert(res_3953 && "failed to build Node_6397 (type:matmul)");
  res_3953->getOutput(0)->setName("Node_6397:0");
  auto res_3954=network->addElementWise(*res_3953->getOutput(0),*res_843->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3954 && "failed to build Node_6397_add (type:add)");
  res_3954->getOutput(0)->setName("Node_6397_add:0");
  auto res_3955=network->addElementWise(*res_3954->getOutput(0),*res_3932->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3955 && "failed to build Node_6401 (type:add)");
  res_3955->getOutput(0)->setName("Node_6401:0");
  auto res_3956=network->addReduce(*res_3955->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3956 && "failed to build Node_6408_mean (type:mean)");
  res_3956->getOutput(0)->setName("Node_6408_mean:0");
  auto res_3957=network->addElementWise(*res_3955->getOutput(0),*res_3956->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3957 && "failed to build Node_6408_diff (type:sub)");
  res_3957->getOutput(0)->setName("Node_6408_diff:0");
  auto res_3958=network->addElementWise(*res_3957->getOutput(0),*res_1241->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3958 && "failed to build Node_6408_power (type:power)");
  res_3958->getOutput(0)->setName("Node_6408_power:0");
  auto res_3959=network->addReduce(*res_3958->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3959 && "failed to build Node_6408_var (type:mean)");
  res_3959->getOutput(0)->setName("Node_6408_var:0");
  auto res_3960=network->addElementWise(*res_3959->getOutput(0),*res_1115->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3960 && "failed to build Node_6408_modify (type:add)");
  res_3960->getOutput(0)->setName("Node_6408_modify:0");
  auto res_3961=network->addUnary(*res_3960->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3961 && "failed to build Node_6408_sqrt (type:power)");
  res_3961->getOutput(0)->setName("Node_6408_sqrt:0");
  auto res_3962=network->addElementWise(*res_3957->getOutput(0),*res_3961->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3962 && "failed to build Node_6408_rsqrt (type:divide)");
  res_3962->getOutput(0)->setName("Node_6408_rsqrt:0");
  auto res_3963=network->addElementWise(*res_3962->getOutput(0),*res_266->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3963 && "failed to build Node_6408_mul (type:multiply)");
  res_3963->getOutput(0)->setName("Node_6408_mul:0");
  auto res_3964=network->addElementWise(*res_3963->getOutput(0),*res_267->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3964 && "failed to build Node_6408 (type:add)");
  res_3964->getOutput(0)->setName("Node_6408:0");
  auto res_3965=network->addMatrixMultiply(*res_3964->getOutput(0),MatrixOperation::kNONE,*res_844->getOutput(0),MatrixOperation::kNONE);
  assert(res_3965 && "failed to build Node_6414 (type:matmul)");
  res_3965->getOutput(0)->setName("Node_6414:0");
  auto res_3966=network->addElementWise(*res_3965->getOutput(0),*res_845->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3966 && "failed to build Node_6414_add (type:add)");
  res_3966->getOutput(0)->setName("Node_6414_add:0");
  ITensor* inputTensors_3967[1] = {res_3966->getOutput(0)};
  auto plugin_3967=GELU_Plugin("gelu");
  auto res_3967=network->addPluginV2(inputTensors_3967,1,plugin_3967);
  assert(res_3967 && "failed to build Node_6415 (type:gelu)");
  res_3967->getOutput(0)->setName("Node_6415:0");
  auto res_3968=network->addMatrixMultiply(*res_3967->getOutput(0),MatrixOperation::kNONE,*res_846->getOutput(0),MatrixOperation::kNONE);
  assert(res_3968 && "failed to build Node_6422 (type:matmul)");
  res_3968->getOutput(0)->setName("Node_6422:0");
  auto res_3969=network->addElementWise(*res_3968->getOutput(0),*res_847->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3969 && "failed to build Node_6422_add (type:add)");
  res_3969->getOutput(0)->setName("Node_6422_add:0");
  auto res_3970=network->addElementWise(*res_3969->getOutput(0),*res_3964->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3970 && "failed to build Node_6426 (type:add)");
  res_3970->getOutput(0)->setName("Node_6426:0");
  auto res_3971=network->addReduce(*res_3970->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3971 && "failed to build Node_6433_mean (type:mean)");
  res_3971->getOutput(0)->setName("Node_6433_mean:0");
  auto res_3972=network->addElementWise(*res_3970->getOutput(0),*res_3971->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3972 && "failed to build Node_6433_diff (type:sub)");
  res_3972->getOutput(0)->setName("Node_6433_diff:0");
  auto res_3973=network->addElementWise(*res_3972->getOutput(0),*res_1242->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3973 && "failed to build Node_6433_power (type:power)");
  res_3973->getOutput(0)->setName("Node_6433_power:0");
  auto res_3974=network->addReduce(*res_3973->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3974 && "failed to build Node_6433_var (type:mean)");
  res_3974->getOutput(0)->setName("Node_6433_var:0");
  auto res_3975=network->addElementWise(*res_3974->getOutput(0),*res_1116->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3975 && "failed to build Node_6433_modify (type:add)");
  res_3975->getOutput(0)->setName("Node_6433_modify:0");
  auto res_3976=network->addUnary(*res_3975->getOutput(0),UnaryOperation::kSQRT);
  assert(res_3976 && "failed to build Node_6433_sqrt (type:power)");
  res_3976->getOutput(0)->setName("Node_6433_sqrt:0");
  auto res_3977=network->addElementWise(*res_3972->getOutput(0),*res_3976->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_3977 && "failed to build Node_6433_rsqrt (type:divide)");
  res_3977->getOutput(0)->setName("Node_6433_rsqrt:0");
  auto res_3978=network->addElementWise(*res_3977->getOutput(0),*res_268->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3978 && "failed to build Node_6433_mul (type:multiply)");
  res_3978->getOutput(0)->setName("Node_6433_mul:0");
  auto res_3979=network->addElementWise(*res_3978->getOutput(0),*res_269->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3979 && "failed to build Node_6433 (type:add)");
  res_3979->getOutput(0)->setName("Node_6433:0");
  auto res_3980=network->addSlice(*res_3979->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_3980 && "failed to build Node_6437 (type:dlr_slice)");
  res_3980->getOutput(0)->setName("Node_6437:0");
  auto res_3981=network->addShuffle(*res_3980->getOutput(0));
  res_3981->setReshapeDimensions(Dims3{192,1,1});
  assert(res_3981 && "failed to build Node_6439_reshape (type:reshape)");
  res_3981->getOutput(0)->setName("Node_6439_reshape:0");
  auto res_3982=network->addFullyConnected(*res_3981->getOutput(0),192,mWeightsMap["weight_3982"],mWeightsMap["bias_3982"]);
  assert(res_3982 && "failed to build Node_6444 (type:dense)");
  res_3982->getOutput(0)->setName("Node_6444:0");
  auto res_3983=network->addShuffle(*res_3982->getOutput(0));
  res_3983->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_3983 && "failed to build Node_6444_reshape (type:reshape)");
  res_3983->getOutput(0)->setName("Node_6444_reshape:0");
  auto res_3984=network->addActivation(*res_3983->getOutput(0),ActivationType::kTANH);
  assert(res_3984 && "failed to build Node_6445 (type:tanh)");
  res_3984->getOutput(0)->setName("Node_6445:0");
  auto res_3985=network->addShuffle(*res_3984->getOutput(0));
  res_3985->setReshapeDimensions(Dims{2,{1,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_3985 && "failed to build Node_7284 (type:reshape)");
  res_3985->getOutput(0)->setName("Node_7284:0");
  ITensor* inputTensors_3986[9] = {res_1570->getOutput(0),res_1884->getOutput(0),res_2198->getOutput(0),res_2510->getOutput(0),res_2822->getOutput(0),res_3136->getOutput(0),res_3356->getOutput(0),res_3670->getOutput(0),res_3985->getOutput(0)};
  auto res_3986=network->addConcatenation(inputTensors_3986,9);
  res_3986->setAxis(0);
  assert(res_3986 && "failed to build Node_7286 (type:concat)");
  res_3986->getOutput(0)->setName("Node_7286:0");
  auto res_3987=network->addUnary(*res_3986->getOutput(0),UnaryOperation::kABS);
  assert(res_3987 && "failed to build Node_7296 (type:abs)");
  res_3987->getOutput(0)->setName("Node_7296:0");
  auto res_3988=network->addReduce(*res_3987->getOutput(0),ReduceOperation::kSUM,2,false);
  assert(res_3988 && "failed to build Node_7298 (type:dlr_sum)");
  res_3988->getOutput(0)->setName("Node_7298:0");
  ITensor* inputTensors_3989[1] = {res_3988->getOutput(0)};
  auto plugin_3989=MASK_Plugin("mask",1e-06,MaskMode::kGREATER_THAN);
  auto res_3989=network->addPluginV2(inputTensors_3989,1,plugin_3989);
  assert(res_3989 && "failed to build Node_7300 (type:mask)");
  res_3989->getOutput(0)->setName("Node_7300:0");
  ITensor* inputTensors_3990[2] = {res_1256->getOutput(0),res_3989->getOutput(0)};
  auto res_3990=network->addConcatenation(inputTensors_3990,2);
  res_3990->setAxis(0);
  assert(res_3990 && "failed to build Node_7324 (type:concat)");
  res_3990->getOutput(0)->setName("Node_7324:0");
  auto res_3991=network->addShuffle(*res_3990->getOutput(0));
  res_3991->setReshapeDimensions(Dims3{1,1,10});
  assert(res_3991 && "failed to build Node_7333 (type:reshape)");
  res_3991->getOutput(0)->setName("Node_7333:0");
  auto res_3992=network->addElementWise(*res_996->getOutput(0),*res_3991->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3992 && "failed to build Node_7335 (type:sub)");
  res_3992->getOutput(0)->setName("Node_7335:0");
  auto res_3993=network->addElementWise(*res_3992->getOutput(0),*res_997->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_3993 && "failed to build Node_7336 (type:multiply)");
  res_3993->getOutput(0)->setName("Node_7336:0");
  ITensor* inputTensors_3994[2] = {res_69->getOutput(0),res_3986->getOutput(0)};
  auto res_3994=network->addConcatenation(inputTensors_3994,2);
  res_3994->setAxis(0);
  assert(res_3994 && "failed to build Node_7319 (type:concat)");
  res_3994->getOutput(0)->setName("Node_7319:0");
  auto res_3995=network->addElementWise(*res_3994->getOutput(0),*res_68->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_3995 && "failed to build Node_7357 (type:add)");
  res_3995->getOutput(0)->setName("Node_7357:0");
  auto res_3996=network->addReduce(*res_3995->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3996 && "failed to build Node_7364_mean (type:mean)");
  res_3996->getOutput(0)->setName("Node_7364_mean:0");
  auto res_3997=network->addElementWise(*res_3995->getOutput(0),*res_3996->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_3997 && "failed to build Node_7364_diff (type:sub)");
  res_3997->getOutput(0)->setName("Node_7364_diff:0");
  auto res_3998=network->addElementWise(*res_3997->getOutput(0),*res_1243->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_3998 && "failed to build Node_7364_power (type:power)");
  res_3998->getOutput(0)->setName("Node_7364_power:0");
  auto res_3999=network->addReduce(*res_3998->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_3999 && "failed to build Node_7364_var (type:mean)");
  res_3999->getOutput(0)->setName("Node_7364_var:0");
  auto res_4000=network->addElementWise(*res_3999->getOutput(0),*res_1117->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4000 && "failed to build Node_7364_modify (type:add)");
  res_4000->getOutput(0)->setName("Node_7364_modify:0");
  auto res_4001=network->addUnary(*res_4000->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4001 && "failed to build Node_7364_sqrt (type:power)");
  res_4001->getOutput(0)->setName("Node_7364_sqrt:0");
  auto res_4002=network->addElementWise(*res_3997->getOutput(0),*res_4001->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4002 && "failed to build Node_7364_rsqrt (type:divide)");
  res_4002->getOutput(0)->setName("Node_7364_rsqrt:0");
  auto res_4003=network->addElementWise(*res_4002->getOutput(0),*res_270->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4003 && "failed to build Node_7364_mul (type:multiply)");
  res_4003->getOutput(0)->setName("Node_7364_mul:0");
  auto res_4004=network->addElementWise(*res_4003->getOutput(0),*res_271->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4004 && "failed to build Node_7364 (type:add)");
  res_4004->getOutput(0)->setName("Node_7364:0");
  auto res_4005=network->addMatrixMultiply(*res_4004->getOutput(0),MatrixOperation::kNONE,*res_848->getOutput(0),MatrixOperation::kNONE);
  assert(res_4005 && "failed to build Node_7384 (type:matmul)");
  res_4005->getOutput(0)->setName("Node_7384:0");
  auto res_4006=network->addElementWise(*res_4005->getOutput(0),*res_849->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4006 && "failed to build Node_7384_add (type:add)");
  res_4006->getOutput(0)->setName("Node_7384_add:0");
  auto res_4007=network->addShuffle(*res_4006->getOutput(0));
  res_4007->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4007 && "failed to build Node_7404 (type:reshape)");
  res_4007->getOutput(0)->setName("Node_7404:0");
  auto res_4008=network->addShuffle(*res_4007->getOutput(0));
  Permutation permute_4008;
  permute_4008.order[0]=1;
  permute_4008.order[1]=0;
  permute_4008.order[2]=2;
  res_4008->setFirstTranspose(permute_4008);
  assert(res_4008 && "failed to build Node_7406 (type:transpose)");
  res_4008->getOutput(0)->setName("Node_7406:0");
  auto res_4009=network->addMatrixMultiply(*res_4004->getOutput(0),MatrixOperation::kNONE,*res_850->getOutput(0),MatrixOperation::kNONE);
  assert(res_4009 && "failed to build Node_7390 (type:matmul)");
  res_4009->getOutput(0)->setName("Node_7390:0");
  auto res_4010=network->addElementWise(*res_4009->getOutput(0),*res_851->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4010 && "failed to build Node_7390_add (type:add)");
  res_4010->getOutput(0)->setName("Node_7390_add:0");
  auto res_4011=network->addShuffle(*res_4010->getOutput(0));
  res_4011->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4011 && "failed to build Node_7414 (type:reshape)");
  res_4011->getOutput(0)->setName("Node_7414:0");
  auto res_4012=network->addShuffle(*res_4011->getOutput(0));
  Permutation permute_4012;
  permute_4012.order[0]=1;
  permute_4012.order[1]=2;
  permute_4012.order[2]=0;
  res_4012->setFirstTranspose(permute_4012);
  assert(res_4012 && "failed to build Node_7427 (type:transpose)");
  res_4012->getOutput(0)->setName("Node_7427:0");
  auto res_4013=network->addMatrixMultiply(*res_4008->getOutput(0),MatrixOperation::kNONE,*res_4012->getOutput(0),MatrixOperation::kNONE);
  assert(res_4013 && "failed to build Node_7428 (type:matmul)");
  res_4013->getOutput(0)->setName("Node_7428:0");
  auto res_4014=network->addElementWise(*res_4013->getOutput(0),*res_998->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4014 && "failed to build Node_7429 (type:divide)");
  res_4014->getOutput(0)->setName("Node_7429:0");
  auto res_4015=network->addElementWise(*res_4014->getOutput(0),*res_3993->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4015 && "failed to build Node_7430 (type:add)");
  res_4015->getOutput(0)->setName("Node_7430:0");
  auto res_4016=network->addSoftMax(*res_4015->getOutput(0));
  res_4016->setAxes(4);
  assert(res_4016 && "failed to build Node_7431 (type:softmax)");
  res_4016->getOutput(0)->setName("Node_7431:0");
  auto res_4017=network->addMatrixMultiply(*res_4004->getOutput(0),MatrixOperation::kNONE,*res_852->getOutput(0),MatrixOperation::kNONE);
  assert(res_4017 && "failed to build Node_7396 (type:matmul)");
  res_4017->getOutput(0)->setName("Node_7396:0");
  auto res_4018=network->addElementWise(*res_4017->getOutput(0),*res_853->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4018 && "failed to build Node_7396_add (type:add)");
  res_4018->getOutput(0)->setName("Node_7396_add:0");
  auto res_4019=network->addShuffle(*res_4018->getOutput(0));
  res_4019->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4019 && "failed to build Node_7424 (type:reshape)");
  res_4019->getOutput(0)->setName("Node_7424:0");
  auto res_4020=network->addShuffle(*res_4019->getOutput(0));
  Permutation permute_4020;
  permute_4020.order[0]=1;
  permute_4020.order[1]=0;
  permute_4020.order[2]=2;
  res_4020->setFirstTranspose(permute_4020);
  assert(res_4020 && "failed to build Node_7426 (type:transpose)");
  res_4020->getOutput(0)->setName("Node_7426:0");
  auto res_4021=network->addMatrixMultiply(*res_4016->getOutput(0),MatrixOperation::kNONE,*res_4020->getOutput(0),MatrixOperation::kNONE);
  assert(res_4021 && "failed to build Node_7435 (type:matmul)");
  res_4021->getOutput(0)->setName("Node_7435:0");
  auto res_4022=network->addShuffle(*res_4021->getOutput(0));
  Permutation permute_4022;
  permute_4022.order[0]=1;
  permute_4022.order[1]=0;
  permute_4022.order[2]=2;
  res_4022->setFirstTranspose(permute_4022);
  assert(res_4022 && "failed to build Node_7437 (type:transpose)");
  res_4022->getOutput(0)->setName("Node_7437:0");
  auto res_4023=network->addIdentity(*res_4022->getOutput(0));
  assert(res_4023 && "failed to build Node_7438 (type:contiguous)");
  res_4023->getOutput(0)->setName("Node_7438:0");
  auto res_4024=network->addShuffle(*res_4023->getOutput(0));
  res_4024->setReshapeDimensions(Dims{2,{10,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_4024 && "failed to build Node_7446 (type:reshape)");
  res_4024->getOutput(0)->setName("Node_7446:0");
  auto res_4025=network->addMatrixMultiply(*res_4024->getOutput(0),MatrixOperation::kNONE,*res_854->getOutput(0),MatrixOperation::kNONE);
  assert(res_4025 && "failed to build Node_7453 (type:matmul)");
  res_4025->getOutput(0)->setName("Node_7453:0");
  auto res_4026=network->addElementWise(*res_4025->getOutput(0),*res_855->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4026 && "failed to build Node_7453_add (type:add)");
  res_4026->getOutput(0)->setName("Node_7453_add:0");
  auto res_4027=network->addElementWise(*res_4026->getOutput(0),*res_4004->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4027 && "failed to build Node_7457 (type:add)");
  res_4027->getOutput(0)->setName("Node_7457:0");
  auto res_4028=network->addReduce(*res_4027->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4028 && "failed to build Node_7464_mean (type:mean)");
  res_4028->getOutput(0)->setName("Node_7464_mean:0");
  auto res_4029=network->addElementWise(*res_4027->getOutput(0),*res_4028->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4029 && "failed to build Node_7464_diff (type:sub)");
  res_4029->getOutput(0)->setName("Node_7464_diff:0");
  auto res_4030=network->addElementWise(*res_4029->getOutput(0),*res_1244->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4030 && "failed to build Node_7464_power (type:power)");
  res_4030->getOutput(0)->setName("Node_7464_power:0");
  auto res_4031=network->addReduce(*res_4030->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4031 && "failed to build Node_7464_var (type:mean)");
  res_4031->getOutput(0)->setName("Node_7464_var:0");
  auto res_4032=network->addElementWise(*res_4031->getOutput(0),*res_1118->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4032 && "failed to build Node_7464_modify (type:add)");
  res_4032->getOutput(0)->setName("Node_7464_modify:0");
  auto res_4033=network->addUnary(*res_4032->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4033 && "failed to build Node_7464_sqrt (type:power)");
  res_4033->getOutput(0)->setName("Node_7464_sqrt:0");
  auto res_4034=network->addElementWise(*res_4029->getOutput(0),*res_4033->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4034 && "failed to build Node_7464_rsqrt (type:divide)");
  res_4034->getOutput(0)->setName("Node_7464_rsqrt:0");
  auto res_4035=network->addElementWise(*res_4034->getOutput(0),*res_272->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4035 && "failed to build Node_7464_mul (type:multiply)");
  res_4035->getOutput(0)->setName("Node_7464_mul:0");
  auto res_4036=network->addElementWise(*res_4035->getOutput(0),*res_273->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4036 && "failed to build Node_7464 (type:add)");
  res_4036->getOutput(0)->setName("Node_7464:0");
  auto res_4037=network->addMatrixMultiply(*res_4036->getOutput(0),MatrixOperation::kNONE,*res_856->getOutput(0),MatrixOperation::kNONE);
  assert(res_4037 && "failed to build Node_7470 (type:matmul)");
  res_4037->getOutput(0)->setName("Node_7470:0");
  auto res_4038=network->addElementWise(*res_4037->getOutput(0),*res_857->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4038 && "failed to build Node_7470_add (type:add)");
  res_4038->getOutput(0)->setName("Node_7470_add:0");
  ITensor* inputTensors_4039[1] = {res_4038->getOutput(0)};
  auto plugin_4039=GELU_Plugin("gelu");
  auto res_4039=network->addPluginV2(inputTensors_4039,1,plugin_4039);
  assert(res_4039 && "failed to build Node_7471 (type:gelu)");
  res_4039->getOutput(0)->setName("Node_7471:0");
  auto res_4040=network->addMatrixMultiply(*res_4039->getOutput(0),MatrixOperation::kNONE,*res_858->getOutput(0),MatrixOperation::kNONE);
  assert(res_4040 && "failed to build Node_7478 (type:matmul)");
  res_4040->getOutput(0)->setName("Node_7478:0");
  auto res_4041=network->addElementWise(*res_4040->getOutput(0),*res_859->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4041 && "failed to build Node_7478_add (type:add)");
  res_4041->getOutput(0)->setName("Node_7478_add:0");
  auto res_4042=network->addElementWise(*res_4041->getOutput(0),*res_4036->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4042 && "failed to build Node_7482 (type:add)");
  res_4042->getOutput(0)->setName("Node_7482:0");
  auto res_4043=network->addReduce(*res_4042->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4043 && "failed to build Node_7489_mean (type:mean)");
  res_4043->getOutput(0)->setName("Node_7489_mean:0");
  auto res_4044=network->addElementWise(*res_4042->getOutput(0),*res_4043->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4044 && "failed to build Node_7489_diff (type:sub)");
  res_4044->getOutput(0)->setName("Node_7489_diff:0");
  auto res_4045=network->addElementWise(*res_4044->getOutput(0),*res_1245->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4045 && "failed to build Node_7489_power (type:power)");
  res_4045->getOutput(0)->setName("Node_7489_power:0");
  auto res_4046=network->addReduce(*res_4045->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4046 && "failed to build Node_7489_var (type:mean)");
  res_4046->getOutput(0)->setName("Node_7489_var:0");
  auto res_4047=network->addElementWise(*res_4046->getOutput(0),*res_1119->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4047 && "failed to build Node_7489_modify (type:add)");
  res_4047->getOutput(0)->setName("Node_7489_modify:0");
  auto res_4048=network->addUnary(*res_4047->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4048 && "failed to build Node_7489_sqrt (type:power)");
  res_4048->getOutput(0)->setName("Node_7489_sqrt:0");
  auto res_4049=network->addElementWise(*res_4044->getOutput(0),*res_4048->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4049 && "failed to build Node_7489_rsqrt (type:divide)");
  res_4049->getOutput(0)->setName("Node_7489_rsqrt:0");
  auto res_4050=network->addElementWise(*res_4049->getOutput(0),*res_274->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4050 && "failed to build Node_7489_mul (type:multiply)");
  res_4050->getOutput(0)->setName("Node_7489_mul:0");
  auto res_4051=network->addElementWise(*res_4050->getOutput(0),*res_275->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4051 && "failed to build Node_7489 (type:add)");
  res_4051->getOutput(0)->setName("Node_7489:0");
  auto res_4052=network->addMatrixMultiply(*res_4051->getOutput(0),MatrixOperation::kNONE,*res_860->getOutput(0),MatrixOperation::kNONE);
  assert(res_4052 && "failed to build Node_7506 (type:matmul)");
  res_4052->getOutput(0)->setName("Node_7506:0");
  auto res_4053=network->addElementWise(*res_4052->getOutput(0),*res_861->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4053 && "failed to build Node_7506_add (type:add)");
  res_4053->getOutput(0)->setName("Node_7506_add:0");
  auto res_4054=network->addShuffle(*res_4053->getOutput(0));
  res_4054->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4054 && "failed to build Node_7526 (type:reshape)");
  res_4054->getOutput(0)->setName("Node_7526:0");
  auto res_4055=network->addShuffle(*res_4054->getOutput(0));
  Permutation permute_4055;
  permute_4055.order[0]=1;
  permute_4055.order[1]=0;
  permute_4055.order[2]=2;
  res_4055->setFirstTranspose(permute_4055);
  assert(res_4055 && "failed to build Node_7528 (type:transpose)");
  res_4055->getOutput(0)->setName("Node_7528:0");
  auto res_4056=network->addMatrixMultiply(*res_4051->getOutput(0),MatrixOperation::kNONE,*res_862->getOutput(0),MatrixOperation::kNONE);
  assert(res_4056 && "failed to build Node_7512 (type:matmul)");
  res_4056->getOutput(0)->setName("Node_7512:0");
  auto res_4057=network->addElementWise(*res_4056->getOutput(0),*res_863->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4057 && "failed to build Node_7512_add (type:add)");
  res_4057->getOutput(0)->setName("Node_7512_add:0");
  auto res_4058=network->addShuffle(*res_4057->getOutput(0));
  res_4058->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4058 && "failed to build Node_7536 (type:reshape)");
  res_4058->getOutput(0)->setName("Node_7536:0");
  auto res_4059=network->addShuffle(*res_4058->getOutput(0));
  Permutation permute_4059;
  permute_4059.order[0]=1;
  permute_4059.order[1]=2;
  permute_4059.order[2]=0;
  res_4059->setFirstTranspose(permute_4059);
  assert(res_4059 && "failed to build Node_7549 (type:transpose)");
  res_4059->getOutput(0)->setName("Node_7549:0");
  auto res_4060=network->addMatrixMultiply(*res_4055->getOutput(0),MatrixOperation::kNONE,*res_4059->getOutput(0),MatrixOperation::kNONE);
  assert(res_4060 && "failed to build Node_7550 (type:matmul)");
  res_4060->getOutput(0)->setName("Node_7550:0");
  auto res_4061=network->addElementWise(*res_4060->getOutput(0),*res_999->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4061 && "failed to build Node_7551 (type:divide)");
  res_4061->getOutput(0)->setName("Node_7551:0");
  auto res_4062=network->addElementWise(*res_4061->getOutput(0),*res_3993->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4062 && "failed to build Node_7552 (type:add)");
  res_4062->getOutput(0)->setName("Node_7552:0");
  auto res_4063=network->addSoftMax(*res_4062->getOutput(0));
  res_4063->setAxes(4);
  assert(res_4063 && "failed to build Node_7553 (type:softmax)");
  res_4063->getOutput(0)->setName("Node_7553:0");
  auto res_4064=network->addMatrixMultiply(*res_4051->getOutput(0),MatrixOperation::kNONE,*res_864->getOutput(0),MatrixOperation::kNONE);
  assert(res_4064 && "failed to build Node_7518 (type:matmul)");
  res_4064->getOutput(0)->setName("Node_7518:0");
  auto res_4065=network->addElementWise(*res_4064->getOutput(0),*res_865->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4065 && "failed to build Node_7518_add (type:add)");
  res_4065->getOutput(0)->setName("Node_7518_add:0");
  auto res_4066=network->addShuffle(*res_4065->getOutput(0));
  res_4066->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4066 && "failed to build Node_7546 (type:reshape)");
  res_4066->getOutput(0)->setName("Node_7546:0");
  auto res_4067=network->addShuffle(*res_4066->getOutput(0));
  Permutation permute_4067;
  permute_4067.order[0]=1;
  permute_4067.order[1]=0;
  permute_4067.order[2]=2;
  res_4067->setFirstTranspose(permute_4067);
  assert(res_4067 && "failed to build Node_7548 (type:transpose)");
  res_4067->getOutput(0)->setName("Node_7548:0");
  auto res_4068=network->addMatrixMultiply(*res_4063->getOutput(0),MatrixOperation::kNONE,*res_4067->getOutput(0),MatrixOperation::kNONE);
  assert(res_4068 && "failed to build Node_7557 (type:matmul)");
  res_4068->getOutput(0)->setName("Node_7557:0");
  auto res_4069=network->addShuffle(*res_4068->getOutput(0));
  Permutation permute_4069;
  permute_4069.order[0]=1;
  permute_4069.order[1]=0;
  permute_4069.order[2]=2;
  res_4069->setFirstTranspose(permute_4069);
  assert(res_4069 && "failed to build Node_7559 (type:transpose)");
  res_4069->getOutput(0)->setName("Node_7559:0");
  auto res_4070=network->addIdentity(*res_4069->getOutput(0));
  assert(res_4070 && "failed to build Node_7560 (type:contiguous)");
  res_4070->getOutput(0)->setName("Node_7560:0");
  auto res_4071=network->addShuffle(*res_4070->getOutput(0));
  res_4071->setReshapeDimensions(Dims{2,{10,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_4071 && "failed to build Node_7568 (type:reshape)");
  res_4071->getOutput(0)->setName("Node_7568:0");
  auto res_4072=network->addMatrixMultiply(*res_4071->getOutput(0),MatrixOperation::kNONE,*res_866->getOutput(0),MatrixOperation::kNONE);
  assert(res_4072 && "failed to build Node_7575 (type:matmul)");
  res_4072->getOutput(0)->setName("Node_7575:0");
  auto res_4073=network->addElementWise(*res_4072->getOutput(0),*res_867->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4073 && "failed to build Node_7575_add (type:add)");
  res_4073->getOutput(0)->setName("Node_7575_add:0");
  auto res_4074=network->addElementWise(*res_4073->getOutput(0),*res_4051->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4074 && "failed to build Node_7579 (type:add)");
  res_4074->getOutput(0)->setName("Node_7579:0");
  auto res_4075=network->addReduce(*res_4074->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4075 && "failed to build Node_7586_mean (type:mean)");
  res_4075->getOutput(0)->setName("Node_7586_mean:0");
  auto res_4076=network->addElementWise(*res_4074->getOutput(0),*res_4075->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4076 && "failed to build Node_7586_diff (type:sub)");
  res_4076->getOutput(0)->setName("Node_7586_diff:0");
  auto res_4077=network->addElementWise(*res_4076->getOutput(0),*res_1246->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4077 && "failed to build Node_7586_power (type:power)");
  res_4077->getOutput(0)->setName("Node_7586_power:0");
  auto res_4078=network->addReduce(*res_4077->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4078 && "failed to build Node_7586_var (type:mean)");
  res_4078->getOutput(0)->setName("Node_7586_var:0");
  auto res_4079=network->addElementWise(*res_4078->getOutput(0),*res_1120->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4079 && "failed to build Node_7586_modify (type:add)");
  res_4079->getOutput(0)->setName("Node_7586_modify:0");
  auto res_4080=network->addUnary(*res_4079->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4080 && "failed to build Node_7586_sqrt (type:power)");
  res_4080->getOutput(0)->setName("Node_7586_sqrt:0");
  auto res_4081=network->addElementWise(*res_4076->getOutput(0),*res_4080->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4081 && "failed to build Node_7586_rsqrt (type:divide)");
  res_4081->getOutput(0)->setName("Node_7586_rsqrt:0");
  auto res_4082=network->addElementWise(*res_4081->getOutput(0),*res_276->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4082 && "failed to build Node_7586_mul (type:multiply)");
  res_4082->getOutput(0)->setName("Node_7586_mul:0");
  auto res_4083=network->addElementWise(*res_4082->getOutput(0),*res_277->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4083 && "failed to build Node_7586 (type:add)");
  res_4083->getOutput(0)->setName("Node_7586:0");
  auto res_4084=network->addMatrixMultiply(*res_4083->getOutput(0),MatrixOperation::kNONE,*res_868->getOutput(0),MatrixOperation::kNONE);
  assert(res_4084 && "failed to build Node_7592 (type:matmul)");
  res_4084->getOutput(0)->setName("Node_7592:0");
  auto res_4085=network->addElementWise(*res_4084->getOutput(0),*res_869->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4085 && "failed to build Node_7592_add (type:add)");
  res_4085->getOutput(0)->setName("Node_7592_add:0");
  ITensor* inputTensors_4086[1] = {res_4085->getOutput(0)};
  auto plugin_4086=GELU_Plugin("gelu");
  auto res_4086=network->addPluginV2(inputTensors_4086,1,plugin_4086);
  assert(res_4086 && "failed to build Node_7593 (type:gelu)");
  res_4086->getOutput(0)->setName("Node_7593:0");
  auto res_4087=network->addMatrixMultiply(*res_4086->getOutput(0),MatrixOperation::kNONE,*res_870->getOutput(0),MatrixOperation::kNONE);
  assert(res_4087 && "failed to build Node_7600 (type:matmul)");
  res_4087->getOutput(0)->setName("Node_7600:0");
  auto res_4088=network->addElementWise(*res_4087->getOutput(0),*res_871->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4088 && "failed to build Node_7600_add (type:add)");
  res_4088->getOutput(0)->setName("Node_7600_add:0");
  auto res_4089=network->addElementWise(*res_4088->getOutput(0),*res_4083->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4089 && "failed to build Node_7604 (type:add)");
  res_4089->getOutput(0)->setName("Node_7604:0");
  auto res_4090=network->addReduce(*res_4089->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4090 && "failed to build Node_7611_mean (type:mean)");
  res_4090->getOutput(0)->setName("Node_7611_mean:0");
  auto res_4091=network->addElementWise(*res_4089->getOutput(0),*res_4090->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4091 && "failed to build Node_7611_diff (type:sub)");
  res_4091->getOutput(0)->setName("Node_7611_diff:0");
  auto res_4092=network->addElementWise(*res_4091->getOutput(0),*res_1247->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4092 && "failed to build Node_7611_power (type:power)");
  res_4092->getOutput(0)->setName("Node_7611_power:0");
  auto res_4093=network->addReduce(*res_4092->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4093 && "failed to build Node_7611_var (type:mean)");
  res_4093->getOutput(0)->setName("Node_7611_var:0");
  auto res_4094=network->addElementWise(*res_4093->getOutput(0),*res_1121->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4094 && "failed to build Node_7611_modify (type:add)");
  res_4094->getOutput(0)->setName("Node_7611_modify:0");
  auto res_4095=network->addUnary(*res_4094->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4095 && "failed to build Node_7611_sqrt (type:power)");
  res_4095->getOutput(0)->setName("Node_7611_sqrt:0");
  auto res_4096=network->addElementWise(*res_4091->getOutput(0),*res_4095->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4096 && "failed to build Node_7611_rsqrt (type:divide)");
  res_4096->getOutput(0)->setName("Node_7611_rsqrt:0");
  auto res_4097=network->addElementWise(*res_4096->getOutput(0),*res_278->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4097 && "failed to build Node_7611_mul (type:multiply)");
  res_4097->getOutput(0)->setName("Node_7611_mul:0");
  auto res_4098=network->addElementWise(*res_4097->getOutput(0),*res_279->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4098 && "failed to build Node_7611 (type:add)");
  res_4098->getOutput(0)->setName("Node_7611:0");
  auto res_4099=network->addMatrixMultiply(*res_4098->getOutput(0),MatrixOperation::kNONE,*res_872->getOutput(0),MatrixOperation::kNONE);
  assert(res_4099 && "failed to build Node_7628 (type:matmul)");
  res_4099->getOutput(0)->setName("Node_7628:0");
  auto res_4100=network->addElementWise(*res_4099->getOutput(0),*res_873->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4100 && "failed to build Node_7628_add (type:add)");
  res_4100->getOutput(0)->setName("Node_7628_add:0");
  auto res_4101=network->addShuffle(*res_4100->getOutput(0));
  res_4101->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4101 && "failed to build Node_7648 (type:reshape)");
  res_4101->getOutput(0)->setName("Node_7648:0");
  auto res_4102=network->addShuffle(*res_4101->getOutput(0));
  Permutation permute_4102;
  permute_4102.order[0]=1;
  permute_4102.order[1]=0;
  permute_4102.order[2]=2;
  res_4102->setFirstTranspose(permute_4102);
  assert(res_4102 && "failed to build Node_7650 (type:transpose)");
  res_4102->getOutput(0)->setName("Node_7650:0");
  auto res_4103=network->addMatrixMultiply(*res_4098->getOutput(0),MatrixOperation::kNONE,*res_874->getOutput(0),MatrixOperation::kNONE);
  assert(res_4103 && "failed to build Node_7634 (type:matmul)");
  res_4103->getOutput(0)->setName("Node_7634:0");
  auto res_4104=network->addElementWise(*res_4103->getOutput(0),*res_875->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4104 && "failed to build Node_7634_add (type:add)");
  res_4104->getOutput(0)->setName("Node_7634_add:0");
  auto res_4105=network->addShuffle(*res_4104->getOutput(0));
  res_4105->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4105 && "failed to build Node_7658 (type:reshape)");
  res_4105->getOutput(0)->setName("Node_7658:0");
  auto res_4106=network->addShuffle(*res_4105->getOutput(0));
  Permutation permute_4106;
  permute_4106.order[0]=1;
  permute_4106.order[1]=2;
  permute_4106.order[2]=0;
  res_4106->setFirstTranspose(permute_4106);
  assert(res_4106 && "failed to build Node_7671 (type:transpose)");
  res_4106->getOutput(0)->setName("Node_7671:0");
  auto res_4107=network->addMatrixMultiply(*res_4102->getOutput(0),MatrixOperation::kNONE,*res_4106->getOutput(0),MatrixOperation::kNONE);
  assert(res_4107 && "failed to build Node_7672 (type:matmul)");
  res_4107->getOutput(0)->setName("Node_7672:0");
  auto res_4108=network->addElementWise(*res_4107->getOutput(0),*res_1000->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4108 && "failed to build Node_7673 (type:divide)");
  res_4108->getOutput(0)->setName("Node_7673:0");
  auto res_4109=network->addElementWise(*res_4108->getOutput(0),*res_3993->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4109 && "failed to build Node_7674 (type:add)");
  res_4109->getOutput(0)->setName("Node_7674:0");
  auto res_4110=network->addSoftMax(*res_4109->getOutput(0));
  res_4110->setAxes(4);
  assert(res_4110 && "failed to build Node_7675 (type:softmax)");
  res_4110->getOutput(0)->setName("Node_7675:0");
  auto res_4111=network->addMatrixMultiply(*res_4098->getOutput(0),MatrixOperation::kNONE,*res_876->getOutput(0),MatrixOperation::kNONE);
  assert(res_4111 && "failed to build Node_7640 (type:matmul)");
  res_4111->getOutput(0)->setName("Node_7640:0");
  auto res_4112=network->addElementWise(*res_4111->getOutput(0),*res_877->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4112 && "failed to build Node_7640_add (type:add)");
  res_4112->getOutput(0)->setName("Node_7640_add:0");
  auto res_4113=network->addShuffle(*res_4112->getOutput(0));
  res_4113->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4113 && "failed to build Node_7668 (type:reshape)");
  res_4113->getOutput(0)->setName("Node_7668:0");
  auto res_4114=network->addShuffle(*res_4113->getOutput(0));
  Permutation permute_4114;
  permute_4114.order[0]=1;
  permute_4114.order[1]=0;
  permute_4114.order[2]=2;
  res_4114->setFirstTranspose(permute_4114);
  assert(res_4114 && "failed to build Node_7670 (type:transpose)");
  res_4114->getOutput(0)->setName("Node_7670:0");
  auto res_4115=network->addMatrixMultiply(*res_4110->getOutput(0),MatrixOperation::kNONE,*res_4114->getOutput(0),MatrixOperation::kNONE);
  assert(res_4115 && "failed to build Node_7679 (type:matmul)");
  res_4115->getOutput(0)->setName("Node_7679:0");
  auto res_4116=network->addShuffle(*res_4115->getOutput(0));
  Permutation permute_4116;
  permute_4116.order[0]=1;
  permute_4116.order[1]=0;
  permute_4116.order[2]=2;
  res_4116->setFirstTranspose(permute_4116);
  assert(res_4116 && "failed to build Node_7681 (type:transpose)");
  res_4116->getOutput(0)->setName("Node_7681:0");
  auto res_4117=network->addIdentity(*res_4116->getOutput(0));
  assert(res_4117 && "failed to build Node_7682 (type:contiguous)");
  res_4117->getOutput(0)->setName("Node_7682:0");
  auto res_4118=network->addShuffle(*res_4117->getOutput(0));
  res_4118->setReshapeDimensions(Dims{2,{10,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_4118 && "failed to build Node_7690 (type:reshape)");
  res_4118->getOutput(0)->setName("Node_7690:0");
  auto res_4119=network->addMatrixMultiply(*res_4118->getOutput(0),MatrixOperation::kNONE,*res_878->getOutput(0),MatrixOperation::kNONE);
  assert(res_4119 && "failed to build Node_7697 (type:matmul)");
  res_4119->getOutput(0)->setName("Node_7697:0");
  auto res_4120=network->addElementWise(*res_4119->getOutput(0),*res_879->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4120 && "failed to build Node_7697_add (type:add)");
  res_4120->getOutput(0)->setName("Node_7697_add:0");
  auto res_4121=network->addElementWise(*res_4120->getOutput(0),*res_4098->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4121 && "failed to build Node_7701 (type:add)");
  res_4121->getOutput(0)->setName("Node_7701:0");
  auto res_4122=network->addReduce(*res_4121->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4122 && "failed to build Node_7708_mean (type:mean)");
  res_4122->getOutput(0)->setName("Node_7708_mean:0");
  auto res_4123=network->addElementWise(*res_4121->getOutput(0),*res_4122->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4123 && "failed to build Node_7708_diff (type:sub)");
  res_4123->getOutput(0)->setName("Node_7708_diff:0");
  auto res_4124=network->addElementWise(*res_4123->getOutput(0),*res_1248->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4124 && "failed to build Node_7708_power (type:power)");
  res_4124->getOutput(0)->setName("Node_7708_power:0");
  auto res_4125=network->addReduce(*res_4124->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4125 && "failed to build Node_7708_var (type:mean)");
  res_4125->getOutput(0)->setName("Node_7708_var:0");
  auto res_4126=network->addElementWise(*res_4125->getOutput(0),*res_1122->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4126 && "failed to build Node_7708_modify (type:add)");
  res_4126->getOutput(0)->setName("Node_7708_modify:0");
  auto res_4127=network->addUnary(*res_4126->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4127 && "failed to build Node_7708_sqrt (type:power)");
  res_4127->getOutput(0)->setName("Node_7708_sqrt:0");
  auto res_4128=network->addElementWise(*res_4123->getOutput(0),*res_4127->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4128 && "failed to build Node_7708_rsqrt (type:divide)");
  res_4128->getOutput(0)->setName("Node_7708_rsqrt:0");
  auto res_4129=network->addElementWise(*res_4128->getOutput(0),*res_280->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4129 && "failed to build Node_7708_mul (type:multiply)");
  res_4129->getOutput(0)->setName("Node_7708_mul:0");
  auto res_4130=network->addElementWise(*res_4129->getOutput(0),*res_281->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4130 && "failed to build Node_7708 (type:add)");
  res_4130->getOutput(0)->setName("Node_7708:0");
  auto res_4131=network->addMatrixMultiply(*res_4130->getOutput(0),MatrixOperation::kNONE,*res_880->getOutput(0),MatrixOperation::kNONE);
  assert(res_4131 && "failed to build Node_7714 (type:matmul)");
  res_4131->getOutput(0)->setName("Node_7714:0");
  auto res_4132=network->addElementWise(*res_4131->getOutput(0),*res_881->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4132 && "failed to build Node_7714_add (type:add)");
  res_4132->getOutput(0)->setName("Node_7714_add:0");
  ITensor* inputTensors_4133[1] = {res_4132->getOutput(0)};
  auto plugin_4133=GELU_Plugin("gelu");
  auto res_4133=network->addPluginV2(inputTensors_4133,1,plugin_4133);
  assert(res_4133 && "failed to build Node_7715 (type:gelu)");
  res_4133->getOutput(0)->setName("Node_7715:0");
  auto res_4134=network->addMatrixMultiply(*res_4133->getOutput(0),MatrixOperation::kNONE,*res_882->getOutput(0),MatrixOperation::kNONE);
  assert(res_4134 && "failed to build Node_7722 (type:matmul)");
  res_4134->getOutput(0)->setName("Node_7722:0");
  auto res_4135=network->addElementWise(*res_4134->getOutput(0),*res_883->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4135 && "failed to build Node_7722_add (type:add)");
  res_4135->getOutput(0)->setName("Node_7722_add:0");
  auto res_4136=network->addElementWise(*res_4135->getOutput(0),*res_4130->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4136 && "failed to build Node_7726 (type:add)");
  res_4136->getOutput(0)->setName("Node_7726:0");
  auto res_4137=network->addReduce(*res_4136->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4137 && "failed to build Node_7733_mean (type:mean)");
  res_4137->getOutput(0)->setName("Node_7733_mean:0");
  auto res_4138=network->addElementWise(*res_4136->getOutput(0),*res_4137->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4138 && "failed to build Node_7733_diff (type:sub)");
  res_4138->getOutput(0)->setName("Node_7733_diff:0");
  auto res_4139=network->addElementWise(*res_4138->getOutput(0),*res_1249->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4139 && "failed to build Node_7733_power (type:power)");
  res_4139->getOutput(0)->setName("Node_7733_power:0");
  auto res_4140=network->addReduce(*res_4139->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4140 && "failed to build Node_7733_var (type:mean)");
  res_4140->getOutput(0)->setName("Node_7733_var:0");
  auto res_4141=network->addElementWise(*res_4140->getOutput(0),*res_1123->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4141 && "failed to build Node_7733_modify (type:add)");
  res_4141->getOutput(0)->setName("Node_7733_modify:0");
  auto res_4142=network->addUnary(*res_4141->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4142 && "failed to build Node_7733_sqrt (type:power)");
  res_4142->getOutput(0)->setName("Node_7733_sqrt:0");
  auto res_4143=network->addElementWise(*res_4138->getOutput(0),*res_4142->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4143 && "failed to build Node_7733_rsqrt (type:divide)");
  res_4143->getOutput(0)->setName("Node_7733_rsqrt:0");
  auto res_4144=network->addElementWise(*res_4143->getOutput(0),*res_282->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4144 && "failed to build Node_7733_mul (type:multiply)");
  res_4144->getOutput(0)->setName("Node_7733_mul:0");
  auto res_4145=network->addElementWise(*res_4144->getOutput(0),*res_283->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4145 && "failed to build Node_7733 (type:add)");
  res_4145->getOutput(0)->setName("Node_7733:0");
  auto res_4146=network->addMatrixMultiply(*res_4145->getOutput(0),MatrixOperation::kNONE,*res_884->getOutput(0),MatrixOperation::kNONE);
  assert(res_4146 && "failed to build Node_7750 (type:matmul)");
  res_4146->getOutput(0)->setName("Node_7750:0");
  auto res_4147=network->addElementWise(*res_4146->getOutput(0),*res_885->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4147 && "failed to build Node_7750_add (type:add)");
  res_4147->getOutput(0)->setName("Node_7750_add:0");
  auto res_4148=network->addShuffle(*res_4147->getOutput(0));
  res_4148->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4148 && "failed to build Node_7770 (type:reshape)");
  res_4148->getOutput(0)->setName("Node_7770:0");
  auto res_4149=network->addShuffle(*res_4148->getOutput(0));
  Permutation permute_4149;
  permute_4149.order[0]=1;
  permute_4149.order[1]=0;
  permute_4149.order[2]=2;
  res_4149->setFirstTranspose(permute_4149);
  assert(res_4149 && "failed to build Node_7772 (type:transpose)");
  res_4149->getOutput(0)->setName("Node_7772:0");
  auto res_4150=network->addMatrixMultiply(*res_4145->getOutput(0),MatrixOperation::kNONE,*res_886->getOutput(0),MatrixOperation::kNONE);
  assert(res_4150 && "failed to build Node_7756 (type:matmul)");
  res_4150->getOutput(0)->setName("Node_7756:0");
  auto res_4151=network->addElementWise(*res_4150->getOutput(0),*res_887->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4151 && "failed to build Node_7756_add (type:add)");
  res_4151->getOutput(0)->setName("Node_7756_add:0");
  auto res_4152=network->addShuffle(*res_4151->getOutput(0));
  res_4152->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4152 && "failed to build Node_7780 (type:reshape)");
  res_4152->getOutput(0)->setName("Node_7780:0");
  auto res_4153=network->addShuffle(*res_4152->getOutput(0));
  Permutation permute_4153;
  permute_4153.order[0]=1;
  permute_4153.order[1]=2;
  permute_4153.order[2]=0;
  res_4153->setFirstTranspose(permute_4153);
  assert(res_4153 && "failed to build Node_7793 (type:transpose)");
  res_4153->getOutput(0)->setName("Node_7793:0");
  auto res_4154=network->addMatrixMultiply(*res_4149->getOutput(0),MatrixOperation::kNONE,*res_4153->getOutput(0),MatrixOperation::kNONE);
  assert(res_4154 && "failed to build Node_7794 (type:matmul)");
  res_4154->getOutput(0)->setName("Node_7794:0");
  auto res_4155=network->addElementWise(*res_4154->getOutput(0),*res_1001->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4155 && "failed to build Node_7795 (type:divide)");
  res_4155->getOutput(0)->setName("Node_7795:0");
  auto res_4156=network->addElementWise(*res_4155->getOutput(0),*res_3993->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4156 && "failed to build Node_7796 (type:add)");
  res_4156->getOutput(0)->setName("Node_7796:0");
  auto res_4157=network->addSoftMax(*res_4156->getOutput(0));
  res_4157->setAxes(4);
  assert(res_4157 && "failed to build Node_7797 (type:softmax)");
  res_4157->getOutput(0)->setName("Node_7797:0");
  auto res_4158=network->addMatrixMultiply(*res_4145->getOutput(0),MatrixOperation::kNONE,*res_888->getOutput(0),MatrixOperation::kNONE);
  assert(res_4158 && "failed to build Node_7762 (type:matmul)");
  res_4158->getOutput(0)->setName("Node_7762:0");
  auto res_4159=network->addElementWise(*res_4158->getOutput(0),*res_889->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4159 && "failed to build Node_7762_add (type:add)");
  res_4159->getOutput(0)->setName("Node_7762_add:0");
  auto res_4160=network->addShuffle(*res_4159->getOutput(0));
  res_4160->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4160 && "failed to build Node_7790 (type:reshape)");
  res_4160->getOutput(0)->setName("Node_7790:0");
  auto res_4161=network->addShuffle(*res_4160->getOutput(0));
  Permutation permute_4161;
  permute_4161.order[0]=1;
  permute_4161.order[1]=0;
  permute_4161.order[2]=2;
  res_4161->setFirstTranspose(permute_4161);
  assert(res_4161 && "failed to build Node_7792 (type:transpose)");
  res_4161->getOutput(0)->setName("Node_7792:0");
  auto res_4162=network->addMatrixMultiply(*res_4157->getOutput(0),MatrixOperation::kNONE,*res_4161->getOutput(0),MatrixOperation::kNONE);
  assert(res_4162 && "failed to build Node_7801 (type:matmul)");
  res_4162->getOutput(0)->setName("Node_7801:0");
  auto res_4163=network->addShuffle(*res_4162->getOutput(0));
  Permutation permute_4163;
  permute_4163.order[0]=1;
  permute_4163.order[1]=0;
  permute_4163.order[2]=2;
  res_4163->setFirstTranspose(permute_4163);
  assert(res_4163 && "failed to build Node_7803 (type:transpose)");
  res_4163->getOutput(0)->setName("Node_7803:0");
  auto res_4164=network->addIdentity(*res_4163->getOutput(0));
  assert(res_4164 && "failed to build Node_7804 (type:contiguous)");
  res_4164->getOutput(0)->setName("Node_7804:0");
  auto res_4165=network->addShuffle(*res_4164->getOutput(0));
  res_4165->setReshapeDimensions(Dims{2,{10,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_4165 && "failed to build Node_7812 (type:reshape)");
  res_4165->getOutput(0)->setName("Node_7812:0");
  auto res_4166=network->addMatrixMultiply(*res_4165->getOutput(0),MatrixOperation::kNONE,*res_890->getOutput(0),MatrixOperation::kNONE);
  assert(res_4166 && "failed to build Node_7819 (type:matmul)");
  res_4166->getOutput(0)->setName("Node_7819:0");
  auto res_4167=network->addElementWise(*res_4166->getOutput(0),*res_891->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4167 && "failed to build Node_7819_add (type:add)");
  res_4167->getOutput(0)->setName("Node_7819_add:0");
  auto res_4168=network->addElementWise(*res_4167->getOutput(0),*res_4145->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4168 && "failed to build Node_7823 (type:add)");
  res_4168->getOutput(0)->setName("Node_7823:0");
  auto res_4169=network->addReduce(*res_4168->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4169 && "failed to build Node_7830_mean (type:mean)");
  res_4169->getOutput(0)->setName("Node_7830_mean:0");
  auto res_4170=network->addElementWise(*res_4168->getOutput(0),*res_4169->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4170 && "failed to build Node_7830_diff (type:sub)");
  res_4170->getOutput(0)->setName("Node_7830_diff:0");
  auto res_4171=network->addElementWise(*res_4170->getOutput(0),*res_1250->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4171 && "failed to build Node_7830_power (type:power)");
  res_4171->getOutput(0)->setName("Node_7830_power:0");
  auto res_4172=network->addReduce(*res_4171->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4172 && "failed to build Node_7830_var (type:mean)");
  res_4172->getOutput(0)->setName("Node_7830_var:0");
  auto res_4173=network->addElementWise(*res_4172->getOutput(0),*res_1124->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4173 && "failed to build Node_7830_modify (type:add)");
  res_4173->getOutput(0)->setName("Node_7830_modify:0");
  auto res_4174=network->addUnary(*res_4173->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4174 && "failed to build Node_7830_sqrt (type:power)");
  res_4174->getOutput(0)->setName("Node_7830_sqrt:0");
  auto res_4175=network->addElementWise(*res_4170->getOutput(0),*res_4174->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4175 && "failed to build Node_7830_rsqrt (type:divide)");
  res_4175->getOutput(0)->setName("Node_7830_rsqrt:0");
  auto res_4176=network->addElementWise(*res_4175->getOutput(0),*res_284->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4176 && "failed to build Node_7830_mul (type:multiply)");
  res_4176->getOutput(0)->setName("Node_7830_mul:0");
  auto res_4177=network->addElementWise(*res_4176->getOutput(0),*res_285->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4177 && "failed to build Node_7830 (type:add)");
  res_4177->getOutput(0)->setName("Node_7830:0");
  auto res_4178=network->addMatrixMultiply(*res_4177->getOutput(0),MatrixOperation::kNONE,*res_892->getOutput(0),MatrixOperation::kNONE);
  assert(res_4178 && "failed to build Node_7836 (type:matmul)");
  res_4178->getOutput(0)->setName("Node_7836:0");
  auto res_4179=network->addElementWise(*res_4178->getOutput(0),*res_893->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4179 && "failed to build Node_7836_add (type:add)");
  res_4179->getOutput(0)->setName("Node_7836_add:0");
  ITensor* inputTensors_4180[1] = {res_4179->getOutput(0)};
  auto plugin_4180=GELU_Plugin("gelu");
  auto res_4180=network->addPluginV2(inputTensors_4180,1,plugin_4180);
  assert(res_4180 && "failed to build Node_7837 (type:gelu)");
  res_4180->getOutput(0)->setName("Node_7837:0");
  auto res_4181=network->addMatrixMultiply(*res_4180->getOutput(0),MatrixOperation::kNONE,*res_894->getOutput(0),MatrixOperation::kNONE);
  assert(res_4181 && "failed to build Node_7844 (type:matmul)");
  res_4181->getOutput(0)->setName("Node_7844:0");
  auto res_4182=network->addElementWise(*res_4181->getOutput(0),*res_895->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4182 && "failed to build Node_7844_add (type:add)");
  res_4182->getOutput(0)->setName("Node_7844_add:0");
  auto res_4183=network->addElementWise(*res_4182->getOutput(0),*res_4177->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4183 && "failed to build Node_7848 (type:add)");
  res_4183->getOutput(0)->setName("Node_7848:0");
  auto res_4184=network->addReduce(*res_4183->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4184 && "failed to build Node_7855_mean (type:mean)");
  res_4184->getOutput(0)->setName("Node_7855_mean:0");
  auto res_4185=network->addElementWise(*res_4183->getOutput(0),*res_4184->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4185 && "failed to build Node_7855_diff (type:sub)");
  res_4185->getOutput(0)->setName("Node_7855_diff:0");
  auto res_4186=network->addElementWise(*res_4185->getOutput(0),*res_1251->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4186 && "failed to build Node_7855_power (type:power)");
  res_4186->getOutput(0)->setName("Node_7855_power:0");
  auto res_4187=network->addReduce(*res_4186->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4187 && "failed to build Node_7855_var (type:mean)");
  res_4187->getOutput(0)->setName("Node_7855_var:0");
  auto res_4188=network->addElementWise(*res_4187->getOutput(0),*res_1125->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4188 && "failed to build Node_7855_modify (type:add)");
  res_4188->getOutput(0)->setName("Node_7855_modify:0");
  auto res_4189=network->addUnary(*res_4188->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4189 && "failed to build Node_7855_sqrt (type:power)");
  res_4189->getOutput(0)->setName("Node_7855_sqrt:0");
  auto res_4190=network->addElementWise(*res_4185->getOutput(0),*res_4189->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4190 && "failed to build Node_7855_rsqrt (type:divide)");
  res_4190->getOutput(0)->setName("Node_7855_rsqrt:0");
  auto res_4191=network->addElementWise(*res_4190->getOutput(0),*res_286->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4191 && "failed to build Node_7855_mul (type:multiply)");
  res_4191->getOutput(0)->setName("Node_7855_mul:0");
  auto res_4192=network->addElementWise(*res_4191->getOutput(0),*res_287->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4192 && "failed to build Node_7855 (type:add)");
  res_4192->getOutput(0)->setName("Node_7855:0");
  auto res_4193=network->addMatrixMultiply(*res_4192->getOutput(0),MatrixOperation::kNONE,*res_896->getOutput(0),MatrixOperation::kNONE);
  assert(res_4193 && "failed to build Node_7872 (type:matmul)");
  res_4193->getOutput(0)->setName("Node_7872:0");
  auto res_4194=network->addElementWise(*res_4193->getOutput(0),*res_897->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4194 && "failed to build Node_7872_add (type:add)");
  res_4194->getOutput(0)->setName("Node_7872_add:0");
  auto res_4195=network->addShuffle(*res_4194->getOutput(0));
  res_4195->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4195 && "failed to build Node_7892 (type:reshape)");
  res_4195->getOutput(0)->setName("Node_7892:0");
  auto res_4196=network->addShuffle(*res_4195->getOutput(0));
  Permutation permute_4196;
  permute_4196.order[0]=1;
  permute_4196.order[1]=0;
  permute_4196.order[2]=2;
  res_4196->setFirstTranspose(permute_4196);
  assert(res_4196 && "failed to build Node_7894 (type:transpose)");
  res_4196->getOutput(0)->setName("Node_7894:0");
  auto res_4197=network->addMatrixMultiply(*res_4192->getOutput(0),MatrixOperation::kNONE,*res_898->getOutput(0),MatrixOperation::kNONE);
  assert(res_4197 && "failed to build Node_7878 (type:matmul)");
  res_4197->getOutput(0)->setName("Node_7878:0");
  auto res_4198=network->addElementWise(*res_4197->getOutput(0),*res_899->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4198 && "failed to build Node_7878_add (type:add)");
  res_4198->getOutput(0)->setName("Node_7878_add:0");
  auto res_4199=network->addShuffle(*res_4198->getOutput(0));
  res_4199->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4199 && "failed to build Node_7902 (type:reshape)");
  res_4199->getOutput(0)->setName("Node_7902:0");
  auto res_4200=network->addShuffle(*res_4199->getOutput(0));
  Permutation permute_4200;
  permute_4200.order[0]=1;
  permute_4200.order[1]=2;
  permute_4200.order[2]=0;
  res_4200->setFirstTranspose(permute_4200);
  assert(res_4200 && "failed to build Node_7915 (type:transpose)");
  res_4200->getOutput(0)->setName("Node_7915:0");
  auto res_4201=network->addMatrixMultiply(*res_4196->getOutput(0),MatrixOperation::kNONE,*res_4200->getOutput(0),MatrixOperation::kNONE);
  assert(res_4201 && "failed to build Node_7916 (type:matmul)");
  res_4201->getOutput(0)->setName("Node_7916:0");
  auto res_4202=network->addElementWise(*res_4201->getOutput(0),*res_1002->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4202 && "failed to build Node_7917 (type:divide)");
  res_4202->getOutput(0)->setName("Node_7917:0");
  auto res_4203=network->addElementWise(*res_4202->getOutput(0),*res_3993->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4203 && "failed to build Node_7918 (type:add)");
  res_4203->getOutput(0)->setName("Node_7918:0");
  auto res_4204=network->addSoftMax(*res_4203->getOutput(0));
  res_4204->setAxes(4);
  assert(res_4204 && "failed to build Node_7919 (type:softmax)");
  res_4204->getOutput(0)->setName("Node_7919:0");
  auto res_4205=network->addMatrixMultiply(*res_4192->getOutput(0),MatrixOperation::kNONE,*res_900->getOutput(0),MatrixOperation::kNONE);
  assert(res_4205 && "failed to build Node_7884 (type:matmul)");
  res_4205->getOutput(0)->setName("Node_7884:0");
  auto res_4206=network->addElementWise(*res_4205->getOutput(0),*res_901->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4206 && "failed to build Node_7884_add (type:add)");
  res_4206->getOutput(0)->setName("Node_7884_add:0");
  auto res_4207=network->addShuffle(*res_4206->getOutput(0));
  res_4207->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4207 && "failed to build Node_7912 (type:reshape)");
  res_4207->getOutput(0)->setName("Node_7912:0");
  auto res_4208=network->addShuffle(*res_4207->getOutput(0));
  Permutation permute_4208;
  permute_4208.order[0]=1;
  permute_4208.order[1]=0;
  permute_4208.order[2]=2;
  res_4208->setFirstTranspose(permute_4208);
  assert(res_4208 && "failed to build Node_7914 (type:transpose)");
  res_4208->getOutput(0)->setName("Node_7914:0");
  auto res_4209=network->addMatrixMultiply(*res_4204->getOutput(0),MatrixOperation::kNONE,*res_4208->getOutput(0),MatrixOperation::kNONE);
  assert(res_4209 && "failed to build Node_7923 (type:matmul)");
  res_4209->getOutput(0)->setName("Node_7923:0");
  auto res_4210=network->addShuffle(*res_4209->getOutput(0));
  Permutation permute_4210;
  permute_4210.order[0]=1;
  permute_4210.order[1]=0;
  permute_4210.order[2]=2;
  res_4210->setFirstTranspose(permute_4210);
  assert(res_4210 && "failed to build Node_7925 (type:transpose)");
  res_4210->getOutput(0)->setName("Node_7925:0");
  auto res_4211=network->addIdentity(*res_4210->getOutput(0));
  assert(res_4211 && "failed to build Node_7926 (type:contiguous)");
  res_4211->getOutput(0)->setName("Node_7926:0");
  auto res_4212=network->addShuffle(*res_4211->getOutput(0));
  res_4212->setReshapeDimensions(Dims{2,{10,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_4212 && "failed to build Node_7934 (type:reshape)");
  res_4212->getOutput(0)->setName("Node_7934:0");
  auto res_4213=network->addMatrixMultiply(*res_4212->getOutput(0),MatrixOperation::kNONE,*res_902->getOutput(0),MatrixOperation::kNONE);
  assert(res_4213 && "failed to build Node_7941 (type:matmul)");
  res_4213->getOutput(0)->setName("Node_7941:0");
  auto res_4214=network->addElementWise(*res_4213->getOutput(0),*res_903->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4214 && "failed to build Node_7941_add (type:add)");
  res_4214->getOutput(0)->setName("Node_7941_add:0");
  auto res_4215=network->addElementWise(*res_4214->getOutput(0),*res_4192->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4215 && "failed to build Node_7945 (type:add)");
  res_4215->getOutput(0)->setName("Node_7945:0");
  auto res_4216=network->addReduce(*res_4215->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4216 && "failed to build Node_7952_mean (type:mean)");
  res_4216->getOutput(0)->setName("Node_7952_mean:0");
  auto res_4217=network->addElementWise(*res_4215->getOutput(0),*res_4216->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4217 && "failed to build Node_7952_diff (type:sub)");
  res_4217->getOutput(0)->setName("Node_7952_diff:0");
  auto res_4218=network->addElementWise(*res_4217->getOutput(0),*res_1252->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4218 && "failed to build Node_7952_power (type:power)");
  res_4218->getOutput(0)->setName("Node_7952_power:0");
  auto res_4219=network->addReduce(*res_4218->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4219 && "failed to build Node_7952_var (type:mean)");
  res_4219->getOutput(0)->setName("Node_7952_var:0");
  auto res_4220=network->addElementWise(*res_4219->getOutput(0),*res_1126->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4220 && "failed to build Node_7952_modify (type:add)");
  res_4220->getOutput(0)->setName("Node_7952_modify:0");
  auto res_4221=network->addUnary(*res_4220->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4221 && "failed to build Node_7952_sqrt (type:power)");
  res_4221->getOutput(0)->setName("Node_7952_sqrt:0");
  auto res_4222=network->addElementWise(*res_4217->getOutput(0),*res_4221->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4222 && "failed to build Node_7952_rsqrt (type:divide)");
  res_4222->getOutput(0)->setName("Node_7952_rsqrt:0");
  auto res_4223=network->addElementWise(*res_4222->getOutput(0),*res_288->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4223 && "failed to build Node_7952_mul (type:multiply)");
  res_4223->getOutput(0)->setName("Node_7952_mul:0");
  auto res_4224=network->addElementWise(*res_4223->getOutput(0),*res_289->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4224 && "failed to build Node_7952 (type:add)");
  res_4224->getOutput(0)->setName("Node_7952:0");
  auto res_4225=network->addMatrixMultiply(*res_4224->getOutput(0),MatrixOperation::kNONE,*res_904->getOutput(0),MatrixOperation::kNONE);
  assert(res_4225 && "failed to build Node_7958 (type:matmul)");
  res_4225->getOutput(0)->setName("Node_7958:0");
  auto res_4226=network->addElementWise(*res_4225->getOutput(0),*res_905->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4226 && "failed to build Node_7958_add (type:add)");
  res_4226->getOutput(0)->setName("Node_7958_add:0");
  ITensor* inputTensors_4227[1] = {res_4226->getOutput(0)};
  auto plugin_4227=GELU_Plugin("gelu");
  auto res_4227=network->addPluginV2(inputTensors_4227,1,plugin_4227);
  assert(res_4227 && "failed to build Node_7959 (type:gelu)");
  res_4227->getOutput(0)->setName("Node_7959:0");
  auto res_4228=network->addMatrixMultiply(*res_4227->getOutput(0),MatrixOperation::kNONE,*res_906->getOutput(0),MatrixOperation::kNONE);
  assert(res_4228 && "failed to build Node_7966 (type:matmul)");
  res_4228->getOutput(0)->setName("Node_7966:0");
  auto res_4229=network->addElementWise(*res_4228->getOutput(0),*res_907->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4229 && "failed to build Node_7966_add (type:add)");
  res_4229->getOutput(0)->setName("Node_7966_add:0");
  auto res_4230=network->addElementWise(*res_4229->getOutput(0),*res_4224->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4230 && "failed to build Node_7970 (type:add)");
  res_4230->getOutput(0)->setName("Node_7970:0");
  auto res_4231=network->addReduce(*res_4230->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4231 && "failed to build Node_7977_mean (type:mean)");
  res_4231->getOutput(0)->setName("Node_7977_mean:0");
  auto res_4232=network->addElementWise(*res_4230->getOutput(0),*res_4231->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4232 && "failed to build Node_7977_diff (type:sub)");
  res_4232->getOutput(0)->setName("Node_7977_diff:0");
  auto res_4233=network->addElementWise(*res_4232->getOutput(0),*res_1253->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4233 && "failed to build Node_7977_power (type:power)");
  res_4233->getOutput(0)->setName("Node_7977_power:0");
  auto res_4234=network->addReduce(*res_4233->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4234 && "failed to build Node_7977_var (type:mean)");
  res_4234->getOutput(0)->setName("Node_7977_var:0");
  auto res_4235=network->addElementWise(*res_4234->getOutput(0),*res_1127->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4235 && "failed to build Node_7977_modify (type:add)");
  res_4235->getOutput(0)->setName("Node_7977_modify:0");
  auto res_4236=network->addUnary(*res_4235->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4236 && "failed to build Node_7977_sqrt (type:power)");
  res_4236->getOutput(0)->setName("Node_7977_sqrt:0");
  auto res_4237=network->addElementWise(*res_4232->getOutput(0),*res_4236->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4237 && "failed to build Node_7977_rsqrt (type:divide)");
  res_4237->getOutput(0)->setName("Node_7977_rsqrt:0");
  auto res_4238=network->addElementWise(*res_4237->getOutput(0),*res_290->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4238 && "failed to build Node_7977_mul (type:multiply)");
  res_4238->getOutput(0)->setName("Node_7977_mul:0");
  auto res_4239=network->addElementWise(*res_4238->getOutput(0),*res_291->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4239 && "failed to build Node_7977 (type:add)");
  res_4239->getOutput(0)->setName("Node_7977:0");
  auto res_4240=network->addMatrixMultiply(*res_4239->getOutput(0),MatrixOperation::kNONE,*res_908->getOutput(0),MatrixOperation::kNONE);
  assert(res_4240 && "failed to build Node_7994 (type:matmul)");
  res_4240->getOutput(0)->setName("Node_7994:0");
  auto res_4241=network->addElementWise(*res_4240->getOutput(0),*res_909->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4241 && "failed to build Node_7994_add (type:add)");
  res_4241->getOutput(0)->setName("Node_7994_add:0");
  auto res_4242=network->addShuffle(*res_4241->getOutput(0));
  res_4242->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4242 && "failed to build Node_8014 (type:reshape)");
  res_4242->getOutput(0)->setName("Node_8014:0");
  auto res_4243=network->addShuffle(*res_4242->getOutput(0));
  Permutation permute_4243;
  permute_4243.order[0]=1;
  permute_4243.order[1]=0;
  permute_4243.order[2]=2;
  res_4243->setFirstTranspose(permute_4243);
  assert(res_4243 && "failed to build Node_8016 (type:transpose)");
  res_4243->getOutput(0)->setName("Node_8016:0");
  auto res_4244=network->addMatrixMultiply(*res_4239->getOutput(0),MatrixOperation::kNONE,*res_910->getOutput(0),MatrixOperation::kNONE);
  assert(res_4244 && "failed to build Node_8000 (type:matmul)");
  res_4244->getOutput(0)->setName("Node_8000:0");
  auto res_4245=network->addElementWise(*res_4244->getOutput(0),*res_911->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4245 && "failed to build Node_8000_add (type:add)");
  res_4245->getOutput(0)->setName("Node_8000_add:0");
  auto res_4246=network->addShuffle(*res_4245->getOutput(0));
  res_4246->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4246 && "failed to build Node_8024 (type:reshape)");
  res_4246->getOutput(0)->setName("Node_8024:0");
  auto res_4247=network->addShuffle(*res_4246->getOutput(0));
  Permutation permute_4247;
  permute_4247.order[0]=1;
  permute_4247.order[1]=2;
  permute_4247.order[2]=0;
  res_4247->setFirstTranspose(permute_4247);
  assert(res_4247 && "failed to build Node_8037 (type:transpose)");
  res_4247->getOutput(0)->setName("Node_8037:0");
  auto res_4248=network->addMatrixMultiply(*res_4243->getOutput(0),MatrixOperation::kNONE,*res_4247->getOutput(0),MatrixOperation::kNONE);
  assert(res_4248 && "failed to build Node_8038 (type:matmul)");
  res_4248->getOutput(0)->setName("Node_8038:0");
  auto res_4249=network->addElementWise(*res_4248->getOutput(0),*res_1003->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4249 && "failed to build Node_8039 (type:divide)");
  res_4249->getOutput(0)->setName("Node_8039:0");
  auto res_4250=network->addElementWise(*res_4249->getOutput(0),*res_3993->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4250 && "failed to build Node_8040 (type:add)");
  res_4250->getOutput(0)->setName("Node_8040:0");
  auto res_4251=network->addSoftMax(*res_4250->getOutput(0));
  res_4251->setAxes(4);
  assert(res_4251 && "failed to build Node_8041 (type:softmax)");
  res_4251->getOutput(0)->setName("Node_8041:0");
  auto res_4252=network->addMatrixMultiply(*res_4239->getOutput(0),MatrixOperation::kNONE,*res_912->getOutput(0),MatrixOperation::kNONE);
  assert(res_4252 && "failed to build Node_8006 (type:matmul)");
  res_4252->getOutput(0)->setName("Node_8006:0");
  auto res_4253=network->addElementWise(*res_4252->getOutput(0),*res_913->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4253 && "failed to build Node_8006_add (type:add)");
  res_4253->getOutput(0)->setName("Node_8006_add:0");
  auto res_4254=network->addShuffle(*res_4253->getOutput(0));
  res_4254->setReshapeDimensions(Dims3{10,6,32});
  assert(res_4254 && "failed to build Node_8034 (type:reshape)");
  res_4254->getOutput(0)->setName("Node_8034:0");
  auto res_4255=network->addShuffle(*res_4254->getOutput(0));
  Permutation permute_4255;
  permute_4255.order[0]=1;
  permute_4255.order[1]=0;
  permute_4255.order[2]=2;
  res_4255->setFirstTranspose(permute_4255);
  assert(res_4255 && "failed to build Node_8036 (type:transpose)");
  res_4255->getOutput(0)->setName("Node_8036:0");
  auto res_4256=network->addMatrixMultiply(*res_4251->getOutput(0),MatrixOperation::kNONE,*res_4255->getOutput(0),MatrixOperation::kNONE);
  assert(res_4256 && "failed to build Node_8045 (type:matmul)");
  res_4256->getOutput(0)->setName("Node_8045:0");
  auto res_4257=network->addShuffle(*res_4256->getOutput(0));
  Permutation permute_4257;
  permute_4257.order[0]=1;
  permute_4257.order[1]=0;
  permute_4257.order[2]=2;
  res_4257->setFirstTranspose(permute_4257);
  assert(res_4257 && "failed to build Node_8047 (type:transpose)");
  res_4257->getOutput(0)->setName("Node_8047:0");
  auto res_4258=network->addIdentity(*res_4257->getOutput(0));
  assert(res_4258 && "failed to build Node_8048 (type:contiguous)");
  res_4258->getOutput(0)->setName("Node_8048:0");
  auto res_4259=network->addShuffle(*res_4258->getOutput(0));
  res_4259->setReshapeDimensions(Dims{2,{10,192},{DimensionType::kCHANNEL,DimensionType::kSPATIAL}});
  assert(res_4259 && "failed to build Node_8056 (type:reshape)");
  res_4259->getOutput(0)->setName("Node_8056:0");
  auto res_4260=network->addMatrixMultiply(*res_4259->getOutput(0),MatrixOperation::kNONE,*res_914->getOutput(0),MatrixOperation::kNONE);
  assert(res_4260 && "failed to build Node_8063 (type:matmul)");
  res_4260->getOutput(0)->setName("Node_8063:0");
  auto res_4261=network->addElementWise(*res_4260->getOutput(0),*res_915->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4261 && "failed to build Node_8063_add (type:add)");
  res_4261->getOutput(0)->setName("Node_8063_add:0");
  auto res_4262=network->addElementWise(*res_4261->getOutput(0),*res_4239->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4262 && "failed to build Node_8067 (type:add)");
  res_4262->getOutput(0)->setName("Node_8067:0");
  auto res_4263=network->addReduce(*res_4262->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4263 && "failed to build Node_8074_mean (type:mean)");
  res_4263->getOutput(0)->setName("Node_8074_mean:0");
  auto res_4264=network->addElementWise(*res_4262->getOutput(0),*res_4263->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4264 && "failed to build Node_8074_diff (type:sub)");
  res_4264->getOutput(0)->setName("Node_8074_diff:0");
  auto res_4265=network->addElementWise(*res_4264->getOutput(0),*res_1254->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4265 && "failed to build Node_8074_power (type:power)");
  res_4265->getOutput(0)->setName("Node_8074_power:0");
  auto res_4266=network->addReduce(*res_4265->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4266 && "failed to build Node_8074_var (type:mean)");
  res_4266->getOutput(0)->setName("Node_8074_var:0");
  auto res_4267=network->addElementWise(*res_4266->getOutput(0),*res_1128->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4267 && "failed to build Node_8074_modify (type:add)");
  res_4267->getOutput(0)->setName("Node_8074_modify:0");
  auto res_4268=network->addUnary(*res_4267->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4268 && "failed to build Node_8074_sqrt (type:power)");
  res_4268->getOutput(0)->setName("Node_8074_sqrt:0");
  auto res_4269=network->addElementWise(*res_4264->getOutput(0),*res_4268->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4269 && "failed to build Node_8074_rsqrt (type:divide)");
  res_4269->getOutput(0)->setName("Node_8074_rsqrt:0");
  auto res_4270=network->addElementWise(*res_4269->getOutput(0),*res_292->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4270 && "failed to build Node_8074_mul (type:multiply)");
  res_4270->getOutput(0)->setName("Node_8074_mul:0");
  auto res_4271=network->addElementWise(*res_4270->getOutput(0),*res_293->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4271 && "failed to build Node_8074 (type:add)");
  res_4271->getOutput(0)->setName("Node_8074:0");
  auto res_4272=network->addMatrixMultiply(*res_4271->getOutput(0),MatrixOperation::kNONE,*res_916->getOutput(0),MatrixOperation::kNONE);
  assert(res_4272 && "failed to build Node_8080 (type:matmul)");
  res_4272->getOutput(0)->setName("Node_8080:0");
  auto res_4273=network->addElementWise(*res_4272->getOutput(0),*res_917->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4273 && "failed to build Node_8080_add (type:add)");
  res_4273->getOutput(0)->setName("Node_8080_add:0");
  ITensor* inputTensors_4274[1] = {res_4273->getOutput(0)};
  auto plugin_4274=GELU_Plugin("gelu");
  auto res_4274=network->addPluginV2(inputTensors_4274,1,plugin_4274);
  assert(res_4274 && "failed to build Node_8081 (type:gelu)");
  res_4274->getOutput(0)->setName("Node_8081:0");
  auto res_4275=network->addMatrixMultiply(*res_4274->getOutput(0),MatrixOperation::kNONE,*res_918->getOutput(0),MatrixOperation::kNONE);
  assert(res_4275 && "failed to build Node_8088 (type:matmul)");
  res_4275->getOutput(0)->setName("Node_8088:0");
  auto res_4276=network->addElementWise(*res_4275->getOutput(0),*res_919->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4276 && "failed to build Node_8088_add (type:add)");
  res_4276->getOutput(0)->setName("Node_8088_add:0");
  auto res_4277=network->addElementWise(*res_4276->getOutput(0),*res_4271->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4277 && "failed to build Node_8092 (type:add)");
  res_4277->getOutput(0)->setName("Node_8092:0");
  auto res_4278=network->addReduce(*res_4277->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4278 && "failed to build Node_8099_mean (type:mean)");
  res_4278->getOutput(0)->setName("Node_8099_mean:0");
  auto res_4279=network->addElementWise(*res_4277->getOutput(0),*res_4278->getOutput(0),ElementWiseOperation::kSUB);
  assert(res_4279 && "failed to build Node_8099_diff (type:sub)");
  res_4279->getOutput(0)->setName("Node_8099_diff:0");
  auto res_4280=network->addElementWise(*res_4279->getOutput(0),*res_1255->getOutput(0),ElementWiseOperation::kPOW);
  assert(res_4280 && "failed to build Node_8099_power (type:power)");
  res_4280->getOutput(0)->setName("Node_8099_power:0");
  auto res_4281=network->addReduce(*res_4280->getOutput(0),ReduceOperation::kAVG,2,true);
  assert(res_4281 && "failed to build Node_8099_var (type:mean)");
  res_4281->getOutput(0)->setName("Node_8099_var:0");
  auto res_4282=network->addElementWise(*res_4281->getOutput(0),*res_1129->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4282 && "failed to build Node_8099_modify (type:add)");
  res_4282->getOutput(0)->setName("Node_8099_modify:0");
  auto res_4283=network->addUnary(*res_4282->getOutput(0),UnaryOperation::kSQRT);
  assert(res_4283 && "failed to build Node_8099_sqrt (type:power)");
  res_4283->getOutput(0)->setName("Node_8099_sqrt:0");
  auto res_4284=network->addElementWise(*res_4279->getOutput(0),*res_4283->getOutput(0),ElementWiseOperation::kDIV);
  assert(res_4284 && "failed to build Node_8099_rsqrt (type:divide)");
  res_4284->getOutput(0)->setName("Node_8099_rsqrt:0");
  auto res_4285=network->addElementWise(*res_4284->getOutput(0),*res_294->getOutput(0),ElementWiseOperation::kPROD);
  assert(res_4285 && "failed to build Node_8099_mul (type:multiply)");
  res_4285->getOutput(0)->setName("Node_8099_mul:0");
  auto res_4286=network->addElementWise(*res_4285->getOutput(0),*res_295->getOutput(0),ElementWiseOperation::kSUM);
  assert(res_4286 && "failed to build Node_8099 (type:add)");
  res_4286->getOutput(0)->setName("Node_8099:0");
  auto res_4287=network->addSlice(*res_4286->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_4287 && "failed to build Node_8105 (type:dlr_slice)");
  res_4287->getOutput(0)->setName("Node_8105:0");
  auto res_4288=network->addShuffle(*res_4287->getOutput(0));
  res_4288->setReshapeDimensions(Dims3{192,1,1});
  assert(res_4288 && "failed to build Node_8107_reshape (type:reshape)");
  res_4288->getOutput(0)->setName("Node_8107_reshape:0");
  auto res_4289=network->addFullyConnected(*res_4288->getOutput(0),192,mWeightsMap["weight_4289"],mWeightsMap["bias_4289"]);
  assert(res_4289 && "failed to build Node_8112 (type:dense)");
  res_4289->getOutput(0)->setName("Node_8112:0");
  auto res_4290=network->addActivation(*res_4289->getOutput(0),ActivationType::kTANH);
  assert(res_4290 && "failed to build Node_8113 (type:tanh)");
  res_4290->getOutput(0)->setName("Node_8113:0");
  auto res_4291=network->addShuffle(*res_4290->getOutput(0));
  res_4291->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_4291 && "failed to build embedding_reshape (type:reshape)");
  res_4291->getOutput(0)->setName("embedding");
  outputs[0]=res_4291->getOutput(0);
  auto res_4292=network->addSlice(*res_4286->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_4292 && "failed to build Node_8141 (type:dlr_slice)");
  res_4292->getOutput(0)->setName("Node_8141:0");
  auto res_4293=network->addShuffle(*res_4292->getOutput(0));
  res_4293->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_4293 && "failed to build Node_8141_reshape (type:reshape)");
  res_4293->getOutput(0)->setName("Node_8141_reshape:0");
  auto res_4294=network->addSlice(*res_4239->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_4294 && "failed to build Node_8143 (type:dlr_slice)");
  res_4294->getOutput(0)->setName("Node_8143:0");
  auto res_4295=network->addShuffle(*res_4294->getOutput(0));
  res_4295->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_4295 && "failed to build Node_8143_reshape (type:reshape)");
  res_4295->getOutput(0)->setName("Node_8143_reshape:0");
  auto res_4296=network->addSlice(*res_4192->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_4296 && "failed to build Node_8145 (type:dlr_slice)");
  res_4296->getOutput(0)->setName("Node_8145:0");
  auto res_4297=network->addShuffle(*res_4296->getOutput(0));
  res_4297->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_4297 && "failed to build Node_8145_reshape (type:reshape)");
  res_4297->getOutput(0)->setName("Node_8145_reshape:0");
  auto res_4298=network->addSlice(*res_4145->getOutput(0),Dims2{0,0},Dims2{1,192},Dims2{1,1});
  assert(res_4298 && "failed to build Node_8147 (type:dlr_slice)");
  res_4298->getOutput(0)->setName("Node_8147:0");
  auto res_4299=network->addShuffle(*res_4298->getOutput(0));
  res_4299->setReshapeDimensions(Dims{1,{192},{DimensionType::kCHANNEL}});
  assert(res_4299 && "failed to build Node_8147_reshape (type:reshape)");
  res_4299->getOutput(0)->setName("Node_8147_reshape:0");
  ITensor* inputTensors_4300[4] = {res_4293->getOutput(0),res_4295->getOutput(0),res_4297->getOutput(0),res_4299->getOutput(0)};
  auto res_4300=network->addConcatenation(inputTensors_4300,4);
  res_4300->setAxis(0);
  assert(res_4300 && "failed to build Node_8150 (type:concat)");
  res_4300->getOutput(0)->setName("cls_layer");
  outputs[1]=res_4300->getOutput(0);
  // Set configs
  builder->setMaxBatchSize(batch_size);
  config->setMaxWorkspaceSize(53 << 20);
  return true;
}

bool ssl_login_get_emb_1::clean_up(){
  return clean_weights(mWeightsMap);
}

